DecodePNG := !(File^ f) -> Image^
{
	result = new Image

	w := 0
	h := 0
	bpp := 0
	isIndexed := false

	blb := f.GetBlob()

	fileEnd := blb.GetPointer()->{u8^}[blb.Size()]&

	iter := blb.GetPointer()->{u8^}[8]&

	dataChunks := List.{u8^}
	dataChunkTotalSize := 0

	palleteData := Blob^

	while iter < fileEnd
	{
		len := FromBigEndian(iter->{u32^}^)
		iter = iter[4]&
		typ := StringSpan(iter->{char^},4)

		printf("chunk %s %i\n",typ,len)

		switch typ
		{
		case "PLTE"
			palleteData = MakeBlob(len)
			memcpy(palleteData.GetPointer(),iter[4]&,len)
		case "IHDR"
			hdr := iter[4]&->{PNG_IHDR^}
			w = FromBigEndian(hdr.Width)
			h = FromBigEndian(hdr.Height)

			for it, name : hdr^->#AllFields
			{
				printf("field %i %i %s\n",it,FromBigEndian(it),name)
			}
			assert(hdr.BitDepth == 8) //TODO other depths
			//assert(hdr.InterlaceMethod == 0)
			if hdr.InterlaceMethod != 0
				return void

			cType := hdr.ColorType

			if (cType and_b 1) != 0
			{
				isIndexed = true
				cType = cType xor_b 1
			}
			
			if cType == 6
			{
				bpp = 4
				result.ColorType = "RGBA"
			}else if cType == 2
			{
				bpp = 3 //TODO Image supports types
				result.ColorType = "RGB"
			}else if cType == 0 {
				bpp = 1 //TODO
			}else {
				assert(false) //TODO other color types
			}
			if isIndexed
			{
				bpp = 1
				result.ColorType = "RGB"
			}

		case "IDAT"
			dataChunks.Push(iter[-4]&)
			dataChunkTotalSize += len
		}

		iter = iter[len + 8]&
	}
	
	result.Width = w
	result.Height = h

	cmpBlob := MakeBlob(dataChunkTotalSize)

	outPtr := cmpBlob.GetPointer()->{u8^}

	for idat : dataChunks
	{
		len := FromBigEndian(idat->{u32^}^)
		memcpy(outPtr,idat[8]&,len)
		outPtr = outPtr[len]&
	}

	deflData := malloc(w*h*bpp + h)->{u8^}
	defer free(deflData)

	deflStrip := w*bpp + 1

	CrappyDeflateInflate(cmpBlob.GetPointer()->{u8^}[2]&,cmpBlob.Size() - 2,deflData,w*h*bpp + h)

	readyData := calloc((w + 16)*(h + 16),bpp)->{u8^}
	defer free(readyData)

	readyStrip := (w + 16)*bpp

	for i : h
	{
		memcpy(readyData[readyStrip*i + 16*bpp]&,deflData[deflStrip*i + 1]&,w*bpp)
	}

	newText := malloc((w + 32)*(h + 32)*bpp)->{u8^}
	defer free(newText)

	newTextStrip := readyStrip

	getPtr := readyData[16*bpp]&
	setPtr := newText[16*bpp]&

	for i : h
	{
		filtType := deflData[i*deflStrip]
		for j : w
		{
			for k : bpp
			{
				sIndx := newTextStrip*i + j*bpp + k
				gIndx := readyStrip*i + bpp*j + k
				switch filtType
				{
					case 0
						setPtr[sIndx] = getPtr[gIndx]
					case 1
						setPtr[sIndx] = getPtr[gIndx] + setPtr[sIndx - bpp]
					case 2
						setPtr[sIndx] = getPtr[sIndx] + setPtr[sIndx - newTextStrip]
					case 3
						//TODO
						avrg := (setPtr[sIndx - bpp]->{u32} + setPtr[sIndx -  newTextStrip]->{u32}) div 2
						setPtr[sIndx] = getPtr[sIndx] + avrg
					case 4
						setPtr[sIndx] = getPtr[gIndx]

						left := setPtr[sIndx - bpp]->{u32}->{int}
						up := setPtr[sIndx - newTextStrip]->{u32}->{int}
						upLeft := setPtr[sIndx - newTextStrip - bpp]->{u32}->{int}

						p := left + up - upLeft
						pa := Abs(p - left)
						pb := Abs(p - up)
						pc := Abs(p - upLeft)
						r := 0
						if pa <= pb and pa <= pc
						{
							r = left
						}else if pb <= pc
						{
							r += up
						}else{
							r += upLeft
						}
						setPtr[sIndx] += r
					
					case void
						assert(false)
						setPtr[newTextStrip*i + j*bpp + k] = getPtr[readyStrip*i + bpp*j + k]
				}
			}
			
		}
	}

	if palleteData != null
	{
		plt := palleteData.GetPointer()->{u8^}

		res := malloc(w*h*4)->{u8^}
		memset(res,255,w*h*4) //TODO , skip alpha
		for i : h
		{
			for j : w
			{
				indx := newText[newTextStrip*i +j*bpp + 16*bpp]
				memcpy(res[(i*w + j)*4]&,plt[indx*3]&,3)
			}
		}
		result.Data = res
		result.ColorType = "RGBA"
	}else{
		res := malloc(w*h*bpp)->{u8^}
		
		for i : h
		{
			memcpy(res[w*bpp*i]&,setPtr[newTextStrip*i]&,w*bpp)
		}

		result.Data = res
	}
}

PNG_IHDR := class
{
	Width := u32
	Height := u32
	BitDepth := u8
	ColorType := u8
	CompressionMethod := u8
	FilterMethod := u8
	InterlaceMethod := u8
}
