
PassSpirvPrettify := !(HVB_Function^ fnc) -> HVB_Function^
{
	ctx := MakeGreedyPass(fnc,1,2,true)

	oPtr := ctx.oPtr
	cPtr := ctx.cPtr

	o := ref ctx.objsSize
	c := ref ctx.cmdsSize

	iPtr := fnc.Lines.GetPointer()

	usage := Vector.{int}
	usage.Resize(fnc.Objects.Size())

	defer usage.Destroy()

	for i : fnc.Lines.Size()
	{
		line := iPtr[i]
		for k : 5
		{
			usage[line.var1&[k]] += 1
		}
	}

	repl := Vector.{int}
	repl.Resize(fnc.Objects.Size())

	lnCount := fnc.Lines.Size()

	i := 0
	while i < lnCount
	{
		line := iPtr[i]
		for k : 5
		{
			c := repl[line.var1&[k]]
			if c != 0
				line.var1&[k] = c
		}

		if i < lnCount - 1
			and oPtr[line.var2] is MCGlobalVariable
			and oPtr[line.var1] is MCConstValue
			and usage[line.var1] == 2
			and iPtr[i + 1].opcode == "get_array_elem_ptr"
			and iPtr[i + 1].var2 == line.var1
		{
			repl[line.var1] = line.var2
			i += 1

			continue
		}

		{
			cPtr[c++] = line
			i += 1
		}

	}

	return ctx.GenerateFunc()
}
