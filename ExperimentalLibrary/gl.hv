
#Module(

	xmlBlob := Blob^
	glXML := XML^

	glCommands := AVLMap.{Str,XMLNode^}
	glValues := AVLMap.{Str,int}

	parsedXml := bool
	ParseXml := !() -> void
	{
		if parsedXml
			return void
		parsedXml = true

		glFile := FSGetFile("./gl.xml")
		xmlBlob := glFile.GetBlob()

		glXML = ParseXML2(xmlBlob.AsStringSpan())

		for baseNode : glXML.RootNode.Values[0].ValueNode.Values
		{
			if baseNode.IsString
			{
				continue
			}

			switch baseNode.ValueNode.NodeName
			{
			case "commands"
				for command : baseNode.ValueNode.Values
				{
					if command.IsString
						continue

					commandName := command.ValueNode.GetNode("proto/name")

					if commandName != null
					{
						glCommands[commandName.Values[0].ValueSpan[2..0]] = command.ValueNode
					}
					
				}
			case "enums"
				for it : baseNode.ValueNode.Values
				{
					if it.IsString
						continue
					val := it.ValueNode

					if val.Attrs.Contain(StringSpan("value")) and val.Attrs.Contain(StringSpan("name"))
					{
						glValues[val.Attrs[StringSpan("name")]] = val.Attrs[StringSpan("value")].ToInt()
					}

				}
			}
		}

	}
	GetCommandType := !(Str str) -> HV_Object^
	{
		if not glCommands.Contain(str)
			return null

		cmd := glCommands[str]
		types := HybridQueue.{HV_Object^,16}

		for pars : cmd.Values 
		{
			if pars.IsString or pars.ValueNode.NodeName != "param"
				continue

			parType := GetParamType(pars.ValueNode)
			if parType == null
				return null
			types.Push(parType)
		}
		fType := HV.GetFuncType(types,null,HV.GetType("void"),false,false)
		return HV.GetTypePointer(fType)
	}
	GetParamType := !(XMLNode^ node) -> HV_Object^
	{
		nodeOpts := char[256]
		sSize := 0

		for it : node.Values
		{
			nodeOpts[sSize] = it.IsString ?: '0' : '1'
			sSize += 1
		}

		nodeType := StringSpan(nodeOpts,sSize)

		switch nodeType
		{
		case "11"
		 	pType := node.GetNode("ptype")
		 	if pType != null
		 	{
		 		return GetStringType(pType.Values[0].ValueSpan)
		 	}
		case void
			printf("opengl cant get param %s\n",nodeType)
		}
		
	}
	GetStringType := !(StringSpan typeName) -> HV_Object^
	{
		switch typeName
		{
			case "GLenum"
				return HV.GetType("u32")
			case "GLbitfield"
				return HV.GetType("s32")
			case "GLuint"
				return HV.GetType("s32")
			case "GLfloat"
				return HV.GetType("float")
			case void
				printf("opengl unknown type %s\n",typeName)
				return null
		}
	}

	funcClass := HV_Class^
	funcClassType := HV_Object^
	FuncClass := !() -> HV_Object^
	{
		return funcClassType?

		funcClass = HV.CreateClass()

		ParseXml()

		funcClassType = funcClass.GetType()
		funcClass.AddCallback_GetFieldFailed(x ==> void^ {
			if glCommands.Contain(x.AsStringSpan())
			{
				return GetCommandType(x)
			}
			return null
		})
		return funcClassType
	}

	GetItem := virtual !(Str name) -> HV_Object^
	{
		if name.Start == "GL_"
		{
			ParseXml()
			if glValues.Contain(name)
				return HV.Create_int32(glValues[name])
		}
		if name == "glFuncsClass"
		{
			return FuncClass()
		}
	}
)
