jsonTypeField := 0
jsonTypeRecord := 1
jsonTypeArray := 2

JsonNode := class
{
	this := !(int setType) -> void {itType = setType}

	haveName := bool
	itType := u8
	itKey := StringSpan
	itValue := StringSpan
	itSub := List.{JsonNode^}
	
	Key := !() -> ref StringSpan { return itKey }
	Value := !() -> ref StringSpan { return itValue }
	Print := !(int x) -> void
	{
		switch itType
		{	
			case jsonTypeField
				for x printf(" ")
				if haveName
				{
					printf("%s : %s\n",itKey,itValue)
				}else{
					printf("%s\n",itValue)
				}
			case jsonTypeRecord
				for x printf(" ")
				if haveName
				{
					printf("%s : {\n",itKey)
				}else{
					printf("{\n")
				}
				itSub[^].Print(x+1)
				for x printf(" ")
				printf("}\n")
			case jsonTypeArray
				for x printf(" ")
				if haveName
				{
					printf("%s : [\n",itKey)
				}else{
					printf("[\n")
				}
				itSub[^].Print(x+1)
				for x printf(" ")
				printf("]\n")
		}
	}
	IsField := !() -> bool { return itType == jsonTypeField}
	IsRecord := !() -> bool { return itType == jsonTypeRecord}
	IsArray := !() -> bool { return itType == jsonTypeArray}

	GetStr := !() -> StringSpan { result = itValue }

	"[]" := !(StringView^ walkPath) -> JsonNode^
	{
		itms := HybridQueue.{StringSpan,20}
		walkPath.DivideStr(" ",x ==> { itms.Push(x)}) 
		iter  := this&
		for it : itms
		{
			found := false
			for subs : iter.itSub
			{
				if subs.haveName and subs.itKey == it 
				{
					iter = subs
					found = true
					break
				}
			}
			if not found 
				return null
		}
		return iter
	}
	"for" := !() -> jsonNodeIterator
	{
		result.itNode = this&
	}
}

jsonNodeIterator := class
{
	itNode := JsonNode^
	index := int
	HaveValue := !() -> bool
	{
		return index < itNode.itSub.Size()
	}
	"()" := !(StringSpan^& indx) -> JsonNode^
	{
		result = itNode.itSub[index]
		indx = result.itKey&
		index += 1
	}
}


Json := class extend JsonNode
{
	tokens := List.{Tuple.{int,StringSpan}}

	ParseString := !(char^ fileData,int size) -> bool
	{
		jMachine := #Regexp(
			"\"((\\\\ [^]) | [^\"\\\\])*\"",1,
			"[0-9]+(.[0-9]+)?",2,
			"0x[0-9a-fA-F]+([0-9a-fA-F]+)?",2,
			" true | false | null",3,
			"\\{ | \\} | \\, | \\: | \\[ | \\]",4,
			"\\ | \\t | \\n",5
		)

		jMachine.RegExpReadText(StringSpan(fileData,size), (tok,c) ==>
		{
			if c == 5
				return void
			tokens.Emplace(c,tok)
		})
		if tokens.Size() == 0 or tokens[0].0 != 4 or tokens[0].1 != "{"
			return false
		tokens.Pop()
		if not checkRecord(this&)
			return false
		itType = jsonTypeRecord

		return true
	}

		
	checkRecord := !(JsonNode^ toCheck) -> bool
	{
		while tokens.Size() != 0 and not (tokens[0].0 == 4 and tokens[0].1 == "}")
		{
			if tokens[0].0 == 4 and tokens[0].1 == ","
				tokens.Pop()
			nd := checkNode()
			if nd == null
				return false
			toCheck.itSub.Push(nd)
		}
		if tokens.Size() == 0
			return false
		tokens.Pop()
		return true
	}
	checkArray := !(JsonNode^ toCheck) -> bool
	{
		while tokens.Size() != 0 and not (tokens[0].0 == 4 and tokens[0].1 == "]")
		{
			if tokens[0].0 == 4 and tokens[0].1 == ","
				tokens.Pop()
			newNode := checkNode2(new JsonNode)
			toCheck.itSub.Push(newNode)
		}
		if tokens.Size() == 0
			return false
		tokens.Pop()
		return true
	}
	checkNode := !() -> JsonNode^
	{
		thisNode := new JsonNode

		if tokens.Size() == 0 or tokens[0].0 != 1
			return null
		thisNode.itKey = tokens[0].1[1..-1]
		thisNode.haveName = true
		tokens.Pop()

		if tokens.Size() == 0 or tokens[0].0 != 4 or tokens[0].1 != ":" 
			return null
		tokens.Pop()
		if tokens.Size() == 0
			return null
		return checkNode2(thisNode)
	}
	checkNode2 := !(JsonNode^ thisNode) -> JsonNode^
	{
		//switch tokens[0].0
		//{
		if tokens[0].0 == 1 or tokens[0].0 == 2 or tokens[0].0 == 3
		{
		//case in ![1,2,3]
			thisNode.itType = jsonTypeField
			if tokens[0].0 == 1
				thisNode.itValue = tokens[0].1[1..-1]
			else
				thisNode.itValue = tokens[0].1
			
			tokens.Pop()
		}else if tokens[0].0 == 4
		{
		//case 4
			switch tokens[0].1
			{
			case "["
				thisNode.itType = jsonTypeArray
				tokens.Pop()
				if not checkArray(thisNode)
					return null
			case "{"
				thisNode.itType = jsonTypeRecord
				tokens.Pop()
				if not checkRecord(thisNode)
					return null
			}
		}
		return thisNode
	}
}
