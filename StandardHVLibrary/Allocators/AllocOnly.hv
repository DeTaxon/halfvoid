
AllocateOnly := class extends IAllocator
{
	firstPage := PageMemory
	currentPage := PageMemory^

	iterPtr := u8^
	leftSize := int

	AllocMem := virtual !(int size, bool dirty = false) -> void^
	{
		//TODO  if size > 1Mb
		assert(size < 16*1024*1024)

		if size > leftSize
		{
			if currentPage == null {
				currentPage = firstPage&->{PageMemory^}
			}else{
				currentPage = currentPage.GetPointer()->{PageMemory^}
			}
			infoSize := (PageMemory->TypeSize + 0x0F) and_b 0xFFFFFFF0
			if currentPage.Size() == 0
			{
				currentPage.Create(16*1024*1024,"rw")
				memset(currentPage.GetPointer(),0,infoSize)
				internalHVInitClass(currentPage.GetPointer()->{PageMemory^}^)
			}

			iterPtr = currentPage.GetPointer()->{u8^}[infoSize]&
			leftSize = currentPage.Size() - infoSize
		}

		oldSize := size
		size = (size + 0xF) and_b 0xFFFFFFF0

		result = iterPtr

		if not dirty
			memset(result,0,size)
		iterPtr = iterPtr[size]&
		leftSize -= size
	}
	FreeMem := virtual !(void^ mem) -> void
	{
	}
	Reset := !() -> void
	{
		iterPtr = 0
		leftSize = 0
	}
	Destroy := !() -> void
	{
		while firstPage.Size() != 0
		{
			iter := firstPage&
			prevIter := iter

			while iter.Size() != 0
			{
				prevIter = iter
				iter = iter.GetPointer()->{PageMemory^}
			}

			prevIter.Close()
		}
	}
}
MakeTempAllocator := !() -> AllocateOnly
{
}
