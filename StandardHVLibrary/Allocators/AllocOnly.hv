AllocateOnly := class extends IAllocator
{
	basePage := PageMemory

	iterPtr := u8^
	leftSize := int

	Init := !() -> void
	{
		basePage.Create(8*1024*1024,"rw")
		Reset()
	}
	AllocMem := virtual !(int size, bool dirty = false) -> void^
	{
		oldSize := size
		size = (size + 0xF) and_b 0xFFFFFFF0

		result = iterPtr

		// if not dirty or true
			memset(result,0,size)
		iterPtr = iterPtr[size]&
		leftSize -= size
	}
	FreeMem := virtual !(void^ mem) -> void
	{
	}
	Reset := !() -> void
	{
		iterPtr = basePage.GetPointer()->{u8^}
		leftSize = basePage.Size()
	}
	Destroy := !() -> void
	{
		basePage.Close()
	}
}
MakeTempAllocator := !() -> AllocateOnly
{
	result.Init()
}
