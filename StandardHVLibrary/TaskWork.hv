TaskBoxWorkInterface := class extend TGCObject
{
	DoJob := virtual !(Mutex^ m) -> void {	m.Unlock() }
	IsLast := virtual !() -> bool { return true }
	OnLast := virtual !(TaskBox^ b) -> void {}
}

TaskBoxSingleWork := class extend TaskBoxWorkInterface
{
	lambda := !()&->void
	taskData := TaskData^

	this := !(!()&->void l, TaskData^ d) -> void
	{
		lambda = l
		taskData = d
	}
	DoJob := virtual !(Mutex^ m) -> void {
		m.Unlock()
		lambda()
	}
	IsLast := virtual !() -> bool { return true }
	OnLast := virtual !(TaskBox^ b) -> void {
		b._workUnlockTask(taskData)
	}
}

AppendClass TaskBox
{
	itWorkMutex := Mutex
	itWorkConVar := ConVar
	itWorkToDo := List.{TaskBoxWorkInterface^}
	itWorkCount := int
	poolThread := List.{Thread^}
	
	ExpectWorkers := !(int expects) -> void
	{
		diffWorks := expects - poolThread.Size()
		if diffWorks <= 0
			return void
			
		for i : diffWorks
		{
			newThread := new Thread(() ==> {
				while working
				{
					itWorkMutex.Lock()

					if itWorkToDo.Size() != 0
					{
						work := itWorkToDo.Front()
						isLast := work.IsLast()
						
						if isLast
						{
							itWorkToDo.Pop()
						}

						itWorkMutex.Unlock()
						work.DoJob(itWorkMutex&)
						FlushTempMemory()

						if isLast
						{
							work.OnLast(this&)
						}
					}else{
						if not working
						{
							itWorkMutex.Unlock()
							return void
						}
						itWorkConVar.Wait(itWorkMutex&)
						itWorkMutex.Unlock()
					}
				}
			})
			itMutex.Lock()
			poolThread << newThread
			itMutex.Unlock()
		}
	}
	AwaitWork := !(!()&->void lambd) -> void
	{
		ExpectWorkers(1)
		itWorkMutex.Lock()
		itWorkCount += 1
		itWorkToDo.Push(new TaskBoxSingleWork(lambd,CurrentTask))
		itWorkConVar.NotifyAll()
		itWorkMutex.Unlock()
		switchToMain()
	}
	AwaitManyWorks := !(int num,!(int)&->void lambd) -> void
	{
		//ExpectWorkers(1)
		//itWorkMutex.Lock()
		//itWorkCount += 1
		//itWorkToDo.Emplace(lambd,CurrentTask,num)
		//itWorkConVar.NotifyAll()
		//itWorkMutex.Unlock()
		//switchToMain()
	}
	_workUnlockTask := !(TaskData^ tsk) -> void
	{
		itMutex.Lock()
		tasksToExe << tsk
		notifyMain()
		itMutex.Unlock()
	}
	threadPoolStop := !() -> void
	{
		poolThread[^].Join()
		delete poolThread[^]
		poolThread.Destroy()
	}

	checkExeWorks := !() -> TaskData^
	{
		if tasksToExe.Size() == 0
			return null

		return tasksToExe.Pop()
	}
}
