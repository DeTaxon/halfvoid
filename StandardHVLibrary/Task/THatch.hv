THatchCounter := class
{
	counter := int
	subHatch := THatch

	Inc := !() -> void
	{
		counter += 1
	}
	Dec := !() -> void
	{
		counter -= 1
		if counter == 0
			subHatch.Emit()
	}
	WaitZero := !() -> void
	{
		if counter != 0
			subHatch.Await()
	}
}

THatch := class
{
	flag := bool
	next_wakeup := TITaskPausePoint^

	Emited := !() -> bool
	{
		return flag
	}
	Emit := !() -> void
	{
		TaskCheckMutex.Lock()
		defer TaskCheckMutex.Unlock()

		if flag
			return void
		flag = true
		itr := next_wakeup
		while itr != null
		{
			itr.itTask.resume()
			itr.itTask = null
			itr = itr.next_point
		}
		TaskWaitTasksConVar.NotifyAll()
	}
	EmitInner := !() -> void
	{
		flag = true
		itr := next_wakeup
		while itr != null
		{
			itr.itTask.resume()
			itr.itTask = null
			itr = itr.next_point
		}
		TaskWaitTasksConVar.NotifyAll()
	}
	GetWaitingCount := !() -> int
	{
		counter := 0
		itr := next_wakeup
		while itr != null
		{
			counter += 1
			itr = itr.next_point
		}
		return counter
	}
	Reset := !() -> void
	{
		flag = false
	}
	//meh := int
	Await := !() -> void
	{
		if flag
			return void
		//meh += 1

		pt := TITaskPausePoint
		//pt.Pause(next_wakeup&)
		pt.next_point = next_wakeup
		next_wakeup = pt&
		pt.itTask = CurrentTask
		assert(pt.itTask != null)

		//if meh >= 3
		//{
		//	TestFile^ << "	{\n"
		//	TestFile^ << "		\"CallsCount\" : \"" << meh << "\"\n"
		//	TestFile^ << "		\"Stacks\" : [\n"

		//	stk := CreateStackTrace(1)
		//	stk.ForEachCall((x,y,z) ==> {
		//		if x == null or y == null
		//			return void
		//		TestFile^ << "{"
		//		TestFile^ << "\"File\" : \"" << x << "\"\n"
		//		TestFile^ << "\"Function\" : \"" << y << "\"\n"
		//		TestFile^ << "\"Line\" : \"" << z << "\"\n"
		//		TestFile^ << "},"
		//	})
		//	TestFile^ << "		{}\n"

		//	TestFile^ << "		]\n"
		//	TestFile^ << "	},\n"
		//}

		TaskCheckMutex.Lock()
		CurrentThread.switchToMain()
		TaskCheckMutex.Unlock()

	}
}

TITaskPausePoint := class
{
	itTask := Task^	
	next_point := TITaskPausePoint^
}

TaskGetHatchWork := !() -> TaskData^
{
	if pausePoint == null
		return null
	retVal := pausePoint.itTask
	pausePoint = pausePoint.next_point
	return retVal
}

// debugTemp := List.{TITaskPausePoint^}
// hatchAbandoned := bool

// pausePoint := TITaskPausePoint^


// CheckHatchError := !() -> TaskData^
// {
// 	if debugTemp.Size() != 0
// 	{
// 		printf("abandoned count %i\n",debugTemp.Size())
// 		hatchAbandoned = true
// 		return debugTemp[0].itTask
// 	}
// }
