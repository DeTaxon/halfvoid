

IN_CLOSE := 24
IN_OPEN := 32
IN_MODIFY := 2


wd_struct := class
{
	wd := s32
	mask := u32
	cookie := u32

	len := u32
	name := char[1]
}


//TODO
//Check for repeats
FIONREAD := 21531
inotify_wrapper_fd := class
{
	fd := int

	fileNodes := AVLMap.{int,inotify_wrapper_node}

	Init := !() -> void
	{
	}

	MonitorFolder := !(StringView folderPath,bool recursive,!(FSObject^)& -> void cb) -> TGCObject^
	{
		@once {
			this.fd = inotify_init1(2048)
			
			monitorThread := static Thread^

			monitorThread = new Thread(() ==> {
				pollList := pollfd
				pollList.fd = iw_fd.fd
				pollList.events = POLLIN

				buf := char[4096]

				while true //TODO gracefull quit
				{
					pollList.revents = 0
					poll(pollList&,1,1000)
					if (pollList.revents and_b POLLIN) == 0
						continue

					redBytes := read(pollList.fd,buf[0]&,4096)

					ptr := buf[0]&->{wd_struct^}
					fileName := StringSpan(ptr.name[0]&)

					node := ref iw_fd.fileNodes[ptr.wd]
					sBuf := TEchoStream
					sBuf << node.objectName << "/" << fileName

					fullPath := sBuf.GetString()

					newFile := new File()
					newFile.absPath = fullPath
					newFile.objName = fileName.GetString()

					TaskCheckMutex.Lock()
					if node.nodeWork.isPaused
					{
						node.nodeWork.monitorTask.resume()
						node.nodeWork.isPaused = false
					}
					node.nodeWork.changedObjects.Push(newFile)
					TaskCheckMutex.Unlock()
				}
			})

			//TSpawnTask(() ==> [this&]{
			//	OSAsyncReadNonStop(this.fd,(blb) ==> [this&]{

			//		ptr := blb.GetPointer()->{wd_struct^}
			//		fileName := StringSpan(ptr.name[0]&,ptr.len)

			//		node := ref fileNodes[ptr.wd]
			//		sBuf := TEchoStream
			//		sBuf << node.objectName << "/" << fileName

			//		fullPath := sBuf.GetString()

			//		newFile := new File()
			//		newFile.absPath = fullPath
			//		newFile.objName = fileName.GetString()

			//		if node.nodeWork.isPaused
			//		{
			//			node.nodeWork.monitorTask.resume()
			//			node.nodeWork.isPaused = false
			//			node.nodeWork.changedObject = newFile
			//		}
			//	})
			//})
		}


		thisWork := NodeWork
		thisWork.monitorTask = CurrentTask
		TLock(this&)

		wd := inotify_add_watch(this.fd,folderPath.GetString().Str(),IN_MODIFY)
		newNode := ref fileNodes[wd]
		newNode.objectName = folderPath.GetString()
		newNode.nodeWork = thisWork&


		if recursive
		{
			FSReadFolder(folderPath,true, (x) ==> {
				if x is not in Folder
					return void
				absPath := fsGetAbsolutePath(x.GetPath())
				wd := inotify_add_watch(this.fd,absPath.Str(),IN_MODIFY)
				newNode := ref fileNodes[wd]
				newNode.objectName = x.GetPath()
				newNode.nodeWork = thisWork&
			})
		}

		TUnlock(this&)

		thrd := CurrentThread
		//TODO Cancalable
		while true
		{
			TaskCheckMutex.Lock()
			thisWork.isPaused = true
			thrd.switchToMain()
			TaskCheckMutex.Unlock()

			//TODO also move content to temporary object
			if thisWork.changedObjects.Size() != 0
			{
				cb(thisWork.changedObjects[^])
				thisWork.changedObjects.Destroy()
			}
		}
	}
}
inotify_wrapper_node := class
{
	objectName := String^
	nodeWork := NodeWork^
}

NodeWork := class
{
	monitorTask := Task^
	changedObjects := List.{FSObject^}
	isPaused := bool
}

iw_fd := inotify_wrapper_fd
//TODO add destroy
initMonitorFolder := !() -> void
{
	iw_fd.Init()
}


//#MarkFunction("JITPass",AsyncMonitorFolderNonStop)
AsyncMonitorFolderNonStop := !(StringView folderPath,bool recursive,!(FSObject^)& -> void cb) -> TGCObject^
{
	#MarkFunction("CallAtStart",initMonitorFolder)

	return iw_fd.MonitorFolder(folderPath,recursive,cb)
}

