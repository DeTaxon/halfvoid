
AppendClass TaskWorker
{
	TaskTimersArray := List.{Tuple.{double,Task^}}

	CheckTimers := !(double nowTime) -> void
	{
		while TaskTimersArray.Size() != 0 and (TaskTimersArray[0].0 - nowTime <= 0.001) //1 ms accuracy
		{
			PendingTasks.PushFront(TaskTimersArray[0].1)
			TaskTimersArray.Pop()
			InterlockSub(TaskLoopWorkCounter,1)
		}
	}
}

#MarkFunction("JITPass",TSleep)
TSleep := !(double val) -> void
{
	endTime := GetSteadyTime() + val
	InterlockAdd(TaskLoopWorkCounter,1)

	ct := CurrentThread

	ct.TaskTimersArray.SortedPush(!{endTime,CurrentTask})

	TaskCheckMutex.Lock()
	ct.ThreadMainTask.switchToTask()
	TaskCheckMutex.Unlock()
}

#MarkFunction("JITPass",TaskYield)
TaskYield := !() -> void
{
	TaskCheckMutex.Lock()
	CurrentThread.PendingLastTasks.Push(CurrentTask)
	CurrentThread.ThreadMainTask.switchToTask()
	TaskCheckMutex.Unlock()
}


AppendClass TaskWorker
{
	SkipTimers := virtual !() -> void
	{
		TaskCheckMutex.Lock()
		TaskTimersArray[^].0 = 0
		TaskCheckMutex.Unlock()
	}

}
