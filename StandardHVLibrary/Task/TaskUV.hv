// TaskUVWorks := int

// uvLoop := void^
// uvAsyncCaller := char[1024]

// TaskUVInit := !() -> void
// {
// 	libUVInit()
// 	uvLoop = uv_default_loop()
// 	uv_async_init(uvLoop,uvAsyncCaller[0]&,uvAsyncCallback)
// }


// uvInProgressCount := int
// uvAsyncPending := FixedSizeRing.{!()&->void}
// waitingTimers := AVLMap.{void^,Task^}

// uvAsyncCallback := !(void^ x) -> void
// {
// 	while uvAsyncPending.Size() != 0
// 	{
// 		hm := uvAsyncPending.Pop()
// 		hm()
// 	}
// }
// TaskUVRunOnce := !() -> void
// {
// 	uv_run(uvLoop,1)
// }

// TSleep := !(double val) -> void
// {
// 	InterlockAdd(uvInProgressCount,1)

// 	tmr := char[1024]
// 	itTask := CurrentTask
// 	pend := () ==> {
// 		uv_timer_init(uvLoop,tmr[0]&)
// 		uv_timer_start(tmr[0]&,timerHandler,(val*1000)->{u64},0)
// 		waitingTimers[tmr[0]&] = itTask
// 	}
// 	uvAsyncPending.Push(pend)

// 	uv_async_send(uvAsyncCaller[0]&)
// 	CurrentThread.ThreadMainTask.switchToTask()
// }

// timerHandler := !(void^ x) -> void
// {
// 	uv_close(x,timerCloseHandler)
// }
// timerCloseHandler := !(void^ x) -> void
// {
// 	TaskWaitTasksConVar.NotifyAll()

// 	assert(waitingTimers.Contain(x))
// 	tsk := waitingTimers[x]
// 	tsk.itTaskWorker.PendingTasks.Push(tsk)
// 	waitingTimers.Remove(x)

// 	InterlockSub(uvInProgressCount,1)
// }
