
TaskWorkersToDo := List.{Task^}

"@work call" := !(!()&->@T lmbd ) -> T
{
	//taskWorkCallBegin()
	//result = lmbd()
	//taskWorkCallEnd()
	internalWorkCall(() ==> [cl = result&] {
		cl^ = lmbd()
	})
}


#MarkFunction("JITPass",internalWorkCall)
internalWorkCall := !(!()&->void lmbd) -> void
{
	TaskCheckMutex.Lock() //TODO optimize

	ExpectWorkers(1)

	TaskWorkersToDo.Push(CurrentTask)

	for it : TaskAdditionalWorkers //TODO optimize
	{
		it.innerNotify()
	}

	myTask := CurrentTask->{void^}
	CurrentThread.switchToMain()
	TaskCheckMutex.Unlock()

	lmbd()
	
	TaskCheckMutex.Lock()
	myTask := CurrentTask->{void^}

	myTask->{Task^}.resume()
	myTask->{Task^}.itTaskWorker.innerNotify()
	TaskMainEvent.Emit()
	CurrentThread.switchToMain()

	TaskCheckMutex.Unlock()
}

taskWorkCallBegin := !() -> void
{

}
taskWorkCallEnd := !() -> void
{
}

SpawnWork := !(!()&->void lmbd) -> Task^
	#Mark("JITPass")
{
	return spawnWorkInner(lmbd.Capture())
}

spawnWorkInner := !(!()&->void lmbd) -> Task^
{
	newTask := new Task(lmbd)
	TaskCheckMutex.Lock() //TODO optimize
	TaskWorkersToDo.Push(newTask)

	for it : TaskAdditionalWorkers //TODO optimize
	{
		it.innerNotify()
	}

	TaskCheckMutex.Unlock()
	ExpectWorkers(1)

	return newTask
}


ExpectWorkers := !(int x) -> void
	#Mark("JITPass")
{
	diff := x - TaskAdditionalWorkers.Size()

	if x <= 0
		return void
	for i : diff
	{
		newWorker := new TaskWorkerCreated()
		
		newWorker.CreateThread()
		TaskAdditionalWorkers.Push(newWorker)
	}
}
