
TaskOSInit := !() -> void
{
	TaskMainEvent = new Event()

	TaskPollSize = 1
	TaskPollList[0] = TaskMainEvent.Get()
}
TaskOSDestroy := !() -> void
{
	TaskMainEvent.Destroy()
	delete TaskMainEvent
}


TaskMainEvent := Event^
//TaskMainEventCB := !() -> void
//{
//	
//}

POLLIN := 768
POLLOUT := 16

pollfd := class
{
	fd := void^
	events := u16
	revents := u16
}

osReadWork := class
{
	workTask := Task^
	isPaused := bool
}

TaskPollSize := int
TaskPollWorks := osReadWork^[32]
//TaskPollList := pollfd[32]
TaskPollList := void^[32]

AsyncWaitEventNonStop := !(void^ fd,!()&->void cb) -> void
{
	thrd := CurrentThread
	
	newWork := osReadWork
	newWork.workTask = CurrentTask

	TaskCheckMutex.Lock()
	TaskLoopWorkCounter += 1
	itId := TaskPollSize
	TaskPollSize += 1
	TaskPollWorks[itId] = newWork&

	TaskPollList[itId] = fd

	TaskMainEvent.Emit()
	TaskCheckMutex.Unlock()

	while true
	{
		TaskCheckMutex.Lock()
		newWork.isPaused = true
		thrd.switchToMain()
		TaskCheckMutex.Unlock()
		//TODO cancel
	
		cb()
	}
}

TaskCodePollWork := !(double waitTime) -> void
{

	TaskCheckMutex.Unlock()
	waitResult := WaitForMultipleObjects(TaskPollSize,TaskPollList[0]&,0,(waitTime*1000)->{int})
	//WSAPoll(TaskPollList[0]&,TaskPollSize,(waitTime*1000)->{int})
	TaskCheckMutex.Lock()

	if waitResult < TaskPollSize and TaskPollWorks[waitResult] != null
	{
		TaskPollWorks[waitResult].workTask.resume()
		TaskPollWorks[waitResult].isPaused = false
	}
}
