AppendClass Task
{
	//OS Dependent
	uContext := u8[1024]
	stackPtr := void^
	thisTaskStackSize := size_t

	fiberContext := fiber_context_x64

	OSFirstInit := !() -> void
	{
		
	}
	
	CreateStack := !() -> void
	{
		if stackPtr != null
			return void

		itTaskWorker = CurrentThread
		stackSize := 2*1024*1024 //TODO var
		stackPtr = malloc(stackSize) //TODO set stack size
		thisTaskStackSize = stackSize
		get_context_x64(fiberContext&)
		make_context_x64(fiberContext&,ucontextStartTask,stackPtr,stackSize)


		//getcontext(uContext[0]&)
		//stackSize := 4*1024*1024
		//thisTaskStackSize = stackSize
		//stackPtr = malloc(stackSize) //TODO set stack size
		////stackPtr = mmap(null,stackSize,PROT_READ + PROT_WRITE,MAP_ANON + MAP_PRIVATE,-1,null)
		//uContext[24]&->{u64^}^ = 0
		//uContext[8]&->{void^^}^ = null
		//uContext[16]&->{void^^}^ = stackPtr
		//uContext[32]&->{u64^}^ = stackSize
		//makecontext(uContext[0]&,ucontextStartTask,0)
		//itTaskWorker = CurrentThread
	
		if #Var("Tracy")
		{
			___tracy_emit_memory_alloc_callstack?(stackPtr,stackSize,999,0)
		}

		//oldTask := CurrentTask->{void^}
		//CurrentTask = this&
		//swapcontext(oldTask->{Task^}.uContext[0]&,uContext[0]&)
	}
	GetStackUsage := !() -> TaskStackUsageInfo
	{
		if stackPtr == null or thisTaskStackSize == 0
			return void
		anyVar := void^
		c := anyVar&->{size_t} - stackPtr->{size_t}
		result.UsedSize = thisTaskStackSize - c
		result.TotalSize = thisTaskStackSize
	}
	firstStartOS := !() -> void
	{
		//oldTask := CurrentTask->{void^}
		//CurrentTask = CurrentThread.ThreadMainTask
		//if llvmSetJump(oldTask->{Task^}.longJumpBuf) == 0
		//	swapcontext(uContext[0]&,CurrentTask.uContext[0]&)
	}
	switchToTask := !() -> void
	{
		if #Var("Tracy") and GlobalTracyInUse
		{
			___tracy_fiber_enter(taskNames[taskId].0[0]&)
		}

		oldTask := CurrentTask->{void^}
		CurrentTask = this&
		//if llvmSetJump(oldTask->{Task^}.longJumpBuf) == 0
		//	llvmLongJump(this.longJumpBuf[0]&)
		swap_context_x64(oldTask->{Task^}.fiberContext&,this.fiberContext&)
	}
	OSDestroy := !() -> void
	{
		if stackPtr != null
		{
			if #Var("Tracy")
			{	
				___tracy_emit_memory_free_callstack?(stackPtr,9999,0)
			}

			free(stackPtr)
			//munmap(stackPtr,thisTaskStackSize)
			stackPtr = null
		}
	}
}
