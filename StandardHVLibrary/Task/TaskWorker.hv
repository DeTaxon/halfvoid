TaskWorker := class extend TGCObject
{
	AllTasks := AVLSet.{Task^}
	CreateTasks := List.{Task^}
	PendingTasks := List.{Task^}
	PendingLastTasks := List.{Task^}
	DeleteTasks := List.{Task^}

	ThreadMainTask := Task^

	CustomTaskPoll := !(TaskWorker^)&->Task^

	itThread := Thread^

	this := !() -> void
	{
		internalHVInitClass(AllTasks)
	}

	Destroy := virtual !() -> void
	{
		AllTasks.Destroy()
		itThread?.Join()
		ThreadMainTask = null
	}
	CreateThread := !() -> void
	{
		itThread = new Thread(() ==> [wk = this&->{void^}] { //todo: make a way for passing variable as weak pointer
			CurrentThread = wk->{TaskWorker^}
			CurrentThread.ThreadMainTask = CurrentTask
			CurrentTask.OSFirstInit()
			EnterTaskThreadCycle(false)
			CurrentThread.ThreadMainTask = null
			CurrentThread = null
		})
	}
	CreateTask := !(!()&-> void cb) -> Task^
	{
		startTask := new Task(cb.Capture())

		TaskCheckMutex.Lock()
		
		AllTasks.Insert(startTask)
		CreateTasks.PushFront(startTask)

		TaskWaitTasksConVar.NotifyAll()
		TaskCheckMutex.Unlock()
		
		return startTask
	}
	SetCustomTaskPoll := !(!(TaskWorker^)&->Task^ cb) -> void
	{
		CustomTaskPoll = cb.Capture()
	}
	PopReadyTask := !() -> Task^
	{

		if CustomTaskPoll != null
		{
			c:= CustomTaskPoll(this&)
			if c != null
				return c
		}

		if PendingTasks.Size() != 0
		{
			return PendingTasks.Pop()
		}

		if CreateTasks.Size() != 0
		{
			hm := CreateTasks.Pop()
			hm.CreateStack()
			return hm
		}
		return ReciveWorkTask()?

		if PendingLastTasks.Size() != 0
		{
			return PendingLastTasks.Pop()
		}
		return null
	}
	ReciveWorkTask := virtual !() -> Task^
	{
		return null
	}
	WaitForTasks := !() -> void
	{
		itWaitMutex.Lock()
		itWaitConVar.Wait(itWaitMutex)
		itWaitMutex.Unlock()
	}
	switchToMain := !() -> void
	{
		ThreadMainTask.switchToTask()
	}
}
TaskWorkerCreated := class extend TaskWorker
{
	ReciveWorkTask := virtual !() -> Task^
	{
		if TaskWorkersToDo.Size() != 0
		{
			hm := TaskWorkersToDo.Pop()
			hm.CreateStack()
			//AllTasks.Insert(hm)
			return hm
		}
		return null
	}
}
