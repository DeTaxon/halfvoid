
MappedFile := class extend TGCObject
{
	fileStream := RawFileStream
	point := u8^
	fileSize := u64
	fileFlag := int
	this := !(Str fileName,char^ flags) -> void
	{
		Open(fileName,flags)
	}
	Open := !(Str fileName,char^ flags) -> bool
	{
		if not fileStream.Open(fileName,flags)
			return false
		fileSize = osFileSize(fileName)
	
		mmFlgs := PROT_READ
		if 'w' in flags
			mmFlgs = PROT_READ or_b PROT_WRITE
		fileFlag = mmFlgs

		if fileSize == 0
			return true

		mmRes := mmap(null,fileSize,mmFlgs,MAP_SHARED,fileStream.FileFd,null)
		//if mmRes&->{u64^}^ == not_b 0U //TODO
		if mmRes&->{u64^}^ + 1 == 0
		{
			fileStream.Close()
			return false
		}
		point = mmRes->{u8^}

		return true
	}
	ResizeFile := !(u64 newSize) -> bool
	{
		if newSize == fileSize
			return true
		oldSize := fileSize
		if ftruncate(fileStream.FileFd,newSize) == -1
			return false
		fileSize = newSize

		if newSize > oldSize
		{
			munmap(point,oldSize)
			mmRes := mmap(null,newSize,fileFlag,MAP_SHARED,fileStream.FileFd,null)
			//if mmRes&->{u64^}^ == not_b 0U //TODO
			if mmRes&->{u64^}^ + 1 == 0
			{
				fileStream.Close()
				return false
			}
			point = mmRes->{u8^}
		}
		return true
	}
	Get := !() -> u8^
	{
		return point
	}

	Size := !() -> int
	{
		return fileSize
	}
	Destroy := virtual !() -> void
	{
		Close()
	}
	Close := !() -> void
	{
		if point == null
			return void
		
		munmap(point,fileSize)
		fileStream.Close()
		point = null
		
	}
}
