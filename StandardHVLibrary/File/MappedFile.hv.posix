
MappedFile := class extend TGCObject
{
	fileId := u64
	fileSize  := u64
	mapId := u64
	point := u8^
	fileFlag := int
	this := !(char^ fileName) -> void
	{
		fileId = 0
		point = null
		Open(fileName,FILE_READ,0)
	}
	this := !(char^ fileName,int flg) -> void
	{
		fileId = 0
		point = null
		Open(fileName,flg,0)
	}
	this := !(char^ fileName,int flg, u64 itSize) -> void
	{
		fileId = 0
		point = null
		Open(fileName,flg,itSize)
	}
	Open := !(char^ fileName) -> void
	{
		Open(fileName,FILE_READ,0)
	}
	Open := !(char^ fileName,int flg, u64 itSize) -> void
	{
		posFlg := O_RDONLY
		if flg != FILE_READ
			posFlg = O_RDWR
		if flg == FILE_CREATE
			posFlg = posFlg or_b O_CREAT

		fileId = open(fileName,posFlg,511)
		if fileId == -1
		{
			throw new Exception("can not open file")
		}
	
		fileSize = osFileSize(fileName)
	
		mmFlgs := PROT_READ
		if flg != FILE_READ
			mmFlgs = mmFlgs or_b PROT_WRITE

		if itSize != 0 and fileSize != itSize
		{
			if ftruncate(fileId,itSize) == -1
				throw new Exception("can not resize file")
			fileSize = itSize
		}
		fileFlag = mmFlgs
		mmRes := mmap(null,fileSize,mmFlgs,MAP_SHARED,fileId,null)
		//if mmRes&->{u64^}^ == not_b 0U //TODO
		if mmRes&->{u64^}^ + 1 == 0
		{
			close(fileId)
			throw new Exception("can not map file")
		}
		point = mmRes->{u8^}
	}
	ResizeFile := !(u64 newSize) -> void //TODO error check
	{
		oldSize := fileSize
		if ftruncate(fileId,newSize)  == -1
			throw new Exception("can not resize file")
		fileSize = newSize

		if newSize > oldSize
		{
			munmap(point,oldSize)
			mmRes := mmap(null,newSize,fileFlag,MAP_SHARED,fileId,null)
			//if mmRes&->{u64^}^ == not_b 0U //TODO
			if mmRes&->{u64^}^ + 1 == 0
			{
				close(fileId)
				throw new Exception("can not map file")
			}
			point = mmRes->{u8^}
		}
	}
	Get := !() -> u8^
	{
		return point
	}

	Size := !() -> int
	{
		return fileSize
	}
	Destroy := virtual !() -> void
	{
		Close()
	}
	Close := !() -> void
	{
		if point == null
			return void
		
		munmap(point,fileSize)
		close(fileId)
		point = null
		
	}
}
