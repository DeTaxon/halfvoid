AlignUp := !(int value, int align) -> int
{
	assert(align != 0)
	extra := value mod align
	if extra != 0
		value += align - extra
	return value
}

AppendClass VulkanInstance
{
	CreateMemoryObject := !(int size, int memType) -> TVkMemoryObject^
	{
		result = new TVkMemoryObject
		result.CreateObject(this&,size,memType,false)
	}
	CreateMemBufferObject := !(int size, int memUsage) -> TVkMemBuffer^
	{
		result = new TVkMemBuffer
		result.itInstance = this&

		result.initBuffer(size,memUsage)

		memInfo := VkMemoryRequirements
		Funcs.vkGetBufferMemoryRequirements(LogicalDevice,result.itBuffer,memInfo&)

		result.CreateObject(this&,memInfo.size,memInfo.memoryTypeBits,false)
		result.objSize = size
		result.bindBuffer()
	}

	CreateTransferMemBuffer := !(int size) -> TVkMemBuffer^
	{
		result = new TVkMemBuffer
		result.itInstance = this&

		result.initBuffer(size,VK_BUFFER_USAGE_TRANSFER_SRC_BIT)

		memInfo := VkMemoryRequirements
		Funcs.vkGetBufferMemoryRequirements(LogicalDevice,result.itBuffer,memInfo&)

		result.CreateObject(this&,memInfo.size,memInfo.memoryTypeBits,true)
		result.bindBuffer()
	}

}

TVkMemoryObject := class
{
	itInstance := VulkanInstance^
	memObj := VkDeviceMemory
	objSize := int
	gpuSize := int
	itMemInfo := VulkanMemoryInfo^

	CreateObject := !(VulkanInstance^ inst,int size,int memType, bool preferCpu) -> bool
	{
		itInstance = inst

		bestMemory := VulkanMemoryInfo^
		if (memType == 0)
		{
			assert(false) //TODO
			//memId = gHostMem[0]
			//gpuSide = false
		}else
		{
			if not preferCpu
			{
				for it : itInstance.DeviceMemory
				{
					if ((1 shl it.index) and_b memType) == 0
						continue

					if bestMemory == null or bestMemory.heapSize < it.heapSize
						bestMemory = it
				}
			}
			if bestMemory == null
			{
				for it : itInstance.HostMemory //TODO i don't need this stage
				{
					if not it.IsHostVisible()
						continue
					if ((1 shl it.index) and_b memType) == 0
						continue

					if bestMemory == null or bestMemory.heapSize < it.heapSize
						bestMemory = it
				}
			}
			if bestMemory == null and preferCpu
			{
				for it : itInstance.DeviceMemory
				{
					if not it.IsHostVisible()
						continue
					if ((1 shl it.index) and_b memType) == 0
						continue

					if bestMemory == null or bestMemory.heapSize < it.heapSize
						bestMemory = it
				}
			}
		}

		itMemInfo = bestMemory

		gpuSize = size

		allc1 := VkMemoryAllocateInfo()
		allc1.allocationSize =  gpuSize
		allc1.memoryTypeIndex = bestMemory.index

		inst.Funcs.vkAllocateMemory(inst.LogicalDevice,allc1&,null,memObj&)
		objSize = gpuSize
		return true
	}
	Destroy := virtual !() -> void //TODO double Destroy
	{
		itInstance.Funcs.vkFreeMemory(itInstance.LogicalDevice, memObj,null)
	}
	Map := !() -> void^
	{
		memToRet := void^
		itInstance.Funcs.vkMapMemory(itInstance.LogicalDevice,memObj,0,gpuSize,0,memToRet&)
		return memToRet
		
	}
	Unmap := !() -> void
	{
		flushRange := VkMappedMemoryRange()
		flushRange.memory = memObj
		flushRange.offset = 0
		flushRange.size = objSize
		itInstance.Funcs.vkFlushMappedMemoryRanges(itInstance.LogicalDevice,1,flushRange&)
		itInstance.Funcs.vkUnmapMemory(itInstance.LogicalDevice,memObj)
	}
	Get := !() -> VkDeviceMemory
	{
		return memObj
	}
}

