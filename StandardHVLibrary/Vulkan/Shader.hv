
VKType := class
{
	BaseType := TypeId
	TypeCount := s16
	
	this := !(TypeId itType,int itCount) -> void
	{
		BaseType = itType
		TypeCount = itCount
	}

	ToU32 := !() -> u32
	{
		return (TypeCount->{u32} << 16) + BaseType
	}
	FromU32 := !(u32 val) -> void
	{
		TypeCount = (val >> 16) and_b 0xFFFF
		BaseType = val and_b 0xFFFF
	}
	GetVKType := !() -> int
	{
		if BaseType == float
		{
			assert(TypeCount >= 2 and TypeCount <= 4)
			switch TypeCount
			{	
				case 2 return VK_FORMAT_R32G32_SFLOAT
				case 3 return VK_FORMAT_R32G32B32_SFLOAT
				case 4 return VK_FORMAT_R32G32B32A32_SFLOAT
			}
		}
		if BaseType == u8
		{
			assert(TypeCount >= 2 and TypeCount <= 4)
			switch TypeCount
			{	
				case 2 return VK_FORMAT_R8G8_UNORM
				case 3 return VK_FORMAT_R8G8B8_UNORM
				case 4 return VK_FORMAT_R8G8B8A8_UNORM
			}
		}
		if BaseType == half
		{
			assert(TypeCount >= 2 and TypeCount <= 4)
			switch TypeCount
			{	
				case 2 return VK_FORMAT_R16G16_SFLOAT
				case 3 return VK_FORMAT_R16G16B16_SFLOAT
				case 4 return VK_FORMAT_R16G16B16A16_SFLOAT
			}
		}
		assert(false)
		return 0
	}
	GetBaseIndexType := !() -> int
	{
		switch BaseType
		{
			//case VType_UInt8 return VK_INDEX_TYPE_UINT8_KHR //NOT SUPPORTED BY DEFAULT
			case u16 return VK_INDEX_TYPE_UINT16
			case u32 return VK_INDEX_TYPE_UINT32
		}
		assert(false)
		return 0
	}
	GetSize := !() -> int
	{
		itTypeSize := 0
		if BaseType == float itTypeSize = 4
		if BaseType == half itTypeSize = 2
		if BaseType == s8 itTypeSize = 1
		if BaseType == s16 itTypeSize = 2
		if BaseType == s32 itTypeSize = 4
		if BaseType == s64 itTypeSize = 8
		if BaseType == u8 itTypeSize = 1
		if BaseType == u16 itTypeSize = 2
		if BaseType == u32 itTypeSize = 4
		if BaseType == u64 itTypeSize = 8
		assert(itTypeSize != 0)
		return itTypeSize*TypeCount
	}

	"<=>" := default
	"=" := default
}

VKTypeFromType := !().{@T} -> VKType
{
	if T->IsInt
	{
		switch T->TypeSize
		{
		case 1
			result.BaseType = s8
		case 2
			result.BaseType = s16
		case 4
			result.BaseType = s32
		case 8
			result.BaseType = s64
		}

		if T->IsSInt
			result.BaseType += 100
		result.TypeCount = 1
	}else if T->IsFloat {
		switch T->TypeSize
		{
		case 2
			result.BaseType = half
		case 4
			result.BaseType = float
		case 8
			result.BaseType = double
		}

		result.TypeCount = 1

	}else if T->IsStaticArray {
		result = VKTypeFromType().{T->TypeBase}
		result.TypeCount = T->ArraySize
	}else if T->IsVector {
		result = VKTypeFromType().{T->TypeBase}
		result.TypeCount = T->VecSize
	}else {
		assert(false) //TODO maybe static_assert
	}
}


vShaderVertexOptions := class
{
	positionType := VKType
	normalType := VKType
	textureType := VKType


	"<=>" := default
	"=" := default
}

vShaderModule := class extend TGCObject
{
	itModule := VkShaderModule

	LoadShaderModule := !(VulkanInstance^ inst,void^ modPoint,int modSize) -> void
	{
		vSC := VkShaderModuleCreateInfo()
		vSC.codeSize = modSize
		vSC.pCode&->{void^^}^ = modPoint
		inst.Funcs.vkCreateShaderModule(inst.LogicalDevice,vSC&,null,itModule&) //TODO remove vk.Funcs
	}
	Get := !() -> VkShaderModule
	{
		return itModule
	}
}

vShader := class 
{
	itPipe := VkPipeline
	itLayout := VkPipelineLayout
	this := !() -> void {}

	ApplyShaderToQueue := !(VulkanInstance^ inst,VkCommandBuffer itBuf,float surfWidth, float surfHeight) -> void
	{
		vp := VkViewport 
		vp.x = 0.0f
		vp.y = 0.0f
		vp.width = surfWidth
		vp.height = surfHeight
		vp.minDepth = 0.0f
		vp.maxDepth = 1.0f

		sc := VkRect2D
		sc.offset.x = 0
		sc.offset.y = 0
		sc.extent.width = surfWidth
		sc.extent.height = surfHeight

		inst.Funcs.vkCmdBindPipeline(itBuf,VK_PIPELINE_BIND_POINT_GRAPHICS,itPipe)
		inst.Funcs.vkCmdSetViewport(itBuf,0,1,vp&)
		inst.Funcs.vkCmdSetScissor(itBuf,0,1,sc&)
	}
	Get := !() -> void^
	{
		return itPipe
	}
}
