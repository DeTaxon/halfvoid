


ShaderCompiler_CompileResult := class
{
	ResultShader := Blob^
	ErrorMessage := Str
}

ShaderCompiler := class extend TGCObject
{
	cacheFile := CacheFile^
	cacheFileModule := CacheFileModule^

	options := void^

	this := !() -> void
	{
		options = shaderc_compile_options_initialize()
		assert(options != null)
		//shaderc_compile_options_set_target_env(options,shaderc_target_env_vulkan,shaderc_env_version_vulkan_1_0)
		shaderc_compile_options_set_target_env(options,shaderc_target_env_vulkan,shaderc_env_version_vulkan_1_3)
		shaderc_compile_options_set_target_spirv(options,shaderc_spirv_version_1_6)
	}

	SetCacheFile := !(CacheFile^ setCF) -> void
	{
		assert(cacheFile == null)

		cacheFile = setCF
		cacheFileModule = setCF.GetFileModule("Shaders") //TODO unconst
	}
	Compile := !(File^ fl) -> ShaderCompiler_CompileResult
	{
		blb := fl.GetBlob()
		flName := fl.GetName().GetString()

		target := shaderc_vertex_shader
		if flName.End == ".frag"
			target = shaderc_fragment_shader
		if flName.End == ".task"
			target = shaderc_task_shader
		if flName.End == ".mesh"
			target = shaderc_mesh_shader
		if flName.End == ".comp"
			target = shaderc_compute_shader

		cmplr := shaderc_compiler_initialize()
		res := shaderc_compile_into_spv(cmplr,blb.GetPointer()->{char^},blb.Size(),target,flName.Str(),"main",options)
		resInt := shaderc_result_get_compilation_status(res)
		txt := shaderc_result_get_error_message(res)

		if txt != null and StringSpan(txt) != ""
		{
			result.ErrorMessage->AsString = new String(txt)
			printf("yep %s\n",result.ErrorMessage)
			return void
		}

		resSize := shaderc_result_get_length(res)
		resBlob := new BlobOnVector(resSize)
		memcpy(resBlob.GetPointer(),shaderc_result_get_bytes(res),resSize)
		result.ResultShader = resBlob
	}
}

