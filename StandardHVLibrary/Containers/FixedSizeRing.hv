FixedSizeRing := class .{@T,@ArraySize} extend TArrayView.{T}
{
	fixedArray := T[ArraySize]
	itSize := int
	startIndex := u32
	endIndex := u32

	PushOverwrite := !(T x) -> void
	{
		myIndex := InterlockAdd(startIndex,1) mod ArraySize
		lastSize := InterlockAdd(itSize,1)
		fixedArray[myIndex] = x
	}
	Pop := !() -> T
	{
		myIndex := InterlockAdd(endIndex,1) mod ArraySize
		lastSize := InterlockSub(itSize,1)
		assert(lastSize > 0)
		result = fixedArray[myIndex]
		if T->IsGCPointer
			fixedArray[myIndex] = null
	}
	"[]" := virtual !(int index) -> ref T
	{
		myIndex := (index + startIndex) mod ArraySize
		return fixedArray[myIndex]
	}
	Size := !() -> int
	{
		return itSize
	}
	Destroy := virtual !() -> void
	{
		if T->TypeGroup == "Point"
		{
			while Size() != 0
			{
				Pop()
			}
		}
	}
}
