ListNode := class .{@T}
{
	next := ListNode.{T}^
	prev := ListNode.{T}^
	data := T
}

List := class.{@T} extend TArrayView.{T}
{
	itSize := int
	start := ListNode.{T}^
	end := ListNode.{T}^

	Push := !(T itm) -> void
	{
		newNode := createBackNode()
		newNode.data = itm
	}

	Emplace := !(args...) -> void
	{
		newNode := createBackNode()
		newNode.data.this(args...)
	}
	PushUniq := !(T itm) -> void
	{
		if this[^] == itm
			return void
		Push(itm)
	}

	createBackNode := virtual !() -> ListNode.{T}^
		#TemplateResist()
	{
		newNode := createNode()
		if itSize == 0
		{
			start = newNode
			end = newNode
		}else{
			end.next = newNode
			newNode.prev = end
			end = newNode
		}
		itSize += 1
		return newNode
	}
	PushFront := !(T itm) -> void
	{
		newNode := createFrontNode()
		newNode.data = itm
	}
	EmplaceFront := !(args...) -> void
	{
		newNode := createFrontNode()
		newNode.data.this(args...)
	}

	createFrontNode := virtual !() -> ListNode.{T}^
		#TemplateResist()
	{
		newNode := createNode()
		if itSize == 0
		{
			start = newNode
			end = newNode
		}else{
			start.prev = newNode
			newNode.next = start
			start = newNode
		}
		itSize += 1
		return newNode
	}
	Pop := !() -> T
	{
		assert(itSize >= 1)
		result = start.data
		containerCleanObject(start.data&)
		if itSize == 1
		{
			destroyNode(start)
			start = null
			end = null
		}else{
			nd := start
			start = start.next
			destroyNode(nd)
		}
		itSize -= 1
	}

	"[]" := virtual !(int ind) -> ref T
		#TemplateResist()
	{
		if ind < 0
			return this[itSize + ind]
		assert(ind >= 0 and ind < itSize)

		itr := start
		for i : ind
		{
			itr = itr.next
		}
		return itr.data
	}
	Contain := !(T val) -> bool
	{
		if this[^] == val
			return true
		return false
	}


	//createVector := virtual !(Vector.{T}^^ res,int nowSize) -> void
	//{
	//	res^ = new Vector.{T}(nowSize)
	//}
	setFunc := virtual !(T^ lft,T^ right) -> void
	{
		lft^ = right^
	}
	ToVector := virtual !() -> Vector.{T}^
	{
		nowSize := Size()
		result = new Vector.{T}(nowSize)
		//createVector(result&,Size())
		ptrRes := result.GetPointer()
		
		for it,i : this
		{
			result^[i] = it
			//setFunc(ptrRes[i]&,it&)
		}
	}
	"in" := !(T itm) -> bool
	{
		if this[^] == itm
			return true
		return false
	}
	FindIndex := !(T itm) -> int
	{
		for it,ind : this
		{
			if it == itm
				return ind
		}
		return -1
	}

	Size := virtual !() -> int #TemplateResist() { return itSize }
	Destroy := virtual !() -> void
	{
		itr := start
		while itr != null
		{
			nd := itr
			itr = itr.next
			destroyNode(nd)
		}
		start = null
		end = null
		itSize = 0
	}
	SortedPush := !(T itm) -> void
	{
		if Size() == 0
		{
			Push(itm)
			return void
		}
		itr := start
		while itr != null
		{
			if itr.data > itm
				break
			itr = itr.next
		}
		if itr == null
		{
			Push(itm)
			return void
		}
		newNode := createNode()
		newNode.data = itm
		if itr == start
		{
			newNode.next = start
			start.prev = newNode
			start = newNode
		}else{
			newNode.prev = itr.prev
			newNode.next = itr
			itr.prev.next = newNode
			itr.prev = newNode
		}
		itSize += 1
	}
	DeleteIf := !( !(T&)&->bool cb) -> void
	{
		itr := start
		while itr != null
		{
			if cb(itr.data)
			{
				if itSize == 1
				{
					destroyNode(start)
					start = null
					end = null
					itr = null
				}else if itr == start
				{
					start = itr.next
					start.prev = null
					destroyNode(itr)
					itr = start
				}else if itr == end
				{
					end = itr.prev
					end.next = null
					destroyNode(itr)
					itr = null
				}else{
					itNode := itr
					itr = itNode.next
					itNode.prev.next = itNode.next
					itNode.next.prev = itNode.prev
				}
				itSize -= 1
			}else{
				itr = itr.next
			}
		}
	}
	InsertAfter := !(int index,T value) -> void
	{
		if index < 0
		{
			PushFront(value)
			return void
		}
		if index >= Size() - 1
		{
			Push(value)
			return void
		}

		iter := start

		for i : index
			iter = iter.next

		newNode := createNode()

		newNode.data = value

		newNode.next = iter.next
		newNode.next?.prev = newNode
		iter.next = newNode
		newNode.prev = iter

		if iter == end
			end = newNode

		itSize += 1
	}
	DeleteAt := !(int index) -> bool
	{
		if index < 0
			return DeleteAt(Size() + index)
		if index > Size()
			return false

		i := 0

		DeleteIf( x ==> {
			result = i == index
			i += 1
		})

		return true
	}
	destroyNode := !(ListNode.{T}^ nd) -> void
	{
		if T->IsGCPointer
		{
			nd.data = null
		}
		delete nd
	}
	createNode := virtual !() -> ListNode.{T}^
	{
		return new ListNode.{T}
	}
	"for" := !() -> TListIterator.{T}
	{
		result.iter = start
	}
	Back := !() -> ref T
	{
		assert(itSize != 0)
		return end.data
	}

	InsertAfter := !(TListIterator.{T} iter,T value) -> void
	{
		if iter.iter == end {
			Push(value)
			return void
		}

		newNode := createNode()

		newNode.data = value

		newNode.next = iter.iter.next
		newNode.next?.prev = newNode
		iter.iter.next = newNode
		newNode.prev = iter.iter

		if iter.iter == end
			end = newNode

		itSize += 1
	}
	InsertBefore := !(TListIterator.{T} iter,T value) -> void
	{
		if iter.iter == start {
			PushFront(value)
			return void
		}

		newNode := createNode()

		newNode.data = value

		newNode.next = iter.iter
		newNode.prev = iter.iter.prev

		iter.iter.prev = newNode
		newNode.prev?.next = newNode

		if iter.iter == start
			start = newNode

		itSize += 1
	}
}


TListIterator := class .{@T}
{
	iter := ListNode.{T}^
	HaveValue := !() -> bool
	{
		result = iter != null
	}
	"()" := !() -> ref T
	{
		return iter.data
	}
	Inc := !() -> void
	{
		iter = iter.next
	}
}
