
HashMap := class .{@TKey,@TValue}
{
	bucket := ListNode.{Tuple.{TKey,TValue}}^[8192]
	ItSize := int

	thisBucket := !(TKey key) -> ref ListNode.{Tuple.{TKey,TValue}}^
	{
		hsh := Hash(key)
		hsh = 0
		return bucket[hsh mod 8192]
	}
	Contain := !(TKey key) -> bool
	{
		bk := ref thisBucket(key)

		iter := bk.next
		while iter != null
		{
			if iter.data.0 == key
				return true
			iter = iter.next
		}
		return false
	}
	Size := !() -> int
	{
		return ItSize
	}

	"[]" := !(TKey key) -> ref TValue
	{
		bk := ref thisBucket(key)

		iter := bk

		while iter != null and iter.data.0 != key
			iter = iter.next

		if iter != null
			return iter.data.1

		iter = new ListNode.{Tuple.{TKey,TValue}}
		iter.data.0 = key

		if bk == null {
			bk = iter
		}else{
			iter.next = bk
			bk.prev = iter
			bk = iter
		}

		ItSize += 1
		return iter.data.1
	}
	Remove := !(TKey key) -> void
	{
		bk := ref thisBucket(key)
		
		iter := bk

		while iter != null and iter.data.0 != key
			iter = iter.next

		if iter == null
			return void

		if iter == bk
		{
			bk = iter.next
			bk?.prev = null
		}else{
			iter.prev.next = iter.next
			iter.next?.prev = iter.prev
		}

		
		ItSize -= 1
		delete iter
	}
	"for" := !() -> !(TKey^&)&->ref TValue
	{
		cb := (TKey^& key) ==> ref TValue 
		{
			for it : 8192
			{
				iter := bucket[it]

				while iter != null
				{
					key = iter.data.0&
					yield iter.data.1

					iter = iter.next
				}
			}
		}
		return cb.Capture()
	}
}
