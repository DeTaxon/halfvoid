Blob := class extend TGCObject
{
	GetPointer := virtual !() -> u8^ { assert(false)}
	Size := virtual !() -> s64 { assert(false) }

	AsStringSpan := !() -> StringSpan
	{
		return StringSpan(GetPointer()->{char^},Size())
	}
}

BlobOnVector := class extends Blob
{
	itData := void^
	itSize := s64
	this := !(s64 setSize) -> void
	{
		if setSize != 0
			itData = malloc(setSize)
		itSize = setSize
	}
	GetPointer := virtual !() -> u8^ { return itData->{u8^} }
	Size := virtual !() -> s64 { return itSize }

	Destroy := !() -> void
	{
		if itData != null
			free(itData)
		itData = null
		itSize = 0
	}
}
BlobSpan := class extends Blob
{
	itData := void^
	itSize := s64
	this := !(void^ iPtr, s64 siz) -> void
	{
		itData = iPtr
		itSize = siz
	}
	GetPointer := virtual !() -> u8^ { return itData->{u8^} }
	Size := virtual !() -> s64 { return itSize }
}

MakeBlob := !(s64 siz) -> Blob^
{
	return new BlobOnVector(siz)
}

"->{}" := !(Vector.{@T} vec) .{Blob} -> BlobSpan
{
	result."this"(vec.GetPointer(),vec.Size()*T->TypeSize)
}
