
Mutex := class extend TGCObject
{
	itBuffer := char[1024]
	this := !() -> void
	{
		pthread_mutex_init(itBuffer[0]&,null)
	}
	Lock := !() -> void
	{
		pthread_mutex_lock(itBuffer[0]&)
	}
	Unlock := !() -> void
	{
		pthread_mutex_unlock(itBuffer[0]&)
	}
	Destroy:= virtual !() -> void
	{
		pthread_mutex_destroy(itBuffer[0]&)
	}
}

ConVar := class extend TGCObject
{
	itBuffer := char[1024]
	this := !() -> void
	{
		pthread_cond_init(itBuffer[0]&,null)
	}
	Wait := !(Mutex^ mtx) -> void
	{
		pthread_cond_wait(itBuffer[0]&,mtx.itBuffer[0]&)
	}
	WaitFor := !(Mutex^ mtx,double waitTime) -> void
	{
		times := u64[2]
		clock_gettime(0,times[0]&)
		bigTime := (waitTime*1000000000)->{u64}
		times[1] += bigTime
		times[0] += times[1] / 1000000000
		times[1] = times[1] mod 1000000000

		pthread_cond_timedwait(itBuffer[0]&,mtx.itBuffer[0]&,times[0]&)
	}
	Notify := !() -> void
	{
		pthread_cond_signal(itBuffer[0]&)
	}
	NotifyAll := !() -> void
	{
		pthread_cond_broadcast(itBuffer[0]&)
	}
	Destroy := !() -> void
	{
		pthread_cond_destroy(itBuffer[0]&)
	}
}

