

HVTable2 := class .{@Left,@Right}
{
	frwd := AVLMap.{Left,List.{Right}}
	bckwrd := AVLMap.{Right,List.{Left}}

	Add := !(Left lft, Right rght) -> void
	{
		frwd[lft].PushUniq(rght)
		bckwrd[rght].PushUniq(lft)
	}
	Key := fake
	{
		RemoveAll := !(Left key) -> void
		{
			if not frwd.Contain(key)
				return void

			objToDel := List.{Right}

			for it : frwd
			{
				objToDel.Push(it[^])
			}
			frwd.Remove(key)

			afterCleanup := List.{Right}

			for it,ind : bckwrd
			{
				it.DeleteIf(@1 == key)
				if it.Size() == 0
					afterCleanup.Push(ind)
			}
			for it : afterCleanup
			{
				bckwrd.Remove(it)
			}
		}
		Get := !(Left inp, !(Right&)&->void cb) -> void
		{
			if not frwd.Contain(inp)
				return void
			line := ref this.frwd[inp]
			for it : line
			{
				cb(it)
			}
		}
		ContainSome := !(Left obj) -> bool
		{
			return frwd.Contain(obj)
		}
		GetOne := !(Left obj) -> ref Right
		{
			if not frwd.Contain(obj)
			{
				return void
			}
			return frwd[obj][0]
		}
	}
	Value := fake
	{
		RemoveAll := !(Right key) -> void
		{
			if not bckwrd.Contain(key)
				return void

			objToDel := List.{Left}

			for it : bckwrd
			{
				objToDel.Push(it[^])
			}
			bckwrd.Remove(key)

			afterCleanup := List.{Left}

			for it,ind : frwd
			{
				it.DeleteIf(@1 == key)
				if it.Size() == 0
					afterCleanup.Push(ind)
			}
			for it : afterCleanup
			{
				bckwrd.Remove(it)
			}
		}
		Get := !(Right inp, !(Left&)&->void cb) -> void
		{
			if not bckwrd.Contain(inp)
				return void
			line := ref this.bckwrd[inp]
			for it : line
			{
				cb(it)
			}
		}
		ContainSome := !(Right obj) -> bool
		{
			return bckwrd.Contain(obj)
		}
		GetOne := !(Right obj) -> ref Left
		{
			return bckwrd[obj][0]
		}

	}
}

