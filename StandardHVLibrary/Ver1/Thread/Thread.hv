pthread_t := type u64



_threadProxyFunc := !(void^ x) -> void
{
	_TaskPtrReset()
	_taskInitMem(_TaskPtrGet())
	_threadProxyFuncInner(x)
}
_threadProxyFuncInner := !(void^ x) -> void
{
	//MallocPoolBlock()
	asLambd := x->{!()&->void}
	asLambd()
	asLambd.Destroy()
	gTemporaryPool.Destroy()
}

Thread := class
{
	if $posix
		itData := pthread_t
	if $win32
		itData := void^
	this := !(!()&->void lambd) ->	void
	{
		captLambd := lambd.Capture()->{void^}
		if $posix
			pthread_create(itData&,null,_threadProxyFunc,captLambd)
		if $win32
			itData = CreateThread(null,0,_threadProxyFunc,captLambd,0,null)
	}
	Join := !() -> void
	{
		if $posix
		{
			pthread_join(itData,null)
		}
		if $win32
		{
			infin := -1
			WaitForSingleObject(itData,infin&->{u32^}^)
			CloseHandle(itData)
		}
	}
}


