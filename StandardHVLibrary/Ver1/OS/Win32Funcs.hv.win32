
MAX_PATH := 260

CP_UTF8 := 65001
MB_PRECOMPOSED := 1
WC_COMPOSITECHECK := 512

GENERIC_READ :=  0x80000000
GENERIC_WRITE := 0x40000000

FILE_APPEND_DATA := 4

FILE_ATTRIBUTE_NORMAL := 128
FILE_ATTRIBUTE_TEMPORARY := 256

FILE_FLAG_OVERLAPPED := 0x40000000
FILE_FLAG_BACKUP_SEMANTICS := 0x02000000

FILE_ATTRIBUTE_DIRECTORY := 16

OVERLAPPED := class
{
	internal := u64
	internalHi := u64
	offset := u64
	event := void^
}

FILETIME := class
{
	dwLowDateTime := u32
	dwLowDateTime := u32
}
BY_HANDLE_FILE_INFORMATION := class
{
	dwFileAttributes := u32
	ftCreationTime := FILETIME
	ftLastAccessTime := FILETIME
	ftLastWriteTime := FILETIME
	dwVolumeSerialNumber := u32
	nFileSizeHigh := u32
	nFileSizeLow := u32
	nNumberOfLinks := u32
	nFileIndexHigh := u32
	nFileIndexLow := u32
}


WIN32_FIND_DATAW := class
{
	dwFileAttributes := int
	ftCreationTime := FILETIME
	ftLastAccessTime := FILETIME
	ftLastWriteTime := FILETIME
	nFileSizeHigh := u32
	nFileSizeLow := u32
	reserved0 := u32
	reserved1 := u32
	cFileName := u16[260] // 260 = MAX_PATH
	cAlternateFileName := u16[14]
}
SYSTEM_INFO := class
{
	dwOemId := u32
	dwPageSize := u32
	lpMinimumApplicationAddress := void^
	lpMaximumApplicationAddress := void^
	dwActiveProcessorMask := u32^
	dwNumberOfProcessors := u32
	dwProcessorType := u32
	dwAllocationGranularity := u32
	wProcessorLevel := u16
	wProcessorRevision := u16
}


FILE_MAP_ALL_ACCESS := 0xF001F
FILE_MAP_READ := 4

PAGE_EXECUTE := 0x10
PAGE_EXECUTE_READ := 0x20
PAGE_EXECUTE_READWRITE := 0x40
PAGE_EXECUTE_WRITECOPY := 0x80
PAGE_NOACCESS := 0x01
PAGE_READONLY := 0x02
PAGE_READWRITE := 0x04
PAGE_WRITECOPY := 0x08

MEM_COMMIT := 0x1000
MEM_RESERVE := 0x2000
MEM_RESET := 0x80000

Utf8ToUtf16 := !(char^ itStr) -> u16[]
{
	retSize := MultiByteToWideChar(CP_UTF8,MB_PRECOMPOSED,itStr,-1,null,0)
	preRet := new u16[retSize + 1] ; $temp
	MultiByteToWideChar(CP_UTF8,MB_PRECOMPOSED,itStr,-1,preRet,retSize)
	preRet[retSize] = 0
	return preRet
}
Utf16ToUtf8 := !(u16^ itStr,int count) -> char^
{
	resSize := WideCharToMultiByte(CP_UTF8,WC_COMPOSITECHECK,itStr,count,null->{char^},0,null,null)
	preRet := new char[resSize + 1] ; $temp
	WideCharToMultiByte(CP_UTF8,WC_COMPOSITECHECK,itStr,count,preRet,resSize,null,null)
	preRet[resSize] = 0
	return preRet
}
Utf16ToUtf8 := !(u16^ itStr) -> char^
{
	resSize := WideCharToMultiByte(CP_UTF8,WC_COMPOSITECHECK,itStr,-1,null->{char^},0,null,null)
	preRet := new char[resSize + 1] ; $temp
	WideCharToMultiByte(CP_UTF8,WC_COMPOSITECHECK,itStr,-1,preRet,resSize,null,null)
	preRet[resSize] = 0
	return preRet
}


GetWinapiErrorText := !(u32 errVal) -> char^
{
	msgRes := u16^()
	FormatMessageW(0x1100 ,null,errVal,0,msgRes&,0,null)
	res := Utf16ToUtf8(msgRes)
	LocalFree(msgRes)
	return res
}

OpenLib := !(char^ fileName) ->void^
{
	asW := Utf8ToUtf16(fileName)
	return LoadLibraryW(asW)
}
LoadFuncLib := !(void^ libId, char^ funcName) -> void^
{
	return GetProcAddress(libId,funcName)
}
CloseLib := !(void^ libId) -> void
{
	FreeLibrary(libId)
}


TGetSteadyTime := !() -> double
{
	return GetTickCount64()*0.001
}

TSleep := !(double timeWait) -> void
{
	if CurrentTaskBox != null
	{
		CurrentTaskBox.ASleep(timeWait)
		return void
	}
	Sleep((timeWait*1000.0)->{int})
}
TCreateDir := !(char^ pthName) -> void
{
	prS := Utf8ToUtf16(pthName)
	if CreateDirectoryW(prS->{void^},null) == 0
		throw new Exception("Can not create directory")
}

c_long := type s32
