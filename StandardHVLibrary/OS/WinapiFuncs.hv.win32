
CP_UTF8 := 65001
MB_PRECOMPOSED := 1
WC_COMPOSITECHECK := 512

GENERIC_READ :=  0x80000000
GENERIC_WRITE := 0x40000000

FILE_APPEND_DATA := 4

FILE_ATTRIBUTE_NORMAL := 128
FILE_ATTRIBUTE_TEMPORARY := 256

FILE_FLAG_OVERLAPPED := 0x40000000
FILE_FLAG_BACKUP_SEMANTICS := 0x02000000

FILE_ATTRIBUTE_DIRECTORY := 16


FILE_MAP_ALL_ACCESS := 0xF001F
FILE_MAP_READ := 4

PAGE_EXECUTE := 0x10
PAGE_EXECUTE_READ := 0x20
PAGE_EXECUTE_READWRITE := 0x40
PAGE_EXECUTE_WRITECOPY := 0x80
PAGE_NOACCESS := 0x01
PAGE_READONLY := 0x02
PAGE_READWRITE := 0x04
PAGE_WRITECOPY := 0x08

MEM_COMMIT := 0x1000
MEM_RESERVE := 0x2000
MEM_RESET := 0x80000

FILETIME := class
{
	dwLowDateTime := u32
	dwLowDateTime := u32
}

WIN32_FIND_DATAW := class
{
	dwFileAttributes := int
	ftCreationTime := FILETIME
	ftLastAccessTime := FILETIME
	ftLastWriteTime := FILETIME
	nFileSizeHigh := u32
	nFileSizeLow := u32
	reserved0 := u32
	reserved1 := u32
	cFileName := u16[260] // 260 = MAX_PATH
	cAlternateFileName := u16[14]
}
BY_HANDLE_FILE_INFORMATION := class
{
	dwFileAttributes := u32
	ftCreationTime := FILETIME
	ftLastAccessTime := FILETIME
	ftLastWriteTime := FILETIME
	dwVolumeSerialNumber := u32
	nFileSizeHigh := u32
	nFileSizeLow := u32
	nNumberOfLinks := u32
	nFileIndexHigh := u32
	nFileIndexLow := u32
}
FILE_NOTIFY_INFORMATION := class
{
	NextEntryOffset := s32
	Action := s32
	FileNameLength := s32
	FileName := u16[1]
}
OVERLAPPED := class
{
	Internal := void^
	InternalHigh := void^
	Pointer := void^
	hEvent := void^
}

Utf8ToUtf16 := !(Str itStr) -> Vector.{u16}
{
	Utf8ToUtf16_inner(itStr->AsString.Str(),result)
}
Utf8ToUtf16 := !(char^ itStr) -> Vector.{u16}
{
	Utf8ToUtf16_inner(itStr,result)
}
Utf8ToUtf16_inner := !(char^ itStr,Vector.{u16} res) -> void
{
	retSize := MultiByteToWideChar(CP_UTF8,MB_PRECOMPOSED,itStr,-1,null,0)
	res.Resize(retSize + 1)
	MultiByteToWideChar(CP_UTF8,MB_PRECOMPOSED,itStr,-1,res.GetPointer(),retSize)
	res[retSize] = 0
}
Utf16ToUtf8 := !(u16^ itStr) -> String^
{
	buffer := char[1024] //TODO unconst?
	resSize := WideCharToMultiByte(CP_UTF8,WC_COMPOSITECHECK,itStr,-1,null->{char^},0,null,null)
	assert(resSize < 1024)
	WideCharToMultiByte(CP_UTF8,WC_COMPOSITECHECK,itStr,-1,buffer[0]&,resSize,null,null)
	buffer[resSize] = 0
	return new String(buffer[0]&)
}
Utf16ToUtf8 := !(u16^ itStr,int len) -> String^
{
	buffer := char[1024] //TODO unconst?
	resSize := WideCharToMultiByte(CP_UTF8,WC_COMPOSITECHECK,itStr,len,null->{char^},0,null,null)
	assert(resSize < 1024)
	WideCharToMultiByte(CP_UTF8,WC_COMPOSITECHECK,itStr,len,buffer[0]&,resSize,null,null)
	buffer[resSize] = 0
	return new String(buffer[0]&)
}

osIsFolder := !(char^ nm) -> bool
{
	asW := Utf8ToUtf16(nm)
	if (GetFileAttributesW(asW.GetPointer()) and_b FILE_ATTRIBUTE_DIRECTORY) != 0
		return true
	return false
}

osFileSize := !(char^ itStr) -> u64
{
	itAsW := Utf8ToUtf16(itStr)
	hndl := CreateFileW(itAsW.GetPointer(),0,FILE_SHARE_READ or_b FILE_SHARE_WRITE or_b FILE_SHARE_DELETE,null,OPEN_EXISTING,FILE_ATTRIBUTE_NORMAL,null)
	if hndl&->{u64^}^ == not_b 0U
		return 0
	flInf := BY_HANDLE_FILE_INFORMATION
	GetFileInformationByHandle(hndl,flInf&)
	result = flInf.nFileSizeHigh
	result = result shl 32
	result += flInf.nFileSizeLow
}
osFileId := !(char^ itStr) -> u64
{
	itAsW := Utf8ToUtf16(itStr)
	hndl := CreateFileW(itAsW.GetPointer(),0,FILE_SHARE_READ or_b FILE_SHARE_WRITE or_b FILE_SHARE_DELETE,null,OPEN_EXISTING,FILE_ATTRIBUTE_NORMAL,null)
	if hndl&->{u64^}^ == not_b 0U
		return 0
	flInf := BY_HANDLE_FILE_INFORMATION
	GetFileInformationByHandle(hndl,flInf&)
	result = flInf.nFileIndexHigh
	result = result shl 32
	result += flInf.nFileIndexLow
}
fsIsExist := !(char^ nm) -> bool
{
	return osFileId(nm) != 0
}
fsGetModificationTime := !(char^ nm) -> u64
{	
	itAsW := Utf8ToUtf16(nm)
	st := _stat64_winapi
	statRes := _wstat64(itAsW.GetPointer(),st&)
	return st.st_mtime
}
_stat64_winapi := class
{
    st_dev := s32
    st_ino := s16
    st_mode := u16
    st_nlink := s16
    st_uid := s16
    st_gid := s16
    st_rdev := s32
    st_size := s64
    st_atime := u64
    st_mtime := u64
    st_ctime := u64
}

osReadFolder := !(char^ inName, !(Str)& -> void cb) -> void
{
	ech := TEchoStream //TODO optimize
	ech << inName
	ech << "/*"

	nowEntry := WIN32_FIND_DATAW
	utf16Name := Utf8ToUtf16(ech.GetStr())
	hndl := FindFirstFileW(utf16Name.GetPointer(),nowEntry&)

	if hndl&->{u64^}^ == (not_b 0U)
		return void
	defer FindClose(hndl)

	while true
	{
		nm := Utf16ToUtf8(nowEntry.cFileName[0]&)
		if nm.Str() != "." and nm.Str() != ".."
		{
			cb(nm)
		}
		if not FindNextFileW(hndl,nowEntry&)
			return void
	}
}
fsGetAbsolutePath := !(Str ptr) -> Str?
{
	strU16 := Utf8ToUtf16(ptr.Str())

	buf := u16[512]

	resSize := GetFullPathNameW(strU16.GetPointer(),512,buf[0]&,null)
	if resSize == 0
		return void
	result = Utf16ToUtf8(buf[0]&,resSize)
}

GetSteadyTime := !() -> double
{
	return GetTickCount64()*0.001
}

localtime_r := !(u64^ c_time,void^ tm) -> void
{
	_localtime64_s(tm,c_time)
}

osGetThreadId := !() -> u64
{
	return GetCurrentThreadId()
}
