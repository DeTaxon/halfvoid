MakeWordDetermMachine := !(DetMachine input) -> WordDetermMachine^
{
	result = new WordDetermMachine

	kindaHashed := Vector.{int}(input.NodeId.Size())
	borrow := Vector.{int}(input.NodeId.Size())

	for it,i : kindaHashed
	{
		it = 0
		for j : input.IsEndNode.Size()
		{
			it = it*5 + input.Table[j][i]
		}
	}

	totalItems := List.{int}
	for i : borrow.Size()
	{
		found := i
		for j : (0..(i-1))
		{
			if kindaHashed[j] == kindaHashed[i]
			{
				gotDiff := false
				for k : input.IsEndNode.Size()
				{
					if input.Table[k][i] != input.Table[k][j]{
						gotDiff = true
						break
					}
				}
				if not gotDiff
				{
					found = j
					break
				}
			}
		}
		borrow[i] = found
		totalItems.PushUniq(found)
	}
	newSize := totalItems.Size()
	containFake := false
	if input.NodeId.Size() != 256 { newSize += 1 containFake = true}


	for ch : 256
		result.CharToGo[ch] = newSize - 1
	for lt,i : input.NodeId
	{
		posInT := totalItems.FindIndex(borrow[i])
		result.CharToGo[lt] = posInT
	}
	result.Table = new Vector.{int[]}(input.IsEndNode.Size())
	for it,i : result.Table
	{
		it = new Vector.{int}(newSize)
		for frm,j : totalItems
		{
			it^[j] = input.Table[i][frm]
		}
		if containFake
		{
			it^[totalItems.Size()] = -1
		}
	}
	result.IsEndNode = new Vector.{int}(input.IsEndNode.Size())
	for a : result.IsEndNode, b : input.IsEndNode 
		a = b
}
