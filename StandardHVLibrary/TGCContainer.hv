baseGCContainer := class extend TGCObject
{
	dataBase := RBMap.{StringSpan,TCachedGCObject^}
	Contain := !(StringSpan name) -> bool
	{
		return dataBase.Contain(name)
	}
	Remove := !(StringSpan name) -> void
	{
		spn := dataBase.Key(name)
		dataBase.Remove(spn)
		delete spn.Get()
	}
}
TGCContainer := class .{@V} extend baseGCContainer
{
	Create := !(StringSpan name) -> V^
	{
		result := new V
		result.Name = name.Str()
		result.basePointer = this&
		dataBase[result.Name] = result
		return result
	}
	Get := !(StringSpan name) -> V^
	{
		if dataBase.Contain(name)
			return dataBase[name]
		result := new V
		result.Name = name.Str()
		result.basePointer = this&
		dataBase[result.Name] = result
		return result
	}
}

TCachedGCObject := class extend TGCObject
{
	Name := StringSpan
	basePointer := baseGCContainer^
	GCLastRef := virtual !() -> void
	{
		if basePointer != null
			basePointer.Remove(Name)
	}
}
