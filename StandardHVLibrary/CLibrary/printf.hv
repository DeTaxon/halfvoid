
printf_hv_printStr := !(Stream outStream,char^ str, int prev, int i) -> void
{
	if prev > i
		return void
	outStream.Write(str[prev]&,i - prev + 1)
}
printf_hv := !(char^ str, ... ) -> void
{
	va := va_list
	va_start(va&)
	vprintf_hv(str,va&)
	va_end(va&)
}
vprintf_hv := !(char^ str, va_list^ va ) -> void
{
	vprintf_hv_stream(Console,str,va)
}
vprintf_hv_stream := !(Stream outStream, char^ str, va_list^ va ) -> void
{

	prev := 0
	i := 0

	buf := char[64]

	while str[i] != 0
	{
		if str[i] == '%'
		{
			printf_hv_printStr(outStream,str,prev, i - 1)
			i += 1
			switch str[i]
			{
			case 'p'
				i += 1
				prev = i

				baseVal := va_arg(va).{u64}
				if baseVal == 0
				{
					outStream << "(nil)"
				}else{
					buf[0] = '0'
					buf[1] = 'x'
					for j : 16 //TODO Arch
					{
						reverse := (16 - j - 1)*4
						thisVal := baseVal shr reverse
						thisVal = thisVal and_b 0xF
						buf[j+2] = "0123456789abcdef"[thisVal]
					}
					offset := 0
					for j : 16
					{
						if buf[j+2] != '0'
							break
						offset += 1
					}
					if offset != 0
					{
						for j : 16
						{
							buf[j+2] = buf[j+2+offset]
						}
					}
					outStream.Write(buf[0]&,18 - offset)
				}
			case 's'
				i += 1
				prev = i
				outStream << va_arg(va).{char^}
			case 'i'
				i += 1
				prev = i
				outStream << va_arg(va).{s64}
			case 'f'
				i += 1
				prev = i
				outStream << va_arg(va).{double}
			case void
				i += 1 //hmmm....
			}

		}else{
			i += 1
		}
	}
	printf_hv_printStr(outStream,str,prev,i - 1)
}
