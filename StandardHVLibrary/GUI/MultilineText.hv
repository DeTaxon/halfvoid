MultilineText := class extend GUIObject
{
	lines := Str[]
	this := !() -> void
	{
		SetSize("",1,"",1)
	}
	this := !(Str[] newLines) -> void
	{
		this."this"()
		AddLinesLink(newLines)
	}
	AddLinesLink := !(Str[] newLines) -> void
	{
		lines = newLines
	}
	DrawCli := virtual !(DrawCliContext^ ctx,vec2i offset) -> void
	{
		textWidth := drawSize.x->{int}
		maxLines := drawSize.y->{int} - 1 //TODO why -1

		if textWidth <=	0
			return void


		//totalLines := 0
		//for it : lines.Reverse
		//{
		//	lineCount := CalculateStringLines(it,textWidth)
		//	totalLines += lineCount

		//	if totalLines > maxLines
		//		break
		//}

		iter := maxLines
		for it : lines.Reverse
		{
			cnt := CalculateStringLines(it,textWidth)
			iter -= cnt

			if iter < 0
				return void

			mvaddstr(offset.y + iter,offset.x,it)
		}
	}
}

//TODO UTF8 aware + \n aware
CalculateStringLines := !(Str value, int textWidth) -> int
{
	return (value->AsString.Size() + textWidth - 1) div textWidth //TODO without ->AsString
}
