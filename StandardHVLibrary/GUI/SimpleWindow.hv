Window := class extend GLFWWindow
{

	mainGUIObject := GUIObject^
	oldW := int
	oldH := int

	ClearColor := vec4f
	windowSize := vec2f

	outdatedWindowSize := bool

	windowTitle := Str

	CreateFont := !(File^ fil, float height) -> Font^
	{
		return vkOverlay.CreateFont(fil,height)
	}

	this := !(int w, int h,char^ title) -> void
	{
		ClearColor = vec4f(0.0,0.0,0.0,1.0)
		windowTitle = title

		windowSize.x = w
		windowSize.y = h
	}

	fpsLimited := bool
	fpsPeriod := float
	SetFPSLimit := !(int fpsCount) -> void
	{
		assert(fpsCount >= 0)
		if fpsCount == 0
		{
			fpsLimited = false
		}else{
			fpsLimited = true
			fpsPeriod = 1 / fpsCount
		}
	}
	
	WindowResized := virtual !(int width, int height) -> void
	{
		//imgGeneration -= 1
		//outdatedWindowSize = true
	}

	InitWindow := virtual !() -> GUIObject^
	{
		return new LayoutVertical(![])
	}
	DrawVulkan := virtual !(VkCommandBuffer cmd,int w, int h) -> void
	{

	}	
	
	MouseMoved := virtual !(double x, double y) -> void
	{
	}

	KeyChanged := virtual !(int key, int scancode, bool pressed) -> void
	{
	}
	MousePressed := virtual !(int buttonNum, bool pressed, int mods) -> void //if pressed is false => released
	{
		//mainGUIObject?.MousePressed(vkOverlay&,buttonNum,pressed,vec2f(MouseX,MouseY))
	}
	WindowRepair := virtual !() -> void
	{
		RedrawWindow()
	}
	RedrawWindow := !() -> void
	{
		//vkOverlay.DataGeneration += 1
		//vkOverlay.CmdGeneration += 1
	}
}

SimpleWindowImageInfo := class
{
	inited := bool

	cmdGen := s64
	cmdData := TVkCommandBuffer
}
