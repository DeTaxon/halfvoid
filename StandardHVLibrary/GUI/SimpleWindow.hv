SimpleWindow := class extend GLFWWindow
{
	vInstance := VulkanDefaultInstance^

	mainRenderPass := TRenderPass^

	mainGUIObject := GUIObject^
	oldW := int
	oldH := int

	ClearColor := vec4f
	vkOverlay := VkOverlayContext

	CreateFont := !(vRepoFile^ fil, float height) -> Font^
	{
		return vkOverlay.CreateFont(fil,height)
	}

	this := !(int w, int h,char^ title) -> void
	{
		ClearColor = vec4f(1.0,0.5,1.0,1.0)
		
		vInstance = new VulkanDefaultInstance
		vInstance.PreferIntegratedGPU()
		
		Init(w,h,title)
		vInstance.Init()

		vInstance.initCreateStageMemory()

		vInstance.CreateSurface(windowHandle)

		mainRenderPass = vkOverlay.CreateRenderPass(vInstance,vInstance.SwapImageFormat)

		vInstance.CreateSwapchain(mainRenderPass,w,h)

		vkOverlay.Init(mainRenderPass)

		mainGUIObject = InitWindow()

		vkOverlay.w = w
		vkOverlay.h = h
	}

	fpsLimited := bool
	fpsPeriod := float
	SetFPSLimit := !(int fpsCount) -> void
	{
		assert(fpsCount >= 0)
		if fpsCount == 0
		{
			fpsLimited = false
		}else{
			fpsLimited = true
			fpsPeriod = 1 / fpsCount
		}
	}

	imgCommands := AVLMap.{u32,SimpleWindowImageInfo}
	imgGeneration := int
	cmdGeneration := int
	
	Run := !() -> void
	{
		TracyZone("Window main loop")

		imgGeneration = vkOverlay.DataGeneration - 1
		cmdGeneration = vkOverlay.CmdGeneration - 1

		lastTime := GetSteadyTime() - 1 //sec

		while not ShouldClose()
		{
			if (cmdGeneration != vkOverlay.CmdGeneration) or (imgGeneration != vkOverlay.DataGeneration)
			{
				imgGeneration = vkOverlay.DataGeneration
				cmdGeneration = vkOverlay.CmdGeneration

				surfaceIndex := u32
				drawRes := true
				vInstance.DrawGetImage(surfaceIndex&,drawRes&)

				if not drawRes
				{
					vInstance.CreateSwapchain(mainRenderPass,Width,Height)
					vkOverlay.DataGeneration += 1
					vkOverlay.CmdGeneration += 1
					continue
				}


				if fpsLimited
				{
					itTime := GetSteadyTime()
					diffTime := itTime - lastTime
					if diffTime < fpsPeriod
					{
						TSleep(fpsPeriod - diffTime)
					}
					lastTime = GetSteadyTime()
				}

				cmdBuf := ref imgCommands[surfaceIndex]

				if not cmdBuf.inited
				{
					cmdBuf.cmdData."this"(vInstance,vInstance.itDrawCmdPool2)
				}

				w := vInstance.GetSurfaceWidth()
				h := vInstance.GetSurfaceHeight()

				if (not cmdBuf.inited) or (cmdBuf.cmdGen != vkOverlay.CmdGeneration)
				{
					cmdBuf.cmdGen = vkOverlay.CmdGeneration

					cmdBuf.cmdData.Reset()
					cmdBuf.cmdData.Start()

					bar1 := VkImageMemoryBarrier()
					bar1.image = vInstance.surfaceImages^[surfaceIndex]
					bar1.oldLayout = VK_IMAGE_LAYOUT_UNDEFINED
					bar1.newLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL
					bar1.subresourceRange.aspectMask = VK_IMAGE_ASPECT_COLOR_BIT
					bar1.subresourceRange.levelCount = 1
					bar1.subresourceRange.layerCount = 1
					vInstance.Funcs.vkCmdPipelineBarrier(cmdBuf.cmdData.Get(),VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT,VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT,0,0,null,0,null,1,bar1&)
					
					StartTextDraw(cmdBuf.cmdData.Get(),surfaceIndex)

					if mainGUIObject != null
					{
						if oldW != w or oldH != h
						{
							mainGUIObject.GetLayout(vkOverlay&)
							mainGUIObject.SetLayout(vkOverlay&,vec2f(w,h))
						}
						oldW = w
						oldH = h
					}
					mainGUIObject.PushDraw(vkOverlay&,cmdBuf.cmdData.Get(),vec2f(0,0))
					DrawVulkan(cmdBuf.cmdData.Get(),w,h)

					StopTextDraw(cmdBuf.cmdData.Get())
					
					bar1.oldLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL
					bar1.newLayout = VK_IMAGE_LAYOUT_PRESENT_SRC_KHR
					vInstance.Funcs.vkCmdPipelineBarrier(cmdBuf.cmdData.Get(),VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT,VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT,0,0,null,0,null,1,bar1&)

					cmdBuf.cmdData.Stop()
				}

				cmdBuf.cmdData.Submit(vInstance.DrawQueue,null)

				vInstance.DrawPresentImage(surfaceIndex)
				cmdBuf.inited = true

				SwapBuffers()
				PollEvents()
			}else{
				glfwWaitEventsTimeout(0.1)
			}	
		}
	}

	StartTextDraw := !(VkCommandBuffer cmd,int imgNumber) -> void
	{
		clrAtt := VkRenderingAttachmentInfo[10]

		clrValues := float[4]
	
		clrValues[0] = ClearColor.x
		clrValues[1] = ClearColor.y
		clrValues[2] = ClearColor.z
		clrValues[4] = ClearColor.w

		for it,i : mainRenderPass.itFrames
		{
			atm := ref clrAtt[i]
			atm."this"()
			atm.imageView = vInstance.surfaceImageViews^[imgNumber]
			atm.imageLayout = VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL
			atm.resolveMode = VK_RESOLVE_MODE_NONE //TODO
			atm.loadOp = VK_ATTACHMENT_LOAD_OP_CLEAR
			atm.storeOp = VK_ATTACHMENT_STORE_OP_STORE
			memcpy(atm.clearValue&,clrValues[0]&,4*4)
		}

		rndr := VkRenderingInfo()
		rndr.renderArea.extent.width = vInstance.GetSurfaceWidth() //surfAb.currentExtent.width
		rndr.renderArea.extent.height = vInstance.GetSurfaceHeight() //surfAb.currentExtent.height
		rndr.layerCount = 1
		rndr.colorAttachmentCount = 1
		rndr.pColorAttachments&->{void^^}^ = clrAtt[0]&

		vInstance.Funcs.vkCmdBeginRendering(cmd,rndr&)
	}
	StopTextDraw := !(VkCommandBuffer cmd) -> bool
	{
		vInstance.Funcs.vkCmdEndRendering(cmd)
		//vInstance.Funcs.vkCmdEndRenderPass(cmd)
	}

	InitWindow := virtual !() -> GUIObject^
	{
	}
	DrawCode := virtual !(void^ nk,int w, int h) -> void
	{
	}
	DrawVulkan := virtual !(VkCommandBuffer cmd,int w, int h) -> void
	{

	}	
	
	MouseMoved := virtual !(double x, double y) -> void
	{
	}

	KeyChanged := virtual !(int key, int scancode, bool pressed) -> void
	{
	}
	MousePressed := virtual !(int buttonNum, bool pressed, int mods) -> void //if pressed is false => released
	{
		mainGUIObject?.MousePressed(vkOverlay&,buttonNum,pressed,vec2f(MouseX,MouseY))
	}
	RedrawWindow := !() -> void
	{
		vkOverlay.DataGeneration += 1
	}
}

SimpleWindowImageInfo := class
{
	inited := bool

	cmdGen := s64
	cmdData := TVkCommandBuffer
}
