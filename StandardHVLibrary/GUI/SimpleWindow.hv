SimpleWindow := class extend GLFWWindow
{
	vInstance := VulkanDefaultInstance^

	mainRenderPass := TRenderPass^

	mainGUIObject := GUIObject^
	oldW := int
	oldH := int

	ClearColor := vec4f
	vkOverlay := VkOverlayContext

	CreateFont := !(vRepoFile^ fil, float height) -> Font^
	{
		return vkOverlay.CreateFont(fil,height)
	}


	this := !(int w, int h,char^ title) -> void
	{
		ClearColor = vec4f(1.0,0.5,1.0,1.0)
		
		vInstance = new VulkanDefaultInstance
		vInstance.PreferIntegratedGPU()
		
		Init(w,h,title)
		vInstance.Init()

		vInstance.initCreateStageMemory()

		vInstance.CreateSurface(windowHandle)

		mainRenderPass = vkOverlay.CreateRenderPass(vInstance,vInstance.SwapImageFormat)

		vInstance.CreateSwapchain(mainRenderPass,w,h)

		vkOverlay.Init(mainRenderPass)

		mainGUIObject = InitWindow()

		vkOverlay.w = w
		vkOverlay.h = h
	}

	fpsLimited := bool
	fpsPeriod := float
	SetFPSLimit := !(int fpsCount) -> void
	{
		assert(fpsCount >= 0)
		if fpsCount == 0
		{
			fpsLimited = false
		}else{
			fpsLimited = true
			fpsPeriod = 1 / fpsCount
		}
	}

	Run := !() -> void
	{
		step1Cmd := TVkCommandBuffer(vInstance,vInstance.itDrawCmdPool2)

		lastTime := GetSteadyTime() - 1 //sec

		//___tracy_emit_frame_mark("MainLoop")

		while not ShouldClose()
		{
			//___tracy_emit_frame_mark_start("MainLoop")
			//defer ___tracy_emit_frame_mark_end("MainLoop")
			surfaceIndex := u32
			drawRes := true
			vInstance.DrawGetImage(surfaceIndex&,drawRes&)

			if drawRes
			{

				if fpsLimited
				{
					itTime := GetSteadyTime()
					diffTime := itTime - lastTime
					if diffTime < fpsPeriod
					{
						TSleep(fpsPeriod - diffTime)
					}
					lastTime = GetSteadyTime()
				}
				w := vInstance.GetSurfaceWidth()
				h := vInstance.GetSurfaceHeight()

				step1Cmd.Reset()
				step1Cmd.Start(null,0)
				
				StartTextDraw(step1Cmd.Get(),surfaceIndex)

				if mainGUIObject != null
				{
					if oldW != w or oldH != h
					{
						mainGUIObject.GetLayout(vkOverlay&)
						mainGUIObject.SetLayout(vkOverlay&,vec2f(w,h))
					}
					oldW = w
					oldH = h
				}
				mainGUIObject.PushDraw(vkOverlay&,step1Cmd.Get(),vec2f(0,0))
				DrawVulkan(step1Cmd.Get(),w,h)

				StopTextDraw(step1Cmd.Get())

				step1Cmd.Stop()

				step1Cmd.Submit(vInstance.DrawQueue,null)

				vInstance.DrawPresentImage(surfaceIndex)
				
			}else{
				vInstance.CreateSwapchain(mainRenderPass,Width,Height)
			}

			//hm := u64 //TODO
			//hm = not_b hm
			//Funcs.vkWaitForFences(LogicalDevice,1,itGlobFence&,0,hm)

			PollEvents()
			SwapBuffers()
		}
	}

	StartTextDraw := !(VkCommandBuffer cmd,int imgNumber) -> void
	{
		imgBarCPre := VkImageMemoryBarrier[2]
	
		beginInfo := VkRenderPassBeginInfo()
	
		clrValues := float[13]
	
		clrValues[0] = ClearColor.x
		clrValues[1] = ClearColor.y
		clrValues[2] = ClearColor.z
		clrValues[4] = ClearColor.w
		clrValues[5] = 0.0f
		clrValues[6] = 0.0f
		clrValues[7] = 1.0f
	
		clrValues[8] = 0.0f
		clrValues[9] = 1.0f
		clrValues[10] = 0.0f
		clrValues[11] = 0.0f
	
		beginInfo.renderPass = mainRenderPass.Get()
		beginInfo.framebuffer = vInstance.surfaceFramebuffer
		beginInfo.renderArea.extent.width = vInstance.GetSurfaceWidth() //surfAb.currentExtent.width
		beginInfo.renderArea.extent.height = vInstance.GetSurfaceHeight() //surfAb.currentExtent.height
		beginInfo.clearValueCount = 1
		beginInfo.pClearValues&->{void^^}^ = clrValues[0]&->{void^}
		
		renderPassAttms := VkRenderPassAttachmentBeginInfo()
		renderPassAttms.attachmentCount = 1
		renderPassAttms.pAttachments = vInstance.surfaceImageViews[imgNumber]&
		beginInfo.pNext = renderPassAttms&

		vInstance.Funcs.vkCmdBeginRenderPass(cmd,beginInfo&,VK_SUBPASS_CONTENTS_INLINE)
	}
	StopTextDraw := !(VkCommandBuffer cmd) -> bool
	{
		vInstance.Funcs.vkCmdEndRenderPass(cmd) //TODO remove vk.Funcs
	}

	InitWindow := virtual !() -> GUIObject^
	{
	}
	DrawCode := virtual !(void^ nk,int w, int h) -> void
	{
	}
	DrawVulkan := virtual !(VkCommandBuffer cmd,int w, int h) -> void
	{

	}	
	
	MouseMoved := virtual !(double x, double y) -> void
	{
	}

	KeyChanged := virtual !(int key, int scancode, bool pressed) -> void
	{
	}
	MousePressed := virtual !(int buttonNum, bool pressed, int mods) -> void //if pressed is false => released
	{
		mainGUIObject?.MousePressed(buttonNum,pressed,vec2f(MouseX,MouseY))
	}
}
