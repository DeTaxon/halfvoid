//layout
//0 - fullsize
//1 - static, pixels
//2 - dynamic, procent


GUILayoutInfo := class
{
	Sizes := vec2f
	LayoutTypeW := int
	LayoutTypeH := int

	CanFullSizeW := bool
	CanFullSizeH := bool

	"=" := default
}

GUIObject := class extend TGCObject
{
	thisLayout := GUILayoutInfo
	drawSize := vec2f
	SetSize := !(char^ wl, float w, char^ hl, float h) -> void
	{
		switch wl
		{
			case "static" thisLayout.LayoutTypeW = 1
			case "dynamic" thisLayout.LayoutTypeW = 2
			case void thisLayout.LayoutTypeH = 0
		}
		switch hl
		{
			case "static" thisLayout.LayoutTypeH = 1
			case "dynamic" thisLayout.LayoutTypeH = 2
			case void thisLayout.LayoutTypeH = 0
		}

		thisLayout.Sizes = vec2f(w,h)
		if w == 0.0
			thisLayout.LayoutTypeW = 0
		if h == 0.0
			thisLayout.LayoutTypeH = 0
	}

	GetLayout := virtual !(LayoutContext^ ctx) -> GUILayoutInfo
	{
		result = thisLayout
	}
	SetLayout := virtual !(LayoutContext^ ctx,vec2f setSize) -> void
	{
		drawSize = setSize
	}
	MousePressed := virtual !(VkOverlayContext^ ctx,int buttonNum, bool pressed,vec2f offset) -> void
	{
	}
	PushDraw := virtual !(VkOverlayContext^ ctx,VkCommandBuffer cmdB,vec2f offset) -> void
	{
	}
	DrawGL := virtual !(WindowGLContext^ ctx, vec2f offset) -> void
	{

	}
}

LayoutSpacer := class extend GUIObject
{
	this := !(char^ layoutType, float layoutSize) -> void
	{
		SetSize(layoutType,layoutSize,layoutType,layoutSize)
	}
}

LayoutBase := class extend GUIObject
{
	objects := List.{Tuple.{GUIObject^,vec2f,vec2f,bool}} // obj, offset, size, is staticInLayoutTerms (width for vertical)

	staticW := float
	staticH := float
	foundStaticW := bool 
	foundStaticH := bool 
	fullSizeCount := int

	foundFullSizeW := bool 
	foundFullSizeH := bool 

	this := !(GUIObject^[] objs) -> void
	{
		for it : objs
		{
			objects.Emplace(it,vec2f(0,0),vec2f(0,0),false)
		}
	}

	MousePressed := virtual !(VkOverlayContext^ ctx,int buttonNum, bool pressed,vec2f offset) -> void
	{
		for it : objects
		{
			if (it.1.y > offset.y) or  (it.1.y + it.2.y < offset.y)
				continue
			
			if (it.1.x > offset.x) or (it.1.x + it.2.x < offset.x)
				continue

			it.0.MousePressed(ctx,buttonNum,pressed,offset - it.1)
			return void
		}
	}
}

LayoutDrawType := enum
{
	"Text",
	"Pixel"
}

LayoutContext := class
{
	w := float
	h := float

	DrawType := LayoutDrawType
}

