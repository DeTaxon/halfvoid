FontAtlas := class extend TGCObject
{
	packContext := stbtt_pack_context
	atlasTexture := TVkTexture^
	fonts := HybridQueue.{Font^,4}

	atlasDescriptor := VkDescriptorSet

	this := !(VulkanInstance^ inst,File^ fil, float fontSize, int oversampling) -> void
	{
		atlasTest := Vector.{u8}(512*512)
		
		stbtt_PackBegin(packContext&,atlasTest.GetPointer(),512,512,512,1,null) //TODO unconst
		stbtt_PackSetOversampling(packContext&,oversampling,oversampling)

		thisFont := new Font(this&,256,fontSize)
		fontData := fil.GetBlob()
		fonts.Push(thisFont)
		stbtt_PackFontRange(packContext&,fontData.GetPointer(),0,fontSize,0,256,thisFont.packedChars.GetPointer()) //TODO check result,

		stbtt_PackEnd(packContext&)

		atlTexture := inst.CreateTexture()
		newTexture := Vector.{u8}(512*512*4)

		ff := atlasTest.GetPointer()
		tt := newTexture.GetPointer()
		for i : 512
		{
			for j : 512
			{
				tt[(i + j*512)*4 + 0] = 255 
				tt[(i + j*512)*4 + 1] = 255 
				tt[(i + j*512)*4 + 2] = 255 
				tt[(i + j*512)*4 + 3] = ff[i + j*512]
			}
		}
		atlasTexture = inst.CreateTexture()
		atlasTexture.CreateTexture(512,512,newTexture&) //TODO use VK_FORMAT_R8
	}
	Destroy := virtual !() -> void
	{
		for it : fonts
		{
			it.packedChars.Destroy()
		}
	}
}
Font := class
{
	baseAtlas := FontAtlas^
	packedChars := Vector.{stbtt_packedchar}
	height := float

	this := !(FontAtlas^ base,int cSize,float h) -> void
	{
		baseAtlas = base
		packedChars.Resize(cSize)
		height = h
	}
}

ImageAtlas := class extend TGCObject
{
	atlasTexture := TVkTexture^
	atlasW := int
	atlasH := int

	rectangles := Vector.{stbrp_rect}
	usedCount := int

	imageData := u8^

	images := List.{Image^}

	this := !(int width, int height, int maxImages = 64) -> void
	{
		atlasW = width
		atlasH = height


		rectangles.Resize(maxImages)
	}

	AddImage := !(File^ someFile) -> int
	{
		imgFile := TImageFile(someFile)

		newId := usedCount
		rectangles[usedCount].w = imgFile.itWidth
		rectangles[usedCount].h = imgFile.itHeight
		usedCount += 1

		nodes := Vector.{stbrp_node}
		nodes.Resize(128)

		ctx := new stbrp_context
		defer delete ctx

		stbrp_init_target(ctx,atlasW,atlasH,nodes.GetPointer(),nodes.Size())
		stbrp_pack_rects(ctx,rectangles.GetPointer(),rectangles.Size())

		rct := ref rectangles[newId]
		assert(rct.was_packed != 0)

		images.Push(imgFile.CreateImage("RGBA"))
	}
	AddImage := !(Image^ someImage) -> int
	{
		newId := usedCount
		rectangles[usedCount].w = someImage.Width
		rectangles[usedCount].h = someImage.Height
		usedCount += 1

		nodes := Vector.{stbrp_node}
		nodes.Resize(128)

		ctx := new stbrp_context
		defer delete ctx

		stbrp_init_target(ctx,atlasW,atlasH,nodes.GetPointer(),nodes.Size())
		stbrp_pack_rects(ctx,rectangles.GetPointer(),rectangles.Size())

		rct := ref rectangles[newId]
		assert(rct.was_packed != 0)

		images.Push(someImage)
	}

	Finish := !(VulkanInstance^ inst) -> void
	{
		imageData = malloc(atlasW*atlasH*4)->{u8^}
		defer free(imageData)

		for it,i : images
		{
			for j : it.Height
			{
				rct := ref rectangles[i]
				memcpy(imageData[(rct.x + rct.y*atlasW)*4 + j*atlasW*4]&,it.GetPointer()->{u8^}[j*it.Width*4]&,it.Width*4)
			}
		}

		atlasTexture = inst.CreateTexture()
		atlasTexture.CreateTexture(atlasW,atlasH,ArraySpan.{u8}(imageData,atlasW*atlasH*4))
	}


	Destroy := virtual !() -> void
	{
		if imageData != null
		{
			free(imageData)
			imageData = null
		}
	}

	
}


