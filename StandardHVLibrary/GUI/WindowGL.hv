AppendClass Window
{
	initGLWindow := !() -> void
	{
		Init(windowSize.x,windowSize.y,windowTitle.Str(),false)
		mainGUIObject = InitWindow()
		ClearColor.x = 0
		ClearColor.y = 0
		ClearColor.z = 0
		ClearColor.w = 1
	}
	InitGL := virtual !(WindowGLContext^ ctx) -> bool
	{
		return true
	}
	RunGL := !() -> void
	{
		initGLWindow()
		glfwMakeContextCurrent(windowHandle)

		ctx := WindowGLContext
		ctx.gl = new glFuncsClass

		lib := GetLibrary(!["libGL.so","OpenGL32.dll"])
		glGetProcAddress := lib.Get("glXGetProcAddress")->{!(char^)^->void^}

		if glGetProcAddress == null
		{
			glGetProcAddress = lib.Get("wglGetProcAddress")->{!(char^)^->void^}
		}
		nameBuffer := char[128]
		for it,ind : ctx.gl->AllFields
		{
			sprintf(nameBuffer[0]&,"gl%s",ind)

			fncPtr := ref it&->{void^^}^
			fncPtr = glGetProcAddress(nameBuffer[0]&)
			if fncPtr == null
				fncPtr = lib.Get(nameBuffer[0]&)
		}
		if mainGUIObject != null
		{
			layoutContext := LayoutContext
			mainGUIObject.GetLayout(layoutContext&)
			mainGUIObject.SetLayout(layoutContext&,windowSize)
		}


		if InitGL(ctx&)
		{
			ctx.gl.Viewport(0,0,windowSize.x,windowSize.y)

			ctx.gl.ClearColor(ClearColor.x,ClearColor.y,ClearColor.z,ClearColor.w)
			
			while not ShouldClose()
			{
				ctx.gl.Clear(GL_COLOR_BUFFER_BIT)

				mainGUIObject.DrawGL(ctx&,vec2f(0,0))

				PollEvents()
				SwapBuffers()
				TaskYield()
			}
		}
		DestroyWindow()
	}
}

WindowGLContext := class
{
	//TODO i dont need it to be pointer, it's crashes, maybe due to variable type size
	gl := glFuncsClass^
}
