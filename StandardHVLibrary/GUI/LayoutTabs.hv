AppendClass VkOverlayContext
{
	CreateLayoutTabs := !(GUIObject^[] objs) -> LayoutTabs^
	{
		result = new LayoutTabs(objs)
		result.baseContext = this&
	}
}
LayoutTab := class extend GUIObject
{
	Name := Str
	Down := GUIObject^
	this := !(Str tabName,GUIObject^ obj) -> void
	{
		Name = tabName
		Down = obj
	}
}


TabObjDataType := class
{
	Object := GUIObject^
	Offset := vec2f
	Size := vec2f
	IsStatic := bool // is staticInLayoutTerms (width for vertical

	this := !(GUIObject^ obj,vec2f offset, vec2f size) -> void
	{
		Object = obj
		Offset = offset
		Size = size
	}
	"=" := default
}

LayoutTabs := class extend GUIObject
{
	Glue := LayoutVertical^
	Header := LayoutTabsHeader^
	Content := LayoutTabsObjectHolder^
	this := !(GUIObject^[] objs) -> void
	{
		names := HybridQueue.{Str,20}
		newObjs := HybridQueue.{GUIObject^,20}

		for it : objs
		{
			if it is LayoutTab {
				names.Push(it.Name)
				newObjs.Push(it.Down)
			}else{
				names.Push("Unknown")
				newObjs.Push(it)
			}
		}

		Header = new LayoutTabsHeader(names)
		Content = new LayoutTabsObjectHolder(newObjs)
		Glue = new LayoutVertical(![Header,Content])
	}
	GetLayout := virtual !(LayoutContext^ ctx) -> GUILayoutInfo
	{
		result = Glue.GetLayout(ctx)
	}
	SetLayout := virtual !(LayoutContext^ ctx,vec2f setSize) -> void
	{
		Glue.SetLayout(ctx,setSize)
	}
	NextTab := !() -> void
	{
		Content.NextTab()
		Header.currentIndex = Content.currentIndex
	}
	DrawCli := virtual !(DrawCliContext^ ctx,vec2i offset) -> void
	{
		Glue.DrawCli(ctx,offset)
	}
}
LayoutTabsHeader := class extend LayoutHorizontal
{
	currentIndex := int

	this := !(Str[] names) -> void
	{
		SetSize("full",0,"static",1) //TODO instead 1 maybe get from text size?
		
		labels := HybridQueue.{GUIObject^,20}

		for it : names
		{
			labels.Push(new TextLabel(it))
			labels.Push(new TextLabel("  "))
		}
		super(labels)
	}
	DrawCli := virtual !(DrawCliContext^ ctx,vec2i offset) -> void
	{
		oldColor := ctx.CurrentColor
		defer ctx.SetTextColor(oldColor)

		for it,i : objects
		{
			isSet := (i div 2) == currentIndex

			if isSet {
				ctx.SetTextColor(Color("green"))
			}else{
				ctx.SetTextColor(oldColor)
			}
			intOffset := vec2i
			intOffset.x = it.1.x
			intOffset.y = it.1.y

			it.0.DrawCli(ctx,offset + intOffset)
		}
	}
}
LayoutTabsObjectHolder := class extend GUIObject//LayoutBase
{
	objects := List.{TabObjDataType} // obj, offset, size, is staticInLayoutTerms (width for vertical)
	//baseContext := VkOverlayContext^
	currentIndex := int
	this := !(GUIObject^[] objs) -> void
	{
		for it : objs
		{
			objects.Emplace(it,vec2f(0,0),vec2f(0,0))
		}
	}

	NextTab := !() -> void
	{
		if objects.Size() == 0
			return void
		currentIndex = (currentIndex + 1) mod objects.Size()

		//baseContext.DataGeneration += 1
		//baseContext.CmdGeneration += 1
	}
	SetTab := !(int index) -> void
	{
		if objects.Size() == 0
			return void
		if index >= objects.Size() or index < 0
			return void
		currentIndex = index

		//baseContext.DataGeneration += 1
		//baseContext.CmdGeneration += 1
	}
	
	GetLayout := virtual !(LayoutContext^ ctx) -> GUILayoutInfo
	{
		foundStaticW := false
		foundStaticH := false
		staticW := 0
		staticH := 0

		foundFullSizeW := false
		foundFullSizeH := false

		for it : objects
		{
			itL := it.0.GetLayout(ctx)
			switch itL.1
			{
				case 0 //fullSuze
					foundFullSizeW = true
				case 1 //static
					staticW = max(staticW,itL.0.x)
					foundStaticW = true
				case 2 //dynamic
			}
			switch itL.2
			{
				case 0 //fullSuze
					foundFullSizeH = true
				case 1 //static
					staticH = max(staticH,itL.0.y)
					foundStaticH = true
				case 2 //dynamic
			}
		}

		if foundStaticW { result.Sizes.x = staticW }
		if foundStaticH { result.Sizes.y = staticH }

		if foundStaticW { result.LayoutTypeW = 1
		}else { result.LayoutTypeW = 0}

		if foundStaticH { result.LayoutTypeH = 1
		}else {result.LayoutTypeH = 0}
	}

	SetLayout := virtual !(LayoutContext^ ctx,vec2f setSize) -> void
	{
		for it : objects
		{
			newSize := setSize
			itL := it.Object.GetLayout(ctx)
			if itL.LayoutTypeW == 1
			{
				newSize.x = itL.Sizes.x
			}
			if itL.LayoutTypeH == 1
			{
				newSize.y = itL.Sizes.y
			}
			it.Object.SetLayout(ctx,newSize)
		}
	}
	//PushDraw := virtual !(VkOverlayContext^ ctx,VkCommandBuffer cmdB,vec2f offset) -> void
	//{
	//	for it,i : objects
	//	{
	//		if i != currentIndex
	//			continue
	//		it.0.PushDraw(ctx,cmdB,offset + it.1) //TODO why do i have +it.1
	//		break
	//	}
	//}
	DrawCli := virtual !(DrawCliContext^ ctx,vec2i offset) -> void
	{
		for it,i : objects
		{
			if i != currentIndex
				continue
			it.Object.DrawCli(ctx,offset)
			break
		}
	}
	MousePressed := virtual !(VkOverlayContext^ ctx,int buttonNum, bool pressed,vec2f offset) -> void
	{
		for it,i : objects
		{
			if i != currentIndex
				continue
			it.Object.MousePressed(ctx,buttonNum,pressed,offset - it.Offset)
			return void
		}
	}
}
