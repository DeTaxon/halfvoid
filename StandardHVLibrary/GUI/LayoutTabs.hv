AppendClass VkOverlayContext
{
	CreateLayoutTabs := !(GUIObject^[] objs) -> LayoutTabs^
	{
		result = new LayoutTabs(objs)
		result.baseContext = this&
	}
}

LayoutTabs := class extend GUIObject//LayoutBase
{
	objects := List.{Tuple.{GUIObject^,vec2f,vec2f,bool}} // obj, offset, size, is staticInLayoutTerms (width for vertical)
	baseContext := VkOverlayContext^
	currentIndex := int
	this := !(GUIObject^[] objs) -> void
	{
		for it : objs
		{
			objects.Emplace(it,vec2f(0,0),vec2f(0,0),false)
		}
	}

	NextTab := !() -> void
	{
		if objects.Size() == 0
			return void
		currentIndex = (currentIndex + 1) mod objects.Size()

		baseContext.DataGeneration += 1
		baseContext.CmdGeneration += 1
	}
	
	GetLayout := virtual !(VkOverlayContext^ ctx) -> GUILayoutInfo
	{
		foundStaticW := false
		foundStaticH := false
		staticW := 0
		staticH := 0

		foundFullSizeW := false
		foundFullSizeH := false

		for it : objects
		{
			itL := it.0.GetLayout(ctx)
			switch itL.1
			{
				case 0 //fullSuze
					foundFullSizeW = true
				case 1 //static
					staticW = max(staticW,itL.0.x)
					foundStaticW = true
				case 2 //dynamic
			}
			switch itL.2
			{
				case 0 //fullSuze
					foundFullSizeH = true
				case 1 //static
					staticH = max(staticH,itL.0.y)
					foundStaticH = true
				case 2 //dynamic
			}
		}

		if foundStaticW { result.Sizes.x = staticW }
		if foundStaticH { result.Sizes.y = staticH }

		if foundStaticW { result.LayoutTypeW = 1
		}else { result.LayoutTypeW = 0}

		if foundStaticH { result.LayoutTypeH = 1
		}else {result.LayoutTypeH = 0}
	}

	SetLayout := virtual !(VkOverlayContext^ ctx,vec2f setSize) -> void
	{
		for it : objects
		{
			newSize := setSize
			itL := it.0.GetLayout(ctx)
			if itL.LayoutTypeW == 1
			{
				newSize.x = itL.Sizes.x
			}
			if itL.LayoutTypeH == 1
			{
				newSize.y = itL.Sizes.y
			}
			it.0.SetLayout(ctx,newSize)
		}
	}
	PushDraw := virtual !(VkOverlayContext^ ctx,VkCommandBuffer cmdB,vec2f offset) -> void
	{
		for it,i : objects
		{
			if i != currentIndex
				continue
			it.0.PushDraw(ctx,cmdB,offset + it.1)
			break
		}
	}
	MousePressed := virtual !(VkOverlayContext^ ctx,int buttonNum, bool pressed,vec2f offset) -> void
	{
		for it,i : objects
		{
			if i != currentIndex
				continue
			it.0.MousePressed(ctx,buttonNum,pressed,offset - it.1)
			return void
		}
	}
}
