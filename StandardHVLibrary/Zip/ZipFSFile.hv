File := class extend vRepoObject
{
	ptrToRepo := vRepo^
	//ptrToZip := vZipEntry^
	fileSize := u64

	this := !() -> void
	{
	}
	GetFile := !(Str fileName) -> File^
	{
		return ptrToRepo.GetFile(fileName,GetParentFolder())
	}
	GetMap := virtual !() -> FileView^
	{
		//if ptrToZip != null
		//{
		//	return ptrToZip.GetMap()
		//}

		return new ZipFSFileView(this&)
	}
	GetStream := virtual !() -> Stream^
	{
		return new RawFileStream(this.GetPath(),"rw")
	}
	GetBlob := virtual !() -> Blob^
	{
		fileBlob := MakeBlob(this.Size())
		tst := this.GetPath()
		if fileBlob.Size() != 0
		{
			st := GetStream()
			st.Read(fileBlob.GetPointer(),fileBlob.Size())
			//mp := MappedFile(tst.Str())
			//memcpy(fileBlob.GetPointer(),mp.Get(),fileBlob.Size())
			//desc := fopen(tst.Str(),"rb")
			//defer fclose(desc)
			//fread(fileBlob.GetPointer(),fileBlob.Size(),1,desc)
		}
		return fileBlob
	}
	GetModificationTime := !() -> u64
	{
		return fsGetModificationTime(GetPath().Str())
	}
	GetParentFolder := !() -> Folder^
	{
		lastSlash := 0
		ptr := absPath.Str()
		for i : absPath.Size()
		{
			if ptr[i] == '/'
			{
				lastSlash = i
			}
		}
		if lastSlash == 0
			return null

		result = new Folder
		result.absPath->AsString = absPath[0..lastSlash].GetString()
		result.objName = result.absPath //TODO norman obj Name
	}

	IsVirtual := virtual !() -> bool 
	{
		return false
	}
	GetId := !() -> u64
	{	
		return osFileId(GetPath().Str())
	}
	Size := !() -> size_t
	{
		if this& is File
		{
			return osFileSize(GetPath().Str())
		}
		return fileSize
	}
	IsValid := !() -> bool
	{
	}
}
