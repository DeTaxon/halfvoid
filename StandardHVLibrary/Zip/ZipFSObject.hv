

FSObject := type vRepoObject
vRepoObject := class extend TGCObject
{
	objName := Str
	localPath := Str
	absPath := Str
	upFolder := Folder^

	GetName := !() -> Str { return objName }
	
	GetUpFolder := !() -> Folder^
	{
		//TODO this needs upgrade
		if upFolder == null and localPath->AsString != null
		{
			if localPath->AsString.End != "/"
			{
				ptr := localPath.Str()
				siz := localPath.Size()
				i := siz - 1
				while i >= 0
				{
					if ptr[i] == '/'
						break
					i -= 1
				}
				if i < 2
					return null
				spn := localPath[0..i]

				res := new Folder
				res.localPath->AsString = spn.GetString()
				return res

			}
		}
		return upFolder 
	}

	GetAbsPath := !() -> Str
	{
		if absPath->AsString != null
			return absPath
		absPathM := fsGetAbsolutePath(localPath)
		if absPathM.IsSet()
		{
			absPath = absPathM.value //TODO some method for optional
			return absPath
		}
	}

	GetPath := !() -> Str
	{
		return localPath
		//itms := HybridStack.{vRepoObject^,16}
		//iterUp := this&
		//while iterUp != null
		//{
		//	itms.PushFront(iterUp)
		//	iterUp = iterUp.upFolder
		//}
		//if itms.Size() > 1
		//	itms.Pop()
		//
		//strB := TEchoStream
		//for it,i : itms
		//{
		//	strB << it.objName
		//	if i != itms.Size() - 1
		//	{
		//		strB << "/"
		//	}
		//}
		//return strB.GetString()
	}
}
