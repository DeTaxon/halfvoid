SoundEngine := class extend TGCObject
{
	quit := bool
	pollTask := Task^

	device := void^
	context := void^

	buffers := List.{Sound^}

	freeSources := List.{u32}
	busySources := List.{SoundPlayProgress^}

	this := !() -> void
	{
		device = alcOpenDevice(null)
		context = alcCreateContext(device,null)
		alcMakeContextCurrent(context)
	}
	CreateSound := !(File^ fil) -> Sound^
	{
		result = new Sound(fil)
		buffers.Push(result)
	}
	ReserveSources := !(int exp) -> void
	{
		diff := exp - freeSources.Size()
		if exp <= 0
			return void
		for i : diff
		{
			source := u32
			alGenSources(1,source&)
			freeSources.Push(source)
		}
	}

	PlaySound := !(Sound^ snd) -> SoundPlayProgress^
	{
		source := getSource()
		alSourcei(source,AL_BUFFER,snd.buf)
		alSourcei(source,AL_LOOPING,0)
		alSourcePlay(source)
		
		result = new SoundPlayProgress
		result.SourceId = source
		result.PlaySound = snd

		busySources.Push(result)
	}
	PlaySoundLooped := !(Sound^ snd) -> SoundPlayProgress^
	{
		source := getSource()
		alSourcei(source,AL_BUFFER,snd.buf)
		alSourcei(source,AL_LOOPING,1)
		alSourcePlay(source)
		
		result = new SoundPlayProgress
		result.SourceId = source
		result.PlaySound = snd

		busySources.Push(result)
	}
	getSource := !() -> int
	{
		if freeSources.Size() == 0
		{
			source := u32
			alGenSources(1,source&)
			freeSources.Push(source)
		}
		return freeSources.Pop()
	}

	CreateTask := !() -> void
	{
		if pollTask != null
			return void
		quit = false

		pollTask = TSpawnTask(() ==> [q = quit&]{
			while not q^
			{
				metFinished := false

				@work 
				{
					for it : busySources
					{
						if it.IsFinished()
						{
							metFinished = true
							freeSources.Push(it.SourceId)
							it.PlayState.Emit()
						}
					}
				}
				if metFinished
				{
					busySources.DeleteIf(x => x.PlayState.Emited())
				}
				TSleep(0.1) //TODO somehow async
			}
		})
	}

	Stop := !() -> void
	{
		quit = true
		busySources[^].Cancel()
		ACompletion(pollTask)
		//pollTask?.AwaitCompletion()

		for it : busySources
		{
			alDeleteSources(1,it.SourceId&)
		}
		for it : freeSources
		{
			alDeleteSources(1,it&)
		}

		for it : buffers
		{
			alDeleteBuffers(1,it.buf&)
		}

		alcMakeContextCurrent(null)
		alcDestroyContext(context)
		alcCloseDevice(device)
	}
}
