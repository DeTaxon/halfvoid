
MCBaseOpcodes := enum extend u16
{
	"noop",

	"label",
	"jmp", // label
	"jmp_if_bool", // label var_bool
	//"jmp_if_op", // label operator var1 var2
	//
	"switch_start", // op1 - input value
	"switch_case", // op1 - compare value, op2 - label to jump
	"switch_end", 
	// executions continue on default value

	"clean", // op1
	"mov", // op1 <- op2
	"cast", // op1 op2 // change type (int to float),(int to s64) ...

	"cmp", // operator var1 var2

	"load_element",
	"load_field",
	"set_reference",
	"get_pointer",

	"and",
	"or",
	"xor",
	"not",

	"shl",
	"sshr",
	"ushr",

	"add",
	"sub",
	"mul",
	"div",
	"mod",

	"atomic_add",
	"atomic_sub",
	"atomic_xchg",

	"call_start", // function opResult calling_convection
	"load_var",
	"call_end",

	"max",
	"min",
	"sqrt",
	"cos",
	"sin",

	"vec_build",
	"vec_scalar_mul",

	"vec_shuffle_begin",
	"vec_shuffle_index",
	"vec_shuffle_zero",
	"vec_shuffle_end",

	"memset",

	"va_start",
	"va_end",
	"va_arg",

	//debug
	"debug_set_file",
	"debug_set_line",

	//assembler does not work in interperter, for .exe generators only, x86_64 only for now
	"asm_start", // op1 result, op2 string of assembler text, op3 optional arch
	//"load_var",
	"clob_str",
	"asm_end",


	//DO NOT CREATE CODE WITH OPCODES BELOW!!!!
	//opcodes below are backend specific

	//BACKEND interpreter
	//Optimizations
	"load_element_opt_class_const"

	//BACKEND llvm ir
	"llvm_store", // var1^ = var2
	"llvm_load",
	"llvm_getelementptr",
	"llvm_getelementptr0"
	//"llvm_copy_const" // var1 alias to var2
}

MCJumpIfConditions := enum extend u16
{
	"==",
	"!=",
	">=",
	">",
	"<=",
	"<",

	"<=>"
}
