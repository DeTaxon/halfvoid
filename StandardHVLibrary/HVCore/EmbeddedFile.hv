vEmbeddedFile := class extend vRepoFile //TODO, extend IFile, not an already made object
{
	itData := void^
	compressedSize := int
	isCompressed := bool
	uncompressedBlob := Blob^
	this := !(void^ inData, int inpSize,int compSize,bool isComp,char^ itName) -> void
	{
		itData = inData
		fileSize = inpSize
		objName = new String(itName)

		isCompressed = isComp
		compressedSize = compSize
	}
	GetMap := virtual !() -> FileView^
	{
		if isCompressed
		{
			uncompressedBlob = new BlobOnVector(fileSize)
			CrappyDeflateInflate(itData,compressedSize,uncompressedBlob.GetPointer(),fileSize)
			return new ZipFSFileViewRaw(uncompressedBlob.GetPointer()->{u8^},fileSize)
		}
		return new ZipFSFileViewRaw(itData->{u8^},fileSize)
	}
	IsVirtual := virtual !() -> bool 
	{
		return true
	}
}


internalGetEmbeddedFile := !(void^ data, int fileSize,int compressedSize,bool isCompressed, char^ fileName) -> vEmbeddedFile^
{
	//TODO use filePath
	//todo compressed version
	return new vEmbeddedFile(data,fileSize,compressedSize,isCompressed,fileName)
}
internalGetEmbeddedFile := !(void^ data, int fileSize,bool isCompressed, char^ fileName) -> vEmbeddedFile^
{
	//TODO use filePath
	//todo compressed version
	return new vEmbeddedFile(data,fileSize,fileSize,false,fileName)
}
