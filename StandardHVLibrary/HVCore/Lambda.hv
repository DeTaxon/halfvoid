TILambda := class extend TGCObject
{
	IsFinished := virtual !() -> bool
	{
		return false
	}

	getCaptureVar := virtual !() -> void^ { return null }
	getYieldState := virtual !() -> ref int { assert(false) }
	getYieldVars := virtual !() -> void^ { return null }
	getGCVars := virtual !() -> void^ { return null }
}

TLambda := class .{@FuncPtr} extend TILambda
{
	callFunc := FuncPtr
	//"()" := !(args...)
	//{
	//	return this.callFunc(this&,argc...)
	//}
	Capture := virtual !() -> TLambda.{FuncPtr}^
	{
		return null
	}
}
TLambdaImp := class .{@FuncPtr,@CaptureTuple,@YieldTuple} extend TLambda.{FuncPtr}
{
	capturedVars := CaptureTuple
	yieldState := int
	lambdaVars := YieldTuple

	IsFinished := virtual !() -> bool { return yieldState < 0 }
	getCaptureVar := virtual !() -> void^ {  result = capturedVars& }
	getYieldState := virtual !() -> ref int { return yieldState }
	getYieldVars := virtual !() -> void^ { return lambdaVars& }

	Capture := virtual !() -> TLambda.{FuncPtr}^
	{
		newLambda := new TLambdaImp.{FuncPtr,CaptureTuple,YieldTuple}
		newLambda.callFunc = callFunc

		for setField : newLambda.capturedVars->AllFields , getField : this.capturedVars->AllFields
		{
			if getField->TypeGroup == "Class"
			{
				//assert(false) //TODO , check for operator = not implemented
			}else{
				if getField->TypeGroup == "Array"
				{
				}else{
					setField = getField
				}
			}
		}

		for setField : newLambda.lambdaVars->AllFields , getField : this.lambdaVars->AllFields
		{
			if getField->TypeGroup == "Class"
			{
				//assert(false) //TODO , check for operator = not implemented
			}else{
				if getField->TypeGroup == "Array"
				{

				}else{
					setField = getField
				}
			}
		}

		return newLambda
	}
	Destroy := virtual !() -> void
	{
		internalGCClearClass(capturedVars)
		internalGCClearClass(lambdaVars)
	}
}

internalHVLambdaCall := !(@T lmb,args...) -> void // return type replaced by compiler on result type of @FuncType
{
	return lmb.callFunc(lmb&,args...)
}
internalHVLambdaGetCaptures := !(void^ lmbd)-> void^
{
	result = lmbd->{TILambda^}.getCaptureVar()
}
internalHVLambdaGetYieldState := !(void^ lmbd) -> ref int
{
	return lmbd->{TILambda^}.getYieldState()
}

internalHVLambdaGetYieldTuple := !(void^ lmbd) .{@LambdaVarsTuple} -> LambdaVarsTuple^
{
	return lmbd->{TILambda^}.getYieldVars()->{LambdaVarsTuple^}
}


internalHVCreateLambda := !(@FuncPtr fnc).{@CaptureTuple,@YieldVars} -> TLambdaImp.{FuncPtr,CaptureTuple,YieldVars}
{
	result.callFunc = fnc
}
