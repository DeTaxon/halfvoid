CacheModule := class
{
	base := CacheFile^
	moduleName := Str

	cacheChangedBlobData := bool
	cacheBlobList  := List.{BlobCacheData} //TODO Optimize
	this := !(Str nm, CacheFile^ bs) -> void
	{
		base = bs
		moduleName = nm

		LoadMeta()
	}

	getCacheKey := !(Str st, File^[] files) -> Str
	{
		allKey := TEchoStream

		allKey << st
		for it : files
		{
			allKey << it.GetPath()
		}
		resKey := allKey.GetStr()
		result->AsString = Base64Encode(resKey.Str(),resKey.Size())
	}
	TryGetCacheValue := !(Str st, File^[] files) -> Blob^
	{
		base64Key := getCacheKey(st,files)
		for it : cacheBlobList
		{
			if it.key == base64Key
			{
				if not it.loaded
				{
					if it.filesCache != getFilesCache(files)
						return null
					fil := base.zipFile.GetFile(it.fileName)
					if fil == null
						return null
					it.value = fil.GetBlob()
					it.loaded = true
				}
				return it.value
			}
		}
		return null
	}
	WriteCacheOfFile := !(Str st, File^[] files,Blob^ data) -> void
	{
		base64Key := getCacheKey(st,files)

		for it : cacheBlobList
		{
			if it.key == base64Key
			{
				it.filesCache = getFilesCache(files)
				base.zipFile.WriteFile(it.fileName,data)
				return void
			}
		}

		fileSetName := new String(base64Key.Str(),base64Key.Size())
		for i : fileSetName.Size()
		{
			if fileSetName.charPtr[i] == '='
				fileSetName.charPtr[i] = '0'

		}
		cacheBlobList.Emplace()
		newEntry := ref cacheBlobList[-1]
		itPath := StrConcat(moduleName,"/",fileSetName)
		newEntry.key = base64Key
		newEntry.fileName = itPath
		newEntry.filesCache = getFilesCache(files)

		base.zipFile.WriteFile(itPath,data)
	}
	getFilesCache := !(File^[] fl) -> Str
	{
		if fl == null or fl.Size() == 0
			return new String("empty")

		maxTime := 0
		for it : fl
		{
			maxTime = max(maxTime,it.GetModificationTime())
		}

		return StrConcat(maxTime)
	}
	LoadMeta := !() -> void
	{
		blobCacheMeta := base.zipFile.GetFile(StrConcat(moduleName,"/BlobCache.txt"))
		if blobCacheMeta != null
		{
			mp := blobCacheMeta.GetMap()

			spn := StringSpan(mp.Get()->{char^},mp.Size())

			spn.DivideStr("\n", x ==> {
				while true
				{
					val := x
					yield void
					filesData := x
					yield void
					cacheBlobList.Emplace()
					newEntry := ref cacheBlobList[-1]
					newEntry.key->AsString = val.GetString()
					newEntry.fileName->AsString = x.GetString()
					newEntry.filesCache->AsString = filesData.GetString()
					yield void
				}
			})
		}
	}
	Flush := !() -> void
	{
		if cacheChangedBlobData
		{
			assert(cacheBlobList.Size() != 0)

			MetaCache := TEchoStream
			for it : cacheBlobList
			{
				if it.changed
				{
					base.zipFile.WriteFile(StringConcat(moduleName,"/",it.fileName),it.value)
				}
				MetaCache << it.key << "\n" << it.filesCache << "\n" << it.fileName << "\n"
			}

			tempBlob := MakeBlob(MetaCache.Size())
			MetaCache.Read(tempBlob.GetPointer(),tempBlob.Size())
			
			base.zipFile.WriteFile(StringConcat(moduleName,"/BlobCache.txt"),tempBlob)
		}
	}
	GetCachedValue := !(Str stv, File^[] files, !()&->Blob^ cb) -> Blob^
	{
		inDB := TryGetCacheValue(stv,files)
		if inDB != null
			return inDB
		result = cb()
		if result == null
			return null
		cacheChangedBlobData = true
		WriteCacheOfFile(stv,files,result)
		Flush()
	}

}
