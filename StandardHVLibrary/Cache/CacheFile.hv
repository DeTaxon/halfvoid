CacheFile := class extend TGCObject
{
	zipFile := ZipFile^

	this := !(Str fName) -> void
	{
		zipFile = new ZipFile()
		zipFile.AnalizeFile(fName)
	}

	Flush := !() -> void
	{
		for it : stringModules
		{
			it->{CacheStringModule^}.Flush()
		}
		zipFile.Flush()
	}

	GetFileModule := !(StringView name) -> CacheFileModule^
	{
		return new CacheFileModule(name.GetString(),this&)
	}

	stringModules := AVLMap.{Str,void^} //TODO way to make weak references
	GetStringModule := !(Str name) -> CacheStringModule^
	{
		if stringModules.Contain(name)
			return stringModules[name]->{CacheStringModule^}

		result = new CacheStringModule(name,this&)
		stringModules[name] = result
	}

	GetModule := !(StringView name) -> CacheModule^
	{
		return new CacheModule(name,this&)
	}
	Destroy := virtual !() -> void
	{
		Flush()
	}
}

