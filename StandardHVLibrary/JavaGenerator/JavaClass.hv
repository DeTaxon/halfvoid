
JavaClass := class extend TGCObject
{
	Consts := List.{JavaConstBase^}
	Methods := List.{JavaMethod^}
	
	this := !(Str className) -> void
	{
		Consts.Push(new JavaConstClassInfo(2))
		Consts.Push(new JavaConstUtf8(className))
	}
	
	Write := !(Stream strm) -> void
	{
		//FILE IS BIG ENDIAN
		magic := u32
		//magic = 0xCAFEBABE
		magic = 0xBEBAFECA
		strm.Write(magic&,4)
		
		val16 := u16
		val16 = 0 //minor
		strm.Write(val16&,2)
		val16 = ToBigEndian(66) // major
		strm.Write(val16&,2)

		val16 = ToBigEndian((Consts.Size() + 1)->{u32}->{u16})
		strm.Write(val16&,2) //consts count
		for it : Consts
		{
			it.Write(strm)
		}

		val16 = ToBigEndian(1->{u16})
		strm.Write(val16&,2) //access flag

		val16 = ToBigEndian(1->{u16})
		strm.Write(val16&,2) //this class

		val16 = 0
		strm.Write(val16&,2) //super class

		val16 = 0
		strm.Write(val16&,2) //interface count

		val16 = 0
		strm.Write(val16&,2) //fields count

		val16 = ToBigEndian(Methods.Size())
		strm.Write(val16&,2) //methods count
		for it : Methods
		{
			it.Write(strm)
		}

		val16 = 0
		strm.Write(val16&,2) //attributes count
	}

	CreateString := !(Str strData) -> u16
	{
		result = Consts.Size()
		Consts.Push(new JavaConstUtf8(strData))
	}

	CreateMethod := !(Str name, bool isStatic = true) -> JavaMethod^
	{
		result = new JavaMethod

		result.NameIndex = CreateString(name)
		result.DescriptionIndex = CreateString("([Ljava/lang/String;)V")

		cd := CreateString("Code")

		result.CreateCode(cd)

		Methods.Push(result)
	}

}
