UnitStack := task_local List.{BoxUnit^}
CurrentCodeSpace := task_local BoxCodeSpace^
CurrentFile := task_local BoxFile^
CurrentScope := task_local BoxUnit^
CurrentFunc := task_local BoxFuncBody^
CurrentLine := task_local BoxExeLine^
CurrentReturns := task_local ReturnsHolder^
FuncStack := task_local List.{BoxFuncBody^}

HVOperators := AVLSet.{StringSpan}

DebugMode := bool
ErrorState := bool

GParsedAllFiles := THatch

GCVarsInUse := task_local int

GDebugFileId := task_local int
GDebugFuncId := task_local int
GDebugScopeId := task_local int
GDebugLineCallId := task_local int

SubWork := !(!()&->void x) -> void
{
	subLambda := x.Capture()
	
	nowState := new StackState
	nowState.Save()

	TSpawnTask(() ==> [nowState,subLambda] {

		assert(nowState != null)

		nowState.Load()
		delete nowState

		subLambda()
	})
}

StackState := class
{
	itFile := BoxFile^
	itCodeSpace := BoxCodeSpace^
	itScope := BoxUnit^
	itFunc := BoxFuncBody^
	itLine := BoxExeLine^
	itReturns := ReturnsHolder^

	gcVarsInUse := int

	itStack := HybridQueue.{BoxUnit^,20}
	itFuncStack := HybridQueue.{BoxFuncBody^,10}

	Save := !() -> void
	{
		itFile = CurrentFile
		itCodeSpace = CurrentCodeSpace
		itScope = CurrentScope
		itFunc = CurrentFunc
		itLine = CurrentLine
		itReturns = CurrentReturns

		gcVarsInUse = GCVarsInUse

		for it : UnitStack
			itStack.Push(it)
		for it : FuncStack
			itFuncStack.Push(it)
	}
	Load := !() -> void
	{
		CurrentFile = itFile
		CurrentCodeSpace = itCodeSpace
		CurrentScope = itScope
		CurrentFunc = itFunc
		CurrentLine = itLine
		CurrentReturns = itReturns

		GCVarsInUse = gcVarsInUse

		UnitStack.Destroy()
		for it : itStack
			UnitStack.Push(it)

		FuncStack.Destroy()
		for it : itFuncStack
			FuncStack.Push(it)
	}
}

