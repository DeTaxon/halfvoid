
CreateBuiltinsPoint := !() -> void
{
	bSpace := CodeSpaces[-1]&

	GPointStoreTemplate = new PointStoreTemplate()
	bSpace.Templates[StringSpan("=")].Push(GPointStoreTemplate)

	bSpace.Templates[StringSpan("[]")].Push(new PointArrayGetTemplate())


	x := GTypeVoidP
	cmpType := GetFuncType(![x,x],GTypeBool)
	bSpace.Functions[StringSpan("==")].Push(new BuiltInIntBase(cmpType,"icmp eq") )
	bSpace.Functions[StringSpan("!=")].Push(new BuiltInIntBase(cmpType,"icmp ne") )


	bSpace.Functions[StringSpan("<=>")].Push(new BuiltInPointSpaceship() )
}

BuiltInPointSpaceship := class extend BoxFuncCommon
{
	this := !() -> void
	{
		SetType(GetFuncType(![GTypeVoidP,GTypeVoidP],GTypeS64)) //TODO arch 
	}
	PrintFuncCall := virtual !(TIOStream^ f,int resId,int debId,ExeDownList lst) -> void
	{
		lst[^].PrintPre(f)

		f^ << "%TA" << resId << " = ptrtoint i8* "
		lst[0].PrintUse(f)
		f^ << " to i64\n"

		f^ << "%TB" << resId << " = ptrtoint i8* "
		lst[1].PrintUse(f)
		f^ << " to i64\n"

		f^ << "%T" << resId << " = sub i64 %TA" << resId << " , %TB" << resId
		if DebugMode
			f^ << " , !dbg !" << GDebugLineCallId
		f^ << "\n"
	}
}

PointStoreTemplate := class extend BoxFuncTemplate
{
	this := !() -> void
	{
	}
	ToFuncType := virtual !(CheckExeDownList objs, List.{BoxExeConstObj^} consts) -> TypeFunc^
	{
		if objs.Size() != 2
			return null
		if not objs[0].IsMem()
			return null
		a := objs[0].GetType()
		if a is in TypePoint
		{
			return GetFuncType(2,![a,a],![true,false],GTypeVoid,false,false)
		}
		return null
	}
	CreateFunc := virtual !(TypeFunc^ tp, List.{BoxExeConstObj^} consts) -> BoxFunc^
	{
		return new BuiltInPrimeStore(tp)
	}
}
GPointStoreTemplate := PointStoreTemplate^

PointArrayGetTemplate := class extend BoxFuncTemplate
{
	this := !() -> void
	{
	}
	ToFuncType := virtual !(CheckExeDownList objs, List.{BoxExeConstObj^} consts) -> TypeFunc^
	{
		if objs.Size() != 2
			return null
		a := objs[0].GetType()
		if a is in TypePoint or a is TypeArr
		{
			a2 := a.Base.GetPoint()
			if a is in TypePoint and a.Base is TypeClass
			{
				if a.Base->{TypeClass^}.ToClass.IsViewType()
				{
					return null
				}
			}
			return GetFuncType(2,![a2,GTypeInt],null,a.Base,true,false)
		}
		return null
	}
	CreateFunc := virtual !(TypeFunc^ tp, List.{BoxExeConstObj^} consts) -> BoxFunc^
	{
		return new BuiltInPointGetItem(tp)
	}
}

BuiltInPointGetItem := class extend BoxFuncCommon
{
	this := !(TypeFunc^ iType) -> void
	{
		SetType(iType)
	}
	PrintFuncCall := virtual !(TIOStream^ f,int resId,int debId,ExeDownList lst) -> void
	{
		lst[^].PrintPre(f)
		
		tFunc := GetType()->{TypeFunc^}
		tp := tFunc.Params[0].ItType
		bs := Type^
		if tp == GTypeVoidP
		{
			bs = GTypeChar
		}else{
			bs = tp.Base
		}

		f^ << "%T" << resId << " = getelementptr " 
		bs.PrintType(f)
		f^ << " , "
		tp.PrintType(f)
		f^ << " "
		lst[0].PrintUse(f)
		f^ << " ,  "
		lst[1].GetType().PrintType(f)
		f^ << " "
		lst[1].PrintUse(f)
		if DebugMode
			f^ << " , !dbg !" << GDebugLineCallId
		f^ << "\n"
	}
}

