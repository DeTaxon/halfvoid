TryEmbedFile := !(Token^ itm) -> BoxExeObj^
{
	if itm.Down.Right == null or itm.Down.Right.GetValue() != "()"
	{
		itm.EmitError("usage #File(name)")
	}
	skb := itm.Down.Right
	if skb.Down == null or not (skb.Down is TokenString)
	{
		itm.EmitError("usage #File(name)")
	}
	 
	fileName := skb.Down->{TokenString^}.Value

	itFile := gRepo.GetFile(fileName.Str()) //todo exceptions?

	if itFile == null
		itm.EmitError("File not found")
	

	emb := EmbFile^
	if not embeddedFiles.Contain(itFile)
	{
		emb = new EmbFile(itFile)
		embeddedFiles[itFile] = emb
	}else{
		emb = embeddedFiles[itFile]
	}

	objs := CheckExeDownList
	objs.Push(emb.data)
	objs.Push(GetExeInt(emb.GetSize()))
	objs.Push(GBoolFalse)
	objs.Push(GetExeString(fileName))

	cnsts := List.{BoxExeConstObj^}

	return CreateFuncCall(StringSpan("internalGetEmbeddedFile"),objs,cnsts)
}



embeddedFiles := AVLMap.{vRepoFile^,EmbFile^} 

BoxRawData := class extend BoxExeObj
{
	Value := u8^
	ValueSize := int

	ItId := int

	this := !(u8^ data, int siz) -> void
	{
		ItId = GetNewId()

		Value = data
		ValueSize = siz

		ObjType = GTypeVoidP

		ValueSize = siz
		if siz != 0
		{
			Value = malloc(siz)
			memcpy(Value,data,siz)
		}
	}
	PrintGlobal := virtual !(TIOStream^ f) -> void
	{
		f^ << "@File" << ItId << " = global [" << ValueSize << " x i8] ["
		for i : ValueSize
		{
			if i != 0
				f^ << ","
			f^ << "i8 " << Value[i]
		}
		f^ << "]\n"
	}
	PrintPre := virtual !(TIOStream^ f) -> void
	{
	}
	PrintUse := virtual !(TIOStream^ f) -> void
	{
		f^ << "getelementptr inbounds ([" << ValueSize << " x i8] , [ " << ValueSize << " x i8]* @File" << ItId <<" , i32 0, i32 0)"
	}

	GetSize := !() -> int
	{
		return ValueSize
	}

}

EmbFile := class
{
	itFile := vRepoFile^
	data := BoxRawData^

	this := !(vRepoFile^ inFile) -> void
	{
		itFile = inFile

		mp := inFile.Map()
		data = new BoxRawData(mp,inFile.Size())
	}
	GetSize := !() -> int 
	{
		return data.GetSize()
	}
	PrintGlobal := !(TIOStream^ f) -> void
	{
		data.PrintGlobal(f)
	}
}

PrintEmbeddedFiles := !(TIOStream^ f) -> void
{
	for it : embeddedFiles
	{
		it.PrintGlobal(f)
	}
}
