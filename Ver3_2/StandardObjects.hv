


// ObjResult := class
// {
// 	ResultType := Type^
// 	GetType := virtual !() -> Type^
// 	{
// 		return ResultType
// 	}
// 	PrintGlobal := virtual !(Stream f) -> void
// 	{
// 	}
// }

// ObjConst := class extend ObjResult
// {
// 	IsConst := virtual true
// 	DoTheWork := virtual !(int pri) -> void
// 	{
// 		//noting is ok
// 	}
// }

// ObjHolder := class extend Object
// {
// 	ItName := string
// 	this := !(string name,Object^ ob) -> void
// 	{
// 		ItName = name
// 		Down = ob
// 	}
// 	GetValue := virtual !() -> string
// 	{
// 		return "{object}"
// 	}
// }

// ObjConstHolder := class extend Object
// {
// 	ItName := string

// 	this := !(string name,Object^ cons) -> void
// 	{
// 		ItName = name
// 		Down = cons.Clone()
// 		Down.Up = Down
// 	}

// 	GetValue := virtual !() -> string
// 	{
// 		return "{const}"
// 	}
// }

// ObjPointer := class extend ObjConst
// {
// 	pointerValue := void^
// 	"this" := !(void^ val, Type^ pType) -> void
// 	{
// 		pointerValue = val
// 		ResultType = pType
// 	}
// 	GetValue := virtual !() -> char^
// 	{
// 		return "~pointer"
// 	}
// 	Print := virtual !(int s) -> void
// 	{
// 		for s printf("->")
// 		printf("%x\n",pointerValue)
// 	}
// 	PrintUse := virtual !(Stream f) -> void
// 	{
// 		buf := char[256]
// 		typName := ResultType.GetName()
// 		sprintf(buf[0]&,"%s inttoptr(i64 %llu to %s)",typName,pointerValue,typName)
// 		f << buf[0]&
// 	}
// 	GetName := virtual !() -> string
// 	{
// 		buf := char[256]
// 		sprintf(buf[0]&,"inttoptr (i64 %llu to %s)",pointerValue,ResultType.GetName())
// 		return @temp StrCopy(buf[0]&)
// 	}
// 	Clone := virtual !() -> Object^
// 	{
// 		PreRet := new ObjPointer(pointerValue,ResultType)
// 		PreRet.Line = Line
// 		return PreRet
// 	}
// 	IsDataR := virtual true
// 	IsBlockData := virtual true
// }
// ObjFuncPointer := class extend ObjConst
// {
// 	fncCall := BoxFunc^
// 	"this" := !(BoxFunc^ fnc) -> void
// 	{
// 		fncCall = fnc
// 		ResultType = fnc.MyFuncType.GetPoint()
// 	}
// 	GetValue := virtual !() -> char^
// 	{
// 		return "~func_pointer"
// 	}
// 	GetName := virtual !() -> char^ 
// 	{
// 		return "@"sbt + fncCall.OutputName
// 	}
// 	PrintUse := virtual !(Stream f) -> void
// 	{
// 		f << ResultType.GetName() << " "
// 		f << "@" << fncCall.OutputName
// 	}
// 	Clone := virtual !() -> Object^
// 	{
// 		PreRet := new ObjFuncPointer(fncCall)
// 		PreRet.Line = Line
// 		return PreRet
// 	}
// }
// ObjNULL := class extend ObjConst
// {
// 	"this" := !() -> void
// 	{
// 		ResultType = VoidPType 
// 	}
// 	GetValue := virtual !() -> char^
// 	{
// 		return "~null"
// 	}
// 	Print := virtual !(int s) -> void
// 	{
// 		for s printf("->")
// 		printf("null\n")
// 	}
// 	PrintUse := virtual !(Stream f) -> void
// 	{
// 		f << "i8* null"
// 	}
// 	GetName := virtual !() -> string
// 	{
// 		return "null"
// 	}
// 	Clone := virtual !() -> Object^
// 	{
// 		PreRet := new ObjNULL()
// 		PreRet.Line = Line
// 		return PreRet
// 	}
// 	IsDataR := virtual true
// 	IsBlockData := virtual true
// }
// ObjInt := class extend ObjConst
// {
// 	MyInt := s32
// 	"this" := !(int Value) -> void
// 	{
// 		MyInt = Value
// 		ResultType = GetType("int")
// 	}
// 	GetValue := virtual !() -> char^
// 	{
// 		return "~int"
// 	}
// 	Print := virtual !(int s) -> void
// 	{
// 		for s printf("->")
// 		printf("int %i\n",MyInt)
// 	}
// 	PrintUse := virtual !(Stream f) -> void
// 	{
// 		ResultType.PrintType(f)
// 		f << " " << MyInt
// 	}
// 	GetName := virtual !() -> string
// 	{
// 		buf := char[256]
// 		sprintf(buf,"%i",MyInt)
// 		return buf.Copy()
// 	}
// 	Clone := virtual !() -> Object^
// 	{
// 		PreRet := new ObjInt(MyInt)
// 		PreRet.Line = Line
// 		return PreRet
// 	}
// 	IsDataR := virtual true
// 	IsBlockData := virtual true
// }
// ObjBool := class extend ObjConst
// {
// 	MyBool := bool
// 	this := !(bool Value) -> void
// 	{
// 		MyBool = Value
// 		ResultType = GetType("bool")
// 	}
// 	GetValue := virtual !() -> char^
// 	{
// 		return "~bool"
// 	}
// 	Print := virtual !(int s) -> void
// 	{
// 		for s printf("->")
// 		printf("bool %i\n",MyBool)
// 	}
// 	PrintUse := virtual !(Stream f) -> void
// 	{
// 		ResultType.PrintType(f)
// 		f << " "
// 		if MyBool f << "1" else f << "0"
// 	}
// 	GetName := virtual !() -> string
// 	{
// 		if MyBool return "1"
// 		return "0"
// 	}
// 	Clone := virtual !() -> Object^
// 	{
// 		PreRet := new ObjBool(MyBool)
// 		PreRet.Line = Line
// 		return PreRet
// 	}
// 	IsDataR := virtual true
// 	IsBlockData := virtual true
// }
// ObjDouble := class extend ObjConst
// {
// 	MyDouble := double
// 	"this" := !(double Value) -> void
// 	{
// 		MyDouble = Value
// 		ResultType = GTypeDouble
// 	}
// 	GetValue := virtual !() -> char^
// 	{
// 		return "~double"
// 	}
// 	Print := virtual !(int s) -> void
// 	{
// 		for s printf("->")
// 		printf("double %f\n",MyDouble)
// 	}
// 	PrintUse := virtual !(Stream f) -> void
// 	{
// 		ResultType.PrintType(f)
// 		f << " " << GetName()
// 	}
// 	GetType := virtual !() -> Type^
// 	{
// 		return ResultType
// 	}
// 	GetName := virtual !() -> string
// 	{
// 		if ResultType == GTypeFloat
// 		{
// 			preRes := "0x"sbt
// 			asF := MyDouble
// 			asI := asF&->{u8^}
// 			sts := "0123456789ABCDEF"
// 			for i : 4
// 			{
// 				itI := asI[7-i]
// 				v := (itI >> 4) and_b 0x0F
// 				preRes << sts[v..1]
// 				v := itI  and_b 0x0F
// 				preRes << sts[v..1]
// 			}
// 			itI := asI[3] and_b 0xC0
// 			v := (itI >> 4) and_b 0x0F
// 			preRes << sts[v..1]
// 			v := itI  and_b 0x0F
// 			preRes << sts[v..1]

// 			preRes << "000000"
// 			return preRes.Str()
// 		}
// 		buf := char[256]
// 		sprintf(buf,"%f",MyDouble)
// 		return buf.Copy()
// 	}
// 	Clone := virtual !() -> Object^
// 	{
// 		PreRet := new ObjDouble(MyDouble)
// 		PreRet.MyDouble = MyDouble
// 		PreRet.Line = Line
// 		return PreRet
// 	}
// 	IsDataR := virtual true
// 	IsBlockData := virtual true
// }

// ObjRangeI := class extend ObjConst
// {
// 	beginR,endR := int
// 	this := !(int a, int b) -> void
// 	{
// 		beginR = a
// 		endR = b
// 		ResultType = GTypeRange
// 	}
// 	GetValue := virtual !() -> char^
// 	{
// 		return "~a..b"
// 	}
// 	Print := virtual !(int s) -> void
// 	{
// 		for s printf("->")
// 		printf("range %i..%i\n",beginR,endR)
// 	}
// 	PrintUse := virtual !(Stream f) -> void
// 	{
// 		f << " @RangeTypeInt {i32 " << beginR << " , i32 " << endR << " }"
// 	}
// 	GetName := virtual !() -> string
// 	{
// 		buf := char[256]
// 		sprintf(buf," @RangeTypeInt {i32 %i, i32 %i}",beginR,endR)
// 		return buf.Copy()
// 	}
// 	Clone := virtual !() -> Object^
// 	{
// 		PreRet := new ObjRangeI(beginR,endR)
// 		PreRet.Line = Line
// 		return PreRet
// 	}
// }

// ObjStr := class extend ObjConst
// {
// 	MyStrId := int
// 	justStr := string
// 	MyTmpId := int
// 	this := !(char^ str) -> void
// 	{
// 		MyTmpId = GetNewId()
// 		justStr = str
// 		ResultType = GTypeString
// 		MyStrId = StrContainer.GetStringValue(str)
// 	}
// 	this := !(int SId,char^ str) -> void
// 	{
// 		MyStrId = SId
// 		MyTmpId = GetNewId()
// 		ResultType = GTypeString
// 		justStr = str
// 	}
// 	DeSize := !() -> void
// 	{
// 		ResultType = GTypeString
// 	}
// 	GetString := virtual !() -> string
// 	{
// 		return justStr
// 	}
// 	GetValue := virtual !() -> char^
// 	{
// 		return "~str"
// 	}
// 	Print := virtual !(int s) -> void
// 	{
// 		for s printf("->")
// 		printf("string %s\n",StrContainer.GetString(MyStrId))
// 	}
// 	PrintPointPre := virtual !(Stream f) -> void
// 	{
// 		StrSi := StrSize(justStr)
// 		f << "%T" << MyTmpId <<" = bitcast [" << StrSi + 1<< " x i8]* @Str" << MyStrId <<" to [" << StrSi << "x i8]* \n" 
// 	}
// 	PrintPre := virtual !(Stream f) -> void
// 	{
// 		StrSi := StrSize(justStr) + 1
// 		f << "%T" << MyTmpId <<" = getelementptr ["<< StrSi << " x i8] , [" << StrSi << " x i8]* @Str" << MyStrId <<", i32 0,i32 0\n" 
// 	}
// 	GetConstInline := !() -> char^
// 	{
// 		StrSi := StrSize(justStr) + 1
// 		asStr := "getelementptr inbounds (["sbt + StrSi + " x i8] , [" + StrSi + " x i8]* @Str" + MyStrId + ", i32 0, i32 0)"
// 		return @temp asStr.Str()
// 	}
// 	PrintPointUse := virtual !(Stream f) -> void
// 	{
// 		ResultType.PrintType(f)
// 		f << "* %T" << MyTmpId	
// 	}
// 	PrintUse := virtual !(Stream f) -> void
// 	{
// 		//ResultType.PrintType(f)
// 		f << "i8* %T" << MyTmpId	
// 	}
// 	GetPointName := virtual !() -> string
// 	{
// 		return "%T"sbt + MyTmpId
// 	}
// 	GetName := virtual !() -> string
// 	{
// 		return "%T"sbt + MyTmpId
// 	}
// 	Clone := virtual !() -> Object^
// 	{
// 		PreRet := new ObjStr(MyStrId,justStr)
// 		PreRet.Line = Line
// 		return PreRet
// 	}
// 	IsDataR := virtual true
// 	IsBlockData := virtual true
// }

// ObjSymbol := class extend ObjConst
// {
// 	MySymbol := char^
// 	TokenId := int
// 	"this" := !(char^ sym) -> void
// 	{
// 		MySymbol = sym
// 		TokenId = 0
// 	}
// 	"this" := !(char^ sym,int newId) -> void
// 	{
// 		MySymbol = sym
// 		TokenId = newId
// 	}
// 	GetValue := virtual !() -> char^
// 	{
// 		return MySymbol
// 	}
// 	Print := virtual !(int s) -> void
// 	{
// 		for s printf("->")
// 		printf("symbol %s\n",MySymbol)
// 	}
// 	Clone := virtual !() -> Object^
// 	{
// 		PreRet := new ObjSymbol(MySymbol,TokenId)
// 		PreRet.Line = Line
// 		return PreRet
// 	}
// 	GetTokenId := virtual !() -> int
// 	{
// 		return TokenId
// 	}
// }
// ObjArray := class extend ObjConst
// {
// 	itType := TypeArr^
// 	Items := Object^^
// 	MyTmpId := int

// 	this := !(TypeArr^ ToUs,Object^^ ims) -> void
// 	{
// 		MyTmpId = GetNewId()
// 		itType = ToUs
// 		Items = ims
// 		ResultType = ToUs
// 	}		
	

// 	PrintGlobal := virtual !(Stream f) -> void
// 	{
// 		asBase := itType->{Type^}
// 		arrItm := asBase.Base
// 		for itType.Size Items[it].PrintGlobal(f)
// 		f << "@Arr" << MyTmpId << " = global " << asBase.GetName() << " ["
// 		for i : itType.Size 
// 		{
// 			if i > 0 f << " , "
// 			itm := Items[i]
// 			if arrItm == GTypeDouble and itm is ObjInt
// 			{
// 				asInt := itm->{ObjInt^}.MyInt
// 				f << arrItm.GetName() << " " << asInt << ".0"
// 			}else if arrItm == GTypeDouble and itm.GetType() == GTypeFloat and itm is ObjDouble{
// 				asFlt := itm->{ObjDouble^}.MyDouble
// 				f << arrItm.GetName() << " " << asFlt
// 			}else if arrItm == GTypeString {
// 				asStr := itm->{ObjStr^}
// 				f << arrItm.GetName() << " " << asStr.GetConstInline()
// 			}else{
// 				f << arrItm.GetName() << " " << itm.GetName()
// 			}
// 		}
// 		f << "]\n"
// 	}
// 	PrintPre := virtual !(Stream f) -> void
// 	{
// 		f << "%ArrTmp" << MyTmpId << " = load "
// 		ResultType.PrintType(f)
// 		f << " , "
// 		ResultType.PrintType(f)
// 		f << "* @Arr" << MyTmpId << "\n"
// 	}
// 	PrintUse := virtual !(Stream f) -> void
// 	{
// 		ResultType.PrintType(f)
// 		f << " %ArrTmp"	<< MyTmpId
// 	}
// 	PrintPointUse := virtual !(Stream f) -> void
// 	{
// 		ResultType.PrintType(f)
// 		f << "* @Arr" << MyTmpId
// 	}
// 	GetPointName := virtual !() -> string
// 	{
// 		return "@Arr"sbt + MyTmpId
// 	}
// 	GetName := virtual !() -> string
// 	{
// 		preRet := "["sbt
// 		for i : itType.Size
// 		{
// 			if i > 0 preRet << " , "
// 			if Items[i] is ObjStr
// 			{
// 				preRet << "i8* "
// 				preRet << Items[i]->{ObjStr^}.GetConstInline()
// 			}else{
// 				preRet << Items[i].GetType().GetName() << " " << Items[i].GetName()
// 			}
// 		}
// 		preRet << "]"
// 		return @temp preRet.Str()
// 	}
// 	GetValue := virtual !() -> string
// 	{
// 		return "~![]"
// 	}
// 	Clone := virtual !() -> Object^
// 	{
// 		itItems := new Object^[itType.Size]
// 		for i : itType.Size itItems[i] = Items[i].Clone()
// 		PreRet := new ObjArray(itType,itItems)
// 		PreRet.Line = Line
// 		return PreRet
// 	}
// }


// ObjType := class extend ObjConst
// {
// 	MyType := Type^
// 	this := !(Type^ st) -> void
// 	{
// 		MyType = st
// 	}
// 	GetValue := virtual !() -> char^
// 	{
// 		return "~type"
// 	}
// 	GetConstValue := virtual !() -> char^
// 	{
// 		if MyType != null
// 		{
// 			return MyType.GetGoodName()
// 		}
// 		return "bad type"
// 	}
// 	Print := virtual !(int s) -> void
// 	{
// 		for s printf("->")
// 		printf("type %p\n",MyType)
// 	}
// 	Clone := virtual !() -> Object^
// 	{
// 		PreRet := new ObjType(MyType)
// 		PreRet.Line = Line
// 		return PreRet
// 	}
// 	IsDataR := virtual true
// 	IsBlockData := virtual true
// }
// ObjClassTemplatePointer := class extend ObjConst
// {
// 	this := !(Object^ st) -> void
// 	{
// 		assert(st is BoxClassTemplate)
// 		Down = st
// 	}
// 	GetValue := virtual !() -> char^
// 	{
// 		return "~type.{}"
// 	}
// 	Clone := virtual !() -> Object^
// 	{
// 		PreRet := new ObjClassTemplatePointer(Down)
// 		PreRet.Line = Line
// 		return PreRet
// 	}
// }
// ObjCmd := class extend ObjConst
// {
// 	MyStr := char^
// 	"this" := !(char^ st) -> void
// 	{
// 		MyStr = st
// 	}
// 	GetValue := virtual !() -> char^
// 	{
// 		return "~cmd"
// 	}
// 	Print := virtual !(int s) -> void
// 	{
// 		for s printf("->")
// 		printf("cmd %s\n",MyStr)
// 	}
// 	DoTheWork := virtual !(int pri) -> void
// 	{
// 	}
// 	Clone := virtual !() -> Object^
// 	{
// 		PreRet := new ObjCmd(MyStr)
// 		PreRet.Line = Line
// 		return PreRet
// 	}
// 	IsDataR := virtual true
// 	IsBlockData := virtual true
// }
// ObjTemplateType := class extend Object
// {
// 	MyStr := char^
// 	this := !(char^ st) -> void
// 	{
// 		MyStr = st
// 	}
// 	this := !() -> void
// 	{
// 	}
// 	GetValue := virtual !() -> char^
// 	{
// 		return "~{}type"
// 	}
// 	Print := virtual !(int s) -> void
// 	{
// 		for s printf("->")
// 		printf("template type %s\n",MyStr)
// 	}
// 	Clone := virtual !() -> Object^
// 	{
// 		PreRet := new ObjTemplateType()
// 		PreRet.MyStr = MyStr
// 		PreRet.Line = Line
// 		return PreRet
// 	}
// 	IsCmdMod := virtual !() -> bool { return true }
// 	IsDataR := virtual true
// 	IsBlockData := virtual true
// }
// ObjKeyword := class extend ObjConst
// {
// 	MyStr := char^
// 	"this" := !(char^ st) -> void
// 	{
// 		MyStr = st
// 	}
// 	GetValue := virtual !() -> char^
// 	{
// 		return MyStr
// 	}
// 	Print := virtual !(int s) -> void
// 	{
// 		for s printf("->")
// 		printf("keyword %s\n",MyStr)
// 	}
// 	Clone := virtual !() -> Object^
// 	{
// 		PreRet := new ObjKeyword(MyStr)
// 		PreRet.Line = Line
// 		return PreRet
// 	}
// }

