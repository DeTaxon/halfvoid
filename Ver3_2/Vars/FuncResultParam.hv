FuncResultParam := class extend ParamFunc
{
	CreatedVarCalls := List.{ParamLoadObj^}

	this := !(Type^ tp,bool isRef2) -> void
	{
		assert(CurrentFunc != null)
		parentFunc = CurrentFunc
		SetType(GetFuncType(0,null,null,tp,isRef2,false))
	}
	this := !(BoxExeObj^ obj) -> void
	{
		exeObj = obj
		this."FuncResultParam.this"(obj.GetType(),obj.IsMem())
	}
	IsMem := virtual !() -> bool
	{
		return GetType()->{TypeFunc^}.ResultRef
	}
	PrintCode := virtual !(TIOStream^ f) -> void
	{
		exeObj.PrintDefaultUse(f)
	}
	PrintResultObj := virtual !(TIOStream^ f, int resId, int debId) -> void
	{
		if exeObj.IsMem()
		{
			exeObj.PrintPointUse(f)
		}else{
			exeObj.PrintUse(f)
		}
	}
	PrintFuncCall := virtual !(TIOStream^ f,int resId,int debId,ExeDownList lst) -> void
	{
	}

	PopulateCalls := virtual !() -> void
	{
	}
	CreateCall := virtual !(CheckExeDownList objs) -> BoxExeObj^
	{
		return new BoxFuncCall(this&,objs)
	}
}
FuncResultParam2 := class extend FuncResultParam
{
	fallbackVar := ParamFunc^
	setVar := BoxExeObj^

	this := !(Type^ tp,bool isRef2) -> void
	{
		assert(CurrentFunc != null)
		parentFunc = CurrentFunc
		SetType(GetFuncType(0,null,null,tp,isRef2,false))
	}
	this := !(BoxExeObj^ obj) -> void
	{
		exeObj = obj
		this."FuncResultParam.this"(obj.GetType(),obj.IsMem())
	}
	NotifyMemUse := virtual !() -> void
	{
		assert(exeObj != null)
		if exeObj.IsMem()
			return void

		assert(parentFunc.body != null)

		fallbackVar = parentFunc.body.CreateVar(exeObj.GetType(),false)

		dwns := CheckExeDownList
		dwns.Push(fallbackVar.CreateCall())
		dwns.Push(exeObj)

		setVar = CreateFuncCall(StringSpan("="),dwns)
		assert(setVar != null)

		assert(fallbackVar is in FuncLocalParam)
		sv := fallbackVar->{FuncLocalParam^}
		for it : CreatedVarCalls
		{
			sv.CreatedVarCalls.Push(it)
		}
		CreatedVarCalls.Clear()

		this&->SetType(FuncResultParam2OnMem)
	}
	NotifyCaptureUse := virtual !() -> void
	{
		NotifyMemUse()
		fallbackVar.NotifyCaptureUse()
	}
	IsMem := virtual !() -> bool
	{
		return GetType()->{TypeFunc^}.ResultRef
	}
	PrintCode := virtual !(TIOStream^ f) -> void
	{
		exeObj.PrintDefaultUse(f)
	}
	PrintResultObj := virtual !(TIOStream^ f, int resId, int debId) -> void
	{
		if exeObj.IsMem()
		{
			exeObj.PrintPointUse(f)
		}else{
			exeObj.PrintUse(f)
		}
	}
	PrintFuncCall := virtual !(TIOStream^ f,int resId,int debId,ExeDownList lst) -> void
	{
	}

	PopulateCalls := virtual !() -> void
	{
	}

	populated := bool
	CreatedVarCalls := List.{ParamLoadObj^}
	CreateCall := virtual !(CheckExeDownList objs) -> BoxExeObj^
	{
		assert(not populated)
		res := new ParamLoadObj(this&)
		CreatedVarCalls.Push(res)
		return res
	}
	PopulateCalls := virtual !() -> void
	{
		populated = true
		for it : CreatedVarCalls
		{
			it.CallObj = new BoxFuncCall(this&)
		}
	}
}
FuncResultParam2OnMem := class extend FuncResultParam2
{
	NotifyMemUse := virtual !() -> void
	{
	}
	PrintCode := virtual !(TIOStream^ f) -> void
	{
		setVar.PrintDefaultUse(f)
	}
	CreateCall := virtual !(CheckExeDownList objs) -> BoxExeObj^
	{
		assert(CreatedVarCalls.Size() == 0)
		return fallbackVar.CreateCall(objs)
	}
	PopulateCalls := virtual !() -> void
	{
	}
}
