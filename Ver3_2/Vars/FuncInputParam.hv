FuncInputParam := class extend ParamFunc
{
	CapturedIndex := int
	CreatedVarCalls := List.{ParamLoadObj^}
	LocalParamBackup := FuncLocalParam^
	SelfSet := BoxExeObj^

	SelfAsBlank := ParamFunc^

	this := !(Type^ pType,bool isRefIn,StringSpan pVal) -> void
	{
		parentFunc = CurrentFunc
		SetType(GetFuncType(0,null,null,pType,true,false))
		irName = pVal
		isRef = isRefIn
		if DebugMode
		{
			if isRef
				pType.MakeDebugRef()
		}
	}
	IsMem := virtual !() -> bool
	{
		return isRef
	}
	PrintCode := virtual !(TIOStream^ f) -> void
	{
	}
	PrintResultObj := virtual !(TIOStream^ f, int resId, int debId) -> void
	{
		if GetType()->{TypeFunc^}.ResultType != GTypeVoid
		{
			f^ <<  irName
		}
	}
	PrintFuncCall := virtual !(TIOStream^ f,int resId,int debId,ExeDownList lst) -> void
	{
	}
	NotifyMemUse := virtual !() -> void
	{
		if isRef
			return void
		CreateMemUse()
	}
	NotifyCaptureUse := virtual !() -> void
	{
		CreateMemUse()
		LocalParamBackup.NotifyCaptureUse()
		this&->SetType(FuncInputParamCaptured)
	}
	CreateMemUse := virtual !() -> void
	{
		if SelfAsBlank != null
			return void
		
		varMiddleType := GetVarType()
		if isRef
			varMiddleType = varMiddleType.GetPoint()

		SelfAsBlank = new FuncInputParam(GetVarType(),isRef,irName)

		oldFnc := CurrentFunc
		CurrentFunc = parentFunc
		LocalParamBackup = new FuncLocalParam(varMiddleType)

		objs := CheckExeDownList
		objs.Push(LocalParamBackup.CreateCall())
		if isRef
		{
			objs.Push(new UnrefFuncCall(new BoxFuncCall(SelfAsBlank)))
		}else{
			objs.Push(new BoxFuncCall(SelfAsBlank))
		}
		SelfSet = CreateFuncCall(StringSpan("="),objs)
		if SelfSet == null
		{
			printf("Software error for type %s %s\n",varMiddleType.GetBADStr(),CurrentFunc.Name)
		}
		assert(SelfSet != null)

		parentFunc.regularVars.Push(LocalParamBackup)

		this&->SetType(FuncInputParamInMem)

		CurrentFunc = oldFnc
	}
	PrintDebugMeta := virtual !(TIOStream^ f) -> void
	{
	}
	IsValue := virtual !() -> bool
	{
		return not isRef
	}

	populateTest := bool //TODO!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! move from this type to more dynamic
	CreateCall := virtual !(CheckExeDownList objs) -> BoxExeObj^
	{
		res := new ParamLoadObj(this&)

		if populateTest
		{
			res.CallObj = new BoxFuncCall(this&)
		}else{
			CreatedVarCalls.Push(res)
		}
		return res
	}
	PopulateCalls := virtual !() -> void
	{
		for it : CreatedVarCalls
		{
			it.CallObj = new BoxFuncCall(this&)
		}
		populateTest = true
	}

	IsDebuggable := virtual !() -> bool
	{
		return true
	}
	PrintDebugLine := virtual !(TIOStream^ f) -> void
	{
		f^ <<  irName
	}
}

ParamLoadObj := class extend BoxExeObj
{
	VarPtr := ParamFunc^
	CallObj := BoxExeObj^

	this := !(ParamFunc^ fnc) -> void
	{
		VarPtr = fnc
		ObjType = fnc.GetType()->{TypeFunc^}.ResultType
	}
	IsMem := virtual !() -> bool
	{
		return VarPtr.IsMem()
	}
	NotifyMemUse := virtual !() -> void
	{
		VarPtr.NotifyMemUse()
	}

	NotifyCaptureUse := virtual !() -> void { VarPtr.NotifyCaptureUse() }

	PrintPre := virtual !(TIOStream^ f) -> void
	{
		CallObj.PrintPre(f)
	}
	PrintUse := virtual !(TIOStream^ f) -> void
	{
		CallObj.PrintUse(f)
	}

	PrintPointPre := virtual !(TIOStream^ f) -> void
	{
		if CallObj == null
		{
			printf("hm %p\n",this&)
			assert(false)
		}
		CallObj.PrintPointPre(f)
	}
	PrintPointUse := virtual !(TIOStream^ f) -> void
	{
		CallObj.PrintPointUse(f)
	}
}

FuncInputParamCaptured := class extend FuncInputParamInMem
{
	IsMem := virtual !() -> bool
	{
		return true
	}

	NotifyMemUse := virtual !() -> void {}
	NotifyCaptureUse := virtual !() -> void {}

	IsDebuggable := virtual !() -> bool
	{
		return false
	}
}

FuncInputParamInMem := class extend FuncInputParam
{
	IsMem := virtual !() -> bool
	{
		return true
	}
	PrintCode := virtual !(TIOStream^ f) -> void
	{
		LocalParamBackup.PrintCode(f)
		SelfSet.PrintDefaultUse(f)
	}
	IsValue := virtual !() -> bool
	{
		return false
	}
	NotifyMemUse := virtual !() -> void {}
	CreateMemUse := virtual !() -> void {}
	PopulateCalls := virtual !() -> void
	{
		for it : CreatedVarCalls
		{
			if isRef
			{
				it.CallObj = new PtrToRefFuncCall(LocalParamBackup.CreateCall())
			}else{
				it.CallObj = LocalParamBackup.CreateCall()
			}
		}
	}
	IsDebuggable := virtual !() -> bool
	{
		return LocalParamBackup.IsDebuggable()
	}
	PrintDebugLine := virtual !(TIOStream^ f) -> void
	{
		LocalParamBackup.PrintDebugLine(f)
	}
}
