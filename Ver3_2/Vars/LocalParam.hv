FuncLocalParam := class extend ParamFunc
{
	CreatedVarCalls := List.{ParamLoadObj^}
	CapturedIndex := int

	RezeroCall := BoxExeObj^

	this := !(Type^ tp) -> void
	{
		assert(CurrentFunc != null)
		parentFunc = CurrentFunc
		irName = GetLVarName(GetNewId())
		SetType(GetFuncType(0,null,null,tp,true,false))

		if tp is TypeClass
		{
			cls := tp->{TypeClass^}.ToClass
			cls.AwaitVTableStep()
			//if cls.VTable.Size() != 0
			//{
				dwns := CheckExeDownList
				fCall := this.CreateCall() //todo exception call?
				dwns.Push(fCall)
				cnsts := List.{BoxExeConstObj^}
				fnc := TemplateInternalInitClass.GetFunc(dwns,cnsts)
				Inits.Push(fnc.CreateCall(dwns))
			//}
		}
	}
	IsMem := virtual !() -> bool
	{
		return true
	}

	NotifyCaptureUse := virtual !() -> void
	{
		this&->SetType(FuncLocalParamCaptured)
		this&->{FuncLocalParamCaptured^}.DoCapture()
		assert(this& is FuncLocalParamCaptured)
	}
	PrintCode := virtual !(Stream^ f) -> void
	{
		PrintMakeZero(f)
		Inits[^].PrintDefaultUse(f)
	}

	PrintAlloc := virtual !(Stream^ f) -> void
	{
		pType := GetType()->{TypeFunc^}.ResultType

		f^ << irName << " = alloca "
		pType.PrintType(f)
		if DebugMode
			f^ << ", !dbg !" << GDebugLineCallId
		f^ << "\n"
	}
	PrintResultObj := virtual !(Stream^ f, int resId, int debId) -> void
	{
		f^ << irName 
	}
	PrintDebugMeta := virtual !(Stream^ f) -> void
	{
	}
	PrintFuncCall := virtual !(Stream^ f,int resId,int debId,ExeDownList lst) -> void
	{
	}
	CreateCall := virtual !(CheckExeDownList objs) -> BoxExeObj^
	{
		assert(objs.Size() == 0)

		res := new ParamLoadObj(this&)
		CreatedVarCalls.Push(res)
		return res 
	}

	PopulateCalls := virtual !() -> void
	{
		for it : CreatedVarCalls
		{
			it.CallObj = new BoxFuncCall(this&)
		}
	}
	IsDebuggable := virtual !() -> bool
	{
		return true
	}
	PrintDebugLine := virtual !(Stream^ f) -> void
	{
		f^ << irName
	}
	
}

FuncLocalParamCaptured := class extend FuncLocalParam
{
	NotifyMemUse := virtual !() -> void
	{
	}

	NotifyCaptureUse := virtual !() -> void
	{
	}
	DoCapture := !() -> void
	{
		assert(parentFunc != null)
		CapturedIndex = parentFunc.CapturedVars.Size()
		parentFunc.CapturedVars.Push(this&)

		objs := CheckExeDownList
		objs.Push(this.CreateCall())
		cnsts := List.{BoxExeConstObj^}

		callFunc := GZeroMemTemplate.GetFunc(objs,cnsts)
		assert(callFunc != null)
		RezeroCall = callFunc.CreateCall(objs)

	}
	PrintCode := virtual !(Stream^ f) -> void
	{
		RezeroCall?.PrintDefaultUse(f)
	}

	GetTupleVar := virtual !() -> BoxExeObj^
	{
		return new BoxFuncCall(parentFunc.CapturedVarsTuple)
	}


	PopulateCalls := virtual !() -> void
	{
		for it : CreatedVarCalls
		{
			getCall := GetTupleVar()
			callType := getCall.GetType()
			cls := BoxClass^
			if callType is in TypeClass
			{
				cls = callType->{TypeClass^}.ToClass
			}else{
				if callType is in TypePoint and callType.Base is in TypeClass
				{
					cls = callType.Base->{TypeClass^}.ToClass
				}
			}
			assert(cls != null)
			fld := cls.GetFieldByIndex(CapturedIndex)
			objs := CheckExeDownList
			objs.Push(getCall)
			assert(fld != null)
			it.CallObj = new BoxFuncCall(fld,objs)
			objs.Clear()
		}
	}

	IsDebuggable := virtual !() -> bool
	{
		return true
	}

	PrintAlloc := virtual !(Stream^ f) -> void
	{
	}
}


GetLVarName := !(int x) -> StringSpan
{
	buff := char[100]
	sprintf(buff[0]&,"%Var%i",x)
	result = GetConstString(buff[0]&)
}

