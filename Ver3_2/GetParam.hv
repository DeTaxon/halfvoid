TryCheckGetParam := !(Token^ itm) -> BoxExeObj^
{
	if itm == null return null
	if itm is TokenIndent 
	{
	}else{
		return null
	}

	asItm := itm->{TokenIndent^}

	metFuncs := HybridQueue.{BoxFuncBody^,4}
	lastLambdaHolder := LambdaObject^

	for par : UnitStack
	{
		if par is LambdaObject
		{
			lastLambdaHolder = par->{LambdaObject^}
		}
		if par is ConstVar
		{
			cv := par->{ConstVar^}
			
			if cv.Name == asItm.Value
				return cv.Value
		}
		if par is in NamedVar
		{
			mv := par->{NamedVar^}
			if mv.Name == asItm.Value
			{
				if par is in MemVarRef
				{
					assert(false)
				}else if par is in MemVar
				{
					mv2 := mv->{MemVar^}
					if metFuncs.Size() != 0
					{
						if metFuncs.Size() >= 2
						{
							for it,i : metFuncs
							{
								if i != 0
									it.NotifyChainCapture()
							}
						}
						metFuncs[^].CaptureUsed = true

						varType := mv2.Value.GetVarType()

						if IsGCType(varType) or IsGCPtr(varType)
						{
							assert(lastLambdaHolder != null)
							mv2.Value.NotifyMemUse()
							getVar := CallFromSomeVar(mv2)
							resVar := lastLambdaHolder.CaptureObject(asItm.Value,new UnrefFuncCall(getVar),true,asItm)
							return CallFromSomeVar(resVar)
						}else {
							mv2.NotifyCaptureUse()
						}

					}
					return CallFromSomeVar(mv2)
				}else if par is MacroVar {
					macro := par->{MacroVar^}
					return macro.CreateCall()
				}else if par is GlobalNameAlias {
					al := par->{GlobalNameAlias^}
					al.Value.AwaitType()
					return al.Value.Value.CreateCall()
				}else{
					assert(false)
				}
			}
		}
		
		if par is in BoxFuncBody
		{
			fnc := par->{BoxFuncBody^}

			metFuncs.Push(fnc)

			if fnc.CapturedBySomeVars.Contain(asItm.Value)
			{
				return CallFromSomeVar(fnc.CapturedBySomeVars[asItm.Value].1)
			}
			if fnc.CapturedManualy.Contain(asItm.Value)
			{
				return CallFromSomeVar(fnc.CapturedManualy[asItm.Value])
			}

			if fnc.VariadicName == asItm.Value
			{
				return new MetaVargsParam(fnc)
			}
			
			if fnc.Attrs.IsMethod and asItm.Value != "this"
			{
				clsType := fnc.Params[0].GetVarType()
				assert(clsType is TypeClass)
				cls := clsType->{TypeClass^}.ToClass

				fld := cls.GetField(asItm.Value) //todo: could use field call ifrom here

				if fld != null
				{
					tkn1 := TokenIndent(StringSpan("this"))
					parGetCall := TryCheckGetParam(tkn1&) //todo, i can get from Params
					assert(parGetCall != null)

					itms := CheckExeDownList
					itms.Push(parGetCall)
					return fld.CreateCall(itms)
				}
			}
		}
	}
	callItem := BoxUnit^
	GetItemGlobal(asItm.Value, x ==> {
		for it : x
		{
			if it is in GlobalVar
			{
				gVar := it->{GlobalVar^}
				gVar.AwaitType()
				callItem = gVar.Value
				return true
			}
			if it is TaskLocalVar or it is TaskLocalVarDelayed
			{
				callItem = it
				return true
			}
			if it is in BoxFunc
			{
				callItem = new FuncPointerParam(it->{BoxFunc^})
				return true
			}
			if it is in BoxFuncTemplate
			{
				asTmpl := it->{BoxFuncTemplate^}
				if asTmpl.IsOneFunc()
				{
					callItem = new FuncPointerParam(asTmpl.GetOneFunc())
					return true
				}
			}
			if it is in BoxExeConstObj
			{
				callItem = it
				return true
			}
		}
		return false
	})
	if callItem != null
	{
		if callItem is TaskLocalVar
		{
			return callItem->{TaskLocalVar^}.CreateCall()
		}
		if callItem is TaskLocalVarDelayed
		{
			return callItem->{TaskLocalVarDelayed^}.CreateCall()
		}
		if callItem is in BoxFunc
		{
			return callItem->{BoxFunc^}.CreateCall()
		}
		if callItem is in BoxExeConstObj
		{
			return callItem->{BoxExeConstObj^}
		}
	}

	asType := ParseType(itm)
	if asType != null
		return GetConstType(asType)

	c := TEchoStream
	c << "Could not get param " << asItm.Value
	c2 := c.GetString()
	c2.IncRef()
	itm.EmitError(c2.Str()) //todo better explanation

	return null
}

CallFromSomeVar := !(NamedVar^ vr) -> BoxExeObj^
{
	if vr is MemVarBorrowedRef
	{
		return new PtrToRefFuncCall(vr->{MemVar^}.Value.CreateCall())
	}
	if vr is MemVarRef
	{
		return new PtrToRefFuncCall(vr->{MemVar^}.Value.CreateCall())
	}
	if vr is in MemVar
	{
		return vr->{MemVar^}.Value.CreateCall()
	}
	assert(false)
	return null
}
