
FuncInlineWrapper := class extend BoxExeObj
{
	body := BoxBlock^

	vars := HybridQueue.{FuncResultParam2^,5}
	nameVars := HybridQueue.{MemVar^,5}

	groupVars := VarGroup^

	this := !(BoxFuncBody^ fnc,CheckExeDownList itms) -> void
	{
		ObjType = GTypeVoid

		stackSize := UnitStack.Size()

		assert(itms.Size() >= fnc.InputVarNames.Size())

		vSize := fnc.InputVarNames.Size()
		for i : itms.Size()
		{
			vr := new FuncResultParam2(itms[i])
			vars.Push(vr)
			CurrentFunc.FunctionResultVars.Push(vr)

			if i >= vSize
			{
				if groupVars == null
				{
					groupVars = new VarGroup
					groupVars.Name = fnc.VariadicName
				}
				groupVars.Vars.Push(vr)
			}else{
				nVr := new MemVar(fnc.InputVarNames[i],vr)
				nameVars.Push(nVr)
				UnitStack.PushFront(nVr)
			}

		}
		if groupVars != null
			UnitStack.PushFront(groupVars)

		body = new BoxBlock(fnc.bdy)
		body.Work()

		while stackSize > UnitStack.Size()
			UnitStack.Pop()
	}
	IsMem := virtual !() -> bool
	{
		return false
	}
	PrintPointPre := virtual !(Stream^ f) -> void
	{
	}
	PrintPre := virtual !(Stream^ f) -> void
	{
		for it : vars
		{
			it.PrintCode(f)
		}
		body.PrintCode(f)
	}
	PrintDebugMeta := virtual !(Stream^ f) -> void
	{
		//for it : vars
		//{
		//	it.PrintDebugMeta(f)
		//}
		body.PrintDebugMeta(f)
	}
}
