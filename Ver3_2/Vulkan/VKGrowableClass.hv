AppendClass ModuleVulkan
{
	vulkanClass := VKGrowableClass^
	GetVulkanClass := !() -> BoxUnit^
	{
		if vulkanClass == null
		{
			vulkanClass = new VKGrowableClass(this&)
			AllClasses.Push(vulkanClass)
		}
		return GetConstType(vulkanClass.ItType)
	}
}

VKGrowableClass := class extend GrowableClass
{
	itModule := ModuleVulkan^
	classSize := VarIntObj^
	this := !(ModuleVulkan^ bs) -> void
	{
		itModule = bs

		ItName = "VulkanFunctionsClass" //todo
		ItId = GetNewId()
		ItType = new TypeClass(this&) //TODO remove duplicate from BoxClassBody,BoxTuple

		ItAlign = 1 //TODO pointer size
		ItSize = 0

		growableInit()
	}
	GetNewFieldType := virtual !(StringSpan val) -> Type^
	{
		if val.Size() > 1000
			return null

		buffer := char[1024]
		strcpy(buffer[0]&,"PFN_")
		memcpy(buffer[4]&,val.NonNullStr(),val.Size())
		buffer[val.Size() + 5] = 0
		return itModule.GetTryFuncPointer(buffer[0]&)
	}
}
