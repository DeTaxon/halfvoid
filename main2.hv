TGCIObject := class
{
	IncRef := virtual !() -> void { }
	DecRef := virtual !() -> void { }
	Destroy := virtual !() -> void {}
}

TGCObject := class extend TGCIObject
{
	RefValue := int

	IncRef := virtual !() -> void { RefValue += 1}
	DecRef := virtual !() -> void {
		RefValue -= 1
		if RefValue == 0
		{
			Destroy()
			delete this&
		}
	}
	Destroy := virtual !() -> void {}
}

internalHVNew := !() .{@T} -> T^
{
	result&->{void^^}^ = calloc(1,T->TypeSize) //weird way to bypass DecRef
	if T->TypeGroup == "Class"
		internalHVInitClass(result^)
	if T is in TGCIObject
		result.IncRef()
}
internalHVNewConstructed := !(@T^ obj, args...) -> T^
{
	result = obj
	result.this(args...)
}

"=" := !(TGCIObject^& itm1, TGCIObject^ itm2) -> void
{
	itm2?.IncRef()
	if itm1 != null
	{
		itm1.DecRef()
	}
	itm1&->{void^^}^ = itm2->{void^}
}

internalHVDelete := !(@T^ x) -> void
{
	free(x)
}
internalHVGCSetNull := !(TGCIObject^ & itm1) -> void
{
	itm1 = null->{TGCIObject^}
}

internalHVGCSetNullArray := !(TGCIObject^^ arrs, int start, int end) -> void
{
	i := end
	while i >= start
	{
		arrs[i] = null
		i -= 1
	}
}

internalHVGetDepth := !() -> int
{
}
internalHVSetDepth := !(int depth) -> void
{
}

TILambda := class extend TGCObject
{
	Capture := virtual !() -> TILambda^
	{
		//assert(false)
		return null
	}
	IsFinished := virtual !() -> bool
	{
		return false
	}
}

TLambda := class .{@FuncPtr} extend TILambda
{
	callFunc := FuncPtr
	//"()" := !(args...)
	//{
	//	return this.callFunc(this&,argc...)
	//}
}
internalHVLambdaCall := !(@T lmb,args...) -> void // return type replaced by compiler on result type of @FuncType
{
	lmb.callFunc(lmb&,args...)
}

internalHVCreateLambda := !(@FuncPtr fnc,@CaptureTuple CaptureVars) -> TLambda.{FuncPtr}^
{
	result = new TLambda.{FuncPtr}
	result.callFunc = fnc
}

//TLambdaImplementation := class .{@Captures} extend TLambda
//{
//	values := Captures
//
//	//Capture := virtual !() -> TLambda^
//	//{
//	//	result = new TLambdaImplementation
//	//	result.values[^] = values[^]
//	//}
//}

main := !(int argc, char^^ argv) -> int
{
	x := int
	x = 0
	
	z := () ==> {
		x = 17
		printf("wow\n")
	}
	z()
	z()
	return 0
}
