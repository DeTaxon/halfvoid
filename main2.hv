

DBox := class .{@T}
{
	Size := virtual !() -> int { return 0 }
	"[]" := virtual !(int ind) -> ref T {}
	ToArrayTmp := virtual !() -> RawArray.{T}^
	{
		return null
	}
	"~For" := virtual !() -> DBoxIterator.{T}^
	{
		return new DBoxIterator.{T}
	}
}

DBoxIterator := class .{@T}
{
	IsEnd := virtual !() -> bool { return true }
	"^" := virtual !() -> ref T {}
	"Inc" := virtual !() -> void {}
}

TestFunc := !(DBox.{int} obj) -> void
{
	for it : obj
	{
		printf("wut %i\n",it)
	}
}

ListDBox := class .{@T} extend DBox.{T}
{
	ptrToList := List.{T}^
	this := !(List.{T}^ ptr) -> void { ptrToList = ptr}
	
	Size := virtual !() -> int { return ptrToList.Size() }
	"[]" := virtual !(int ind) -> ref T { return ptrToList^[ind]}
}


main := !(int argc, char^^ argv) -> int
{
	c := DBox.{int}
	for it : c
	{

	}


	//tst := @temp new List.{int}
	//tst^ << 2 << 10 << 3 << 10
	////TestFunc(tst^)
	//c := DBox.{int}^
	//c = new ListDBox.{int}(tst)
	//printf("Size %i\n",c.Size())
	//printf("Size %i\n",c^[2])
	return 0
}

