

TstPre := class
{
	SomeFunc := virtual !() -> void
	{
	}
}

Tst := class extend TstPre
{
	this := !() -> void
	{
		printf("hello\n")
	}
	@once
	SomeFunc := virtual !() -> void
	{
		printf("hello\n")
	}
}

fnc := !(float x,double y) -> float 
{
	TSleep(y)
	printf("hello %f\n",x)
	return x*10
}

TestInp := !(float a,float b) -> void
{
	printf("hey %f %f\n",a,b)
}

"@defer call" := !(l) -> void
{
} defer_tail (l) {
	l()
}

CTest := class
{
	r := virtual !() -> void
	{
	}
	b := virtual !() -> void
	{
	} defer_tail ()
	{
		printf("yes\n")
	}
}

BadCall := !(a,b) -> void
{
} defer_tail (a)
{
	printf("a %i\n",a)
}

main := !(int argc, char^^ argv) -> int
{
	TFullInit()
	BadCall(8,9)

}

