
internalHVGetTaskLocalTuple := !() -> void^
{
	return g
}


internalHVEntryPoint := !(int argc,char^^ argv) -> int
{
	spn := TArraySpan.{char^}//(argv,argc)
	spn.pointer = argv
	spn.itSize = argc
	return main(spn&)
}

main := !(char^[] args) -> int
{
	lib := GetLibrary("libglfw.so")
	//printf("test %p\n",lib)
	//glfwInit&->{void^^}^ = lib.Get("glfwInit")
	//glfwCreateWindow&->{void^^}^ = lib.Get("glfwCreateWindow")
	//glfwMakeContextCurrent&->{void^^}^ = lib.Get("glfwMakeContextCurrent")

	//glfwInit()
	//win := glfwCreateWindow(100,100,"hi",null,null)
	//glfwMakeContextCurrent(win)

	return 0
}



arFunc := void^
arSize := int
internalEnterGCFunction := !(TGCIObject^ arr,int maxSize) -> void
{
	arFunc = arr
	arSize = maxSize
}
internalLeaveGCFunction := !() -> void
{
}

tst := void^
thisExcp := void^ //TODO IException not supported
internalEnterTryCatch := !(void^ ptr,bool cleanGC,int gcInUse) -> void
{
	tst = ptr
}
internalLeaveTryCatch := !() -> void
{
}
internalThrowException := !(IException^ e) -> void
{
	printf("called throw %p\n",e)
	thisExcp = e
	e.IncRef()
	internalHVGCSetNullArray(arFunc->{TGCIObject^^},0,arSize - 1)
	llvmLongJump(tst)
}
internalGetException := !() -> IException^
{
	result = thisExcp->{IException^}
}

IException := class extend TGCObject
{

}

Exception := class extend IException
{
	
}
