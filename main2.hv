
tstEnum := enum
{
	"One",
	"Two",
	"Three"
}

main := !(char^[] args) -> int
{
	//c := tstEnum

	//c = "Three"

	//switch c
	//{
	//	case in !["One","Two"]
	//		printf("yes\n")
	//}
	main_c()
}


cc := class
{
	x := int
	y := int
}

c2 := !(int x) -> int
{
	return x*13
}
main_c := !() -> void
{
	printf("hey %i\n",c2(12))
	//r := cc
	//r.x = 62
	//printf("test %i\n",r.x + 2)
	//printf("test %i %p\n",r.x,r.x&)
	//for i : 5
	//{
	//	printf("yep %i\n",i)
	//}
}

//TODO lazy class and fake fields
//TODO lazy class in hotload
//TODO it is REALY painfull, if .x called in child class we must call in base class and rebuild this class
//TODO allow !(ref int x) , in functions and function types, lambdas



//ThisIsError := !() -> void
//{
//	c,y := ManyRes()
//}
//ManyRes := !() -> int, GCObject^ //TODO GCObject is incorrect type, emit error
//{
//	return 5, new TGCObject
//}



JavaCompile := !(HVB_FunctionEditor^ funcToCompile) -> void
{
	//printf("yep %i %i\n",funcToCompile.GetVariablesCount(), funcToCompile.GetCodeLinesCount())

	//for i : funcToCompile.GetCodeLinesCount()
	//{
	//	line := funcToCompile.GetLine(i)
	//	printf("line %s %i %i %i %i\n",line.opcode.ToCStr(),line.var1,line.var2,line.var3,line.var4)
	//}

	ResFile := new ZipFile
	ResFile.AnalizeFile("test.jar")

	jClass := JavaClass("test")
	jClass.CreateMethod("main")
	
	echo := TEchoStream
	jClass.Write(echo)
	blb := echo.GetBlob()

	ResFile.WriteFile("test.class",blb)
	ResFile.Flush()

	fl := RawFileStream("test.class","wb")
	fl.Write(blb.GetPointer(),blb.Size())

	printf("done\n")
}
JavaMain := !() -> void
{

}

//
//SwapnWork(() ==>{
//	thisTask = SpawnTask(() ==> {
//		interpretetion fails here
//		something to do with thisTask being captured
//	})
//})
//
//
//
//
//

//for i : ![1,2,3] TODO, this array is not affected by reload
//{
//	
//}





//Zip file
//crc32
//deflate
//zip -v check
//if file already exists
//throw exceptions when file cannot be created, no space on disk, incorrect file format

//TODO
//@cache function, @once function/call
//decorator func pass constants?
//default initializer for growing class, and const value as global const
//field becomes static if it is not inside class
//zero size class optimizations
//x := field 10  non types not working
//Module Vulkan uses Normal Class and usese new API
