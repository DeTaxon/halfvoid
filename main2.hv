TGCObject := class
{
	RefValue := int

	IncRef := virtual !() -> { RefValue += 1}
	DecRef := virtual !() -> { RefValue -= 1}
	Destroy := virtual !() -> void {}
}

internalHVNew := !() .{@T} -> T^
{
	result = calloc(1,T->TypeSize)->{T^}
	if T->TypeGroup == "Class"
		internalHVInitClass(result^)
}
internalHVNewConstructed := !(@T^ obj, args...) -> T^
{
	result = obj
	result.this(args...)
}

internalHVDelete := !(@T^ x) -> void
{
	free(x)
}

internalHVGetDepth := !() -> int
{
}
internalHVSetDepth := !(int depth) -> void
{
}
internalHVPushGCObject := !(TGCObject^ obj) -> void
{
}
test1 := !(int x) -> bool
{
	return x > 50
}
test2 := !(int x) -> bool
{
	return x < 100
}
test3 := !(int^ x) -> bool
{
	printf("hey %p\n",x)
	return x^ == 0
}
main := !(int argc, char^^ argv) -> int
{
	test := int^
	x := 10
	if test3(test?) and test1(x)
	{
		printf("hi\n")
	}else
	{	
		printf("nope\n")
	}
	return 0
	//test := new TGCObject2
	//printf("a\n")
	//defer printf("c\n")
	//printf("b\n")
	//y := Cls2
	//y.x = 200
	//y.y = 2
	//y.z = 3
	//i := Cls^
	//i = y&
	//i.check()
}
