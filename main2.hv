
"->{}" := !(String st) .{char^} -> char^
{
	return st.Str()
}
"->{}" := !(StringSpan spn) .{char^} -> String^
{
	return spn.GetString()
}

class1 := class extend TGCObject
{
}
class2 := class extend class1
{

}
main := !(int argc,char^^ args) -> int
{
	if 5 in 1..10
		printf("wut\n")
	printf("test %i\n",5 not in 1..10)
	//timeout := u64[2]
	//timeout[0] = 1 //1 sec
	//timeout[1] = 1

	//tst := URing()

	//sqe := tst.GetSQE()
	//sqe.opcode = 11 //TIMEOUT
	//sqe.addr&->{void^^}^ = timeout[0]&
	//sqe.len = 1
	//sqe.off = 1
	//tst.Submit()
	//tst.WaitOne()

	//lb := GetLibrary("liburing.so")
	//printf("hm %p\n",lb)
	// itBuilder := LexBuilder

	// itBuilder.ApplyReg("\"((\\\\ [^]) | [^\"\\\\])*\"",1)
	// itBuilder.ApplyReg("[0-9]+(.[0-9]+)?",2)
	// itBuilder.ApplyReg("0x[0-9a-fA-F]+([0-9a-fA-F]+)?",2)
	// itBuilder.ApplyReg(" true | false | null",3)
	// itBuilder.ApplyReg("\\{ | \\} | \\, | \\: | \\[ | \\]",4)
	// itBuilder.ApplyReg("\\  | \\t | \\n",5)

	// res := itBuilder.GenerateMachine()

	// // res.PrintIt()

	// tst := FSGetFile("test.json")
	// mp := tst.GetMap()

	// res.RegExpReadText(mp.Get(),mp.Size(), (st,a) ==> {
	// 	if a != 5
	// 	{
	// 		printf("hm <%s>\n",st.GetString().Str())
	// 	}
	// })
	
	return 0
}
