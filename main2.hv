

//AClass := class
//{
//	ggg := virtual int TODO Creates bug
//	g3 := int
//}



//inline road
//static variables stays in one function
//input variadic variables C //do i need it?
//deducting type by returns
//debug data for functions in different files
testCall := inline !(int cmplxName,args...) .{@HH} -> int
{
	printf("hello world %i %i %i\n",cmplxName,args...)
	cmplxName = 1313
	printf("hello world %i %i %i\n",cmplxName,args...)
	printf("wut %i\n",HH)
	return 47
}


testFile := !(vRepoFile^ fl,char^ fName) -> void
{
	mp1 := fl.GetMap()

	fl2 := FSGetFile(fName)
	mp2 := fl2.GetMap()

	printf("hm %i %i\n",mp1.Size(),mp2.Size())
	printf("hm2 %i %i\n",fl.Size(),fl2.Size())

	for i : mp2.Size()
	{
		if mp1.Get()[i] != mp2.Get()[i]
		{
			printf("diff at %i %i %i\n",i,mp1.Get()[i],mp2.Get()[i])
		}
	}
	printf("wtf %i\n",memcmp(mp1.Get(),mp2.Get(),mp1.Size()-1))
}
printFile := !(vRepoFile^ hm) -> void
{
	mp := hm.GetMap()
	spn := StringSpan(mp.Get(),mp.Size())
	printf("hey <%s>\n",spn)
}

main := !(char^[] args) -> int
{
	testFile(#File("Priority2.pr"),"Priority2.pr")
	testFile(#File("LexHVInputVars2.pr"),"LexHVInputVars2.pr")
	testFile(#File("LexHVFileRoot2.pr"),"LexHVFileRoot2.pr")

	//printFile(#File("Priority2.pr"))
	//printFile(#File("LexHVInputVars2.pr"))
	//printFile(#File("LexHVFileRoot2.pr"))
	//x := 74
	//c := testCall(x,15,-100).{477}
	//c.test()
	//printf("after %i %i\n",x,c)
	return 0
}

//TODO
//decorator function
//@cache function, @once function/call
//decorator func pass constants?
//default initializer for growing class, and const value as global const
//field becomes static if it is not inside class
//zero size class optimizations
//x := field 10  non types not working
//class->AllFields to work with new Fields
//Allow code to be interpreted
//interpreter support File,XML
//Class can be created by script
//Module Vulkan uses Normal Class and usese new API


DllTest := !() -> void
{
	tst := FSGetFile("libwebp-7.dll")
	mp := tst.GetMap()

	win32LoadLibrary(mp.Get(),tst.Size())
}

RegExpTest := !() -> void
{
	itBuilder := LexBuilder

	itBuilder.ApplyReg("\"((\\\\ [^]) | [^\"\\\\])*\"",1)
	itBuilder.ApplyReg("[0-9]+(.[0-9]+)?",2)
	itBuilder.ApplyReg("0x[0-9a-fA-F]+([0-9a-fA-F]+)?",2)
	itBuilder.ApplyReg(" true | false | null",3)
	itBuilder.ApplyReg("\\{ | \\} | \\, | \\: | \\[ | \\]",4)
	itBuilder.ApplyReg("\\  | \\t | \\n",5)

	res := itBuilder.GenerateMachine()

	// res.PrintIt()

	tst := FSGetFile("test.json")
	mp := tst.GetMap()

	res.RegExpReadText(mp.Get(),mp.Size(), (st,a) ==> {
		if a != 5
		{
			printf("hm <%s>\n",st.GetString().Str())
		}
	})
}
