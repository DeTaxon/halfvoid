
tst := class .{@T}
{
	this := !() -> void
	{
		printf("yes\n")
	}	
}

//vkLoadAddr := PFN_vkGetInstanceProcAddr
//vkEnumerateInstanceExtensionProperties := PFN_vkEnumerateInstanceExtensionProperties
//vkEnumerateInstanceLayerProperties := PFN_vkEnumerateInstanceLayerProperties
//vkCreateInstance := PFN_vkCreateInstance

main := !(char^[] args) -> int
{
	c := tst.{int}()
	libGlfwInit()

	glfwInit()
	glfwWindowHint(GLFW_CLIENT_API, GLFW_NO_API)

	win := glfwCreateWindow(500,500,"hi",null,null)

	glfwMakeContextCurrent(win)

	vk := GetLibrary("libvulkan.so")

	vkLoadAddr := vk.Get("vkGetInstanceProcAddr")->{PFN_vkGetInstanceProcAddr}
	vkEnumerateInstanceExtensionProperties := vkLoadAddr(null,"vkEnumerateInstanceExtensionProperties")->{PFN_vkEnumerateInstanceExtensionProperties}
	vkEnumerateInstanceLayerProperties := vkLoadAddr(null,"vkEnumerateInstanceLayerProperties")->{PFN_vkEnumerateInstanceLayerProperties}
	vkCreateInstance := vkLoadAddr(null,"vkCreateInstance")->{PFN_vkCreateInstance}

	count := u32

	vkEnumerateInstanceLayerProperties(count&,null)
	lays := TVector.{VkLayerProperties}(count->{int})
	vkEnumerateInstanceLayerProperties(count&,lays)

	vkEnumerateInstanceExtensionProperties(null,count&,null)
	exts := TVector.{VkExtensionProperties}(count->{int})
	vkEnumerateInstanceExtensionProperties(null,count&,exts)

	for i : lays.Size()
	{
		printf("%i : %s\n",i,lays[i].layerName&)
	}
	for i : exts.Size()
	{
		printf("%i : %s\n",i,exts[i].extensionName&)
	}

	hm := VkInstanceCreateInfo()
	printf("hey %p %i %p\n",vk, hm.sType,vkLoadAddr)

	//while not glfwWindowShouldClose(win)
	//{
	//	glfwSwapBuffers(win)
	//	glfwPollEvents()
	//}
//
	//glfwTerminate()
	
	//return 0
}

