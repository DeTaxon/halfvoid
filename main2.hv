
MixinObject1 := class
{
	x := int
	Contain := poison !(!(int)&-> bool l) -> bool
	{
		if l(this[^])
			return true
		return false
	}
}
MixinObject2 := class
{
	y := int
	Test := poison !() -> bool
	{
		printf("hello\n")
	}
}

TestClass := class extend MixinObject1 , MixinObject2
{
	z := int
	"~For" := !() -> !()&->int
	{
		return () ==>
		{
			for it : ![1,12,100,-3,16]
				yield it			
		}
	}
}


main := !(int argc, char^^ argv) -> int
{
	c := TestClass
	c.x = 3
	c.y = 4
	c.z = 5
	printf("test %i\n",TestClass->TypeSize)
	offset_x := c.x&->{void^}->{size_t} - c&->{void^}->{size_t}
	offset_y := c.y&->{void^}->{size_t} - c&->{void^}->{size_t}
	offset_z := c.z&->{void^}->{size_t} - c&->{void^}->{size_t}
	printf("offset x %i\n",offset_x)
	printf("offset y %i\n",offset_y)
	printf("offset z %i\n",offset_z)
	return 0
}

