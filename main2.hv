
NewClass := class extend TGCObject
{
	v := int

	tst := virtual !() -> void
	{
		printf("hoy9 %i\n",NewClass->TypeSize)
	}
	tst2 := virtual !() -> void
	{
		printf("hoy2 %i\n",NewClass->TypeSize)
	}
	tst3 := !() -> void
	{
		printf("hoy4 %i\n",NewClass->TypeSize)
	}
}

Class2 := class extend NewClass
{
	tst := virtual !() -> void
	{
		printf("hay %i\n",NewClass->TypeSize)
	}
	tst2 := !() -> void
	{
		printf("yoh2 %i\n",NewClass->TypeSize)
	}

}


main := !(char^[] args) -> int
{
	c := NewClass^
	c = new Class2
	c.tst()
	c.tst2()
	c.tst3()
}
RunTest := !() -> void
{
	printf("waw\n")
}

//
//SwapnWork(() ==>{
//	thisTask = SpawnTask(() ==> {
//		interpretetion fails here
//		something to do with thisTask being captured
//	})
//})
//
//
//
//
//

//for i : ![1,2,3] TODO, this array is not affected by reload
//{
//	
//}




//CalculatePiBlob := !(int nums) -> Blob^
//{
//	bigNums := nums*3
//	values := malloc(bigNums*4)->{int^}
//
//	result = new BlobOnVector(nums + 1)
//	resultPtr := result.GetPointer()->{u8^}
//	memset(resultPtr,0,result.Size())
//	//resultPtr[nums] = 0
//
//	i := 0
//	while i < bigNums
//	{
//		values[i] = 2
//		i += 1
//	}
//	i = 0
//	while i < nums
//	{
//		j := 0
//		while j < bigNums
//		{
//			values[j] *= 10
//			j += 1
//		}
//		j = bigNums - 1
//		while j >= 1
//		{
//			thisMul := j
//			thisDiv := 2*j + 1
//
//			carry := (values[j] div thisDiv)*thisMul
//			modul := values[j] mod thisDiv
//			values[j] = modul
//			j -= 1
//			values[j] += carry
//		}
//		num := values[0] div 10
//		values[0] = values[0] mod 10
//
//		c := 0
//		while num != 0
//		{
//			resultPtr[i + c] += num
//			if resultPtr[i + c] >= 10
//			{
//				resultPtr[i + c] = resultPtr[i + c] mod 10
//				num = 1
//			}else{
//				num = 0
//			}
//			c -= 1
//		}
//		i += 1
//	}
//	for i : nums
//	{
//		resultPtr[i] += '0'
//	}
//}


//Zip file
//crc32
//deflate
//zip -v check
//if file already exists
//throw exceptions when file cannot be created, no space on disk, incorrect file format

//TODO
//@cache function, @once function/call
//decorator func pass constants?
//default initializer for growing class, and const value as global const
//field becomes static if it is not inside class
//zero size class optimizations
//x := field 10  non types not working
//Module Vulkan uses Normal Class and usese new API
