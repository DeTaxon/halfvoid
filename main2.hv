Cls := class
{
	x := int
	y := s64
	z := int

	check := virtual !() -> void
	{
		printf("nope %i\n",x)
	}
}
Cls2 := class extend Cls
{
	w := int
	check := virtual !() -> void
	{
		printf("yep %i\n",x)
	}
}
internalHVInitClass := !(@T x)  -> void
{
	x->VTable = T->VTable
}

internalHVVirtualMethodCall := !(@T this, args...) . {@FieldNumber} -> void
{
	this->VTable.FieldNumber(this,args...)
}

hello := !(int x) -> void
{
	printf("hello %i\n",x)
}
hi := !(int x) -> void
{
	printf("hi %i\n",x)
}
main := !(int argc, char^^ argv) -> int
{
	y := Cls2
	y.x = 200
	y.y = 2
	y.z = 3
	i := Cls^
	i = y&
	i.check()
}
