
"@temp2 call" := !(@LType lambd) -> LType->ResultType
{
	TempPoolBlock()
	if result->Type->Group == "Class"
	{
		_SetAllocator(lambd(),gTemporaryPool&)
	} else if result->Type->Group == "Pointer"
	{
		_SetAllocator(lambd()^,gTemporaryPool&)
	}else{
		lambd()
	}
}

Heh := class
{
	x := int
	Reverse := fake
	{
		Hey := !() -> int^
		{
			return new int
		}
		H := virtual !() -> void
		{
			printf("hello\n")
		}
	}
	H := virtual !() -> void
	{
		printf("nah1\n")
	}
}
Hoh := class extend Heh
{
	Reverse := fake
	{
		H := virtual !() -> void
		{
			printf("world\n")
		}
	}
	H := virtual !() -> void
	{
		printf("nah2\n")
	}
}

C := class
{
	"~For" := !() -> !(int^&)&->int
	{
		return (int^& x) ==>
		{
			ind := 129
			x = ind&

			for i : 5
			{
				ind = i*3
				yield i*2
			}
		}
	}
}

main := !(int argc, char^^ argv) -> int
{
	z := AVLMap.{int,int}
	for i : 15
	{
		z[i] = i
	}
	for it,ind : z.Reverse
	{
		printf("here %i %i\n",it,ind)
	}
	//c := Heh^
	//c = new Hoh
	//c.Reverse.H()
	//for f,ind : c->Fields
	//{
	//	printf("field %s %i\n",ind,f)
	//}
	//printf("hello\n")
	//c.Reverse.Hey()
	//@omp
	//for i : 4
	//{
	//	printf("hello\n")
	//	TSleep(1)
	//}
	//tst := List.{int}()
	//tst << 1 << 100 << 3
	//printf("objec %p %p\n",tst&, tst.allocator)
	return 0
}
