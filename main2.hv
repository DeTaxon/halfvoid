

TstPre := class
{
	SomeFunc := virtual !() -> void
	{
	}
}

Tst := class extend TstPre
{
	this := !() -> void
	{
		printf("hello\n")
	}
	@once
	SomeFunc := virtual !() -> void
	{
		printf("hello\n")
	}
}

"@awork block" := !(lambd) -> void
{
	printf("block\n")
	TAwaitWork(lambd)
}
"@awork call" := !(lambd) -> void
{
	printf("oper\n")
	lambd()
}
Copy2 := !(int x) -> int
{
	printf("test %i\n",x)
	return x*100
}

"@once call" := !(@LType lambd,bool first = static true) -> LType->ResultType
{
	res := static LType->ResultType
	if first {
		res = lambd()
		first = false
	}
	return res
}

//"@awork oper" := !(lambd) -> lambd->Type->ResultType
//{
//	res := lambd->Type->ResultType
//	TAwaitWork( () ==>
//	{
//		res = lambd()
//	})
//	return res
//}

main := !(int argc, char^^ argv) -> int
{
	r := Tst
	//@awork r.SomeFunc()
	c := int 
	fnc := (int x) ==> {
		printf("test %i %i\n",@once Copy2(x), @once Copy2(x))
	}
	fnc(17)
	fnc(3)

	//@awork
	//{
	//	r.SomeFunc()
	//	r.SomeFunc()
	//}
}

