//Cls := class
//{
//	x := int
//	y := s64
//	z := int
//
//	check := virtual !() -> void
//	{
//		printf("nope %i\n",x)
//	}
//}
//Cls2 := class extend Cls
//{
//	w := int
//	check := virtual !() -> void
//	{
//		printf("yep %i\n",x)
//	}
//}

SimpleClass := class
{
	x := int
	y := int

	this := !(int a) -> void
	{
		x = a
		y = a
	}
}

TGCObject := class
{
	RefValue := int

	IncRef := virtual !() -> { RefValue += 1}
	DecRef := virtual !() -> { RefValue -= 1}
	Destroy := virtual !() -> void {}
}

internalHVNew := !() .{@T} -> T^
{
	result = calloc(1,T->TypeSize)->{T^}
	if T->TypeGroup == "Class"
		internalHVInitClass(result^)
}
internalHVNewConstructed := !(@T^ obj, args...) -> T^
{
	result = obj
	result.this(args...)
}

internalHVDelete := !(@T^ x) -> void
{
	free(x)
}

internalHVGetDepth := !() -> int
{
}
internalHVSetDepth := !(int depth) -> void
{
}
internalHVPushGCObject := !(TGCObject^ obj) -> void
{
}
main := !(int argc, char^^ argv) -> int
{
	test := new TGCObject
	//test := new TGCObject2
	//printf("a\n")
	//defer printf("c\n")
	//printf("b\n")
	//y := Cls2
	//y.x = 200
	//y.y = 2
	//y.z = 3
	//i := Cls^
	//i = y&
	//i.check()
}
