
MixinObject1 := class
{
	x := int
	Contain := poison !(!(int)&-> bool l) -> bool
	{
		if l(this[^])
			return true
		return false
	}
}
MixinObject2 := class
{
	y := int
	GetY := !() -> int
	{
		return y
	}
	Test := poison !() -> void
	{
		printf("hello\n")
	}
}
MixinVirtualObj := class
{
	z := int
	GetLen := virtual !() -> int
	{
		return z
	}
}
ShouldBe := class 
{
	MulLen := poison !(T itm) -> T
	{
		return itm*GetY()
	}
}
TestTemplate := class .{@T} extend MixinObject1 , MixinObject2 , ShouldBe
{
	z := TGCObject
}

main := !(int argc, char^^ argv) -> int
{
	x := 0
	while true
	{
		FlushTempMemory()

		try
		{
			try
			{
				throw new Exception("")
			}catch(IException^ e)
			{
				try
				{
					throw new Exception("")
				}catch(IException^ e)
				{
					throw new Exception("")
				}
			}
		}catch(IException^ e)
		{
			printf("nah? \n")
		}
	}
	//c := TestTemplate.{int}
	//c.y = 13
	//printf("test %i\n",c.MulLen(10))
	return 0
}
+
