

//AClass := class
//{
//	ggg := virtual int TODO Creates bug
//	g3 := int
//}

main := !(char^[] args) -> int
{
	test := HybridQueue.{int,5}
	for i : 10
	{
		test.Push(i*100)
	}
	printf("hoy %i\n",test[1])
	for it : test
	{
		printf("hm %i\n",it)
	}

	//hop := () ==>
	//{
	//	for i : 100
	//	{
	//		yield i
	//	}
	//	for i : 100
	//	{
	//		yield i
	//	}
	//}
	//hop2 := hop.Capture()

	//printf("hop %i\n",hop2())
	//printf("hop %i\n",hop2())
	//printf("hop %i\n",hop2())
	//printf("hop %i\n",hop2())

	return 0
}

//TODO
//decorator function
//@cache function, @once function/call
//decorator func pass constants?
//default initializer for growing class, and const value as global const
//field becomes static if it is not inside class
//zero size class optimizations
//x := field 10  non types not working
//class->AllFields to work with new Fields
//Allow code to be interpreted
//interpreter support File,XML
//Class can be created by script
//Module Vulkan uses Normal Class and usese new API


DllTest := !() -> void
{
	tst := FSGetFile("libwebp-7.dll")
	mp := tst.GetMap()

	win32LoadLibrary(mp.Get(),tst.Size())
}

RegExpTest := !() -> void
{
	itBuilder := LexBuilder

	itBuilder.ApplyReg("\"((\\\\ [^]) | [^\"\\\\])*\"",1)
	itBuilder.ApplyReg("[0-9]+(.[0-9]+)?",2)
	itBuilder.ApplyReg("0x[0-9a-fA-F]+([0-9a-fA-F]+)?",2)
	itBuilder.ApplyReg(" true | false | null",3)
	itBuilder.ApplyReg("\\{ | \\} | \\, | \\: | \\[ | \\]",4)
	itBuilder.ApplyReg("\\  | \\t | \\n",5)

	res := itBuilder.GenerateMachine()

	// res.PrintIt()

	tst := FSGetFile("test.json")
	mp := tst.GetMap()

	res.RegExpReadText(mp.Get(),mp.Size(), (st,a) ==> {
		if a != 5
		{
			printf("hm <%s>\n",st.GetString().Str())
		}
	})
}
