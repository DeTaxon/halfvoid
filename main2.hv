//TODO
// after new stable version, in winapi.clib make it back to WriteLine

main := !(char^[] args) -> int
{
	printf("extra test\n")
	return 0
	a := "abc"reg
	b := "abd"reg

	fl := new ZipRWFile(StringSpan("zip.zip"))

	if args.Size() == 2
	{
		TestData := Vector.{u8}(5)
		memcpy(TestData.GetPointer(),"world",5)
		fl.WriteFileOld(StringSpan("Regexp/test2.txt"),TestData&)
	}else{
		TestData := Vector.{u8}(5)
		memcpy(TestData.GetPointer(),"hello",5)
		fl.WriteFileOld(StringSpan("Regexp/test.txt"),TestData&)
	}

	//itFile >> XMLDecoder >> FillView(x ==> { x.PrintTree() }
	//TFlow(itFile,ImageDecoder,ImageToBuffer,BufferCoppy(ResultBuffer))
	//itFile >> ImageDecoder >> ImageToBuffer >> BufferCopy(ResultBuffer)

	//flw := TFlow(InfStream.{int}(),Uniq,File("w"))
	//flw.Push(13)

	return 0
}

//Zip file
//crc32
//deflate
//zip -v check
//if file already exists
//throw exceptions when file cannot be created, no space on disk, incorrect file format


//#Module
//{
//	xml := XMLFile(#File("vk.xml"))
//	cls := #CreateClass("VKFuncs")
//
//	#Callback(cls,"FieldMissed") (name)
//	{
//		
//	}
//}

//inline road
//static variables stays in one function
//input variadic variables C //do i need it?
//deducting type by returns
//captured values, and defer does not work
//debug data for functions in different files
SomeClass44 := class
{
	xx := int
	testCall := inline !(int cmplxName,args...) .{@HH} -> int
	{
		printf("hello world %i %i %i\n",cmplxName,args...)
		cmplxName = 1313
		printf("hello world %i %i %i\n",cmplxName,args...)
		printf("wut %i %i %i\n",HH,xx,test2())
		return 47
	}
	test2 := !() -> int
	{
		return 1734 + xx
	}
	someBug := !(int j = 13) -> void
	{
	}
}

inlineBugs := !() -> void
{
	x := 74
	c := y.testCall(x,15,-100).{477}
	printf("after %i %i\n",x,c)
}

//TODO
//decorator function
//@cache function, @once function/call
//decorator func pass constants?
//default initializer for growing class, and const value as global const
//field becomes static if it is not inside class
//zero size class optimizations
//x := field 10  non types not working
//class->AllFields to work with new Fields
//Allow code to be interpreted
//interpreter support File,XML
//Class can be created by script
//Module Vulkan uses Normal Class and usese new API


DllTest := !() -> void
{
	tst := FSGetFile("libwebp-7.dll")
	mp := tst.GetMap()

	win32LoadLibrary(mp.Get(),tst.Size())
}

RegExpTest := !() -> void
{
	itBuilder := LexBuilder

	itBuilder.ApplyReg("\"((\\\\ [^]) | [^\"\\\\])*\"",1)
	itBuilder.ApplyReg("[0-9]+(.[0-9]+)?",2)
	itBuilder.ApplyReg("0x[0-9a-fA-F]+([0-9a-fA-F]+)?",2)
	itBuilder.ApplyReg(" true | false | null",3)
	itBuilder.ApplyReg("\\{ | \\} | \\, | \\: | \\[ | \\]",4)
	itBuilder.ApplyReg("\\  | \\t | \\n",5)

	res := itBuilder.GenerateMachine()

	// res.PrintIt()

	tst := FSGetFile("test.json")
	mp := tst.GetMap()

	res.RegExpReadText(mp.Get(),mp.Size(), (st,a) ==> {
		if a != 5
		{
			printf("hm <%s>\n",st.GetString().Str())
		}
	})
}

//AClass := class
//{
//	ggg := virtual int TODO Creates bug
//	g3 := int
//}

