"@twice call" := !(!()&->void cb) -> void
{
	cb()
	cb()
}

hm := !(!(int)&->bool cb) -> void
{
	if cb(13)
	{
		printf("yes, it is 13\n")
	}else{
		printf("no, it is not 13\n")
	}
}

main := !(char^[] args) -> int
{
	hm(@1 == 13)
	hm(@1 == 12)
	// @twice 
	// for i : 1 {
	// 	printf("hi\n")
	// 	printf("why\n")
	// }

	// test := LexBuilder
	// test.ApplyReg("[a-zA-Z\\-\\.]+")
	// m := test.GenerateMachine()
	// m.PrintIt()

	// gRepo := new vRepo
	// gRepo.Init(".")

	// tst := gRepo.GetFile("main2.hv")
	// mp := tst.GetMap()

	// m.RegExpReadText(mp.Get(),mp.Size(), (st,a) ==> {
	// 	printf("hm <%s>\n",st.Normalize().Str())
	// })
	
	return 0
}
