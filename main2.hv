
MixinObject1 := class
{
	Contain := poison !(!(int)&-> bool l) -> bool
	{
		if l(this[^])
			return true
		return false
	}
}
MixinObject2 := class
{
	Test := poison !() -> bool
	{
		printf("hello\n")
	}
}

TestClass := class extend MixinObject1 , MixinObject2
{
	"~For" := !() -> !()&->int
	{
		return () ==>
		{
			for it : ![1,12,100,-3,16]
				yield it			
		}
	}
}

clA := class
{
	x := int
	y := char
}
clB := class extend clA
{
	z := char
}

VirtClass := class
{
	x := virtual !() -> int
	{
		return 17
	}
}
subVirtClass := class
{
	y := VirtClass
	z := VirtClass[4]
}
subVirtClassInh := class extend subVirtClass
{
	w := VirtClass
}

globalVClass := VirtClass
globalVClass2 := VirtClass[2]
globalVClass3 := subVirtClass
globalVClass4 := subVirtClassInh


main := !(int argc, char^^ argv) -> int
{
	globalVClass.x()
	globalVClass2[0].x()
	globalVClass3.y.x()
	globalVClass3.z[1].x()
	globalVClass4.z[3].x()



	assert(clB->TypeSize == 12)

	obj := clB

	for it,ind : obj->Fields
	{
		printf("heh %s\n",ind)
	} 
	printf("test %i\n",subVirtClassInh->TypeSize)

	t := @temp new List.{int}
	return 0
}

