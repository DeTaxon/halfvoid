
internalHVGetTaskLocalTuple := !() -> void^
{
	return g
}


internalHVEntryPoint := !(int argc,char^^ argv) -> int
{
	spn := TArraySpan.{char^}//(argv,argc)
	spn.pointer = argv
	spn.itSize = argc
	return main(spn&)
}

TArrayView := class .{@T} extend TGCObject
{
	Size := virtual !() -> int {}
	"[]" := virtual !(int i) -> T& { }
	"for" := virtual !() -> !()& -> T& {
		x := () ==> T& {
			i := 0
			s := Size()
			while i < s
			{
				yield this[i]
				i += 1
			}
		}
		preRes := x.Capture()
		return preRes
	}
	//Destroy := virtual !() -> void {}

	//Reverse := fake
	//{
	//	"[]" := virtual !(int i ) ->T& {}
	//}
}

TArraySpan := class .{@T} extend TArrayView.{T}
{
	pointer := T^
	itSize := int

	this := !(T^ p, int s) -> void
	{
		pointer = p
		itSize = s
	}
	Size := virtual !() -> int { return itSize }
	"[]" := virtual !(int i) -> T& { return pointer[i] }
}

"[]" := !(TArrayView.{@T}^ x,int i) -> T&
{
	assert(x != null)
	return x^[i]
}

//main := !(char[] args) -> void
//{
//	
//}

z := !(int[] x) -> void
{
	for it : x
	{
		printf("wa %i\n",it)
	}
}

"![]" := !(int a,int b, int c, int d) .{@ResType} -> ResType
{
	result[0] = a
	result[1] = b
	result[2] = c
	result[3] = d
}

main := !(char^[] args) -> int
{
	for it : args
	{
		printf("hey %s\n",it)
	}
	c := ![6,17,20,7,100]&
	d := TArraySpan.{int}
	d.pointer = c^[0]&
	d.itSize = 4
	z(d&)
	return 0
}



arFunc := void^
arSize := int
internalEnterGCFunction := !(TGCIObject^ arr,int maxSize) -> void
{
	arFunc = arr
	arSize = maxSize
}
internalLeaveGCFunction := !() -> void
{
}

tst := void^
thisExcp := void^ //TODO IException not supported
internalEnterTryCatch := !(void^ ptr,bool cleanGC,int gcInUse) -> void
{
	tst = ptr
}
internalLeaveTryCatch := !() -> void
{
}
internalThrowException := !(IException^ e) -> void
{
	printf("called throw %p\n",e)
	thisExcp = e
	e.IncRef()
	internalHVGCSetNullArray(arFunc->{TGCIObject^^},0,arSize - 1)
	llvmLongJump(tst)
}
internalGetException := !() -> IException^
{
	result = thisExcp->{IException^}
}

IException := class extend TGCObject
{

}

Exception := class extend IException
{
	
}
