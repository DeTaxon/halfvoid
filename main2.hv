
TestClass := class
	#LazyClass()
{
	x := int
	y := int 
	z := int
	SomeBadType := AwnserToEverything
}
TestClass2 := class extends TestClass
{
	w := int
}

MaybeHere := !() -> void
{
	#Print("Compiles")

	c := TestClass

	for it, ind : c->AllFields
	{
		printf("1: field %s %i %i\n",ind,it,TestClass->TypeSize)
	}
}
MaybeHere2 := !() -> void
{
	#Print("Compiles2")

	c2 := TestClass2
	for it, ind : c2->AllFields
	{
		printf("2: field %s %i %i\n",ind,it,TestClass2->TypeSize)
	}
}

main := !(char^[] args) -> int
{
	//c := ToString(-0.01)
	//printf("test <%s> %i\n",c,c.Size())
	
	Fnc1()
	MaybeHere()
	MaybeHere2()
	Fnc2()
}

Fnc1 := !() -> void
{
	c := TestClass
	c.x = 0
}
Fnc2 := !() -> void
{
	Fnc3()
}
Fnc3 := !() -> void
{
	c := TestClass
	c.y = 0.0
}

//TODO lazy class and fake fields
//TODO lazy class in hotload
//TODO it is REALY painfull, if .x called in child class we must call in base class and rebuild this class


#CreateCallCommand(
	Name = "ComputePi",
	Call = !(int numCount) -> Blob^
	{
		pi := CalculatePiBlob(numCount)

		ret := MakeBlob(numCount + 1)
		memset(ret.GetPointer(),0,ret.Size())
		memcpy(ret.GetPointer(),pi.GetPointer(),pi.Size())

		return ret
	}//,
	//ExchangeOutput = !(Blob^ val) -> Str
	//{
	//	return new StringOnCStr(val.GetPointer()->{char^})
	//}
)












































JavaCompile := !(HVB_FunctionEditor^ funcToCompile) -> void
{
	//printf("yep %i %i\n",funcToCompile.GetVariablesCount(), funcToCompile.GetCodeLinesCount())

	//for i : funcToCompile.GetCodeLinesCount()
	//{
	//	line := funcToCompile.GetLine(i)
	//	printf("line %s %i %i %i %i\n",line.opcode.ToCStr(),line.var1,line.var2,line.var3,line.var4)
	//}

	ResFile := new ZipFile
	ResFile.AnalizeFile("test.jar")

	jClass := JavaClass("test")
	jClass.CreateMethod("main")
	
	echo := TEchoStream
	jClass.Write(echo)
	blb := echo.GetBlob()

	ResFile.WriteFile("test.class",blb)
	ResFile.Flush()

	fl := RawFileStream("test.class","wb")
	fl.Write(blb.GetPointer(),blb.Size())

	printf("done\n")
}
JavaMain := !() -> void
{

}

//
//SwapnWork(() ==>{
//	thisTask = SpawnTask(() ==> {
//		interpretetion fails here
//		something to do with thisTask being captured
//	})
//})
//
//
//
//
//

//for i : ![1,2,3] TODO, this array is not affected by reload
//{
//	
//}




CalculatePiBlob := !(int nums) -> Blob^
{
	bigNums := nums*3
	values := malloc(bigNums*4)->{int^}

	result = new BlobOnVector(nums + 1)
	resultPtr := result.GetPointer()->{u8^}
	memset(resultPtr,0,result.Size())
	//resultPtr[nums] = 0

	i := 0
	while i < bigNums
	{
		values[i] = 2
		i += 1
	}
	i = 0
	while i < nums
	{
		j := 0
		while j < bigNums
		{
			values[j] *= 10
			j += 1
		}
		j = bigNums - 1
		while j >= 1
		{
			thisMul := j
			thisDiv := 2*j + 1

			carry := (values[j] div thisDiv)*thisMul
			modul := values[j] mod thisDiv
			values[j] = modul
			j -= 1
			values[j] += carry
		}
		num := values[0] div 10
		values[0] = values[0] mod 10

		c := 0
		while num != 0
		{
			resultPtr[i + c] += num
			if resultPtr[i + c] >= 10
			{
				resultPtr[i + c] = resultPtr[i + c] mod 10
				num = 1
			}else{
				num = 0
			}
			c -= 1
		}
		i += 1
	}
	for i : nums
	{
		resultPtr[i] += '0'
	}
}


//Zip file
//crc32
//deflate
//zip -v check
//if file already exists
//throw exceptions when file cannot be created, no space on disk, incorrect file format

//TODO
//@cache function, @once function/call
//decorator func pass constants?
//default initializer for growing class, and const value as global const
//field becomes static if it is not inside class
//zero size class optimizations
//x := field 10  non types not working
//Module Vulkan uses Normal Class and usese new API
