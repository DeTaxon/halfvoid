Cls := class
{
	x := int
	y := s64
	z := int

	

	check := virtual !() -> void
	{
		printf("nope %i\n",x)
	}
}
Cls2 := class extend Cls
{
	w := int
	check := virtual !() -> void
	{
		printf("yep %i\n",x)
	}
}
internalHVInitClass := !(@T x)  -> void
{
	x->VTable = T->VTable
}
//internalHVVirtualMethodCall := !(@T this, args...) -> {@FieldNumber}
//{
//	this->VTable.FieldNumber(this,args...)
//}

//PrintAll := !(args...) -> void
//{
//	printf("test %i %i %i\n",args...)
//}

hello := !(int x) -> void
{
	printf("hello %i\n",x)
}
hi := !(int x) -> void
{
	printf("hi %i\n",x)
}
main := !(int argc, char^^ argv) -> int
{
	z := !(int)^->void
	z = hi
	hi(999)
	//z(10)
	//y := Cls2
	//y.x = 1
	//y.y = 2
	//y.z = 3
	//i := Cls^
	//i = y&
	//i.check()
}
