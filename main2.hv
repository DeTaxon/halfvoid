

TstPre := class
{
	SomeFunc := virtual !() -> void
	{
	}
}

Tst := class extend TstPre
{
	this := !() -> void
	{
		printf("hello\n")
	}
	@once
	SomeFunc := virtual !() -> void
	{
		printf("hello\n")
	}
}

"@awork block" := !(lambd) -> void
{
	printf("block\n")
	TAwaitWork(lambd)
}
"@awork call" := !(lambd) -> void
{
	printf("oper\n")
	lambd()
}
"@twice call" := !(@LType lambd) -> LType->ResultType //TODO lambd->Type
{
	return lambd()*2
}
Copy := !(int x) -> int
{
	return x
}
//"@awork oper" := !(lambd) -> lambd->Type->ResultType
//{
//	res := lambd->Type->ResultType
//	TAwaitWork( () ==>
//	{
//		res = lambd()
//	})
//	return res
//}

main := !(int argc, char^^ argv) -> int
{
	r := Tst
	//@awork r.SomeFunc()
	c := int 
	printf("test %i\n",@twice Copy(2))

	//@awork
	//{
	//	r.SomeFunc()
	//	r.SomeFunc()
	//}
}

