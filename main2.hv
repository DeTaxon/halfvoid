

//AClass := class
//{
//	ggg := virtual int TODO Creates bug
//	g3 := int
//}


WTFClass := class
{
	x := int
	y := int
	
	hoh := !() -> void
	{
		notStatic := field int

		printf("test %i\n",notStatic)
		notStatic += 1
	}
}

ohCall := !(int counter = static 16) -> void
{
	printf("call %i\n",counter)
	counter += 1
}
//TODO
//dynamic size class
//field modifier
//dynamic size works with field modifier
//inheritance works with dynamic size
//Module Vulkan uses Normal Class
//x := field 10  non types not working

main := !(char^[] args) -> int
{
	a := WTFClass
	b := WTFClass

	printf("size %i\n",a->TypeSize)

	a.hoh()
	a.hoh()
	b.hoh()
	b.hoh()
	return 0
}

DllTest := !() -> void
{
	tst := FSGetFile("libwebp-7.dll")
	mp := tst.GetMap()

	win32LoadLibrary(mp.Get(),tst.Size())
}

RegExpTest := !() -> void
{
	itBuilder := LexBuilder

	itBuilder.ApplyReg("\"((\\\\ [^]) | [^\"\\\\])*\"",1)
	itBuilder.ApplyReg("[0-9]+(.[0-9]+)?",2)
	itBuilder.ApplyReg("0x[0-9a-fA-F]+([0-9a-fA-F]+)?",2)
	itBuilder.ApplyReg(" true | false | null",3)
	itBuilder.ApplyReg("\\{ | \\} | \\, | \\: | \\[ | \\]",4)
	itBuilder.ApplyReg("\\  | \\t | \\n",5)

	res := itBuilder.GenerateMachine()

	// res.PrintIt()

	tst := FSGetFile("test.json")
	mp := tst.GetMap()

	res.RegExpReadText(mp.Get(),mp.Size(), (st,a) ==> {
		if a != 5
		{
			printf("hm <%s>\n",st.GetString().Str())
		}
	})
}
