"@try_all block" := !(func,num) -> void
{	
	printf("heh %i\n",num)
	for i : num
	{
		try
		{
			func(i)
		}catch(IException^ e)
		{
			printf("here\n")
		}
	}
}
"@try_one block" := !(func,num) -> void //TODO #uniq
{	
	printf("heh %i\n",num)
	for i : num
	{
		try
		{
			func(i)
			return void
		}catch(IException^ e)
		{
			printf("here\n")
		}
	}
}

"@once block" := !(!()&->void lambd,bool called = static false) -> void
{
	if called
		return void
	lambd()
	called = true
}

TstFunc := !(int second,int first = static 3) -> void
{
	printf("val %i\n",first)
	first += 1
}
TestFunc2 := !() -> void
{
	@once
	{
		TstFunc(3)
	}
}


main := !(int argc, char^^ argv) -> int
{
	TestFunc2()
	TestFunc2()

	//TestArr := new int[6]
	//TestArr[^i] = i

	//@omp
	//for goodName : TestArr
	//{
	//	printf("heh %i\n",goodName)
	//	goodName *= 10
	//	printf("hoh %i\n",goodName)
	//	TSleep(1)
	//	//TODO continue
	//	//TODO return
	//}
	//printf("here\n")

	//for i : TestArr
	//	printf("tst %i\n",i)

	//@try_all
	//{
	//	//defer TODO
	//	// return TODO
	//	throw new Exception("lol")
	//	printf("line 1\n")
	//	printf("line 2\n")
	//	throw new Exception("lol")
	//	printf("line 3\n")
	//}
	
}

//@once
//main := !(int argc, char^^ argv) -> int
//{
//	@try_one 
//	@try_walk
//	{
//		printf("line 1\n")
//		printf("line 2\n")
//		printf("line 3\n")
//		printf("line 4\n")
//	}
//
//	@once
//	{
//		GetProcessCount()
//	}
//
//	@omp(4)
//	@omp(x)
//	{
//			
//	}
//
//	@omp
//	for i : 5
//	{
//	}
//
//	@once
//	for i : 5
//	{
//	}
//
//	return 0
//}
//
//"@once func" := !(args...) .{fnc}
//{
//	first := static true
//	if fnc->Result == void
//	{
//		if first
//			fnc(args...)
//		first = false
//		return void
//	}else{
//		oldValue := static fnc->Result
//		if first 
//			oldValue = fnc(args...)
//		first = false
//		return oldValue
//	}
//}
//

//"@once block" := !(lambd,bool first = true) .{} -> void
//{
//	if first
//	{
//		lambd()
//		first = false
//	}
//}

"@try_one block" := !(fnc,num) -> void
{
	for i : num
	{
		printf("doing %i\n",i)
		fnc(i)
	}
}
