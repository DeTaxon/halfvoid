

//AClass := class
//{
//	ggg := virtual int TODO Creates bug
//	g3 := int
//}


PrintFuncInt := !() -> int
{
	printf("hi\n")
	return 13
}
PrintFuncVoid := !() -> void
{
	printf("hi\n")
}

TwiceFunc := !() -> void
{
}

VoidFunc2 := !() -> void
{
	printf("YES\n")
}
VoidFunc := !() -> void
{
	result = VoidFunc2()
}

main := !(char^[] args) -> int
{
	VoidFunc()

	//TwiceFunc()
	//TwiceFunc()

	//@work PrintFuncVoid()
	//c := @work PrintFuncInt()
	//printf("hon %i\n",c)
	return 0
}

DllTest := !() -> void
{
	tst := FSGetFile("libwebp-7.dll")
	mp := tst.GetMap()

	win32LoadLibrary(mp.Get(),tst.Size())
}

RegExpTest := !() -> void
{
	itBuilder := LexBuilder

	itBuilder.ApplyReg("\"((\\\\ [^]) | [^\"\\\\])*\"",1)
	itBuilder.ApplyReg("[0-9]+(.[0-9]+)?",2)
	itBuilder.ApplyReg("0x[0-9a-fA-F]+([0-9a-fA-F]+)?",2)
	itBuilder.ApplyReg(" true | false | null",3)
	itBuilder.ApplyReg("\\{ | \\} | \\, | \\: | \\[ | \\]",4)
	itBuilder.ApplyReg("\\  | \\t | \\n",5)

	res := itBuilder.GenerateMachine()

	// res.PrintIt()

	tst := FSGetFile("test.json")
	mp := tst.GetMap()

	res.RegExpReadText(mp.Get(),mp.Size(), (st,a) ==> {
		if a != 5
		{
			printf("hm <%s>\n",st.GetString().Str())
		}
	})
}
