TGCIObject := class
{
	IncRef := virtual !() -> void { }
	DecRef := virtual !() -> void { }
	Destroy := virtual !() -> void {}
}

TGCObject := class extend TGCIObject
{
	RefValue := int

	IncRef := virtual !() -> void { RefValue += 1}
	DecRef := virtual !() -> void { RefValue -= 1}
	Destroy := virtual !() -> void {}
}

internalHVNew := !() .{@T} -> T^
{
	result&->{void^^}^ = calloc(1,T->TypeSize) //weird way to bypass DecRef
	if T->TypeGroup == "Class"
		internalHVInitClass(result^)
	if T is in TGCIObject
		result.IncRef()
}
internalHVNewConstructed := !(@T^ obj, args...) -> T^
{
	result = obj
	result.this(args...)
}

"=" := !(TGCIObject^& itm1, TGCIObject^ itm2) -> void
{
	itm2?.IncRef()
	if itm1 != null
	{
		itm1.DecRef()
	}
	itm1&->{void^^}^ = itm2->{void^}
}

internalHVDelete := !(@T^ x) -> void
{
	free(x)
}

internalHVGetDepth := !() -> int
{
}
internalHVSetDepth := !(int depth) -> void
{
}
main := !(int argc, char^^ argv) -> int
{
	//test := new TGCObject
	x := int^
	if x == x
		printf("hey %p\n",null)
	return 0
}
