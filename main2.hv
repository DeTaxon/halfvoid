
ForContainer := class extend TGCObject
{
	IsEnd := virtual !() -> bool { printf("yep\n") return true }
	Inc := virtual !() -> void {}
	DoWork := virtual !() -> void {}
	Destroy := virtual !() -> void { printf("test\n")}
}

tstf := !(!()&->ForContainer^ initObj) -> void
{
	vals := initObj()
	while(not vals.IsEnd())
	{
		vals.DoWork()
		vals.Inc()
	}
}


main := !(int argc, char^^ argv) -> int
{
	c := half
	c = 7
	printf("test %f\n",2.0->{half})
	//tstf(() ==> {
	//	return new ForContainer
	//})
	//#omp
	//for i : 15
	//{
	//	TSleep(0.3)
	//	printf("heh %i %i\n",i)
	//}
	//TExpectWorkers(6)
	//for 5
	//{
	//	TSpawnTask(() ==> {
	//		TAwaitWork(() ==> {
	//			for 100000 
	//			{
	//				bl += 1
	//			}
	//		})
	//		printf("wut %i\n",bl)
	//	})
	//}
	return 0
}
