
testIter := class
{
	nowIndex := int
	last := int
	HaveValue := !() -> bool
	{
		return nowIndex <= last
	}
	"()" := !() -> int
	{
		nowIndex += 1
		return nowIndex
	}
}

testClass := class
{
	"for" := !() -> testIter
	{
		result.last = 5
	}
	YES := fake
	{
		"for" := !() -> testIter
		{
			result.last = 10
		}
	}
}

main := !(char^[] args) -> int
{
	hm := testClass
	for i : hm.YES
	{
		printf("test %i\n",i)
	}

	// itBuilder := LexBuilder

	// itBuilder.ApplyReg("\"((\\\\ [^]) | [^\"\\\\])*\"",1)
	// itBuilder.ApplyReg("[0-9]+(.[0-9]+)?",2)
	// itBuilder.ApplyReg("0x[0-9a-fA-F]+([0-9a-fA-F]+)?",2)
	// itBuilder.ApplyReg(" true | false | null",3)
	// itBuilder.ApplyReg("\\{ | \\} | \\, | \\: | \\[ | \\]",4)
	// itBuilder.ApplyReg("\\  | \\t | \\n",5)

	// res := itBuilder.GenerateMachine()

	// // res.PrintIt()

	// tst := FSGetFile("test.json")
	// mp := tst.GetMap()

	// res.RegExpReadText(mp.Get(),mp.Size(), (st,a) ==> {
	// 	if a != 5
	// 	{
	// 		printf("hm <%s>\n",st.GetString().Str())
	// 	}
	// })
	
	return 0
}
