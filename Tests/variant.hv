
Variant := class .{@TypeList...}
{
	selectedIndex := int
	baseValues := Tuple.{TypeList...}

	"=" := !(@T newValue) .{ TypeIndex = TypeList.IndexOf(T)? } -> void
	{
		selectedIndex = TypeIndex
		baseValue.TypeIndex = newValue
	}

	"is" := !().{@ExpectedType, TypeIndex = TypeList.IndexOf(ExpectedType)? } -> bool
	{
		return selectedIndex == TypeIndex
	}
	"->{}?" :=  !().{@ExpectedType,TypeIndex = TypeList.IndexOf(ExpectedType)? } -> ref ExpectedType
	{
		if selectedIndex != TypeIndex
			return null
		return baseValues.TypeIndex
	}
}

VariantTest := !() -> bool
	#Mark("Test")
{
	test := Variant.{int,float,Str}

	switch RandInt(1..3)
	{
		case 1 test = 15
		case 2 test = 14.3
		case 3 test = "Hello"
	}

	if test is int
	{
		test += 15
	}

	switch test is
	{
	case int
		printf("test is int   %i\n",test)
	case float
		printf("test is float %f\n",test)
	case Str
		printf("test is Str   %s\n",test)
	}

	if test is int
	{
		test->Clean = 3.4
		assert(test is float)
	}
	return 0
}

