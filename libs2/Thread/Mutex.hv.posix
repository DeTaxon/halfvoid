
Mutex := class extend TGCObject
{
	itBuffer := char[1024]
	this := !() -> void
	{
		pthread_mutex_init(itBuffer[0]&,null)
	}
	Lock := !() -> void
	{
		pthread_mutex_lock(itBuffer[0]&)
	}
	Unlock := !() -> void
	{
		pthread_mutex_unlock(itBuffer[0]&)
	}
	Destroy:= virtual !() -> void
	{
		pthread_mutex_destroy(itBuffer[0]&)
	}
}

ConVar := class extend TGCObject
{
	itBuffer := char[1024]
	this := !() -> void
	{
		pthread_cond_init(itBuffer[0]&,null)
	}
	Wait := !(Mutex^ mtx) -> void
	{
		pthread_cond_wait(itBuffer[0]&,mtx)
	}
	WaitFor := !(Mutex^ mtx,double waitTime) -> void
	{
		timSpec := u64[2]
		timSpec[0] = waitTime->{int}
		timSpec[1] = ((waitTime - timSpec[0]->{int})*1000000000)->{int}
		timSpec[1] = timSpec[1] mod 100000000
		pthread_cond_timedwait(itBuffer[0]&,mtx,timSpec&)
	}
	Notify := !() -> void
	{
		pthread_cond_signal(itBuffer[0]&)
	}
	NotifyAll := !() -> void
	{
		pthread_cond_broadcast(itBuffer[0]&)
	}
	Destroy := !() -> void
	{
		pthread_cond_destroy(itBuffer[0]&)
	}
}

