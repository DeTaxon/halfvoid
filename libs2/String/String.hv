String := class extend StringView
{
	charPtr := char^
	itSize := int

	this := !(char^ inp) -> void
	{
		if inp == null
		{
			charPtr = null
			itSize = 0
		}else{
			itSize = strlen(inp)
			charPtr = malloc(itSize + 1)->{char^}
			memcpy(charPtr,inp,itSize)
			charPtr[itSize] = 0
		}
	}
	this := !(char^ inp, int size) -> void
	{
		itSize = size
		charPtr = malloc(itSize + 1)->{char^}
		assert(charPtr != null)
		memcpy(charPtr,inp,itSize)
		charPtr[itSize] = 0
	}
	Destroy := virtual !() -> void
	{
		if charPtr == null
			return void
		
		free(charPtr)
		charPtr = null
		itSize = 0
	}
	"[]" := !(int ind) -> int
	{
		assert(ind >= 0 and ind < itSize)
		return charPtr[ind]
	}
	"[]" := virtual !(Range ind) -> StringSpan
	{
		result.ptr = charPtr
		result.itSize = itSize
	}
	Str := virtual !() -> char^
	{
		return charPtr
	}
	Size := virtual !() -> int
	{
		return itSize
	}

	GetString := virtual !() -> String^
	{
		return this&
	}
	Size := !() -> int { return itSize }
	NonNullStr := virtual !() -> char^ { return charPtr }
}

//"->{}" := !(TString^ st) .{char^} -> char^
//{
//	return st.Str()
//}

"<=>" := !(char^ a, char^ b) -> int
{
	if a->{void^} == null and b->{void^} == null
		return 0
	if a->{void^} == null
		return -1
	if b->{void^} == null
		return 1
	return strcmp(a,b)
}
"!=" := !(char^ a,char^ b) -> bool
{
	cmp := a <=> b
	result = cmp != 0
}
"==" := !(char^ a, char^ b) -> bool
{
	cmp := a <=> b
	result = cmp == 0
}

"->{}" := !(String st) .{char^} -> char^
{
	return st.Str()
}
"->{}" := !(StringSpan spn) .{char^} -> String^
{
	return spn.GetString()
}


StringConcat := !(args...) -> String^
{
	echo := TEchoStream

	for it : args
	{
		echo << it
	}
	return echo.GetString()
}
