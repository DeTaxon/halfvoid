AppendClass VulkanInstance
{
	CreateTexture := virtual !() -> TVkTexture^
	{
		result = new TVkTexture
		result.itInstance = this&
	}
}


TVkTexture := class
{
	itInstance := VulkanInstance^
	memObj := TVkMemoryObject^
	itImg := VkImage
	itImgView := VkImageView
	itW := int
	itH := int

	refCounter := int
	
	Img := !() -> VkImage { return itImg }
	View := !() -> VkImageView { return itImgView }
	CreateObject := !(int w, int h) -> int
	{
		CreateObject(w,h,(x,y) ==> {})
	}
	CreateObject := !(int w, int h,!(VkImageCreateInfo^,VkImageViewCreateInfo^)&-> void createSettings) -> int
	{
		itW = w
		itH = h
		newImg := VkImageCreateInfo()
		newImg.extent.width = w
		newImg.extent.height = h
		newImg.extent.depth = 1
		newImg.format = VK_FORMAT_R8G8B8A8_UNORM
		newImg.imageType = VK_IMAGE_TYPE_2D
		newImg.samples = VK_SAMPLE_COUNT_1_BIT
		newImg.tiling = VK_IMAGE_TILING_OPTIMAL
		newImg.usage = VK_IMAGE_USAGE_TRANSFER_DST_BIT or_b VK_IMAGE_USAGE_SAMPLED_BIT
		newImg.sharingMode = VK_SHARING_MODE_EXCLUSIVE
		newImg.mipLevels = 1
		newImg.arrayLayers = 1
		//newImg.queueFamilyIndexCount = 0
		newImg.initialLayout = VK_IMAGE_LAYOUT_UNDEFINED

		vi := VkImageViewCreateInfo()
		vi.image = itImg
		vi.viewType = VK_IMAGE_VIEW_TYPE_2D
		vi.format = VK_FORMAT_R8G8B8A8_UNORM
		//vi.components = VK_COM
		vi.subresourceRange.aspectMask = VK_IMAGE_ASPECT_COLOR_BIT
		vi.subresourceRange.levelCount = 1
		vi.subresourceRange.layerCount = 1

		createSettings(newImg&,vi&)
		vi.format = newImg.format

		memInfp := VkMemoryRequirements
		itInstance.Funcs.vkCreateImage(itInstance.LogicalDevice,newImg&,null,itImg&)

		if itImg == null
			throw new Exception("Could not create texture")

		itInstance.Funcs.vkGetImageMemoryRequirements(itInstance.LogicalDevice,itImg,memInfp&)

		memObj = itInstance.CreateMemoryObject(memInfp.size,memInfp.memoryTypeBits)

		itInstance.Funcs.vkBindImageMemory(itInstance.LogicalDevice,itImg,memObj.Get(),0)

		vi.image = itImg

		itInstance.Funcs.vkCreateImageView(itInstance.LogicalDevice,vi&,null,itImgView&)

		return memInfp.memoryTypeBits
	}
	toPwr2 := !(int x) -> int
	{
		i := 1
		while x > i
			i *= 2
		return i
	}
	CreateTexture := !(vRepoFile^ itFile) -> void
	{	
		imgFile := TImageFile(itFile)

		useAlpha := imgFile.haveAlpha
		if not vkRGB8Support
			useAlpha = true

		memTyp := CreateObject(imgFile.itWidth,imgFile.itHeight,(x,y) ==> {
			x.format = VK_FORMAT_R8G8B8_UNORM
			if useAlpha x.format = VK_FORMAT_R8G8B8A8_UNORM
		})

		ptrToSet := itInstance.itStageMemory.Map()->{u8^}

		if useAlpha
		{
			imgFile.StoreToMemory("RGBA",ptrToSet)
		}else{
			imgFile.StoreToMemory("RGB",ptrToSet)
		}
		itInstance.itStageMemory.Unmap()
		vStageCpyToImage(itImg,itW,itH) //TODO

	}
	Destroy := virtual !() -> void //TODO double delete
	{
		itInstance.Funcs.vkDestroyImageView(itInstance.LogicalDevice,itImgView,null)
		itInstance.Funcs.vkDestroyImage(itInstance.LogicalDevice,itImg,null)
		memObj.Destroy()
	}
}
