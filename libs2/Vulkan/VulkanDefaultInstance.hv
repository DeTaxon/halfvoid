VulkanDefaultInstance := class extend VulkanGLFWInstance
{
	Init := !() -> void
	{
		super()

		CreateSamples()
	}
	LayerStep := virtual !(VkLayerProperties[] supportedLayers, List.{char^} usingLayers) -> void
	{
		for i : supportedLayers.Size()
		{
			//printf("%i : %s\n",i,supportedLayers[i].layerName&)
		}
		addLayer := (char^ nm) ==> 
		{
			for it : supportedLayers
			{
				if it.layerName[0]& == nm
				{
					usingLayers.Push(nm)
				}
			}
		}
		addLayer("VK_LAYER_LUNARG_standard_validation")
		addLayer("VK_LAYER_KHRONOS_validation")
		addLayer("VK_LAYER_LUNARG_vktrace")
	}
	ExtensionStep := virtual !(VkExtensionProperties[] supportedExtensions, List.{char^} usingExtensions) -> void
	{
		for it : supportedExtensions
		{
			//printf("extension %s\n",it.extensionName[0]&)
		}
		addExt := (char^ nm) ==>
		{
			for it : supportedExtensions
			{
				if it.extensionName[0]& == nm
				{
					usingExtensions.Push(nm)
				}
			}
		}

		addExt("VK_EXT_debug_report")
		addExt("VK_KHR_wayland_surface")
		addExt("VK_KHR_xcb_surface")
		addExt("VK_KHR_xlib_surface")
		addExt("VK_KHR_win32_surface")
		addExt("VK_KHR_surface")
		addExt("VK_KHR_get_physical_device_properties2" )
		addExt("VK_KHR_storage_buffer_storage_class")
	}
	AppInfoStep := virtual !(VkApplicationInfo appInfo) -> void
	{
		appInfo.pApplicationName = "DefaultSettings"
		appInfo.applicationVersion = 1
		appInfo.pEngineName = "SimpleWrapper"
		appInfo.engineVersion = 1
		appInfo.apiVersion = 4194325//(1 << 22) + (0 << 11) + 21
	}
	DebugStep := virtual !() -> void
	{
		//if Funcs.vkCreateDebugReportCallbackEXT != null
		//{
		//	debPrint := VkDebugReportCallbackCreateInfoEXT()
		//	debPrint.sType = 1000011000
		//	debPrint.pfnCallback&->{void^^}^ = VkDebugCallback->{void^}
		//	debPrint.flags = 2 + 4 + 8// + 16
		//	Funcs.vkCreateDebugReportCallbackEXT(Instance,debPrint&,null,vkDebugObj&)
		//}
	}
	DeviceSelectStep := virtual !(VkPhysicalDevice[] deviceList) -> int
	{
		for it,i : deviceList
		{
			printf("device id %i\n",i)

			devProp := VkPhysicalDeviceProperties
			Funcs.vkGetPhysicalDeviceProperties(it,devProp&)
				
			printf("-name %s\n",devProp.deviceName&)
			printf("-type %i\n",devProp.deviceType)

			propsCount := u32
			Funcs.vkGetPhysicalDeviceQueueFamilyProperties(it,propsCount&,null)
			prps := Vector.{VkQueueFamilyProperties}(propsCount)
			Funcs.vkGetPhysicalDeviceQueueFamilyProperties(it,propsCount&,prps.GetPointer())

			for it,j : prps
			{
				printf("-quque family %i\n",j)
				printf("-- queueCount %i\n",it.queueCount)

				printf("-- queueFlags {")
				if (it.queueFlags and_b 1) != 0
					printf(" GRAPHICS")
				if (it.queueFlags and_b 2) != 0
					printf(" COMPUTE")
				if (it.queueFlags and_b 4) != 0
					printf(" TRANSFER")
				if (it.queueFlags and_b 8) != 0
					printf(" SPARSE_BINDING")
				printf(" }\n")
			}
		}
		return 2
	}
	DeviceExtensionStep := virtual !(VkExtensionProperties[] deviceExtensions, List.{char^} expectDeviceExtensions) -> void 
	{ 
		expectDeviceExtensions.Push("VK_KHR_swapchain") //TODO check for swapchains

		//halfFloatExt := "VK_KHR_16bit_storage" //TODO maybe add it
		//if devSupports.Contain(halfFloatExt)
		//{
		//	physExts.Insert(halfFloatExt)
		//	//physExts << "VK_KHR_get_physical_device_properties2" 
		//	physExts.Insert("VK_KHR_storage_buffer_storage_class")
		//	vkHalfFloatSupport = true
		//}
	}


	SamplerNearest := VkSampler
	SamplerLinear := VkSampler
	CreateSamples := !() -> void
	{
		imV := VkSamplerCreateInfo()
		imV.magFilter = VK_FILTER_NEAREST
		imV.minFilter = VK_FILTER_NEAREST
		imV.mipmapMode = VK_SAMPLER_MIPMAP_MODE_NEAREST
		imV.addressModeU = VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE
		imV.addressModeV = VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE
		imV.addressModeW = VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE
		//imV.mpLodBias = 0.0f
		//imV.anisotropyEnable = VK_FALSE
		imV.maxAnisotropy = 1.0
		imV.compareEnable = VK_FALSE
		imV.compareOp = VK_COMPARE_OP_ALWAYS
		imV.minLod = 0.0
		imV.maxLod = 0.0
		imV.borderColor = VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK
		//imV.unnormalizedCoordinates = VK_FALSE

		Funcs.vkCreateSampler(LogicalDevice,imV&,null,SamplerNearest&)
		imV.magFilter = VK_FILTER_LINEAR
		imV.minFilter = VK_FILTER_LINEAR
		Funcs.vkCreateSampler(LogicalDevice,imV&,null,SamplerLinear&)
	}
}
