
vStageCpyToImage := !(VulkanInstance^ inst,VkImage tCpy,int w, int h) -> void
{
	inst.PushTransferQueueAndWait(cmd ==> {
		stg1 := VkImageMemoryBarrier()

		stg1.srcAccessMask = 0
		stg1.dstAccessMask = VK_ACCESS_TRANSFER_WRITE_BIT
		stg1.oldLayout = VK_IMAGE_LAYOUT_UNDEFINED
		stg1.newLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL
		stg1.srcQueueFamilyIndex = 0
		stg1.srcQueueFamilyIndex = not_b stg1.srcQueueFamilyIndex
		stg1.dstQueueFamilyIndex = stg1.srcQueueFamilyIndex
		stg1.image = tCpy
		stg1.subresourceRange.aspectMask = VK_IMAGE_ASPECT_COLOR_BIT
		stg1.subresourceRange.levelCount = 1
		stg1.subresourceRange.layerCount = 1


		inst.Funcs.vkCmdPipelineBarrier(cmd.Get(),VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT,
			VK_PIPELINE_STAGE_TRANSFER_BIT,0,0,null,0,null,1,stg1&)

		cpyCmd := VkBufferImageCopy
		cpyCmd.imageSubresource.layerCount = 1
		cpyCmd.imageSubresource.aspectMask = VK_IMAGE_ASPECT_COLOR_BIT
		cpyCmd.imageExtent.width = w
		cpyCmd.imageExtent.height = h
		cpyCmd.imageExtent.depth = 1

		inst.Funcs.vkCmdCopyBufferToImage(cmd.Get(),inst.itStageMemory.GetBufferPointer()^,tCpy,VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL,1,cpyCmd&)

		stg2 := VkImageMemoryBarrier()
		stg2.srcAccessMask = VK_ACCESS_TRANSFER_WRITE_BIT
		stg2.dstAccessMask = VK_ACCESS_SHADER_READ_BIT
		stg2.oldLayout = VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL
		stg2.newLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL
		stg2.srcQueueFamilyIndex = 0
		stg2.srcQueueFamilyIndex = not_b stg2.srcQueueFamilyIndex
		stg2.dstQueueFamilyIndex = stg2.srcQueueFamilyIndex
		stg2.image = tCpy
		stg2.subresourceRange.aspectMask = VK_IMAGE_ASPECT_COLOR_BIT
		stg2.subresourceRange.levelCount = 1
		stg2.subresourceRange.layerCount = 1

		inst.Funcs.vkCmdPipelineBarrier(cmd.Get(),VK_PIPELINE_STAGE_TRANSFER_BIT,VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT,0,0,null,0,null,1,stg2&)
	})
}
vSetTexture := !(VulkanInstance^ inst,VkDescriptorSet toSet,TVkTexture^ donor,VkSampler smSampler) -> void
{
	imgI := VkDescriptorImageInfo
	imgI.sampler = smSampler
	imgI.imageView = donor.itImgView
	imgI.imageLayout = VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL

	wrT := VkWriteDescriptorSet()
	wrT.descriptorCount = 1
	wrT.descriptorType = VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER
	wrT.pImageInfo&->{void^^}^ = imgI&
	wrT.dstSet = toSet

	inst.Funcs.vkUpdateDescriptorSets(inst.LogicalDevice,1,wrT&,0,null)
}
