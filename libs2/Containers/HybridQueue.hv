HybridQueue := class .{@T,@HSize} extend TArrayView.{T}
{
    StaticSize := int
    StaticArray := T[HSize]
    ListArray := List.{T}

    "[]" := virtual !(int i) -> ref T
	{
        if i >= HSize
        {
            return ListArray[i - HSize]
        }
		return StaticArray[i]
	}
	Size := virtual !() -> int
	{
		return StaticSize + ListArray.Size()
	}

    Push := !(T itm) -> void
    {
        if StaticSize < HSize
        {
            StaticArray[StaticSize] = itm
            StaticSize += 1
        }else{
            ListArray.Push(itm)
        }
    }
    Emplace := !(args...) -> void
    {
        if StaticSize < HSize
        {
			ZeroMem(StaticArray[StaticSize])
            StaticArray[StaticSize].this(args...)
            StaticSize += 1
        }else{
            ListArray.Emplace(args...)
        }
    }
	Destroy := !() -> void
	{
		if T->IsGCPointer
		{
			for i : StaticSize
				StaticArray[i] = null
		}
		StaticSize = 0
		ListArray.Destroy()
	}
}
