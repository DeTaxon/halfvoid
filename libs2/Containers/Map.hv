AVLMap := type.{@KEY,@VALUE} ContainerCommonMap.{AVLTree,KEY,VALUE}
RBMap := type.{@KEY,@VALUE} ContainerCommonMap.{RBTree,KEY,VALUE}

ContainerCommonMap := class .{@TreeType,@KEY,@VALUE} extend TGCObject
{
	itTree := TreeType.{BadPair.{KEY,VALUE}}
	itSize := int

	this := !() -> void
	{
		itSize = 0
	}
	"[]?" := !(KEY dat) -> ref VALUE
	{
		cnst := BadPair.{KEY,VALUE}
		cnst.first = dat
		resl := itTree.FindNode(cnst)
		if resl != null
		{
			return resl.data.second
		}
	}
	"[]" := !(KEY dat) -> ref VALUE
	{
		resl := CommonTreeNode.{BadPair.{KEY,VALUE}}^
		cnst := BadPair.{KEY,VALUE}
		cnst.first = dat
		if itTree.FindOrCreate(cnst,resl&)
		{
			resl.data.first = dat
			itSize += 1
		}
		return resl.data.second
	}
	Destroy := virtual !() -> void
	{
		itSize = 0
		itTree.Destroy()
	}
	//Key := !(KEY dat) .{} -> ref KEY
	//{
	//	resl := itTree.FindNode(BadPair.{KEY,VALUE}(dat))
	//	assert(resl != null)
	//	return resl.data.first
	//}
	TryFind := !(KEY dat) -> VALUE^
	{
		cnst := BadPair.{KEY,VALUE}
		cnst.first = dat
		resl := itTree.FindNode(cnst)
		if resl == null return null
		return resl.data.second&
	}
	Contain := !(KEY dat) -> bool
	{
		cnst := BadPair.{KEY,VALUE}
		cnst.first = dat
		resl := itTree.FindNode(cnst)
		return resl != null
	}
	//Contain := !(!(KEY)&->int cmpFunc) -> bool
	//{
	//	resl := itTree.FindNode((x) ==> {
	//		return cmpFunc(x.first)
	//	})
	//	return resl != null
	//}
	Remove := !(KEY dat) -> void
	{
		cnst := BadPair.{KEY,VALUE}
		cnst.first = dat
		resl := itTree.FindNode(cnst)
		if resl != null{
			containerCleanObject(resl.data.second&)
			containerCleanObject(resl.data.first&)
			itTree.RemoveNode(resl)
			itSize -= 1
		}
	}
	Reverse := fake
	{
		"for" := !() -> MapCommonIteratorReverse.{KEY,VALUE}
		{
			result.itr = itTree.Start
		}
	}

	Size := !() -> int { return itSize }
	//"in" := !(KEY val) -> bool
	//{
	//	return Contain(val)
	//}
	//Values := fake
	//{
	//	"in" := !(VALUE val) -> bool
	//	{
	//		if this[^] == val
	//			return true
	//		return false
	//	}
	//	Clone := !() .{} -> VALUE[] 
	//	{
	//		res := new VALUE[itSize]
	//		for frm : this, to : res
	//		{
	//			to = frm
	//		}
	//		return res
	//	}
	//	Get := !() -> VALUE[]
	//	{
	//		return @temp Clone()
	//	}
	//}
	"for" := !() -> MapCommonIterator.{KEY,VALUE}
	{
		result.itr = itTree.Start
	}
}

MapCommonIterator := class .{@KEY,@VALUE}
{
	itr := CommonTreeNode.{BadPair.{KEY,VALUE}}^
	stk := HybridStack.{CommonTreeNode.{BadPair.{KEY,VALUE}}^,20}
	HaveValue := !() -> bool
	{
		return itr != null or stk.Size() != 0
	}
	"()" := !(KEY^& k) -> ref VALUE
	{
		while itr != null
		{
			stk.PushFront(itr)
			itr = itr.Left
		}
		itr = stk.Pop()
		k = itr.data.first&
		prev := itr
		itr = itr.Right
		return prev.data.second
	}
}

MapCommonIteratorReverse := class .{@KEY,@VALUE}
{
	itr := CommonTreeNode.{BadPair.{KEY,VALUE}}^
	stk := HybridStack.{CommonTreeNode.{BadPair.{KEY,VALUE}}^,20}
	HaveValue := !() -> bool
	{
		return itr != null or stk.Size() != 0
	}
	"()" := !(KEY^& k) -> ref VALUE
	{
		while itr != null
		{
			stk.PushFront(itr)
			itr = itr.Right
		}
		itr = stk.Pop()
		k = itr.data.first&
		prev := itr
		itr = itr.Left
		return prev.data.second
	}
}
