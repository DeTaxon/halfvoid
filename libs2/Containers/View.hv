TArrayView := class .{@T} extend TGCObject
{
	Size := virtual !() -> int {}
	"[]" := virtual !(int i) -> T& { }
	"for" := virtual !() -> !()& -> T& {
		x := () ==> T& {
			i := 0
			s := Size()
			while i < s
			{
				yield this[i]
				i += 1
			}
		}
		preRes := x.Capture()
		return preRes
	}
}

TArraySpan := class .{@T} extend TArrayView.{T}
{
	pointer := T^
	itSize := int

	this := !(T^ p, int s) -> void
	{
		pointer = p
		itSize = s
	}
	Size := virtual !() -> int { return itSize }
	"[]" := virtual !(int i) -> T& { return pointer[i] }
}


"[]" := !(TArrayView.{@T}^ x,int i) -> T&
{
	assert(x != null)
	return x^[i]
}

"![]" := !(args...) .{@ResType} -> ResType
{
	for it,i : args
	{
		result[i] = it
	}
}

internalCreateEmptyArray := !() .{@Typ} -> TArraySpan.{Typ}
{
	result.itSize = 0
}

"->{}" := !(@Typ[@Size] itArr) .{@Typ[]} -> TArraySpan.{Typ}
{
	result.pointer = itArr[0]&
	result.itSize = Size
}

"->{}" := !(TArraySpan.{@T} x) .{T[]} -> T[]
{
	return x&
}

ToVector := !(@WAWA[] this) -> Vector.{WAWA}^
{
	result = new Vector.{WAWA}(this.Size())
	result^[i] = this[^i]
}
