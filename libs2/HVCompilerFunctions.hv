
internalHVInitClass := !(@T x)  -> void
{
	if T->TypeGroup == "Class"
	{
		if x->VTable != none
			x->VTable = T->VTable
		
		for fld : x->AllFields
		{
			if fld->TypeGroup == "Class"
			{
				internalHVInitClass(fld)
			}
		}
		if T >= TGCIObject
		{
			x.IncRef()
		}
	}
}

internalHVVirtualMethodCall := !(@T this, args...) . {@FieldNumber} -> void // return type ignored and replaced by compiler with T->Result
{
	assert(this->VTable != null)
	return this->VTable.FieldNumber(this,args...)
}


ZeroMem := !(@T& x) -> void
{
	memset(x&,0,T->TypeSize)
	if T->TypeGroup == "Class"
		internalHVInitClass(x)
}

internalHVCreateTuple := !(args...) . {@ResType} -> ResType
{
	printf("res tuple %p %i\n",result&, ResType->TypeSize)
	for it,i : args
	{
		printf("seting tuple %i %p\n",i,result.i&)
		result.i = it
	}
}
