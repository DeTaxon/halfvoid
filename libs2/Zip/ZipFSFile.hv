vRepoFile := class extend vRepoObject
{
	ptrToRepo := vRepo^
	ptrToZip := vZipEntry^
	fileSize := u64

	this := !() -> void
	{
		ptrToProxy = null
	}
	GetFile := !(StringView fileName) -> vRepoFile^
	{
		return ptrToRepo.GetFile(fileName,upFolder)
	}
	GetMap := virtual !() -> FileView^
	{
		if ptrToZip != null
		{
			return ptrToZip.GetMap()
		}

		return new ZipFSFileView(this&)
	}
	GetBlob := virtual !() -> Blob^
	{
		fileMap := GetMap()
		fileBlob := new BlobOnVector(fileMap.Size())
		if fileMap.Size() != 0
			memcpy(fileBlob.GetPointer(),fileMap.Get(),fileMap.Size())
		return fileBlob
	}
	GetModificationTime := !() -> u64
	{
		assert(ptrToZip == null)
		return fsGetModificationTime(GetPath().Str())
	}
	IsVirtual := virtual !() -> bool 
	{
		return ptrToZip != null
	}
	Size := !() -> size_t
	{
		// if ptrToZip != null
		// {
		// 	return ptrToZip.Size()
		// }
		// return fileSize
		return fileSize
	}
	IsValid := !() -> bool
	{
	}
}
