
webpGetFeatures := !(void^,u64,void^,int)^ -> int
webpGetDataRGB := !(void^,u64,void^,u64,int)^ -> void^
webpGetDataRGBA := !(void^,u64,void^,u64,int)^ -> void^

InitWebP := !() -> bool
{
	if webpGetFeatures != null
		return true
	//itLib := GetLibrary("libwebp.so","libwebp.so.6","libwebp-7.dll")
	itLib := GetLibrary("libwebp.so")
	
	webpGetFeatures&->{void^^}^ = itLib.Get("WebPGetFeaturesInternal")
	webpGetDataRGB&->{void^^}^ = itLib.Get("WebPDecodeRGBInto")
	webpGetDataRGBA&->{void^^}^ = itLib.Get("WebPDecodeRGBAInto")
	
	return true
}

TImageFile := class extend TGCObject
{
	itFile := vRepoFile^

	haveAnimation := bool //TODO getters
	haveAlpha := bool

	itWidth := int
	itHeight := int

	this := !(vRepoFile^ setFile) -> void
	{
		//TODO check image type
		itFile = setFile

		InitWebP()

		mp := itFile.GetMap()

		webpInf := int[10] // width,height,has_alpha, has_animation,type, 5 x for feature

		webpGetFeatures(mp.Get()->{void^},mp.Size()->{u64},webpInf[0]&->{void^},0x0208)
		
		itWidth = webpInf[0]
		itHeight = webpInf[1]
		haveAlpha = webpInf[2] != 0
		haveAnimation = webpInf[3] != 0
	}
	StoreToMemory := !(char^ layoutType, void^ ptrToSet) -> void //TODO 
	{
		mp := itFile.GetMap()

		if haveAnimation
		{
			//FEATURE: //TODO
		}else{
			switch layoutType
			{
				case "RGB"
					webpGetDataRGB(mp.Get(),mp.Size(),ptrToSet,itWidth*itHeight*3,itWidth*3)
				case "RGBA"
					webpGetDataRGBA(mp.Get(),mp.Size(),ptrToSet,itWidth*itHeight*4,itWidth*4)
			}
		}
	}
}
		// end := StringEnd(itFile.objName)

		// if end in !["tga","jpg","png"]
		// {
		// 	imgType := IL_TGA
		// 	switch end
		// 	{
		// 		case "jpg" imgType = IL_JPG
		// 		case "png" imgType = IL_PNG
		// 	}

		// 	ptr := itFile.Map()
		// 	defer itFile.Unmap()
		
		// 	ilImg := int
		// 	ilGenImages(1,ilImg&)
		// 	ilBindImage(ilImg)
		// 	ilLoadL(imgType,ptr,itFile.Size())
		// 	w := ilGetInteger(IL_IMAGE_WIDTH)
		// 	h := ilGetInteger(IL_IMAGE_HEIGHT)
		// 	frmt := ilGetInteger(IL_IMAGE_FORMAT)

		// 	containAlpha := frmt in ![IL_RGBA,IL_BGRA]
		// 	if not vkRGB8Support
		// 		containAlpha = true

		// 	itW = toPwr2(w)
		// 	itH = toPwr2(h)

		// 	memTyp := CreateObject(itW,itH)
		// 	ptrToSet := gStageMem.Map()->{u8^}
		// 	//ilCopyPixels := !(int xOff,int yOff,int zOff,int w, int h, int d,int format,int fType,void^ destin)^ -> void
		// 	//ilConvertImage(IL_RGBA,IL_UNSIGNED_BYTE)
		// 	//dat := ilGetData()
		// 	//memcpy(ptrToSet,dat,1024*1024*4)
		// 	ilCopyPixels(0,0,0,itW,itH,1,containAlpha ?: IL_RGBA : IL_RGB, IL_UNSIGNED_BYTE,ptrToSet)

		// 	gStageMem.Unmap()
		// 	vStageCpyToImage(itImg,itW,itH)

		// }else if end == "bmp"
		// {
		// 	mp := itFile.Map()->{u8^}
		// 	defer itFile.Unmap()

		// 	bmpH := mp->{BMPMainHeader^}
		// 	imgH := mp[BMPMainHeader->TypeSize]&->{BMPImgHeaderOld^}

		// 	//printf("bmp size %i\n",bmpH.fileSize)
		// 	//printf("header size %i , w %i , h %i, bpx %i\n",imgH.itSize,imgH.itW,imgH.itH,imgH.bitsPerPixel)
		// 	offToData := mp[BMPMainHeader->TypeSize + 40]&
		// 	itW = imgH.itW&->{int^}^
		// 	itH = imgH.itH&->{int^}^

		// 	memTyp := CreateObject(itW,itH)
		// 	ptrToSet := gStageMem.Map()->{u8^}
		// 	if imgH.bitsPerPixel == 24
		// 	{
		// 		for i : itW*itH
		// 		{
		// 			c := i*4
		// 			ptrToSet[c] = offToData[2]
		// 			ptrToSet[c + 1] = offToData[1]
		// 			ptrToSet[c + 2] = offToData[0]
		// 			ptrToSet[c + 3] = 255
		// 			offToData = offToData[3]&
		// 		}
		// 	}else{
		// 		for i : itW*itH
		// 		{
		// 			c := i*4
		// 			ptrToSet[c] = offToData[2]
		// 			ptrToSet[c + 1] = offToData[1]
		// 			ptrToSet[c + 2] = offToData[0]
		// 			ptrToSet[c + 3] = offToData[3]
		// 			offToData = offToData[4]&
		// 		}
		// 	}
		// 	Recolor(ptrToSet,itW*itH,4)
		// 	gStageMem.Unmap()
		// 	vStageCpyToImage(itImg,itW,itH)
		// }else 
		// if end == ".webp"
		// {
