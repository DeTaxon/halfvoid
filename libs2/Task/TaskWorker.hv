TaskWorker := class extend TGCObject
{
	AllTasks := AVLSet.{Task^}
	CreateTasks := List.{Task^}
	PendingTasks := FixedSizeRing.{Task^}
	DeleteTasks := List.{Task^}

	ThreadMainTask := Task^

	itThread := Thread^

	this := !() -> void
	{
		internalHVInitClass(AllTasks)
	}

	Destroy := virtual !() -> void
	{
		AllTasks.Destroy()
		ThreadMainTask = null
	}
	CreateThread := !() -> void
	{
		itThread = new Thread(() ==> {
			CurrentThread =  this&
			CurrentThread.ThreadMainTask = CurrentTask
			EnterTaskThreadCycle(false)
		})
	}
	WaitForTasks := !() -> void
	{
		itWaitMutex.Lock()
		itWaitConVar.Wait(itWaitMutex)
		itWaitMutex.Unlock()
	}
	switchToMain := !() -> void
	{
		ThreadMainTask.switchToTask()
	}
}
