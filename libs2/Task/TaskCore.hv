

EnterTaskThreadCycle := !(bool isMainThread) -> void
{
	TaskCheckMutex.Lock()
	
	while true
	{
		ct := CurrentThread

		if ct.DeleteTasks.Size() != 0
		{
			delTask := ct.DeleteTasks.Pop()
			ct.AllTasks.Remove(delTask)
			delTask.Destroy()
			delTask = null
			continue
		}


		doTask := ct.PopReadyTask()

		if doTask != null
		{
			doTask.switchToTask()
			continue
		}

		if TaskLoopWorkCounter != 0 and not someoneOnLoop
		{
			someoneOnLoop = true

			nowTime := GetSteadyTime()
	
			while TaskTimersArray.Size() != 0 and TaskTimersArray[0].0 <= nowTime
			{
				TaskTimersArray[0].1.resume()
				TaskTimersArray.Pop()
				TaskLoopWorkCounter -= 1
			}
			waitTime := 1->{double}
			if TaskTimersArray.Size() != 0
			{
				waitTime = TaskTimersArray[0].0 - nowTime
			}
			if TaskLoopWorkCounter != 0
			{
				TaskWaitTasksConVar.WaitFor(TaskCheckMutex,waitTime)
				//TaskCheckMutex.Unlock()
				//TaskCodePollWork(waitTime)
				//TaskCheckMutex.Lock()
			}
			someoneOnLoop = false
		}else{
			TaskPausedWorkers += 1
			if TaskPausedWorkers == TaskAdditionalWorkers.Size() + 1
			{
				cntr := TaskMainTaskWorker.AllTasks.Size()
				for it : TaskAdditionalWorkers
				{
					cntr += it.AllTasks.Size()
				}
				if cntr == 0
				{
					TaskQuitProgram = true
					TaskWaitTasksConVar.NotifyAll()
				}else{
					if TaskMainTaskWorker.PendingTasks.Size() != 0
						TaskWaitTasksConVar.NotifyAll()
					TaskWaitTasksConVar.Wait(TaskCheckMutex)
				}
			}else{
				TaskWaitTasksConVar.Wait(TaskCheckMutex)
			}
			TaskPausedWorkers -= 1
		}

		if TaskQuitProgram
			break
	}

	TaskCheckMutex.Unlock()

	if isMainThread
	{
		for it : TaskAdditionalWorkers
		{
			it.itThread.Join()
		}
	}
}
someoneOnLoop := bool
TaskLoopWorkCounter := int
