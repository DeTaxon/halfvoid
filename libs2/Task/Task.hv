taskIdIterator := int
taskNames := AVLMap.{int,Tuple.{char[20],bool}}
taskNamesFree := 0

Task := class extend TGCObject
{
	taskLocalData := internalHVTaskLocalTuple
	itTaskWorker := TaskWorker^

	taskLambda := !()&->void
	finishedWork := THatch
	taskId := int

	longJumpBuf := void^[5]

	this := !(!()& -> void cb) -> void
	{
		taskLambda = cb

		if #Tracy()
		{

			if taskNamesFree != 0
			{
				taskNamesFree -= 1
				for it, ind : taskNames
				{
					if it.1
						continue
					taskId = ind
					break
				}
			}else{
				taskIdIterator += 1
				taskId = taskIdIterator
			}
			taskData := ref taskNames[taskId]
			sprintf(taskNames[taskId].0[0]&,"Task%i\n",taskId)
			taskData.1 = true
		}
	}
	startTaskThread := !() -> void
	{
		TaskCheckMutex.Unlock()
		firstStartOS()
		assert(taskLambda != null)
		taskLambda()
		TaskCheckMutex.Lock()
		CurrentThread.DeleteTasks.Push(this&)
		finishedWork.EmitInner()
		taskLambda = null
		CurrentThread.ThreadMainTask.switchToTask()
	}


	resume := !() -> void
	{
		itTaskWorker.PendingTasks.Push(this&)
	}

	Destroy := virtual !() -> void
	{
		if #Tracy()
		{
			taskNamesFree += 1
			taskNames[taskId].1 = false
		}

		OSDestroy()
		taskLambda = null

		for fld : this.taskLocalData->AllFields
		{
			if fld->TypeGroup == "Pointer"
			{
				fld = null
			}
		}
	}
}


