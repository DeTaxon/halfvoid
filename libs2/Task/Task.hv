Task := class extend TGCObject
{
	taskLocalData := internalHVTaskLocalTuple
	itTaskWorker := TaskWorker^
	//OS Dependent
	uContext := u8[1024]
	stackPtr := void^

	taskLambda := !()&->void

	this := !(!()& -> void cb) -> void
	{
		taskLambda = cb.Capture()
	}
	CreateStack := !() -> void
	{
		getcontext(uContext[0]&)
		stackSize := 4*1024*1024
		stackPtr = malloc(stackSize) //TODO set stack size
		uContext[24]&->{u64^}^ = 0
		uContext[8]&->{void^^}^ = null
		uContext[16]&->{void^^}^ = stackPtr
		uContext[32]&->{u64^}^ = stackSize
		makecontext(uContext[0]&,ucontextStartTask,0)
		itTaskWorker = CurrentThread
	}
	startTaskThread := !() -> void
	{
		taskLambda()
		CurrentThread.DeleteTasks.Push(this&)
		CurrentThread.ThreadMainTask.switchToTask()
		//CurrentTask = null
		//setcontext(CurrentThread.ThreadMainTask.uContext[0]&)
	}

	switchToTask := !() -> void
	{
		oldTask := CurrentTask->{void^}
		CurrentTask = this&
		swapcontext(oldTask->{Task^}.uContext[0]&,this.uContext[0]&)
	}

	Destroy := virtual !() -> void
	{
		if stackPtr != null
		{
			free(stackPtr)
			stackPtr = null
		}
		taskLambda = null

		for fld : this.taskLocalData->AllFields
		{
			if fld->TypeGroup == "Pointer"
			{
				fld = null
			}
		}
	}
}


