Task := class extend TGCObject
{
	taskLocalData := internalHVTaskLocalTuple
	itTaskWorker := TaskWorker^

	taskLambda := !()&->void
	finishedWork := THatch

	longJumpBuf := void^[5]

	this := !(!()& -> void cb) -> void
	{
		taskLambda = cb
	}
	startTaskThread := !() -> void
	{
		TaskCheckMutex.Unlock()
		firstStartOS()
		assert(taskLambda != null)
		taskLambda()
		TaskCheckMutex.Lock()
		CurrentThread.DeleteTasks.Push(this&)
		finishedWork.EmitInner()
		taskLambda = null
		CurrentThread.ThreadMainTask.switchToTask()
	}

	switchToTask := !() -> void
	{
		oldTask := CurrentTask->{void^}
		CurrentTask = this&
		if llvmSetJump(oldTask->{Task^}.longJumpBuf) == 0
			llvmLongJump(this.longJumpBuf[0]&)
	}

	resume := !() -> void
	{
		itTaskWorker.PendingTasks.Push(this&)
	}

	Destroy := virtual !() -> void
	{
		OSDestroy()
		taskLambda = null

		for fld : this.taskLocalData->AllFields
		{
			if fld->TypeGroup == "Pointer"
			{
				fld = null
			}
		}
	}
}


