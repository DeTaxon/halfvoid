
MappedFile := class extend TGCObject
{
	hndl := void^
	fileSize  := u64
	mapId := void^
	point := u8^
	this := !(char^ fileName) -> void
	{
		hndl = null
		point = null
		Open(fileName,FILE_READ,0)
	}
	this := !(char^ fileName,int flg) -> void
	{
		hndl = null
		point = null
		if flg == FILE_CREATE
			Open(fileName,FILE_WRITE,0)
		else
			Open(fileName,flg,0)
	}
	this := !(char^ fileName,int flg, u64 itSize) -> void
	{
		hndl = null
		point = null
		Open(fileName,flg,itSize)
	}
	Open := !(char^ fileName) -> void
	{
		Open(fileName,FILE_READ,0)
	}
	Open := !(char^ fileName,int flg, u64 itSize) -> void
	{
		opTyp := GENERIC_READ
		fFlg := OPEN_EXISTING
		fS := FILE_SHARE_READ

		if itSize == 0
		{
			itSize = osFileSize(fileName)
		}

		if flg != FILE_READ
		{
			fS = fS or_b FILE_SHARE_WRITE
			opTyp = opTyp or_b GENERIC_WRITE
		}
		if flg == FILE_CREATE
		{
			fFlg = CREATE_NEW
		}
		asW := Utf8ToUtf16(fileName)
		hndl = CreateFileW(asW.GetPointer(),opTyp,fS,null,fFlg,FILE_ATTRIBUTE_NORMAL,null)
		if hndl&->{u64^}^ == not_b 0U
		{
			throw new Exception("can not open file")
		}
	
		fileSize = itSize
		
		pA := PAGE_READONLY
		if flg != FILE_READ pA = PAGE_READWRITE
		mapId = CreateFileMappingW(hndl,null,pA,fileSize&->{u32^}[1],fileSize&->{u32^}[0],null)
		if mapId&->{u64^}^ == not_b 0U
		{
			CloseHandle(hndl)
			throw new Exception("can not map file")
		}
		accTyp := FILE_MAP_READ
		if flg != FILE_READ accTyp = FILE_MAP_ALL_ACCESS
		point = MapViewOfFile(mapId,accTyp,0,0,fileSize)->{u8^}
	}

	Get := !() -> u8^
	{
		return point
	}

	ResizeFile := !(s64 newSize) -> void
	{
		assert(false) //TODO implement it
	}
	Size := !() -> int
	{
		return fileSize
	}
	Destroy := virtual !() -> void
	{
		Close()
	}
	Close := !() -> void
	{
		if hndl == null
			return void
		hndl = null
		UnmapViewOfFile(mapId)
		CloseHandle(hndl)
	}
}
