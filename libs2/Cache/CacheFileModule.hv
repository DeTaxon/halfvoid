CacheFileModule := class extend TGCObject
{
	
	base := CacheFile^
	moduleName := String^

	this := !(String^ nm, CacheFile^ bs) -> void
	{
		base = bs
		moduleName = nm
	}
	TryGetCacheValue := !(vRepoFile^ fl) -> Blob^
	{
		inRep := base.zipFile.TryGetFile(StringConcat(moduleName,"/",fl.GetPath()))
		if inRep == null
			return null
		fileTime := fl.GetModificationTime()
		cacheTime := inRep.GetModificationTime()

		if (fileTime - cacheTime)->{s64} > 0 //TODO fileTime > cacheTime does not work
		{
			return null
		}else{
			mp := inRep.GetMap()
			resBlob := new BlobOnVector(mp.Size())
			if mp.Size() != 0
				memcpy(resBlob.GetPointer(),mp.Get(),mp.Size())
			return resBlob
		}
	}
	WriteCacheOfFile := !(vRepoFile^ fl,Blob^ data) -> void
	{
		itPath := StringConcat(moduleName,"/",fl.GetPath())
		base.zipFile.WriteFile(itPath,data)
	}
	GetCacheValue := !(vRepoFile^ fl, !()&->Blob^ cb) -> Blob^
	{
		inDB := TryGetCacheValue(fl)
		if inDB != null
			return inDB
		result = cb()
		if result == null
			return null
		WriteCacheOfFile(fl,result)
	}
}
