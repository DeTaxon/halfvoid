FileView := class extend TGCObject
{
	Get := virtual !() -> u8^ {return null}
	Size := virtual !() -> u64 { return 0 }
}


ZipFSFileView := class extend FileView
{
	baseFile := vRepoFile^
	itMap := MappedFile^
	this := !(vRepoFile^ bFile) -> void
	{
		baseFile = bFile
		pth := bFile.GetPath()
		itMap = new MappedFile(pth.Str())
	}
	Get := virtual !() -> u8^ {return itMap.Get()}
	Size := virtual !() -> u64 { return baseFile.fileSize }
}

ZipFSFileViewRaw := class extend FileView
{
	pointer := u8^
	size := u64
	
	this := !(u8^ ptr, u32 siz) -> void
	{
		pointer = ptr
		size = siz
	}
	Get := virtual !() -> u8^ {return pointer}
	Size := virtual !() -> u64 { return size}
}
ZipFSFileViewZipStore := class extend ZipFSFileViewRaw
{
	baseEntry := vZipEntry^
	this := !(vZipEntry^ entry,u8^ ptr, u32 siz) -> void
	{
		baseEntry = entry

		pointer = ptr
		size = siz
	}
}

ZipFSFileViewZipDeflate := class extend FileView
{
	baseEntry := vZipEntry^
	pointer := u8^
	size := u64
	this := !(vZipEntry^ entry,u8^ ptr, u32 siz) -> void
	{
		baseEntry = entry

		pointer = ptr
		size = siz
	}
	Get := virtual !() -> u8^ {return pointer}
	Size := virtual !() -> u64 { return size}
	Destroy := virtual !() -> void
	{
		if pointer != null
		{
			free(pointer)
			pointer = null
		}
	}
}

