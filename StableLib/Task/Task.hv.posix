AppendClass Task
{
	//OS Dependent
	uContext := u8[1024]
	stackPtr := void^

	OSFirstInit := !() -> void
	{
		
	}
	
	CreateStack := !() -> void
	{
		if stackPtr != null
			return void

		getcontext(uContext[0]&)
		stackSize := 4*1024*1024
		stackPtr = malloc(stackSize) //TODO set stack size
		uContext[24]&->{u64^}^ = 0
		uContext[8]&->{void^^}^ = null
		uContext[16]&->{void^^}^ = stackPtr
		uContext[32]&->{u64^}^ = stackSize
		makecontext(uContext[0]&,ucontextStartTask,0)
		itTaskWorker = CurrentThread
	
		//if #Tracy()
		//{
		//	___tracy_emit_memory_alloc_callstack?(stackPtr,stackSize,999,0)
		//}

		oldTask := CurrentTask->{void^}
		CurrentTask = this&
		swapcontext(oldTask->{Task^}.uContext[0]&,uContext[0]&)
	}
	firstStartOS := !() -> void
	{
		oldTask := CurrentTask->{void^}
		CurrentTask = CurrentThread.ThreadMainTask
		if llvmSetJump(oldTask->{Task^}.longJumpBuf) == 0
			swapcontext(uContext[0]&,CurrentTask.uContext[0]&)
	}
	switchToTask := !() -> void
	{
		//if #Tracy()
		//{
		//	___tracy_fiber_enter(taskNames[taskId].0[0]&)
		//}

		oldTask := CurrentTask->{void^}
		CurrentTask = this&
		if llvmSetJump(oldTask->{Task^}.longJumpBuf) == 0
			llvmLongJump(this.longJumpBuf[0]&)
	}
	OSDestroy := !() -> void
	{
		if stackPtr != null
		{
			//if #Tracy()
			//{	
			//	___tracy_emit_memory_free_callstack?(stackPtr,9999,0)
			//}
			free(stackPtr)
			stackPtr = null
		}
	}
}
