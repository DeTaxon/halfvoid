CacheFile := class extend TGCObject
{
	zipFile := ZipRWFile^

	this := !(StringView fName) -> void
	{
		zipFile = new ZipRWFile(fName)

	}

	Flush := !() -> void
	{
		for it : stringModules
		{
			it->{CacheStringModule^}.Flush()
		}
		zipFile.Flush()
	}

	GetFileModule := !(StringView name) -> CacheFileModule^
	{
		return new CacheFileModule(name.GetString(),this&)
	}

	stringModules := AVLMap.{String^,void^} //TODO way to make weak references
	GetStringModule := !(StringView name) -> CacheStringModule^
	{
		stName := name.GetString()
		
		if stringModules.Contain(stName)
			return stringModules[stName]->{CacheStringModule^}

		result = new CacheStringModule(stName,this&)
		stringModules[stName] = result
	}
}

