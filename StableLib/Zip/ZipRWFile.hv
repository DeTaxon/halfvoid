
ZipRWFile := class extend TGCObject
{
	fileZipName := String^
	fileExists := bool
	fileMap := MappedFile^

	fileData := List.{zipIntEntry}
	fileUnsavedData := List.{zipRWUnsavedData}

	this := !(StringView inFileName) -> void
	{
		fileZipName = inFileName.GetString()
		if fsIsExist(fileZipName.Str())
		{
			fileExists = true
			fileMap = new MappedFile(fileZipName.Str(),FILE_READ and_b FILE_WRITE)
			ZipParse(fileMap.Get(),fileMap.Size(),fileData)
		}
	}
	TryGetFile := !(StringView fileName) -> vZipEntry2^ 
	{
		for it : fileData
		{
			if it.fileName == fileName
			{
				result = new vZipEntry2 //TODO memory leak
				result.zipSize = it.dataSize
				result.realSize = it.dataSize
				result.timeModified = it.timeModified
				result.ptrToObj = fileMap.Get()->{u8^}[it.offsetToData]&
				return void
			}
		}
		return null
	}
	WriteFile := !(StringView fileName, Blob^ data,bool useCompression = false) -> void //TODO folder support
	{
		fileData.DeleteIf(x => x.fileName == fileName)

		fileUnsavedData.Emplace()
		newEntry := ref fileUnsavedData[fileUnsavedData.Size() - 1]
		newEntry.fileName = fileName.GetString()
		newEntry.fileData = data
		newEntry.timeModified = time(null) //GetRealTimeU64Seconds()
		newEntry.compress = useCompression
	}
	Flush := !() -> void
	{
		if fileUnsavedData.Size() == 0
			return void

		endOfMainData := u64
		
		for it : fileData
		{
			itEnd := it.offsetToData + it.dataSize
			endOfMainData = max(endOfMainData,itEnd)
		}

		BusyPages := List.{Tuple.{u64,u64}} //TODO optimize to RangeSetClass
		for it : fileData
		{
			tpl := Tuple.{u64,u64}
			tpl.0 = it.offsetToFileHeader
			tpl.1 = it.offsetToFileHeader + it.dataSize + it.fileName.Size() + zipFileHeader->TypeSize
			BusyPages.SortedPush(tpl)
			endOfMainData = max(endOfMainData->{int},tpl.1->{int}) //TODO u64 comparetion is not working
		}
		freePages := List.{Tuple.{u64,u64}}

		if BusyPages.Size() != 0 and BusyPages[0].0 != 0
		{
			freePages.Emplace(0,BusyPages[0].0)
		}

		if BusyPages.Size() >= 2
		{
			for i : (BusyPages.Size() - 1)
			{
				maybeFree := !{BusyPages[i].1,BusyPages[i+1].0}
				if maybeFree.0 != maybeFree.1
					freePages.Push(maybeFree)
			}
		}
		for it : fileUnsavedData
		{
			if it.compress and it.fileData.Size() > 128 //todo do something to magic number?
			{
				newBlob := CompressBlobDeflate(it.fileData)

				if newBlob != null
				{
					it.fileDataToWrite = newBlob
					it.comprType = 8
				}else{
					it.fileDataToWrite = it.fileData
				}
			}else{
				it.fileDataToWrite = it.fileData
			}
		}

		for it : fileUnsavedData
		{
			blobToWrite := it.fileDataToWrite

			reqSize := zipFileHeader->TypeSize 
			reqSize += it.fileName.Size() 
			reqSize += blobToWrite.Size()

			foundPos := false
			for page : freePages
			{
				if page.1 - page.0 >= reqSize
				{
					foundPos = true
					it.assignedRange = page
					page.0 += reqSize
					break
				}
			}

			if not foundPos
			{
				it.assignedRange.0 = endOfMainData
				it.assignedRange.1 = endOfMainData + reqSize
				endOfMainData += reqSize
			}

			fileData.Emplace()
			newField := ref fileData[fileData.Size() - 1]

			newField.offsetToFileHeader = it.assignedRange.0
			newField.offsetToData = it.assignedRange.0 + it.fileName.Size() + zipFileHeader->TypeSize
			newField.fileName = it.fileName
			newField.dataSize = it.fileData.Size()
			newField.compressedSize = blobToWrite.Size()
			newField.timeModified = it.timeModified
			newField.compressionMethod = it.comprType
		}

		//TODO check if file exists
		
		newSize := endOfMainData

		for it : fileData
		{
			newSize += zipCentralDirectory->TypeSize
			newSize += it.fileName.Size()
			//comments,extra fields
		}

		newSize += zipEndOfDirectory->TypeSize

		if not fileExists
		{
			fileMap = new MappedFile(fileZipName.Str(),FILE_READ + FILE_WRITE,newSize)
		}else{
			if newSize != fileMap.Size()
			{
				fileMap.ResizeFile(newSize)
			}
		}
		
		ptr := fileMap.Get()->{u8^}

		for it : fileUnsavedData
		{
			fileWritePtr := ptr[it.assignedRange.0]&

			fileHeader := fileWritePtr->{zipFileHeader^}
			ZeroMem(fileHeader^)
	
			fileHeader.signature = 0x04034b50
			fileHeader.compressedSize = it.fileDataToWrite.Size()
			fileHeader.realSize = it.fileData.Size()
			fileHeader.fileNameLen = it.fileName.Size()
			fileHeader.lastModifTime&->{u32^}^ = decomposeTime(it.timeModified)
			fileHeader.compressionMethod = it.comprType

			fileWritePtr = fileWritePtr[zipFileHeader->TypeSize]&
			
			memcpy(fileWritePtr,it.fileName.NonNullStr(),it.fileName.Size())

			fileWritePtr = fileWritePtr[it.fileName.Size()]&

			if it.fileDataToWrite.Size() != 0
			{
				memcpy(fileWritePtr,it.fileDataToWrite.GetPointer(),it.fileDataToWrite.Size())
			}

			it.fileData = null
		}

		fileUnsavedData.Destroy()


		ptr = ptr[endOfMainData]&

		cdSize := 0

		offsetToCD := endOfMainData

		for it : fileData
		{
			cdEntry := ptr->{zipCentralDirectory^}
			ZeroMem(cdEntry^)
			cdEntry.signature = 0x02014b50
			cdEntry.madeWithVersion = 20
			cdEntry.versionNeedToExtract = 20
			cdEntry.compressedSize = it.compressedSize
			cdEntry.realSize = it.dataSize
			cdEntry.fileNameLen = it.fileName.Size()
			cdEntry.offsetToFileHeader = it.offsetToFileHeader
			cdEntry.compressionMethod = it.compressionMethod

			cdEntry.lastModifTime&->{u32^}^ = decomposeTime(it.timeModified)

			ptr = ptr[zipCentralDirectory->TypeSize]&

			for i : it.fileName.Size()
				it.fileName.Str()[i]

			memcpy(ptr,it.fileName.Str(),it.fileName.Size())

			ptr = ptr[it.fileName.Size()]&

			newSize += it.fileName.Size()
			//comments,extra fields

			cdSize += zipCentralDirectory->TypeSize + it.fileName.Size()
		}
		end := ptr->{zipEndOfDirectory^}
		ZeroMem(end^)
		end.signature = 0x06054b50
		end.diskNumber = 0
		end.centrDirStartDisk = 0
		end.numberOfCentralDirectoryHere = fileData.Size()
		end.totalNumberOfCentralDirectory = fileData.Size()
		end.sizeOfCentralDirectoryBytes = cdSize
		end.offsetToStartOfCD = offsetToCD
		
	}
	ZipParse := !(u8^ ptrToFl,u64 fileSize,List.{zipIntEntry} res)-> bool
	{
		eod := ptrToFl[fileSize - zipEndOfDirectory->TypeSize]&->{zipEndOfDirectory^}
	
		if eod.signature != 0x06054b50
		{
			return false
		}
	
		tableCount := eod.numberOfCentralDirectoryHere
		cdTable := ptrToFl[eod.offsetToStartOfCD]&->{zipCentralDirectory^}
		
	
		for i : tableCount
		{	
			ptrToStr := cdTable[1]&->{char^}
			newStr := StringSpan(ptrToStr,cdTable.fileNameLen)
	
			res.Emplace()
			newEn := ref res[res.Size() - 1]
			newEn.fileName = newStr.GetString()
			newEn.offsetToCDEntry = cdTable&->{u64^}^ - ptrToFl&->{u64^}^
			newEn.cdEntrySize = zipCentralDirectory->TypeSize
						+ cdTable.fileNameLen 
						+ cdTable.extraFieldsLen
						+ cdTable.commentLen
			if newStr[-1..0] != "/"
			{
				ptTH := ptrToFl[cdTable.offsetToFileHeader]&->{zipFileHeader^}
				newEn.fhSize = zipFileHeader->TypeSize + ptTH.fileNameLen + ptTH.extraFieldsLen
				dataStart := ptTH->{u8^}[newEn.fhSize]&
				newEn.offsetToData = dataStart&->{u64^}^ - ptrToFl&->{u64^}^
				newEn.offsetToFileHeader = cdTable.offsetToFileHeader
				newEn.dataSize = cdTable.realSize
				newEn.compressedSize = cdTable.compressedSize
				newEn.timeModified = loadTime(ptTH.lastModifTime,ptTH.lastModifDate)
			}else{
				newEn.offsetToData = 0
			}
	
			cdTable = cdTable->{u8^}[newEn.cdEntrySize]&->{zipCentralDirectory^}
		}
		return true
	}
	decomposeTime := !(u64 seconds) -> u32
	{
		buf := char[1024]
		res := buf[0]&->{tm^}
		localtime_r(seconds&,res)

		res.tm_year -= 80

		mSeconds := (res.tm_sec div 2) + 32 * res.tm_min + 2048*res.tm_hour
		mDay := res.tm_mday + 32*(res.tm_mon + 1) + 512*res.tm_year
		return mDay*65536 + mSeconds
	}
	loadTime := !(u32 seconds, u32 day) -> u64
	{
		buf := char[1024]
		res := buf[0]&->{tm^}

		res.tm_sec = (seconds and_b 31) * 2
		res.tm_min = (seconds div 32) and_b 63
		res.tm_hour = seconds div 2048

		res.tm_mday = day and_b 31
		res.tm_mon = (day div 32) and_b 15
		res.tm_mon -= 1
		res.tm_year = day div 512
		res.tm_year += 80

		return mktime(res)
	}
	Destroy := virtual !() -> void
	{
		Flush()
	}
}
vZipEntry2 := class
{
	ptrToObj := u8^
	offset := int
	realSize := u32
	zipSize := u32
	objName := StringSpan
	fullName := StringSpan
	comprType := int
	timeModified := u64

	"this" := !() -> void {}

	Size := !() -> size_t
	{
		return realSize
	}
	Name := !() -> StringSpan
	{
		return objName
	}
	Path := !() -> StringSpan
	{
		return fullName
	}

	GetMap := !() -> FileView^
	{
		if comprType == 8
		{
			assert(false)
		//	compressedPointer := malloc(realSize)
		//	resPtr := ptrToObj.asMapped.point[offset]&

		//	CrappyDeflateInflate(resPtr,zipSize,compressedPointer->{u8^},realSize)
		//	return new ZipFSFileViewZipDeflate(this&,compressedPointer->{u8^},realSize)
		}

		assert(comprType == 0)

		return new ZipFSFileViewZipStore(null,ptrToObj,realSize) //TODO make it non null
	}

	GetModificationTime := !() -> u64
	{
		return timeModified
	}

	Print := !(int de) -> void
	{
		for i : de printf("-")

		printf("%s %i %i %i\n",objName.GetString().Str(),realSize,zipSize,comprType)
		subFolders[^].Print(de+1)
	}
}
zipRWUnsavedData := class
{
	fileName := String^
	fileData := Blob^
	fileDataToWrite := Blob^
	timeModified := u64
	assignedRange := Tuple.{u64,u64}
	compress := bool
	comprType := int

	this := !() -> void {}
	"=" := default
}
zipIntEntry := class
{
	offsetToData := u64
	dataSize := u64
	compressedSize := u64
	offsetToFileHeader := u64
	fhSize := int
	offsetToCDEntry := u64
	cdEntrySize := int
	fileName := String^
	compressionMethod := int
	
	timeModified := u64
	
	this := !() -> void {}
	"=" := default
}
