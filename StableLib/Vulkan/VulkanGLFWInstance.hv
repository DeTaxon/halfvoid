VulkanGLFWInstance := class extend VulkanInstance
{
	itSurface := VkSurfaceKHR
	itSwapchain := VkSwapchainKHR

	surfaceImages := Vector.{VkImage}^
	surfaceImageViews := Vector.{VkImageView}^
	surfaceFramebuffer := VkFramebuffer

	SwapImageFormat := int
	SwapImageColorSpace := int
	SwapImageMode := int

	surfaceWidth := int
	surfaceHeight := int

	GetSurfaceWidth := !() -> int { return surfaceWidth }
	GetSurfaceHeight := !() -> int { return surfaceHeight }

	CreateSurface := !(void^ window) -> void
	{
		glfwCreateWindowSurface(Instance,window,null,itSurface&)

		isPres := u32
		Funcs.vkGetPhysicalDeviceSurfaceSupportKHR(PhysicalDevice,0,itSurface,isPres&)

		surfAb := VkSurfaceCapabilitiesKHR
		Funcs.vkGetPhysicalDeviceSurfaceCapabilitiesKHR(PhysicalDevice,itSurface,surfAb&)

		//printf("surface settings\n")
		//printf("img count min = %i , max = %i\n",surfAb.minImageCount,surfAb.maxImageCount)

		formsCount := u32
		Funcs.vkGetPhysicalDeviceSurfaceFormatsKHR(PhysicalDevice,itSurface,formsCount&,null)
		formts := Vector.{VkSurfaceFormatKHR}(formsCount)
		Funcs.vkGetPhysicalDeviceSurfaceFormatsKHR(PhysicalDevice,itSurface,formsCount&,formts.GetPointer())

		if false {
			printf("formats\n")
			for it : formts
			{
				printf("-format %i\n",it&->{int^}^)
			}
		}

		presMods := u32
		Funcs.vkGetPhysicalDeviceSurfacePresentModesKHR(PhysicalDevice,itSurface,presMods&,null)
		pMods := Vector.{VkPresentModeKHR}(presMods)
		Funcs.vkGetPhysicalDeviceSurfacePresentModesKHR(PhysicalDevice,itSurface,presMods&,pMods.GetPointer())

		if false
		{
			printf("supported mods\n")

			for it : pMods
			{
				switch it
				{
					case VK_PRESENT_MODE_IMMEDIATE_KHR
						printf("- IMMEDIATE\n")
					case VK_PRESENT_MODE_MAILBOX_KHR
						printf("- MAILBOX\n")
					case VK_PRESENT_MODE_FIFO_KHR
						printf("- FIFO\n")
					case VK_PRESENT_MODE_FIFO_RELAXED_KHR
						printf("- FIFO_RELAXED\n")
					case void
						printf("- unknown %i\n",it)
				}
			}
		}
		reqMod := pMods[0]
		reqMod = VK_PRESENT_MODE_FIFO_KHR
		//reqMod = VK_PRESENT_MODE_IMMEDIATE_KHR
		//for gUserModes //TODO
		//{
		//	if it in pMods
		//		reqMod = it
		//}

		preferedFormatIndex := 0

		for it,i : formts
		{
			if it&->{int^}^ == VK_FORMAT_R8G8B8A8_UNORM
			{
				preferedFormatIndex = i
				break
			}
			if it&->{int^}^ == VK_FORMAT_B8G8R8A8_UNORM
			{
				preferedFormatIndex = i
				break
			}
		}

		//TODO: format priority
		SwapImageFormat = formts[preferedFormatIndex].format
		SwapImageColorSpace = formts[preferedFormatIndex].colorSpace
		SwapImageMode = reqMod
	}
	CreateSwapchain := !(TRenderPass^ renPass,int inW,int inH) -> bool
	{
		oldSwapchain := itSwapchain

		surfaceWidth = inW
		surfaceHeight = inH
	
		crtSwap := VkSwapchainCreateInfoKHR()
		crtSwap.surface = itSurface
		crtSwap.minImageCount = 3
		crtSwap.imageFormat = SwapImageFormat
		crtSwap.imageColorSpace = SwapImageColorSpace
		crtSwap.imageExtent.width = inW
		crtSwap.imageExtent.height = inH
		crtSwap.imageArrayLayers = 1
		crtSwap.imageUsage = VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT
		crtSwap.imageSharingMode = VK_SHARING_MODE_EXCLUSIVE
		crtSwap.queueFamilyIndexCount = 0
		crtSwap.pQueueFamilyIndices = null
		crtSwap.preTransform = VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR
		crtSwap.compositeAlpha = VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR
		crtSwap.presentMode = SwapImageMode
		crtSwap.clipped = 0
		crtSwap.oldSwapchain = oldSwapchain
	
		//TODO fails as it have weird xml
		res := Funcs.vkCreateSwapchainKHR(LogicalDevice,crtSwap&,null,itSwapchain&)

		if res != 0
			return false
	
		if oldSwapchain != null
		{
			Funcs.vkDestroySwapchainKHR(LogicalDevice,oldSwapchain,null)
		}
	
		imgCount := u32
		Funcs.vkGetSwapchainImagesKHR(LogicalDevice,itSwapchain,imgCount&,null)
		surfaceImages = new Vector.{VkImage}(imgCount)
		Funcs.vkGetSwapchainImagesKHR(LogicalDevice,itSwapchain,imgCount&,surfaceImages.GetPointer())
	
		surfaceImageViews = new Vector.{VkImageView}(surfaceImages.Size())

		for it,i : surfaceImages^
		{
			imgViewC := VkImageViewCreateInfo()
			imgViewC.image = it
			imgViewC.viewType = VK_IMAGE_VIEW_TYPE_2D
			imgViewC.format = SwapImageFormat
			imgViewC.components.r = VK_COMPONENT_SWIZZLE_R
			imgViewC.components.g = VK_COMPONENT_SWIZZLE_G
			imgViewC.components.b = VK_COMPONENT_SWIZZLE_B
			imgViewC.components.a = VK_COMPONENT_SWIZZLE_A
	
			imgViewC.subresourceRange.aspectMask = VK_IMAGE_ASPECT_COLOR_BIT
			imgViewC.subresourceRange.baseMipLevel = 0
			imgViewC.subresourceRange.levelCount = 1
			imgViewC.subresourceRange.baseArrayLayer = 0
			imgViewC.subresourceRange.layerCount = 1
	
			Funcs.vkCreateImageView(LogicalDevice,imgViewC&,null,surfaceImageViews^[i]&)
		}

		fbAtt := VkFramebufferAttachmentImageInfo()
		fbAtt.width = inW
		fbAtt.height = inH
		fbAtt.layerCount = 1
		fbAtt.viewFormatCount = 1
		fbAtt.pViewFormats = SwapImageFormat&
		fbAtt.usage = 0x00000010

		fbAttCr := VkFramebufferAttachmentsCreateInfo
		fbAttCr.sType = 1000108001//TODO VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO
		fbAttCr.attachmentImageInfoCount = 1
		fbAttCr.pAttachmentImageInfos = fbAtt&
	
		fbC := VkFramebufferCreateInfo()
		fbC.pNext = fbAttCr&
		fbC.renderPass = renPass.Get()
		fbC.flags = 1 //VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT //TODO
		fbC.attachmentCount = 1
		fbC.pAttachments&->{void^^}^ = null
		fbC.width = inW
		fbC.height = inH
		fbC.layers = 1
	
		Funcs.vkCreateFramebuffer(LogicalDevice,fbC&,null,surfaceFramebuffer&)

		return true
	}
	DrawGetImage := !(u32^ imageIndex,bool^ resCall) -> bool
	{
		resCall^ = true

		Funcs.vkResetFences(LogicalDevice,1,itGlobFence&)
		resAq := Funcs.vkAcquireNextImageKHR(LogicalDevice,itSwapchain,not_b 0U,null,itGlobFence,imageIndex)
	
		Funcs.vkWaitForFences(LogicalDevice,1,itGlobFence&,1,10000000)
		if resAq ==  VK_ERROR_OUT_OF_DATE_KHR or resAq == VK_SUBOPTIMAL_KHR
		{
			resCall^ = false
			return false
		}
	
		return true
	}
	DrawPresentImage := !(u32 imageIndex) -> void
	{

		presArr := imageIndex

		res := VkResult
		pI := VkPresentInfoKHR()
		pI.pNext = null
		pI.waitSemaphoreCount = 0
		pI.pWaitSemaphores = null
		pI.swapchainCount = 1
		pI.pSwapchains&->{void^^}^ = itSwapchain&->{void^}
		pI.pImageIndices&->{void^^}^ = presArr&->{void^}
		pI.pResults&->{void^^}^ = res&

		Funcs.vkQueuePresentKHR(DrawQueue,pI&)
		Funcs.vkQueueWaitIdle(DrawQueue)
	}
}
