TVkMemBuffer := class extend TVkMemoryObject
{
	itBuffer := VkBuffer 

	initBuffer := !(int bufSize,int bufUsage) -> void
	{
    		bufC := VkBufferCreateInfo()
    		bufC.size = bufSize
    		bufC.usage = bufUsage
    		bufC.sharingMode = VK_SHARING_MODE_EXCLUSIVE //TODO 
    		itInstance.Funcs.vkCreateBuffer(itInstance.LogicalDevice,bufC&,null,itBuffer&)
	}
	bindBuffer := !() -> void
	{
    		itInstance.Funcs.vkBindBufferMemory(itInstance.LogicalDevice,itBuffer,memObj,0)
	}

	GetBufferPointer := !() -> VkBuffer^
	{
		return itBuffer&
	}
	TransferData := !(u8[] dataView) -> void
	{
		assert(itMemInfo != null)

		useStage := not itMemInfo.IsHostVisible()

		useMem := this&->{TVkMemoryObject^}
		if useStage
		{
			useMem = itInstance.itStageMemory
		}

		ptr := useMem.Map()->{u8^}

		assert(dataView.Size() <= gpuSize)

		srcPtr := dataView.GetPointer()
		if srcPtr != null
		{
			memcpy(ptr,srcPtr,dataView.Size())
		}else{
			for it, i : dataView
				ptr[i] = it
		}
		useMem.Unmap()

		if useStage
		{
			itInstance.PushTransferQueueAndWait(cmd ==> {
				cpyCmd := VkBufferCopy
				cpyCmd.size = dataView.Size()
				
				itInstance.Funcs.vkCmdCopyBuffer(cmd.Get(),itInstance.itStageMemory.itBuffer,itBuffer,1,cpyCmd&)
				memBar := VkBufferMemoryBarrier()
				memBar.srcAccessMask = VK_ACCESS_MEMORY_WRITE_BIT
				memBar.dstAccessMask = VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT
				memBar.srcQueueFamilyIndex = 0
				memBar.srcQueueFamilyIndex = not_b memBar.srcQueueFamilyIndex
				memBar.dstQueueFamilyIndex = memBar.srcQueueFamilyIndex
				memBar.buffer = itBuffer
				memBar.size = dataView.Size()

				itInstance.Funcs.vkCmdPipelineBarrier(cmd.Get(),VK_PIPELINE_STAGE_TRANSFER_BIT, VK_PIPELINE_STAGE_VERTEX_INPUT_BIT,0,0,null,1,memBar&,0,null)
			})
		}
	}
}
