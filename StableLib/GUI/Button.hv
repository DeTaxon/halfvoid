NkButton := class extend GUIObject
{
	pressCallback := !()&-> void

	itText := TextLabel
	textOffset := vec2f

	itMesh := TVkMesh^
	meshVerCount := int

	this := !(SimpleWindow^ nkCtx,float x, float y,StringView setLabel,Font^ setFont) -> void
	{
		SetSize("static",x,"static",y)

		assert(setFont != null)
		itText."this"(setFont,setLabel)
	}
	SetLayout := virtual !(VkOverlayContext^ ctx,vec2f setSize) -> void
	{
		super(ctx,setSize)
	}
	SetColor := !(ButtonColorLayer layer, int r, int g, int b, int alpha = 255) -> void
	{
		//TODO
	}
	SetPressCallback := !(!()&->void cb) -> void
	{
		pressCallback = cb.Capture()
	}
	MousePressed := virtual !(int buttonNum, bool pressed,vec2f offset) -> void
	{
		pressCallback?()
	}
	GetLayout := virtual !(VkOverlayContext^ ctx) -> Tuple.{vec2f,int,int}
	{
		result = super(ctx)
		itText.GetLayout(ctx)
	}
	SetLayout := virtual !(VkOverlayContext^ ctx,vec2f setSize) -> void
	{
		super(ctx,setSize)
		textOffset.x = (setSize.x - itText.textSize.x)*0.5
		textOffset.y = (setSize.y + itText.itFont.height*0.5)*0.5

		itColor := Color
		itColor.r = 255
		itColor.g = 128
		itColor.a = 255

		if itMesh == null
		{
			circleRadius := 5
			division := 32

			circleRadius = min(min(setSize.x,setSize.y)*0.5,circleRadius)

			
			Vertices := Vector.{u8}(GUIVertex->TypeSize*1024)
			Indexes := Vector.{u8}(u16->TypeSize*1024)

			vPtr := Vertices.GetPointer()->{GUIVertex^}
			iPtr := Indexes.GetPointer()->{u16^}

			vPtr[0].pos[0] = 0
			vPtr[0].pos[1] = 0
			vPtr[0].color[0] = itColor.r
			vPtr[0].color[1] = itColor.g
			vPtr[0].color[2] = itColor.b
			vPtr[0].color[3] = itColor.a

			verIterator := 1
			indIterator := 0

			segCount := 16

			for it,i : ![!{1,1},!{-1,1},!{-1,-1},!{1,-1}]
			{
				degOffset := i*90deg
				for j : segCount
				{
					segProc := j* (90deg / (segCount - 1))
					thisVec := ref vPtr[verIterator]
					verIterator += 1
					x := circleRadius*cos(degOffset + segProc)
					y := circleRadius*sin(degOffset + segProc)

					x += (setSize.x*0.5 - circleRadius)*it.0
					y += (setSize.y*0.5 - circleRadius)*it.1
					thisVec.pos[0] = x
					thisVec.pos[1] = y
					thisVec.color[0] = itColor.r
					thisVec.color[1] = itColor.g
					thisVec.color[2] = itColor.b
					thisVec.color[3] = itColor.a
				}
			}

			segVertexCount := verIterator - 1
			for i : segVertexCount
			{
				iPtr[i*3 + 0] = 0
				iPtr[i*3 + 1] = (i mod segVertexCount) + 1
				iPtr[i*3 + 2] = ((i + 1) mod segVertexCount) + 1
			}

			meshVerCount = verIterator*3

			for it,i : ![!{1,1},!{-1,1},!{-1,-1},!{1,-1}]
			{
				degOffset := i*90deg
				for j : segCount
				{
					segProc := j* (90deg / (segCount - 1))
					thisVec := ref vPtr[verIterator]
					verIterator += 1
					x := (circleRadius + 1)*cos(degOffset + segProc)
					y := (circleRadius + 1)*sin(degOffset + segProc)

					x += (setSize.x*0.5 - circleRadius)*it.0
					y += (setSize.y*0.5 - circleRadius)*it.1
					thisVec.pos[0] = x
					thisVec.pos[1] = y
					//thisVec.color[0] = itColor.r
					//thisVec.color[1] = itColor.g
					//thisVec.color[2] = itColor.b
					thisVec.color[3] = 0
				}
			}

			for i : segVertexCount
			{
				a := (i mod segVertexCount) + 1
				b := ((i + 1) mod segVertexCount) + 1
				c := a + segVertexCount
				d := b + segVertexCount

				iPtr[segVertexCount*3 + i*6 + 0] = a
				iPtr[segVertexCount*3 + i*6 + 1] = c
				iPtr[segVertexCount*3 + i*6 + 2] = d
				iPtr[segVertexCount*3 + i*6 + 3] = a
				iPtr[segVertexCount*3 + i*6 + 4] = d
				iPtr[segVertexCount*3 + i*6 + 5] = b
			}
			meshVerCount *= 3


			for i : verIterator
			{
				thisVec := ref vPtr[i]
				thisVec.pos[0] += setSize.x*0.5
				thisVec.pos[1] += setSize.y*0.5
			}
			
			itMesh = ctx.inst.CreateMesh(Vertices&,Indexes&,VKType(VType_UInt16,1))
		}
	}
	PushDraw := virtual !(VkOverlayContext^ ctx,VkCommandBuffer cmdB,vec2f offset) -> void
	{
		if itMesh != null
		{
			ctx.figureDrawShader.ApplyShaderToQueue(ctx.inst,cmdB,ctx.w,ctx.h)
			itMesh.Bind(cmdB)
			scales := float[4]
			scales[0] = 1.0 / ctx.w
			scales[1] = 1.0 / ctx.h
			scales[2] = offset.x
			scales[3] = offset.y
			ctx.inst.Funcs.vkCmdPushConstants(cmdB,ctx.figureDrawLayout.Get(),VK_SHADER_STAGE_VERTEX_BIT,0,4*4,scales&)
			ctx.inst.Funcs.vkCmdDrawIndexed(cmdB,meshVerCount,1,0,0,0)
		}
		itText.PushDraw(ctx,cmdB,offset + textOffset)
	}
}

ButtonColorLayer := enum
{
	"normal",
	"hover",
	"pressed"
}
