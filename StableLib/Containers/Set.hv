AVLSet := type . {@DATA} ContainerCommonSet.{AVLTree,DATA}
//RBSet.{@DATA} := type ContainerCommonSet.{RBTree,DATA}
ContainerCommonSet := class .{@TreeType,@DATA} extend TGCObject
{
	itTree := TreeType.{DATA}
	itSize := int

	this := !() -> void
	{
	}

	Insert := !(DATA dat) -> void
	{
		resl := CommonTreeNode.{DATA}^
		if itTree.FindOrCreate(dat,resl&)
		{
			resl.data = dat
			itSize += 1
		}	
	}
	Remove := !(DATA dat) -> void
	{
		resl := itTree.FindNode(dat)
		if resl != null {
			if DATA->TypeGroup == "Pointer"
			{
				resl.data = null
			}
			itTree.RemoveNode(resl)
			itSize -= 1
		}
	}
	Contain := !(DATA dat) -> bool
	{
		resl := itTree.FindNode(dat)
		return resl != null
	}
	Destroy := virtual !() -> void
	{
		itTree.Destroy()
		itSize = 0
	}
	//Contain := !(!(DATA)&->int cmpFunc) -> bool
	//{
	//	return itTree.FindNode(cmpFunc) != null
	//}
	//"==" := !(ContainerCommonSet.{@AnType,DATA} toCmp) -> bool
	//{
	//	if Size() != toCmp.Size()
	//		return false
	//	for it : this
	//		if not toCmp.Contain(it)
	//			return false
	//	return true
	//}
	//"for" := !() -> !()&-> ref DATA
	//{
	//	x := () ==> ref DATA {
	//		itr := itTree.Start
	//		stk := List.{CommonTreeNode.{DATA}^}
	//		while itr != null or stk.Size() != 0
	//		{
	//			if itr == null
	//			{
	//				itr = stk.Pop()
	//				yield itr.data
	//				itr = itr.Right
	//			}else{
	//				stk.PushFront(itr)
	//				itr = itr.Left
	//			}
	//		}
	//	}
	//	return x.Capture()
	//}
	"for" := !() -> SetCommonIterator.{DATA}
	{
		result.itr = itTree.Start
	}
	Reverse := fake
	{
		"for" := !() -> SetCommonIteratorReverse.{DATA}
		{
			result.itr = itTree.Start
		}
	}
	Size := !() -> int { return itSize }
	//"in" := !(DATA val) -> bool
	//{
	//	return Contain(val)
	//}

	ToVector := !() -> Vector.{DATA}^
	{
		result = new Vector.{DATA}(Size())
		i := 0
		for it : this
		{
			result^[i] = it
			i += 1
		}
	}
}

SetCommonIterator := class .{@T}
{
	itr := CommonTreeNode.{T}^
	stk := HybridStack.{CommonTreeNode.{T}^,20}
	HaveValue := !() -> bool
	{
		return itr != null or stk.Size() != 0
	}
	"()" := !() -> ref T
	{
		while itr != null
		{
			stk.PushFront(itr)
			itr = itr.Left
		}
		itr = stk.Pop()
		prev := itr
		itr = itr.Right
		return prev.data
	}
}
SetCommonIteratorReverse := class .{@T}
{
	itr := CommonTreeNode.{T}^
	stk := HybridStack.{CommonTreeNode.{T}^,20}
	HaveValue := !() -> bool
	{
		return itr != null or stk.Size() != 0
	}
	"()" := !() -> ref T
	{
		while itr != null
		{
			stk.PushFront(itr)
			itr = itr.Right
		}
		itr = stk.Pop()
		prev := itr
		itr = itr.Left
		return prev.data
	}
}
