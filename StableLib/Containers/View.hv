TArrayView := class .{@T} extend TGCObject
{
	Size := virtual !() -> int {}
	"[]" := virtual !(int i) -> ref T { assert(false) }
	"for" := !() -> ViewIterator.{T}
	{
		result.ViewPtr = this&
	}
	GetPointer := virtual !() -> T^ { return null }
	Clear := virtual !() -> void
	{
		Destroy()
	}
}

ViewIterator := class.{@T} extend TGCObject
{
	ViewPtr := T[]
	indx := int

	HaveValue := !() -> bool
	{
		return indx < ViewPtr.Size()
	}
	"()" := !() -> ref T
	{
		i := indx
		indx += 1
		return ViewPtr[i]
	}
}

TArraySpan := class .{@T} extend TArrayView.{T}
{
	pointer := T^
	itSize := int

	this := !(T^ p, int s) -> void
	{
		pointer = p
		itSize = s
	}
	Size := virtual !() -> int { return itSize }
	"[]" := virtual !(int i) -> ref T { return pointer[i] }

	GetPointer := virtual !() -> T^ { return pointer }
}


//"[]" := !(@T[] x,int i) -> ref T
//TODO make some check so only one who implement ArrayView can be used
//or any way to decline fixed array usage
//#TemplateCheck {
//	if not (arg[0] >= TArrayView.{@T})
//		CancelUsage()
//}
//{
//	assert(x != null)
//	return x^[i]
//}

"[]" := !(TArrayView.{@T}^ x,int i) -> ref T
{
	assert(x != null)
	return x^[i]
}
"[]" := !(Vector.{@T}^ x,int i) -> ref T
{
	assert(x != null)
	return x^[i]
}

"![]" := !(args...) .{@ResType} -> ResType
{
	for it,i : args
	{
		result[i] = it
	}
}

internalCreateEmptyArray := !() .{@Typ} -> TArraySpan.{Typ}
{
	result.itSize = 0
}

"->{}" := !(@Typ[@Size] itArr) .{@Typ[]} -> TArraySpan.{Typ}
{
	result.pointer = itArr[0]&
	result.itSize = Size
}

"->{}" := !(TArraySpan.{@T} x) .{T[]} -> T[]
{
	return x&
}

ToVector := !(@WAWA[] this) -> Vector.{WAWA}^
{
	result = new Vector.{WAWA}(this.Size())
	result^[i] = this[^i]
}
