BoxLambdaHolder := class extend BoxExeObj
{
	tmpl := BoxFuncTemplateBody^
	this := !(Token^ brackets, Token^ body,Token^ typeToken,Token^ capturesToken) -> void
	{

		attr := FuncAttributes
		bPtr := Token^
		itBody := body

		if itBody.GetValue() != "{}"
		{
			itBody = new TokenSymbol(StringSpan("{}"),1)
			itBody.Down = body
			itBody.Line = body.Line
		}

		if brackets.Down?.GetValue() == "()"
		{
			bPtr = brackets.Down
		}else{
			assert(false)
		}

		rToken := typeToken
		if typeToken == null
		{
			rToken = new TokenIndent
			attr.IsAutoResult = true
			rToken->{TokenIndent^}.Value = StringSpan("void")
		}

		attr.IsLambda = true
		
		tmpl = new BoxFuncTemplateBody(attr,bPtr,null,null,rToken,itBody)
		tmpl.SetName(StringSpan("lambda"))

		ObjType = GTypeBool //TODO : to type none
	}
	IsOneFunc := !() -> bool
	{
		return tmpl.IsOneFunc()
	}
	GetOneFunc := !() -> BoxFunc^
	{
		return tmpl.GetOneFunc()
	}
}
