TryParseFunction := !(Token^ obj) -> BoxUnit^
{
	Attr := FuncAttributes

	if obj == null or obj.Down == null return null

	iter := obj.Down

	switch iter.GetValue() //TODO to cycle
	{
		case "virtual"
			Attr.IsVirtual = true
			iter = iter.Right
			if iter == null
				return null
		case void
	}

	if iter.GetValue() != "!"
		return null
	
	iter = iter.Right
	if iter == null return null

	if iter.GetValue() != "()"
		return null

	brackets := iter

	isTemplate := ContainTemplateObj(brackets)

	iter = iter.Right
	if iter == null return null

	resultToken := Token^

	if iter.GetValue() == "->" 
	{
		iter = iter.Right
		if iter == null return null
		resultToken = iter

		iter = iter.Right
		if iter == null return null
	}

	if iter.GetValue() != "{}" return null

	asTempl := new BoxFuncTemplateBody(Attr,brackets,null,resultToken,iter)

	if asTempl.IsOneFunc()
	{
		return asTempl.GetOneFunc()
	}
	return asTempl

}

ContainTemplateObj := !(Token^ itm) -> bool
{
	if itm is TokenTemplateType
		return true
	iter := itm.Down
	while iter != null
	{
		if ContainTemplateObj(iter)
			return true
		iter = iter.Right
	}
	return false
}

FuncAttributes := class
{
	IsMethod := bool
	IsVirtual := bool
	IsStatic := bool
		
	"=" := default
}

labelIdIterator := 1
BoxLabel := class
{
	id := int
	this := !() -> void
	{
		id = labelIdIterator
		labelIdIterator += 1
	}
	PrintLabel := virtual !(TIOStream^ f) -> void
	{
		f^ << "%L" << id
	}
	PrintGo := virtual !(TIOStream^ f) -> void
	{
		f^ << "br label %L" << id
		if DebugMode
			f^ << ", !dbg !" << GDebugLineCallId
		f^ << "\n"
	}
	PrintCode := virtual !(TIOStream^ f) -> void
	{
		PrintGo(f)
		f^ << "L" << id << ":\n"
	}
}



