TryParseFunction := !(Token^ obj) -> BoxFunc^
{
	Attr := FuncAttributes

	if obj == null or obj.Down == null return null

	iter := obj.Down

	switch iter.GetValue() //TODO to cycle
	{
		case "virtual"
			Attr.IsVirtual = true
			iter = iter.Right
			if iter == null
				return null
		case void
	}

	if iter.GetValue() != "!"
		return null
	
	iter = iter.Right
	if iter == null return null

	if iter.GetValue() != "()"
		return null

	brackets := iter

	iter = iter.Right
	if iter == null return null

	resultToken := Token^

	if iter.GetValue() == "->" 
	{
		iter = iter.Right
		if iter == null return null
		resultToken = iter

		iter = iter.Right
		if iter == null return null
	}

	if iter.GetValue() != "{}" return null

	return new BoxFuncBody(Attr,brackets,null,resultToken,iter)
}

FuncAttributes := class
{
	IsMethod := bool
	IsVirtual := bool
	IsStatic := bool
		
	"=" := default
}

BoxFunc := class extend BoxUnit
{
	ItType := TypeFunc^
	ItTypeHatch := THatch

	GetType := !() -> TypeFunc^
	{
		ItTypeHatch.Await()
		return ItType
	}
	SetType := !(TypeFunc^ tp) -> void
	{
		ItType = tp
		ItTypeHatch.Emit()
	}
	WorkBody := virtual !() -> void
	{
	}
	SetName := virtual !(StringSpan nm) -> void
	{
	}
	ReadyState := virtual !() -> void
	{
	}
	PrintCode := virtual !(TIOStream^ f) -> void
	{
	}
	PrintResultType := virtual !(TIOStream^ f) -> void
	{
		ItType.ResultType.PrintType(f) //TODO return class
	}
	PrintInputTypes := virtual !(TIOStream^ f) -> void
	{
		needComma := false
		for par,i : ItType.Params
		{
			if needComma
				f^ << ","
			needComma = true

			par.ItType.PrintType(f)
			f^ << " %par" << i
		}
		if ItType.IsVargs
		{
			if needComma
				f^ << ","
			f^ << "..."
		}
	}
}


BoxFuncBody := class extend BoxFunc
{
	headerHatch := THatch


	Attrs := FuncAttributes

	Name := StringSpan

	inps1 := Token^
	resTyp := Token^
	bdy := Token^

	this := !(FuncAttributes atrs,Token^ brackets1,Token^ brackets2, Token^ resToken,Token^ bodyIn) -> void
	{
		assert(brackets2 == null)//not implemented
		Attrs = atrs
		inps1 = brackets1
		resTyp = resToken
		bdy = bodyIn
	}

	GetType := !() -> Type^
	{
		ItTypeHatch.Await()
		return ItType
	}

	StartedParse := bool
	ParseBody := !() -> void
	{
		if StartedParse
			return void
		StartedParse = true
		cls := this&
		TSpawnTask(() ==> [cls] {
			cls.WorkBody()
		})
	}
	SetName := virtual !(StringSpan nm) -> void
	{
		Name = nm
	}
	
	ParseHeader := !() -> void
	{
		SyntaxCompress(inps1,LexHVInputVars)

		k := 0
		args := Type^[40] //TODO: infinite args?
		refs := bool[40]
		isVargs := false

		objs := HybridQueue.{Token^,6}
		defer objs.Destroy()

		itr := inps1.Down

		checkObjs := () ==> {

			if objs.Size() == 2
			{
				args[k] = GetType(objs[0])
				refs[k] = false
				assert(args[k] != null) //TODO error
				k += 1
			}else{
				assert(false)
			}
			objs.Clear()
		}

		while itr != null
		{
			if itr.GetValue() == ","
			{
				checkObjs()
			}else
			{
				objs.Push(itr)
			}
			itr = itr.Right
		}
		if objs.Size() != 0
			checkObjs()
		outType := GetType(resTyp)
		resRef := false
		//TODO ref check

		ItType = GetFuncType(k,args[0]&,refs[0]&,outType,resRef,isVargs)
	}

	Work := virtual !() -> void
	{
		if Name.Get() == null
			return void

		ParseHeader()

		if CurrentCodeSpace != null
		{
			//assert(not CurrentCodeSpace.Functions[Name].Contain()) TODO
			CurrentCodeSpace.Functions[Name].Push(this&)
			CurrentCodeSpace.AllFunctions.Push(this&)
			return void
		}
		assert(false) //TODO: not using anon functions
	}

	body := BoxBlock^
	readyState := THatch
	WorkBody := virtual !() -> void
	{
		UnitStack.PushFront(this&)
		defer UnitStack.Pop()
		defer readyState.Emit()
		
		body = new BoxBlock(bdy)
		body.Work()
	}
	WaitReadyState := virtual !() -> void
	{
		readyState.Await()
	}

	PrintCode := virtual !(TIOStream^ f) -> void
	{
		f^ << "define "
		PrintResultType(f)
		f^ << " @" << Name << "("
		PrintInputTypes(f)
		f^ << ")\n"
		f^ << "{\n"


		rTyp := ItType.ResultType

		if rTyp != GTypeVoid
		{
			if rTyp is TypeStandard or rTyp is TypePoint
			{
				f^ << "%result = alloca "
				rTyp.PrintType(f)
				f^ << "\n"
				if rTyp == GTypeFloat or rTyp == GTypeDouble
				{
					assert(false)
				}else if rTyp is TypeStandard {
					f^ << "store "
					rTyp.PrintType(f)
					f^ << " 0, "
					rTyp.PrintType(f)
					f^ << "* %result\n"
				}else if rTyp is TypePoint
				{
					assert(false)
				}else{
					assert(false)
				}
			}
		}

		if rTyp == GTypeVoid
		{
			f^ << "ret void\n"
		}else{
			if rTyp == GTypeFloat or rTyp == GTypeDouble
			{
				assert(false)
			}else if rTyp is TypeStandard
			{
				f^ << "ret "
				rTyp.PrintType(f)
				f^ << " 0\n"
			}else if rTyp is TypePoint
			{
				assert(false)
			}

		}
			

		f^ << "}\n"
	}
}

BoxBlock := class extend BoxUnit
{
	down := Token^
	exeLines := List.{BoxUnit^} //TODO : to hybrid
	this := !(Token^ bdy) -> void
	{
		down = bdy
	}
	Work := virtual !() -> void
	{
		SyntaxCompress(down,PriorityData)

		iter := down.Down
		stackAtStart := UnitStack.Size()

		while iter != null
		{
			//TODO: check switch,if,while
			
			pad := new BoxExeLine
			pad.DoLine(iter)
			UnitStack.PushFront(pad)
		
			iter = iter.Right
		}

		while UnitStack.Size() > stackAtStart
		{
			UnitStack.Pop()
		}

		down.Print(0)
	}
}

labelIdIterator := 1
BoxLabel := class
{
	id := int
	this := !() -> void
	{
		id = labelIdIterator
		labelIdIterator += 1
	}
	PrintCode := virtual !(TIOStream^ f) -> void
	{
		assert(false)
	}
}



