BoxCodeSpace := class
{
	Files := List.{BoxFile^}

	Templates := AVLMap.{StringSpan,List.{BoxFuncTemplate^}}
	Functions := AVLMap.{StringSpan,List.{BoxFunc^}}
	Globals := AVLMap.{StringSpan,List.{BoxUnit^}}

	Modules := List.{ModuleInterface^}
}


BoxFile := class extend BoxUnit
{
	fileId := int
	file := vRepoFile^
	fileMap := void^
	fileSize := int
	fileName := StringSpan

	loaded := THatch

	objects := List.{BoxUnit^}

	AllClasses := List.{BoxClass^}

	this := !(vRepoFile^ inFile) -> void
	{
		fileId = GetNewId()
		file = inFile
		fileMap = file.Map()
		fileSize = file.Size()
	}
	GetName := !() -> StringSpan
	{
		result = fileName
	}

	Parse := !() -> void
	{
		fileName = GetConstString(file.GetName())

		CurrentFile = this&
		foundSpace := false
		for spc : CodeSpaces
		{
			for fil : spc.Files
			{
				if fil == this&
				{
					CurrentCodeSpace = spc&
					foundSpace = true
					break
				}
			}
			if foundSpace
				break
		}
		assert(foundSpace)
		
		defer loaded.Emit()

		tokens := GetObjectsFromMemory(this&,fileMap->{char^},fileSize)

		if tokens == null
			return void

		tempToken := Token
		tempToken.Down = tokens
		itr := tokens
		while itr != null
		{
			itr.Up = tempToken&
			itr = itr.Right
		}

		SyntaxCompress(tempToken&,LexHVFileRoot)

		CurrentScope = this&
		iter := tempToken.Down

		while iter != null
		{
			vr := BoxUnit^
			vr = null

			try
			{

				vr = TryParseVar(iter)	
			}catch(IException^ e)
			{

			}

			if vr == null
			{
				if iter.Down?.Right?.GetValue() == ":=" and iter.Down is TokenIndent
				{
					vr = new GlobalVarDelayed(iter.Down->{TokenIndent^}.Value,iter.Down.Right.Right)
				}
			}

			if vr != null
			{
				if vr is TypeVar or vr is TemplateTypeVar
				{
					CurrentCodeSpace.Globals[vr->{TypeVar^}.Name].Push(vr)
				}else if vr is in GlobalVar
				{
					glb := vr->{GlobalVar^}
					CurrentCodeSpace.Globals[glb.Name].Push(vr)

				}else if vr is in NamedVar
				{
					v := vr->{NamedVar^}
					CurrentCodeSpace.Globals[v.Name].Push(vr)
				}else {
				}

				objects.Push(vr)
				vr.Work()
			}else{
				iter.EmitError("Unknown object")
			}
			iter = iter.Right
		}
	}
	PrintCode := virtual !(TIOStream^ f) -> void
	{
		if DebugMode //later
		{
			pth := Path(file.GetPath())
			if pth.IsExist()
			{
				pth2 := pth.FullPath()
				f^ << "!" << fileId  << " = !DIFile(filename: \"" 
				f^ << pth2.Get() << "\", directory: \""
				f^ <<  "/" <<"\")\n"
			}else{
				f^ << "!" << fileId  << " = !DIFile(filename: \"" 
				f^ << file.GetName() << "\", directory: \""
				f^ <<  "/" <<"\")\n"
			}
		}
	}
}
