TryParseVar := !(Token^ obj) -> BoxUnit^
{
	if obj == null or obj.Down == null
		return null

	iter := obj.Down

	if iter.Right?.GetValue() != ":="
		return null

	name := StringSpan
	isSuffix := bool
	if iter is TokenIndent
	{
		name = iter->{TokenIndent^}.Value
	}else if iter is TokenString
	{
		name = iter->{TokenString^}.Value
		isSuffix = true
	}

	varToken := iter.Right.Right

	if varToken == null
		return null

	varType := ParseType(varToken)

	if varType != null
	{
		vr := new FuncLocalParam(name,varType)
		return new MemVar(name,vr)
	}

	cls := TryParseClass(varToken)
	if cls != null
	{
		return new TypeVar(name,cls.ItType)	
	}

	fnc := TryParseFunction(varToken)

	if fnc != null
	{
		return new FuncVar(name,isSuffix,fnc)
	}
	
	return null
}

TypeVar := class extend BoxUnit
{
	Name := StringSpan
	Value := Type^

	this := !(StringSpan name, Type^ val) -> void
	{
		Name = name
		Value = val
	}
}

MemVar := class extend BoxUnit
{
	Name := StringSpan
	Value := BoxFunc^

	this := !(StringSpan vName, BoxFunc^ clFunc) -> void
	{
		Name = vName
		Value = clFunc
	}
	PrintCode := virtual !(TIOStream^ f) -> void
	{
		assert(Value != null)
		Value.PrintCode(f)
	}
	PrintDebugMeta := virtual !(TIOStream^ f) -> void
	{
		Value.PrintDebugMeta(f)
	}
}

FuncVar := class extend BoxUnit
{
	Name := StringSpan
	Value := BoxUnit^
	IsSuffix := bool

	MemObj := BoxFunc^

	this := !(StringSpan nm, bool isSuf,BoxFunc^ obj) -> void
	{
		Name = nm
		IsSuffix = isSuf
		MemObj = obj
	}
	PrintCode := virtual !(TIOStream^ f) -> void
	{
		assert(MemObj != null)
		MemObj.PrintCode(f)
	}
	PrintDebugMeta := virtual !(TIOStream^ f) -> void
	{
		MemObj.PrintDebugMeta(f)
	}

	Work := virtual !() -> void
	{
		MemObj.SetName(Name)
		MemObj.Work()
	}
}
