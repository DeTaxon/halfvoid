TryGetMetaCall := !(Token^ obj) -> BoxExeObj^
{
	if obj.Down?.Right?.GetValue() == "->" //todo add to compiler comething thats make it simple
	{
	}else{
		return null
	}
	r := obj.Down.Right.Right
	if r is TokenIndent
		return TryMetaIndent(obj)
	if r.GetValue() == "{}"
	{
		SyntaxCompress(r,PriorityData)
		toType := ParseType(r.Down)
		if toType == null
			r.EmitError("Can not cast to unknown type")
		lObj := TryGetExeCall(obj.Down)
		if lObj == null
			r.EmitError("Unknown object to case")
		return GetExchange(lObj,toType)

	}
	return null

}
TryMetaIndent := !(Token^ obj) -> BoxExeObj^
{	
	right := obj.Down.Right.Right->{TokenIndent^}

	if right.Value == "TypeGroup"
	{
		typ := ParseType(obj.Down)
		if typ == null
			obj.Down.EmitError("Object for TypeGroup must be type")
		if typ is TypeClass
			return GetExeString(StringSpan("Class"))
		if typ is TypeStandard
			return GetExeString(StringSpan("Prime"))
		if typ is in TypePoint
			return GetExeString(StringSpan("Pointer"))
		if typ is in TypeFunc
			return GetExeString(StringSpan("Function"))
		assert(false)
		return null
	}
	if right.Value == "TypeSize"
	{
		itType := ParseType(obj.Down)
		if itType == null
			return null
		return GetExeInt(itType.GetSize())
	}
	if right.Value == "AllFields"
	{
		return TryGetMetaFields(obj)
	}
	if right.Value == "VTable"
	{
		typ := ParseType(obj.Down)
		if typ != null
		{
			if not (typ is TypeClass)
				assert(false) //TODO
			cls := typ->{TypeClass^}.ToClass
			cls.AwaitVTableStep()
			if cls.VTable.Size() == 0
				return GObjNone
			fncCall := cls.VTableValue.Value.CreateCall()
			return new UnrefFuncCall(fncCall)
		}
		dObj := TryGetExeCall(obj.Down)
		if dObj != null
		{
			cls := dObj.GetType()
			if cls is in TypePoint and cls.Base is TypeClass
			{
				dObj = GetExchange(dObj,cls.Base)
				cls = cls.Base
			}
			if cls is TypeClass 
			{
				cls2 := cls->{TypeClass^}.ToClass
				cls2.AwaitVTableStep()
				if cls2.VTable.Size() != 0
				{
					chk := CheckExeDownList
					defer chk.Destroy() //TODO
					chk.Push(dObj)
					return cls2.VTableField.CreateCall(chk)
				}else{
					return GObjNone
				}
			}else{
				assert(false) //TODO Emit, not a class
			}
		}	
	}

	if right.Value == "SetType"
	{
		dwnRes := TryGetExeCall(obj.Down)
		typ := ParseType(obj.Down.Right.Right.Right.Down)
		setCall := innerTrySetType(dwnRes,typ)
		if setCall == null
			obj.EmitError("Can not set type")
		return setCall
	}

	
	assert(false)
	return null
}


innerTrySetType := !(BoxExeObj^ obj,Type^ toType) -> BoxExeObj^
{
	if obj == null
		return null
	if toType == null
		return null
	itObj := obj
	
	if obj.GetType() is TypeClass
		itObj = new UnrefFuncCall(itObj)

	cnsts := List.{BoxExeConstObj^}
	cnsts.Push(GetConstType(toType))
	objs := CheckExeDownList
	objs.Push(itObj)
	fnc := GInternalSetType.GetFunc(objs,cnsts)
	cnsts.Destroy()
	assert(fnc != null)
	if fnc == null
		return null
	return fnc.CreateCall(objs)
}
