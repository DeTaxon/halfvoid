FuncLocalParam := class extend ParamFunc
{
	varName := StringSpan
	pType := Type^
	varId := int

	this := !(StringSpan name,Type^ tp) -> void
	{
		varName = name
		pType = tp
		varId = GetNewId()
		SetType(GetFuncType(0,null,null,pType,true,false))

		if tp is TypeClass
		{
			cls := tp->{TypeClass^}.ToClass
			cls.AwaitVTableStep()
			if cls.VTable.Size() != 0
			{
				dwns := CheckExeDownList
				fCall := new BoxFuncCall(this&,dwns)
				dwns.Push(fCall)
				cnsts := List.{BoxExeConstObj^}
				fnc := TemplateInternalInitClass.GetFunc(dwns,cnsts)
				Inits.Push(new BoxFuncCall(fnc,dwns))
			}
		}
	}
	IsMem := virtual !() -> bool
	{
		return true
	}
	PrintCode := virtual !(TIOStream^ f) -> void
	{
		f^ << "%V" << varId << " = alloca "
		pType.PrintType(f)
		if DebugMode
			f^ << ", !dbg !" << GDebugLineCallId
		f^ << "\n"

		if IsInt(pType)
		{
			f^ << "store "
			pType.PrintType(f)
			f^ << " 0, "
			pType.PrintType(f)
			f^ << "* %V" << varId
			if DebugMode
				f^ << ", !dbg !" << GDebugLineCallId
			f^ << "\n"
		}else //if pType is TypeClass
		{
			f^ << "%Void" << varId << " = bitcast "
			pType.PrintType(f)
			f^ << "* %V" << varId << " to i8*"
			if DebugMode
				f^ << ", !dbg !" << GDebugLineCallId
			f^ << "\n"

			f^ << "call  void @llvm.memset.p0i8.i64(i8* %Void" << varId << ", i8 0, i64 " << pType.GetSize() << ",i1 false)"
			if DebugMode
				f^ << ", !dbg !" << GDebugLineCallId
			f^ << "\n"
		}
		Inits[^].PrintDefaultUse(f)
	}
	PrintResultObj := virtual !(TIOStream^ f, int resId, int debId) -> void
	{
		f^ << "%V" << varId 
	}
	PrintDebugMeta := virtual !(TIOStream^ f) -> void
	{
	}
	PrintFuncCall := virtual !(TIOStream^ f,int resId,int debId,ExeDownList lst) -> void
	{
	}
}
