TryParseTypedefTemplate := !(Token^ obj) -> BoxUnit^
{
	iter := obj.Down

	assert(iter.Down is TokenIndent) //TODO error

	res := new TypedefTemplateVar
	res.Name = iter.Down->{TokenIndent^}.Value

	resConst := new TypedefTemplateConst
	itrCnst := iter.Down.Right.Right.Down

	while itrCnst != null
	{
		if itrCnst.GetValue() != ","
		{
			resConst.ItConsts.Push(itrCnst)
		}
		itrCnst = itrCnst.Right
	}
	tpIndent := iter.Right.Right 
	assert(tpIndent.GetValue() == "type")
	resConst.TypeToken = tpIndent.Right
	res.Value = resConst

	return res
}

TypedefTemplateVar := class extend NamedVar
{
	Value := TypedefTemplateConst^
}

TypedefTemplateConst := class extend BoxExeConstObj
{
	ItConsts := HybridQueue.{Token^,5}
	TypeToken := Token^
	GetType := !(List.{BoxExeConstObj^} cnsts) -> Type^
	{
		if cnsts.Size() != ItConsts.Size()
			return null

		resCnsts := AVLMap.{StringSpan,BoxUnit^}
		for i : cnsts.Size()
		{
			CheckTemplateConst(cnsts[i],ItConsts[i],resCnsts)
		}
		resType :=  CheckTemplateType(null,TypeToken,resCnsts)
		resCnsts.Destroy()
		return resType
	}

}
