FuncInputParam := class extend ParamFunc
{
	CapturedIndex := int
	CreatedVarCalls := List.{ParamLoadObj^}
	LocalParamBackup := FuncLocalParam^
	SelfSet := BoxExeObj^

	SelfAsBlank := ParamFunc^

	this := !(Type^ pType,bool isRefIn,StringSpan pVal) -> void
	{
		parentFunc = CurrentFunc
		SetType(GetFuncType(0,null,null,pType,true,false))
		irName = pVal
		isRef = isRefIn
		if DebugMode
		{
			if isRef
				pType.MakeDebugRef()
		}
	}
	IsMem := virtual !() -> bool
	{
		return isRef
	}
	PrintCode := virtual !(TIOStream^ f) -> void
	{
	}
	PrintResultObj := virtual !(TIOStream^ f, int resId, int debId) -> void
	{
		if GetType()->{TypeFunc^}.ResultType != GTypeVoid
		{
			f^ <<  irName
		}
	}
	PrintFuncCall := virtual !(TIOStream^ f,int resId,int debId,ExeDownList lst) -> void
	{
	}
	NotifyMemUse := virtual !() -> void
	{
		if isRef
			return void

		SelfAsBlank = new FuncInputParam(GetVarType(),isRef,irName)

		oldFnc := CurrentFunc
		CurrentFunc = parentFunc
		LocalParamBackup = new FuncLocalParam(GetType()->{TypeFunc^}.ResultType)

		objs := CheckExeDownList
		objs.Push(LocalParamBackup.CreateCall())
		objs.Push(new BoxFuncCall(SelfAsBlank))
		SelfSet = CreateFuncCall(StringSpan("="),objs)
		assert(SelfSet != null)

		parentFunc.regularVars.Push(LocalParamBackup)

		this&->SetType(FuncInputParamInMem)

		CurrentFunc = oldFnc
	}
	NotifyCaptureUse := virtual !() -> void
	{
		assert(not isRef)
		
		NotifyMemUse()
		LocalParamBackup.NotifyCaptureUse()
		this&->SetType(FuncInputParamCaptured)
	}
	PrintDebugMeta := virtual !(TIOStream^ f) -> void
	{
	}
	IsValue := virtual !() -> bool
	{
		return true
	}
	CreateCall := virtual !(CheckExeDownList objs) -> BoxExeObj^
	{
		res := new ParamLoadObj(this&)
		CreatedVarCalls.Push(res)
		return res
	}
	PopulateCalls := virtual !() -> void
	{
		for it : CreatedVarCalls
		{
			it.CallObj = new BoxFuncCall(this&)
		}
	}
}

ParamLoadObj := class extend BoxExeObj
{
	VarPtr := ParamFunc^
	CallObj := BoxExeObj^

	this := !(ParamFunc^ fnc) -> void
	{
		VarPtr = fnc
		ObjType = fnc.GetType()->{TypeFunc^}.ResultType
	}
	IsMem := virtual !() -> bool
	{
		return true
	}
	NotifyMemUse := virtual !() -> void
	{
		VarPtr.NotifyMemUse()
	}

	NotifyCaptureUse := virtual !() -> void { VarPtr.NotifyCaptureUse() }

	PrintPre := virtual !(TIOStream^ f) -> void
	{
		CallObj.PrintPre(f)
	}
	PrintUse := virtual !(TIOStream^ f) -> void
	{
		CallObj.PrintUse(f)
	}

	PrintPointPre := virtual !(TIOStream^ f) -> void
	{
		CallObj.PrintPointPre(f)
	}
	PrintPointUse := virtual !(TIOStream^ f) -> void
	{
		CallObj.PrintPointUse(f)
	}
}

FuncInputParamCaptured := class extend FuncInputParamInMem
{
	IsMem := virtual !() -> bool
	{
		return true
	}
	//PrintCode := virtual !(TIOStream^ f) -> void
	//{
	//}

	NotifyMemUse := virtual !() -> void {}
	NotifyCaptureUse := virtual !() -> void {}

	//PopulateCalls := virtual !() -> void
	//{
	//	for it : CreatedVarCalls
	//	{
	//		it.CallObj = new BoxFuncCall(this&)
	//	}
	//}

	PopulateCalls := virtual !() -> void
	{
		for it : CreatedVarCalls
		{
			it.CallObj = LocalParamBackup.CreateCall()
		}
	}
}

FuncInputParamInMem := class extend FuncInputParam
{
	IsMem := virtual !() -> bool
	{
		return true
	}
	PrintCode := virtual !(TIOStream^ f) -> void
	{
		SelfSet.PrintDefaultUse(f)

		//rType := GetType()->{TypeFunc^}.ResultType
		//f^ << irName << "Unref = alloca "
		//rType.PrintType(f)
		//if isRef
		//	f^ << "*"
		//if DebugMode
		//	f^ << " , !dbg !" << GDebugLineCallId
		//f^ << "\n"
		//
		//f^ << "store "
		//rType.PrintType(f)
		//if isRef
		//	f^ << "*"
		//f^ << " " << irName
		//f^ << " , "
		//rType.PrintType(f)
		//f^ << "*"
		//if isRef
		//	f^ << "*"
		//f^ << " " << irName << "Unref"
		//if DebugMode
		//	f^ << " , !dbg !" << GDebugLineCallId
		//f^ << "\n"
	}
	//PrintResultObj := virtual !(TIOStream^ f, int resId, int debId) -> void
	//{
	//	if GetType()->{TypeFunc^}.ResultType != GTypeVoid
	//	{
	//		f^ << "" << irName << "Unref"
	//	}
	//}
	IsValue := virtual !() -> bool
	{
		return false
	}
	PopulateCalls := virtual !() -> void
	{
		for it : CreatedVarCalls
		{
			it.CallObj = LocalParamBackup.CreateCall()
		}
	}
}
