FuncInputParam := class extend ParamFunc
{
	CapturedIndex := int
	CreatedVarCalls := List.{ParamLoadObj^}

	this := !(Type^ pType,bool isRefIn,StringSpan pVal) -> void
	{
		parentFunc = CurrentFunc
		SetType(GetFuncType(0,null,null,pType,true,false))
		irName = pVal
		isRef = isRefIn
		if DebugMode
		{
			if isRef
				pType.MakeDebugRef()
		}
	}
	IsMem := virtual !() -> bool
	{
		return isRef
	}
	PrintCode := virtual !(TIOStream^ f) -> void
	{
	}
	PrintResultObj := virtual !(TIOStream^ f, int resId, int debId) -> void
	{
		if GetType()->{TypeFunc^}.ResultType != GTypeVoid
		{
			f^ <<  irName
		}
	}
	PrintFuncCall := virtual !(TIOStream^ f,int resId,int debId,ExeDownList lst) -> void
	{
	}
	NotifyMemUse := virtual !() -> void
	{
		if isRef
			return void
		this&->SetType(FuncInputParamInMem)
	}
	NotifyCaptureUse := virtual !() -> void
	{
		this&->SetType(FuncInputParamCaptured)
	}
	PrintDebugMeta := virtual !(TIOStream^ f) -> void
	{
	}
	IsValue := virtual !() -> bool
	{
		return true
	}
	CreateCall := virtual !(CheckExeDownList objs) -> BoxExeObj^
	{
		return new BoxFuncCall(this&)
		//res := new ParamLoadObj(this&,new BoxFuncCall(this&))
		//CreatedVarCalls.Push(res)
		//return res
	}
}

ParamLoadObj := class extend BoxExeObj
{
	VarPtr := ParamFunc^
	CallObj := BoxExeObj^

	this := !(ParamFunc^ fnc) -> void
	{
		VarPtr = fnc
		ObjType = fnc.GetType()->{TypeFunc^}.ResultType
	}
	IsMem := virtual !() -> bool
	{
		return true
	}
	NotifyMemUse := virtual !() -> void
	{
		VarPtr.NotifyMemUse()
	}

	NotifyCaptureUse := virtual !() -> void { VarPtr.NotifyCaptureUse() }

	PrintPre := virtual !(TIOStream^ f) -> void
	{
		CallObj.PrintPre(f)
	}
	PrintUse := virtual !(TIOStream^ f) -> void
	{
		CallObj.PrintUse(f)
	}

	PrintPointPre := virtual !(TIOStream^ f) -> void
	{
		CallObj.PrintPointPre(f)
	}
	PrintPointUse := virtual !(TIOStream^ f) -> void
	{
		CallObj.PrintPointUse(f)
	}
}

FuncInputParamCaptured := class extend FuncInputParam
{
	IsMem := virtual !() -> bool
	{
		return true
	}
	PrintCode := virtual !(TIOStream^ f) -> void
	{

	}

	NotifyMemUse := virtual !() -> void {}
	NotifyCaptureUse := virtual !() -> void {}

	//CreateCall := virtual !(CheckExeDownList objs) -> BoxExeObj^
	//{
	//	return new ParamLoadObj(this&,new BoxFuncCall(this&))
	//}

	//CreateCall := virtual !(CheckExeDownList objs) -> BoxExeObj^
	//{
	//	res := new ParamLoadObj(this&,new BoxFuncCall(this&))
	//	CreatedVarCalls.Push(res)
	//	return res
	//}
}

FuncInputParamInMem := class extend FuncInputParam
{
	IsMem := virtual !() -> bool
	{
		return true
	}
	PrintCode := virtual !(TIOStream^ f) -> void
	{
		rType := GetType()->{TypeFunc^}.ResultType
		f^ << irName << "Unref = alloca "
		rType.PrintType(f)
		if isRef
			f^ << "*"
		if DebugMode
			f^ << " , !dbg !" << GDebugLineCallId
		f^ << "\n"
		
		f^ << "store "
		rType.PrintType(f)
		if isRef
			f^ << "*"
		f^ << " " << irName
		f^ << " , "
		rType.PrintType(f)
		f^ << "*"
		if isRef
			f^ << "*"
		f^ << " " << irName << "Unref"
		if DebugMode
			f^ << " , !dbg !" << GDebugLineCallId
		f^ << "\n"
	}
	PrintResultObj := virtual !(TIOStream^ f, int resId, int debId) -> void
	{
		if GetType()->{TypeFunc^}.ResultType != GTypeVoid
		{
			f^ << "" << irName << "Unref"
		}
	}
	IsValue := virtual !() -> bool
	{
		return false
	}
}
