FuncInputParam := class extend ParamFunc
{
	pNumber := StringSpan
	parentFunc := BoxFuncBody^
	varName := StringSpan
	varId := int
	this := !(BoxFuncBody^ pFunc,StringSpan vName,Type^ pType,bool isRefIn,StringSpan pVal) -> void
	{
		parentFunc = pFunc
		SetType(GetFuncType(0,null,null,pType,true,false))
		pNumber = pVal
		varName = vName
		isRef = isRefIn
		if DebugMode
		{
			if isRef
				pType.MakeDebugRef()
			//varId = GetNewId()
		}
	}
	IsMem := virtual !() -> bool
	{
		return isRef
	}
	PrintCode := virtual !(TIOStream^ f) -> void
	{
		//if DebugMode
		//{
		//	pType := GetType()->{TypeFunc^}.ResultType
		//	f^ << "call void @llvm.dbg.value(metadata "
		//	pType.PrintType(f)
		//	if isRef 
		//		f^ << "*"
		//	f^ << " "
		//	PrintResultObj(f,0,0)
		//	f^ << " , metadata !" << varId << " , metadata !DIExpression()) , !dbg !" << GDebugLineCallId << "\n"
		//}
	}
	PrintResultObj := virtual !(TIOStream^ f, int resId, int debId) -> void
	{
		if GetType()->{TypeFunc^}.ResultType != GTypeVoid
		{
			f^ <<  pNumber
		}
	}
	PrintFuncCall := virtual !(TIOStream^ f,int resId,int debId,ExeDownList lst) -> void
	{
	}
	NotifyMemUse := virtual !() -> void
	{
		if isRef
			return void
		this&->SetType(FuncInputParamInMem)
	}
	PrintDebugMeta := virtual !(TIOStream^ f) -> void
	{
		//rType := GetType()->{TypeFunc^}.ResultType
//
		//f^ << "!" << varId << " = !DILocalVariable(name: \"" << varName << "\" , scope:!" << GDebugScopeId << " , file:!" << GDebugFileId
		////f^ << ", arg: " << (pNumber + 1)
		////f^ << ", flags: DIFlagArtificial"
		//f^ << ", line: " << 0 << ", type:!"
		//if isRef 
		//{
		//	f^ <<rType.MakeDebugRef().MetaId
		//}else{
		//	f^ <<rType.MetaId
		//}
		//f^ << ")\n"
	}
	IsValue := virtual !() -> bool
	{
		return true
	}
}
FuncInputParamInMem := class extend FuncInputParam
{
	IsMem := virtual !() -> bool
	{
		return true
	}
	PrintCode := virtual !(TIOStream^ f) -> void
	{
		rType := GetType()->{TypeFunc^}.ResultType
		f^ << pNumber << "Unref = alloca "
		rType.PrintType(f)
		if isRef
			f^ << "*"
		if DebugMode
			f^ << " , !dbg !" << GDebugLineCallId
		f^ << "\n"
		
		f^ << "store "
		rType.PrintType(f)
		if isRef
			f^ << "*"
		f^ << " " ,< pNumber
		f^ << " , "
		rType.PrintType(f)
		f^ << "*"
		if isRef
			f^ << "*"
		f^ << " " << pNumber << "Unref"
		if DebugMode
			f^ << " , !dbg !" << GDebugLineCallId
		f^ << "\n"

		//if DebugMode
		//{
		//	pType := GetType()->{TypeFunc^}.ResultType
		//	f^ << "call void @llvm.dbg.declare(metadata "
		//	rType.PrintType(f)
		//	f^ << "* " << pNumber << "Unref"
		//	f^ << " , metadata !" << varId << " , metadata !DIExpression()) , !dbg !" << GDebugLineCallId << "\n"
		//}

	}
	PrintResultObj := virtual !(TIOStream^ f, int resId, int debId) -> void
	{
		if GetType()->{TypeFunc^}.ResultType != GTypeVoid
		{
			f^ << "" << pNumber << "Unref"
		}
	}
	IsValue := virtual !() -> bool
	{
		return true
	}
}
