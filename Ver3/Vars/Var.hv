TryParseVar := !(Token^ obj) -> BoxUnit^
{
	if obj == null or obj.Down == null
		return null

	iter := obj.Down

	if iter.Right?.GetValue() != ":="
		return null

	name := StringSpan
	isSuffix := bool
	if iter is TokenIndent
	{
		name = iter->{TokenIndent^}.Value
	}else if iter is TokenString
	{
		name = iter->{TokenString^}.Value
		isSuffix = true
	}

	varToken := iter.Right.Right

	if varToken == null
		return null

	varType := ParseType(varToken)

	if varType != null
	{
		if CurrentScope is BoxFile
		{
			return new GlobalVar(name,varType)
		}else{
			assert(CurrentScope is in BoxFunc) 
			vr := CreateVar(varType,false)
			return new MemVarBorrowed(name,vr)
		}
	}

	cls := TryParseClass(varToken)
	if cls != null
	{
		if cls is in BoxClass
		{
			cls2 := cls->{BoxClass^}
			cls2.SetName(name)
			return new TypeVar(name,cls2.ItType)
		}
		assert( cls is in BoxClassTemplate)
		cls3 := cls->{BoxClassTemplate^}
		cls3.SetName(name)
		return new TemplateTypeVar(name,cls3)
	}

	fnc := TryParseFunction(varToken)

	if fnc != null
	{
		if fnc is in BoxFuncTemplate
		{
			return new TemplateFuncVar(name,isSuffix,fnc->{BoxFuncTemplate^})
		}
		return new FuncVar(name,isSuffix,fnc->{BoxFunc^})
	}

	exeObj := TryGetExeCall(varToken)
	if exeObj != null
	{
		if CurrentScope is in BoxFunc
		{
			vr := ParamFunc^ 
			isGC := IsGCPtr(exeObj.GetType())
			mVar := MemVar^

			vr = CreateVar(exeObj.GetType(),false)
			mVar = new MemVarBorrowed(name,vr)

			objs := CheckExeDownList
			objs2 := CheckExeDownList
			objs2.Push(new BoxFuncCall(vr,objs))
			objs2.Push(exeObj)
			cnsts := List.{BoxExeConstObj^}
			setCall := CreateFuncCall(StringSpan("="),objs2,cnsts)
			if setCall == null
				return null
			mVar.Inits.Push(setCall) //TODO
			return mVar
		}else{
			assert(false)
		}
	}
	
	return null
}

TypeVar := class extend BoxUnit
{
	Name := StringSpan
	Value := Type^

	this := !(StringSpan name, Type^ val) -> void
	{
		Name = name
		Value = val
	}
}
TemplateTypeVar := class extend BoxUnit
{
	Name := StringSpan
	Value := BoxClassTemplate^

	this := !(StringSpan name, BoxClassTemplate^ val) -> void
	{
		Name = name
		Value = val
	}
}

ConstVar := class extend BoxUnit
{
	Name := StringSpan
	Value := BoxExeConstObj^

	this := !(StringSpan vName, BoxExeConstObj^ clFunc) -> void
	{
		Name = vName
		Value = clFunc
	}
}
MemVar := class extend BoxUnit
{
	debId := int
	Name := StringSpan
	Value := ParamFunc^
	Inits := List.{BoxExeObj^}

	this := !(StringSpan vName, ParamFunc^ clFunc) -> void
	{
		Name = vName
		Value = clFunc
		debId = GetNewId()
	}
	GetVarType := !() -> Type^
	{
		return Value.GetType()->{TypeFunc^}.ResultType
	}
	PrintCode := virtual !(TIOStream^ f) -> void
	{
		assert(Value != null)
		Value.PrintCode(f)
		pDebugCode(f)
		doInits(f)
	}
	NotifyCaptureUse := virtual !() -> void
	{
		assert(Value != null)
		metSelf :=  false

		for it : UnitStack
		{
			if metSelf
			{
				if it is in BoxFunc
				{
					fnc := it->{BoxFunc^}
					Value.NotifyCaptureUse(fnc)
					return void
				}
			}else{
				if it == this&
					metSelf = true
			}
		}
		assert(false)
	}
	PrintDebugMeta := virtual !(TIOStream^ f) -> void
	{
		Value.PrintDebugMeta(f)
		pDebugMeta(f)
	}
	pDebugCode := !(TIOStream^ f) -> void
	{
		if Value is in FuncLocalParam or Value is in FuncInputParam
		{
			clr := CheckExeDownList
			cl := BoxFuncCall(Value,clr)
			cl.PrintPointPre(f)
			if DebugMode
			{
				f^ << "call void @llvm.dbg."
				if Value.IsValue()
				{
					f^ << "value"
				}else{
					f^ << "declare"
				}
				f^ << "(metadata "
				cl.GetType().PrintType(f)
				if not Value.IsValue()
					f^ << "*"
				if Value.IsRef() //TODO?
					f^ << "*"
				f^ << " " 
				cl.PrintPointUse(f)
				f^ << " , metadata !" << debId << " , metadata !DIExpression()) , !dbg !" << GDebugLineCallId << "\n"
			}
		}
	}
	doInits := !(TIOStream^ f) -> void
	{
		Inits[^].PrintDefaultUse(f)
	}
	pDebugMeta := !(TIOStream^ f) -> void
	{
		if not DebugMode
			return void

		if Value is in FuncLocalParam or Value is in FuncInputParam
		{
			pType := Value.GetType()->{TypeFunc^}.ResultType
			f^ << "!" << debId << " = !DILocalVariable(name: \"" << Name << "\" , scope:!" << GDebugScopeId << " , file:!" << GDebugFileId
			//if it.6 != 0
			//{
			//	f^ << ", arg: " << it.6
			//	f^ << ", flags: DIFlagArtificial"
			//}
			f^ << ", line: " << 0 << ", type:!"
			if Value.IsRef()
			{
				f^ <<pType.MakeDebugRef().MetaId
			}else{
				f^ <<pType.MetaId
			}
			f^ << ")\n"
		}
	}
}
MemVarBorrowed := class extend MemVar
{
	this := !(StringSpan vName, ParamFunc^ clFunc) -> void
	{
		this."MemVar.this"(vName,clFunc)
	}
	PrintCode := virtual !(TIOStream^ f) -> void
	{
		pDebugCode(f)
		doInits(f)
	}
	PrintDebugMeta := virtual !(TIOStream^ f) -> void
	{
		pDebugMeta(f)
	}
}

FuncVar := class extend BoxUnit
{
	Name := StringSpan
	Value := BoxUnit^
	IsSuffix := bool

	MemObj := BoxFunc^

	this := !(StringSpan nm, bool isSuf,BoxFunc^ obj) -> void
	{
		Name = nm
		IsSuffix = isSuf
		MemObj = obj
	}
	PrintCode := virtual !(TIOStream^ f) -> void
	{
		assert(MemObj != null)
		MemObj.PrintCode(f)
	}
	PrintDebugMeta := virtual !(TIOStream^ f) -> void
	{
		MemObj.PrintDebugMeta(f)
	}

	Work := virtual !() -> void
	{
		MemObj.SetName(Name)
		MemObj.Work()
	}
}

TemplateFuncVar := class extend BoxUnit
{
	Name := StringSpan
	Value := BoxUnit^
	IsSuffix := bool

	MemObj := BoxFuncTemplate^

	this := !(StringSpan nm, bool isSuf,BoxFuncTemplate^ obj) -> void
	{
		Name = nm
		IsSuffix = isSuf
		MemObj = obj
	}
	PrintCode := virtual !(TIOStream^ f) -> void
	{
		assert(MemObj != null)
		MemObj.PrintCode(f)
	}
	PrintDebugMeta := virtual !(TIOStream^ f) -> void
	{
		MemObj.PrintDebugMeta(f)
	}

	Work := virtual !() -> void
	{
		MemObj.SetName(Name)
		MemObj.Work()
	}
}
