GetExchange := !(BoxExeObj^ obj, Type^ expType) -> BoxExeObj^
{
	inType := obj.GetType()
	if obj.IsMem()
	{
		if inType is TypeClass and expType is TypeClass
		{
			return new RefExchange(obj,expType)
		}
		if inType is TypeArr and expType is in TypePoint
		{
			return new ArrToPtr(obj,expType)
		}
	}

	if inType is in TypePoint and inType.Base is TypeClass and expType is TypeClass
	{
		if inType.Base == expType
		{
			return new PtrToRef(obj)
		}
		if TypeFight(inType.Base,expType) == expType
		{
			return GetExchange(obj,expType.GetPoint())
		}
	}

	if IsFloat(inType) and IsFloat(expType)
	{
		return new FloatExchange(obj,expType)
	}
	if IsInt(inType) and IsInt(expType)
	{
		return new IntExchange(obj,expType)
	}
	if IsInt(inType) and IsFloat(expType)
	{
		return new IntToFloatExchange(obj,expType)
	}
	if IsFloat(inType) and IsInt(expType)
	{
		return new FloatToIntExchange(obj,expType)
	}
	if inType is in TypePoint and expType is in TypePoint
	{
		if obj.IsMem()
			return new PtrRefExchange(obj,expType)
		return new PtrExchange(obj,expType)
	}
	if obj is BoxLambdaHolder
	{
		return obj->{BoxLambdaHolder^}.CreateLambda(expType)
	}
	return null
}

PtrToRef := class extend BoxExeObj
{
	resId := int
	Down := BoxExeObj^
	this := !(BoxExeObj^ obj) -> void
	{
		resId = GetNewId()
		Down = obj
		ObjType = obj.GetType().Base
	}
	IsMem := virtual !() -> bool { return true }
	PrintPointPre := virtual !(TIOStream^ f) -> void
	{
		inType := Down.GetType()
		Down.PrintPre(f)
		f^ << "%T" << resId << " = bitcast "
		inType.PrintType(f)
		f^ << " "
		Down.PrintUse(f)
		f^ << " to "
		ObjType.PrintType(f)
		f^ << "*"
		if DebugMode
			f^ << ", !dbg !" << GDebugLineCallId
		f^ << "\n"

	}
	PrintPointUse := virtual !(TIOStream^ f) -> void
	{
		f^ << "%T" << resId
	}
	PrintPre := virtual !(TIOStream^ f) -> void //TODO remove copy of code
	{
		rType := ObjType

		PrintPointPre(f)
		f^ << "%TUnref" << resId << " = load "
		rType.PrintType(f)
		f^ << ","
		rType.PrintType(f)
		f^ << "* "
		PrintPointUse(f)
		if DebugMode
			f^ << ", !dgb !" << GDebugLineCallId
		f^ << "\n"
	}
	PrintUse := virtual !(TIOStream^ f) -> void
	{
		f^ << "%TUnref" << resId
	}
}
RefExchange := class extend BoxExeObj
{
	resId := int
	Down := BoxExeObj^
	this := !(BoxExeObj^ obj, Type^ toType) -> void
	{
		resId = GetNewId()
		Down = obj
		ObjType = toType
	}
	IsMem := virtual !() -> bool { return true }
	PrintPointPre := virtual !(TIOStream^ f) -> void
	{
		inType := Down.GetType()
		Down.PrintPointPre(f)
		f^ << "%T" << resId << " = bitcast "
		inType.PrintType(f)
		f^ << "* "
		Down.PrintPointUse(f)
		f^ << " to "
		ObjType.PrintType(f)
		f^ << "*"
		if DebugMode
			f^ << ", !dbg !" << GDebugLineCallId
		f^ << "\n"

	}
	PrintPointUse := virtual !(TIOStream^ f) -> void
	{
		f^ << "%T" << resId
	}
}
PtrRefExchange := class extend PtrExchange
{
	this := !(BoxExeObj^ obj, Type^ toType) -> void
	{
		resId = GetNewId()
		Down = obj
		ObjType = toType
	}
	IsMem := virtual !() -> bool { return true }
	PrintPointPre := virtual !(TIOStream^ f) -> void
	{
		inType := Down.GetType()
		Down.PrintPointPre(f)
		f^ << "%T" << resId << " = bitcast "
		inType.PrintType(f)
		f^ << "* "
		Down.PrintPointUse(f)
		f^ << " to "
		ObjType.PrintType(f)
		f^ << "*"
		if DebugMode
			f^ << ", !dbg !" << GDebugLineCallId
		f^ << "\n"

	}
	PrintPointUse := virtual !(TIOStream^ f) -> void
	{
		f^ << "%T" << resId
	}
}
ArrToPtr := class extend BoxExeObj
{
	resId := int
	Down := BoxExeObj^
	this := !(BoxExeObj^ obj, Type^ toType) -> void
	{
		resId = GetNewId()
		Down = obj
		ObjType = obj.GetType().Base.GetPoint()
	}
	IsMem := virtual !() -> bool { return false }
	PrintPre := virtual !(TIOStream^ f) -> void
	{
		inType := Down.GetType()
		Down.PrintPointPre(f)
		f^ << "%T" << resId << " = getelementptr "
		inType.PrintType(f)
		f^ << " , "
		inType.GetPoint().PrintType(f)
		f^ << " "
		Down.PrintPointUse(f)
		f^ << " , i32 0, i32 0"
		if DebugMode
			f^ << ", !dbg !" << GDebugLineCallId
		f^ << "\n"

	}
	PrintUse := virtual !(TIOStream^ f) -> void
	{
		f^ << "%T" << resId
	}
}
PtrExchange := class extend BoxExeObj
{
	resId := int
	Down := BoxExeObj^
	this := !(BoxExeObj^ obj, Type^ toType) -> void
	{
		resId = GetNewId()
		Down = obj
		ObjType = toType
	}
	IsMem := virtual !() -> bool { return false }
	PrintPre := virtual !(TIOStream^ f) -> void
	{
		inType := Down.GetType()
		Down.PrintPre(f)
		f^ << "%T" << resId << " = bitcast "
		inType.PrintType(f)
		f^ << " "
		Down.PrintUse(f)
		f^ << " to "
		ObjType.PrintType(f)
		if DebugMode
			f^ << ", !dbg !" << GDebugLineCallId
		f^ << "\n"

	}
	PrintUse := virtual !(TIOStream^ f) -> void
	{
		f^ << "%T" << resId
	}
}
FloatToIntExchange := class extend BoxExeObj
{
	resId := int
	Down := BoxExeObj^
	this := !(BoxExeObj^ obj, Type^ toType) -> void
	{
		resId = GetNewId()
		Down = obj
		ObjType = toType
	}
	IsMem := virtual !() -> bool { return false }
	PrintPre := virtual !(TIOStream^ f) -> void
	{
		inType := Down.GetType()
		Down.PrintPre(f)
		f^ << "%T" << resId << " = "
		if IsUInt(ObjType)
		{
			f^ << "fptoui"
		}else{
			f^ << "fptosi"
		}
		f^ << " "
		inType.PrintType(f)
		f^ << " "
		Down.PrintUse(f)
		f^ << " to "
		ObjType.PrintType(f)
		if DebugMode
			f^ << ", !dbg !" << GDebugLineCallId
		f^ << "\n"

	}
	PrintUse := virtual !(TIOStream^ f) -> void
	{
		f^ << "%T" << resId
	}
}
IntToFloatExchange := class extend BoxExeObj
{
	resId := int
	Down := BoxExeObj^
	this := !(BoxExeObj^ obj, Type^ toType) -> void
	{
		resId = GetNewId()
		Down = obj
		ObjType = toType
	}
	IsMem := virtual !() -> bool { return false }
	PrintPre := virtual !(TIOStream^ f) -> void
	{
		inType := Down.GetType()
		Down.PrintPre(f)
		f^ << "%T" << resId << " = "
		if IsUInt(inType)
		{
			f^ << "uitofp"
		}else{
			f^ << "sitofp"
		}
		f^ << " "
		inType.PrintType(f)
		f^ << " "
		Down.PrintUse(f)
		f^ << " to "
		ObjType.PrintType(f)
		if DebugMode
			f^ << ", !dbg !" << GDebugLineCallId
		f^ << "\n"

	}
	PrintUse := virtual !(TIOStream^ f) -> void
	{
		f^ << "%T" << resId
	}
}
IntExchange := class extend BoxExeObj
{
	resId := int
	Down := BoxExeObj^
	this := !(BoxExeObj^ obj, Type^ toType) -> void
	{
		resId = GetNewId()
		Down = obj
		ObjType = toType
	}
	IsMem := virtual !() -> bool { return false }
	PrintPre := virtual !(TIOStream^ f) -> void
	{
		inType := Down.GetType()
		Down.PrintPre(f)
		f^ << "%T" << resId << " = "
		if inType.GetSize() > ObjType.GetSize()
		{
			f^ << "trunc"
		}else{
			if IsUInt(inType)
			{
				f^ << "zext"
			}else{
				f^ << "sext"
			}
		}
		f^ << " "
		inType.PrintType(f)
		f^ << " "
		Down.PrintUse(f)
		f^ << " to "
		ObjType.PrintType(f)
		if DebugMode
			f^ << ", !dbg !" << GDebugLineCallId
		f^ << "\n"

	}
	PrintUse := virtual !(TIOStream^ f) -> void
	{
		f^ << "%T" << resId
	}
}

FloatExchange := class extend BoxExeObj
{	
	resId := int
	Down := BoxExeObj^
	this := !(BoxExeObj^ obj, Type^ toType) -> void
	{
		resId = GetNewId()
		Down = obj
		ObjType = toType
	}
	IsMem := virtual !() -> bool { return false }
	PrintPre := virtual !(TIOStream^ f) -> void
	{
		inType := Down.GetType()
		Down.PrintPre(f)
		f^ << "%T" << resId << " = "
		if inType.GetSize() > ObjType.GetSize()
		{
			f^ << "fptrunc"
		}else{
			f^ << "fpext"
		}
		f^ << " "
		inType.PrintType(f)
		f^ << " "
		Down.PrintUse(f)
		f^ << " to "
		ObjType.PrintType(f)
		if DebugMode
			f^ << ", !dbg !" << GDebugLineCallId
		f^ << "\n"

	}
	PrintUse := virtual !(TIOStream^ f) -> void
	{
		f^ << "%T" << resId
	}
}
