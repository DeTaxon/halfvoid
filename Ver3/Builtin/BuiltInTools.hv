BuiltInAssert := class extend BoxFuncCommon
{
	trueLabel := BoxLabel^
	falseLabel := BoxLabel^
	this := !() -> void
	{
		SetType(GetFuncType(![GTypeBool],GTypeVoid))
	}
	PrintFuncCall := virtual !(TIOStream^ f,int resId,int debId,ExeDownList lst) -> void
	{
		if not DebugMode
			return void

		trueLabel = new BoxLabel()
		falseLabel = new BoxLabel()

		lst[0].PrintPre(f)
		
		PrintBranch(f,lst[0],trueLabel,falseLabel)
		
		falseLabel.PrintCode(f)
		f^ << "call void @llvm.debugtrap()"
		if DebugMode
			f^ << " , !dbg !" << GDebugLineCallId
		f^ << "\n"
		trueLabel.PrintCode(f)
	}
}

builtInSetJump := BuiltInSetJump^

BuiltInSetJump := class extend BoxFuncCommon
{
	this := !() -> void
	{
		SetType(GetFuncType(![GTypeVoidP.GetArray(5)],GTypeInt))
	}
	PrintFuncCall := virtual !(TIOStream^ f,int resId,int debId,ExeDownList lst) -> void
	{
		ItId := GetNewId()

		lst[0].PrintPointPre(f)

  		f^ << "%Frame" << ItId << "  = call i8* @llvm.frameaddress.p0i8(i32 0)\n"

		f^ << "%FrameStore" << ItId << " = getelementptr [5 x i8*], [5 x i8*]* "
		lst[0].PrintPointUse(f)
		f^ << ", i64 0, i64 0\n"

		f^ << "store i8* %Frame" << ItId << ", i8** %FrameStore" << ItId << ", align 16\n"
  		f^ << "%Stack" << ItId << " = call i8* @llvm.stacksave()\n"

		f^ << "%StackStore" << ItId << " = getelementptr [5 x i8*], [5 x i8*]* "
		lst[0].PrintPointUse(f)
		f^ << ", i64 0, i64 2\n"

  		f^ << "store i8* %Stack" << ItId << ", i8** %StackStore"<< ItId <<", align 16\n"

		f^ << "%E" << ItId << " = bitcast [5 x i8*]* "
		lst[0].PrintPointUse(f)
		f^ << " to i8*\n"

  		f^ << "%T" << resId << " = call i32 @llvm.eh.sjlj.setjmp(i8* %E" << ItId <<")\n"
		if DebugMode
			f^ << " , !dbg !" << GDebugLineCallId
		f^ << "\n"
	}
}
BuiltInLongJump := class extend BoxFuncCommon
{
	this := !() -> void
	{
		SetType(GetFuncType(![GTypeVoidP],GTypeVoid))
	}
	PrintFuncCall := virtual !(TIOStream^ f,int resId,int debId,ExeDownList lst) -> void
	{
		lst[^].PrintPre(f)
		
		f^ << "call void @llvm.eh.sjlj.longjmp(i8* "
		lst[0].PrintUse(f)
		f^ << ")"
		if DebugMode
			f^ << " , !dbg !" << GDebugLineCallId
		f^ << "\n"
	}
}
BuiltInMemBarrier := class extend BoxFuncCommon
{
	this := !() -> void
	{
		SetType(GetFuncType(0,null,null,GTypeVoid,false,false))
	}
	PrintFuncCall := virtual !(TIOStream^ f,int resId,int debId,ExeDownList lst) -> void
	{
		f^ << "call void asm sideeffect \"\", \"~{memory},~{dirflag},~{fpsr},~{flags}\"()"
	}
}

CreateBuildInTools := !() -> void
{
	bSpace := CodeSpaces[-1]&
	bSpace.Functions[StringSpan("assert")].Push(new BuiltInAssert() )
	bSpace.Functions[StringSpan("llvmLongJump")].Push(new BuiltInLongJump() )
	bSpace.Functions[StringSpan("MemBarrier")].Push(new BuiltInMemBarrier() )

	builtInSetJump = new BuiltInSetJump() 
	bSpace.Functions[StringSpan("llvmSetJump")].Push(builtInSetJump)
}
