BoxBlock := class extend BoxUnit
{
	MetaId := int
	GCInUseBefore := int
	down := Token^
	ItLine := FileLine^
	exeLines := List.{BoxUnit^} //TODO : to hybrid
	
	simpleVars := List.{BoxFunc^}
	gcVars := List.{BoxFunc^}

	returnLabel := BoxLabel^

	CreateVar := !(Type^ varType, bool isRef) -> ParamFunc^
	{
		assert(isRef == false)

		if IsGCPtr(varType)
		{
			gcIndex := GCVarsInUse
			GCVarsInUse += 1

			assert(CurrentFunc is BoxFuncBody)
			CurrentFunc->{BoxFuncBody^}.NotifyGCUsed()

			newVar := new FuncGCLocalParam(varType,gcIndex)
			gcVars.PushFront(newVar)
			CurrentFunc->{BoxFuncBody^}.gcVars.Push(newVar)
			return newVar
		}

		newVar2 := new FuncLocalParam(varType)
		simpleVars.PushFront(newVar2)
		CurrentFunc.regularVars.Push(newVar2)

		return newVar2
	}

	this := !(Token^ bdy) -> void
	{
		down = bdy
		ItLine = bdy.Line
		if DebugMode
			MetaId = GetNewId()
		innerWork()
	}
	innerWork := virtual !() -> void
	{
		SyntaxCompress(down,PriorityData)

		iter := down.Down
		stackAtStart := UnitStack.Size()
		UnitStack.PushFront(this&)

		GCInUseBefore = GCVarsInUse
		defer GCVarsInUse = GCInUseBefore


		while iter != null
		{
			if iter.GetValue() == "{}"
			{
				subBlock := new BoxBlock(iter)
				exeLines.Push(subBlock)
				iter = iter.Right
				continue
			}
			if iter.Down?.GetValue() == "if"
			{
				ifObj := TryParseIf(iter)
				if ifObj != null
				{
					exeLines.Push(ifObj)
					iter = iter.Right
					continue
				}
			}
			if iter.Down?.GetValue() == "while"
			{
				whileObj := TryParseWhile(iter)
				if whileObj != null
				{
					exeLines.Push(whileObj)
					iter = iter.Right
					continue
				}
			}
			//TODO: check switch,while

			vr := TryParseVar(iter)


			if vr != null
			{
				pad := new BoxExeLineSimple(iter,vr)

				exeLines.Push(pad)
				UnitStack.PushFront(vr)
			}else{
				pad := new BoxExeLine()
				pad.DoLine(iter)

				exeLines.Push(pad)
			}
			
		
			iter = iter.Right
		}

		for it : gcVars
		{
			tp := it.GetType()->{TypeFunc^}.ResultType
			if tp is in TypePoint and TypeFight(tp.Base,GCType) == GCType
			{
				dat := CheckExeDownList
				defer dat.Destroy() //TODO remove
				cl := new BoxFuncCall(it,dat)
				dat.Push(cl)
				cl2 := new BoxFuncCall(GFuncGCSetNull,dat)
				pad := new BoxExeLineSimple(down.Down,cl2)
				exeLines.Push(pad)
			}
		}

		while UnitStack.Size() > stackAtStart
		{
			UnitStack.Pop()
		}
	}
	PrintCode := virtual !(TIOStream^ f) -> void
	{
		if exeLines.Size() == 0
			return void

		oldVal := GDebugScopeId
		GDebugScopeId = MetaId
		defer GDebugScopeId = oldVal

		simpleVars[^].PrintCode(f)
		gcVars[^].PrintCode(f)

		exeLines[^].PrintCode(f)
	}
	PrintDebugMeta := virtual !(TIOStream^ f) -> void
	{
		if exeLines.Size() == 0
			return void
		f^ << "!" << MetaId << " = !DILexicalBlock(scope: !" 
		f^ << GDebugScopeId << ", file: !" << GDebugFileId
		if ItLine != null
		{
			f^ << ", line: " << ItLine.Line
		}
		f^ << ")\n"

		oldVal := GDebugScopeId
		GDebugScopeId = MetaId
		defer GDebugScopeId = oldVal
		
		simpleVars[^].PrintDebugMeta(f)
		gcVars[^].PrintDebugMeta(f)
		exeLines[^].PrintDebugMeta(f)
	}
}

CreateVar := !(Type^ typ, bool isRef) -> ParamFunc^
{
	assert(isRef == false)

	for it : UnitStack
	{
		if it is in BoxBlock
		{
			return it->{BoxBlock^}.CreateVar(typ,isRef)
		}
	}
	assert(false)
}
