
ExchangePointsToVoidP := class extend ExchangeUnit
{
	GetExchangeScore := virtual !(BoxExeObj^ obj,Type^ newType,bool expectResultRef) -> int
	{
		if expectResultRef
			return CmpNoExchange

		if newType == GTypeVoidP and obj.GetType() is in TypePoint
		{
			return 1000
		}
		return CmpNoExchange
	}
	CreateExchange := virtual !(BoxExeObj^ obj,Type^ expType, bool expectResultRef) -> BoxExeObj^
	{
		return new PtrExchange(obj,expType)
	}
}
ExchangePointsToPointClass := class extend ExchangeUnit
{
	GetExchangeScore := virtual !(BoxExeObj^ obj,Type^ newType,bool expectResultRef) -> int
	{
		frm := obj.GetType()
		if frm is in TypePoint and newType is in TypePoint
		{
			if frm.Base is TypeClass and newType.Base is TypeClass
			{
				fgh := TypeFight(frm.Base,newType.Base)
				if fgh == newType.Base
					return 1000
			}
		}
		return CmpNoExchange
	}
	CreateExchange := virtual !(BoxExeObj^ obj,Type^ expType, bool expectResultRef) -> BoxExeObj^
	{
		if obj.IsMem()
			return new PtrRefExchange(obj,expType)
		return new PtrExchange(obj,expType)
	}
}
