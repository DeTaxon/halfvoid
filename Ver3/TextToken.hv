Token := class
{
	Up := Token^
	Down := Token^
	Left := Token^
	Right := Token^

	Line := FileLine^

	TokenId := int

	IsData := virtual false
	IsBlock := virtual false

	GetValue := virtual !() -> ref StringSpan
	{
		assert(false)
		return emptySpn
	}

	Print := virtual !(int x) -> void
	{
		assert(false)
	}

	EmitError := !(char^ info) -> void
	{

		ln := "Error <"sbt << info << ">"
		if Line != null
		{
			ln << " at file " << Line.File << " line: " <<Line.Line
		}
		printf("%s\n",ln.Str())
		exit(1)
		//throw new Exception(ln.Str()) //TODO memory
	}
}

emptySpn := StringSpan

TokenDecor := class extend Token
{
	Value := StringSpan

	this := !(StringSpan val) -> void
	{
		Value = val
	}
	GetValue := virtual !() -> ref StringSpan
	{
		return GetConstString("@d")
	}
	Print := virtual !(int x) -> void
	{
		for x printf("-")
		printf("decorator %s\n",Value) //TODO memory
		Down?.Print(x+1)
		Right?.Print(x)
	}
}
TokenData := class extend Token
{
	IsData := virtual true

	GetValue := virtual !() -> ref StringSpan
	{
		return GetConstString("~d")
	}
	Print := virtual !(int x) -> void
	{
		for x printf("-")
		printf("data object\n") //TODO memory
		Down?.Print(x+1)
		Right?.Print(x)
	}
}
TokenBlockData := class extend TokenData
{
	IsBlock := virtual true
}

FileLine := class
{
	File := char^
	Line := int

	this := !(char^ name) -> void
	{
		File = name
	}
}

TokenNull := class extend Token
{
	Value := StringSpan

	this := !(StringSpan val) -> void
	{
		Value = val
	}
	GetValue := virtual !() -> ref StringSpan
	{
		return GetConstString("null")
	}
	Print := virtual !(int x) -> void
	{
		for x printf("-")
		printf("null\n") //TODO memory
		Down?.Print(x+1)
		Right?.Print(x)
	}
}
TokenNone := class extend Token
{
	IsData := virtual true
	this := !() -> void
	{
	}
	GetValue := virtual !() -> ref StringSpan
	{
		return GetConstString("none")
	}
}

TokenBool := class extend Token
{
	Value := StringSpan
	Parsed := bool

	IsData := virtual true

	this := !(StringSpan val,bool val2) -> void
	{
		Value = val
		Parsed = val2
	}
	GetValue := virtual !() -> ref StringSpan
	{
		return GetConstString("bool")
	}
	Print := virtual !(int x) -> void
	{
		for x printf("-")
		printf("bool %i\n",Parsed) //TODO memory
		Down?.Print(x+1)
		Right?.Print(x)
	}
}
TokenWayControl := class extend Token
{
	Value := StringSpan

	this := !(StringSpan val) -> void
	{
		Value = val
	}
	GetValue := virtual !() -> ref StringSpan
	{
		return GetConstString("~way")
	}
	Print := virtual !(int x) -> void
	{
		for x printf("-")
		printf("symbol %s\n",Value) //TODO memory
		Down?.Print(x+1)
		Right?.Print(x)
	}
}
TokenSuffix := class extend Token
{
	Value := StringSpan

	this := !(StringSpan val) -> void
	{
		Value = val
	}
	GetValue := virtual !() -> ref StringSpan
	{
		return GetConstString("~s")
	}
	Print := virtual !(int x) -> void
	{
		for x printf("-")
		printf("suffix %s\n",Value) //TODO memory
		Down?.Print(x+1)
		Right?.Print(x)
	}
}
TokenSymbol := class extend Token
{
	Value := StringSpan

	this := !(StringSpan val, int tId) -> void
	{
		Value = val
		TokenId = tId
	}
	GetValue := virtual !() -> ref StringSpan
	{
		return Value
	}
	Print := virtual !(int x) -> void
	{
		for x printf("-")
		printf("symbol %s\n",Value) //TODO memory
		Down?.Print(x+1)
		Right?.Print(x)
	}
}
TokenIndent := class extend Token
{
	Value := StringSpan
	
	IsData := virtual true
	this := !(StringSpan val) -> void
	{
		Value = val
	}
	GetValue := virtual !() -> ref StringSpan
	{
		return GetConstString("~ind")
	}
	Print := virtual !(int x) -> void
	{
		for x printf("-")
		printf("indent %s\n",Value) //TODO memory
		Down?.Print(x+1)
		Right?.Print(x)
	}
}
TokenTemplateType := class extend TokenIndent
{
	this := !(StringSpan val) -> void
	{
		Value = val
	}
}

TokenString := class extend Token
{
	Value := StringSpan
	IsData := virtual true
	this := !(StringSpan val) -> void
	{
		Value = val
	}
	GetValue := virtual !() -> ref StringSpan
	{
		return GetConstString("~str")
	}
	Print := virtual !(int x) -> void
	{
		for x printf("-")
		printf("string <%s>\n",Value) //TODO memory
		Down?.Print(x+1)
		Right?.Print(x)
	}
}
TokenDouble := class extend Token
{
	Value := StringSpan
	Parsed := double
	IsData := virtual true
	this := !(StringSpan val, double val2) -> void
	{
		Value = val
		Parsed = val2
	}
	GetValue := virtual !() -> ref StringSpan
	{
		return GetConstString("~double")
	}
	Print := virtual !(int x) -> void
	{
		for x printf("-")
		printf("double %s as %f\n",Value,Parsed) //TODO memory
		Down?.Print(x+1)
		Right?.Print(x)
	}
}
TokenInt := class extend Token
{
	Value := StringSpan
	Parsed := int
	IsData := virtual true
	this := !(StringSpan val, int val2) -> void
	{
		Value = val
		Parsed = val2
	}
	GetValue := virtual !() -> ref StringSpan
	{
		return GetConstString("~int")
	}
	Print := virtual !(int x) -> void
	{
		for x printf("-")
		printf("integer %s as %i\n",Value,Parsed) //TODO memory
		Down?.Print(x+1)
		Right?.Print(x)
	}
}

