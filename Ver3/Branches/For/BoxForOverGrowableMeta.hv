
BoxForOverGrowableMeta := class extend BoxExeObj
{
	blocks := List.{BoxBlock^}
	dwnObjs := HybridQueue.{ForSubObjects,5}

	metaCount := int

	middleVars := AVLMap.{int,List.{NamedVar^}}

	itBody := Token^
	itStack := StackState

	this := !(HybridQueue.{ForSubObjects,5} dwns,Token^ bdy) -> void
	{
		ObjType = GTypeVoid
		if not dwns[^].IsMeta
			bdy.EmitError("All of iteratables must be metadata")
		k := dwns[0].MetaObj.MetaIteretableSize()
		if k != dwns[^].MetaObj.MetaIteretableSize()
			bdy.EmitError("All of iteretables must be same size")

		dwnObjs.Push(dwns[^])
	
		itBody = bdy
		itStack.Save()

		for i : k
		{
			addItem(i,false)
		}
		

		assert(dwns.Size() == 1)

		lmbd := (int ind) ==> {
			addItem(ind,true)
		}
		grw := dwns[0].MetaObj->{BoxMetaGrowingObject^}
		grw.RegisterUser(lmbd.Capture())

		metaCount = k
	}
	addItem := !(int i,bool swapStack) -> void
	{
		nowStack := StackState

		if swapStack
		{
			nowStack.Save()
			itStack.Load()
		}

		stackSize := UnitStack.Size()

		for j : dwnObjs.Size()
		{
			mtVar := dwnObjs[j].MetaObj.GetMetaIterValueParam(i)
			if mtVar != null
			{
				newVar := new MemVarBorrowed(dwnObjs[j].ValueName,mtVar)
				middleVars[i].Push(newVar)
				UnitStack.PushFront(newVar)
			}else{
				tryAddVar(dwnObjs[j].MetaObj.GetMetaIterValue(i),i,dwnObjs[j].ValueName)
			}

			if dwnObjs[j].IndexName.Size() != 0
			{
				indConst := dwnObjs[j].MetaObj.GetMetaIterIndex(i)
				if indConst == null
					indConst = GetExeInt(i)
				tryAddVar(indConst,i,dwnObjs[j].IndexName)
			}
		}
		blocks.Push(new BoxBlockContinue(itBody))

		while stackSize < UnitStack.Size()
			UnitStack.Pop()

		if swapStack
		{
			nowStack.Load()
		}
	}
	tryAddVar := !(BoxExeObj^ toAdd,int num,StringSpan itName) -> void {
		if toAdd == null
			return void
		
		if toAdd is in BoxExeConstObj
		{
			UnitStack.PushFront(new ConstVar(itName,toAdd->{BoxExeConstObj^}))
			return void
		}
		
		fr := new FuncResultParam(toAdd)
		newVar := new MemVar(itName,fr)
		middleVars[num].Push(newVar)
		UnitStack.PushFront(newVar)
	}

	PrintDefaultUse := virtual !(TIOStrean^ f) -> void
	{
		PrintCode(f)
	}
	PrintCode := virtual !(TIOStream^ f) -> void
	{
		dwnObjs[^].MetaObj.PrintDefaultUse(f)

		for i : blocks.Size()
		{
			if middleVars.Contain(i)
				middleVars[i][^].PrintCode(f)

			blocks[i].PrintCode(f)
		}
	}
	PrintDebugMeta := virtual !(TIOStream^ f) -> void
	{
		middleVars[^][^].PrintDebugMeta(f)
		dwnObjs[^].MetaObj.PrintDebugMeta(f)
		blocks[^].PrintDebugMeta(f)
	}
}
