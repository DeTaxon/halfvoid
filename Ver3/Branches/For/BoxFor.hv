GetForCycle := !(Token^ itm) -> BoxExeObj^
{
	forItems := HybridQueue.{ForSubObjects,5}

	iter := itm.Down.Right

	if iter.Right.GetValue() != ":" and iter.Right.GetValue() != ","
	{
		forElement := ForSubObjects
		forElement.ValueName = StringSpan("it")
		//forElement.IndexName
		forElement.DownToken = iter
		forItems.Push(forElement)
		iter = iter.Right
	}else{
		while true
		{
			if iter.GetValue() == ","
				iter = iter.Right
			
			forElement := ForSubObjects

			if not (iter is TokenIndent)
				iter.EmitError("not a name for cycle element variable") //todo better error explanation
			
			name := iter->{TokenIndent^}.Value
			index := StringSpan("")

			iter = iter.Right

			if iter.GetValue() == ","
			{
				iter = iter.Right

				if not (iter is TokenIndent)
					iter.EmitError("not a name for cycle index variable") //todo better error explanation
				
				index = iter->{TokenIndent^}.Value

				iter = iter.Right
			}

			assert(iter.GetValue() == ":")
			iter = iter.Right

			forElement.ValueName = name
			forElement.IndexName = index
			forElement.DownToken = iter

			forItems.Push(forElement)

			iter = iter.Right

			if iter.GetValue() != ","
				break
		}
	}

	return GetForParsed(iter,forItems)
}

GetForParsed := !(Token^ itm,HybridQueue.{ForSubObjects,5} lst) -> BoxExeObj^
{
	return GetForParsed(itm,lst,() ==> { //todo REFACTOR, IT'S OVERCOMPLICATED
		if itm.GetValue() == "{}"
			return new BoxBlock(itm)
		
		pad := new BoxExeLine()
		pad.DoLine(itm)
		return pad
	})
}
GetForParsed := !(Token^ itm,HybridQueue.{ForSubObjects,5} lst,!()&->BoxUnit^ cb) -> BoxExeObj^
{
	return new BoxBlockBreak(itm, () ==> {

		forLine := new BoxExeLine()
		forLine.ItToken = itm

		containMeta := false

		for it : lst
		{
			dwnRes := TryGetExeCall(it.DownToken)

			if dwnRes == null
				it.DownToken.EmitError("Could not get result for cycle over obj")

			if dwnRes is BoxArrayHolder
				dwnRes = dwnRes->{BoxArrayHolder^}.CreateDefaultUse()

			if dwnRes is in BoxMetaObj
			{
				//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< META VERSION

				if not dwnRes->{BoxMetaObj^}.IsMetaIteratable()
					it.DownToken.EmitError("Meta object is not iteratable")

				it.IsMeta = true
				it.MetaObj = dwnRes->{BoxMetaObj^}

				containMeta = true
			}else{
				//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< REGULAR VERSION
				it.DownResult = dwnRes
			}//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<END
		}

		if containMeta
		{
			//return new BoxForOverMeta(lst,itm)
			return new BoxForOverGrowableMeta(lst,itm)
		}

		resFor := new BoxFor()
		resFor.values.Push(lst[^])
		resFor.HeadLine = forLine

		resFor.StepTwo(itm,cb)

		return resFor
	})
}

