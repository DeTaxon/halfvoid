TryGetUnrefObj := !(Token^ itm) -> BoxExeObj^
{
	if itm == null return null
	if itm.Down == null return null
	if itm.Down.Right == null return null
	if itm.Down.Right.Right != null return null
	if itm.Down.Right.GetValue() != "&" return null

	dwn := TryGetExeCall(itm.Down)

	assert(dwn != null) //TODO: emit error?
	assert(dwn.IsMem()) //TODO: emit error

	return new UnrefFuncCall(dwn)
}
TryGetPtrObj := !(Token^ itm) -> BoxExeObj^
{
	if itm == null return null
	if itm.Down == null return null
	if itm.Down.Right == null return null
	if itm.Down.Right.Right != null return null
	if itm.Down.Right.GetValue() != "^" return null

	dwn := TryGetExeCall(itm.Down)

	assert(dwn != null) //TODO: emit error?

	if dwn.GetType() is in TypePoint
		return new PtrToRefFuncCall(dwn)
}

UnrefFuncCall := class extend BoxExeObj
{
	Down := BoxExeObj^
	this := !(BoxExeObj^ obj) -> void
	{
		Down = obj
		ObjType = Down.GetType().GetPoint()
	}
	IsMem := virtual !() -> bool
	{
		return false
	}
	PrintPre := virtual !(TIOStream^ f) -> void
	{
		Down.PrintPointPre(f)
	}
	PrintUse := virtual !(TIOStream^ f) -> void
	{
		Down.PrintPointUse(f)
	}
}
PtrToRefFuncCall := class extend BoxExeObj
{
	resId := int
	Down := BoxExeObj^
	this := !(BoxExeObj^ obj) -> void
	{
		resId = GetNewId()
		Down = obj
		ObjType = Down.GetType().Base
	}
	IsMem := virtual !() -> bool
	{
		return true
	}
	PrintPointPre := virtual !(TIOStream^ f) -> void
	{
		Down.PrintPre(f)
	}
	PrintPointUse := virtual !(TIOStream^ f) -> void
	{
		Down.PrintUse(f)
	}
	PrintPre := virtual !(TIOStream^ f) -> void //TODO remove copy of code
	{
		rType := ObjType

		PrintPointPre(f)
		f^ << "%TUnref" << resId << " = load "
		rType.PrintType(f)
		f^ << ","
		rType.PrintType(f)
		f^ << "* "
		PrintPointUse(f)
		if DebugMode
			f^ << ", !dgb !" << GDebugLineCallId
		f^ << "\n"
	}
	PrintUse := virtual !(TIOStream^ f) -> void
	{
		f^ << "%TUnref" << resId
	}
}
