BoxExeLine := class extend BoxExeLineSimple
{
	exitLabel := BoxLabel^

	this := !() -> void
	{
		if DebugMode
			MetaId = GetNewId()
	}
	GetLabel := !() -> BoxLabel^
	{
		if exitLabel == null
			exitLabel = new BoxLabel()
		return exitLabel
	}

	DoLine := !(Token^ itm) -> void
	{
		UnitStack.PushFront(this&)
		defer UnitStack.Pop()
	
		ItToken = itm
		Down = TryGetExeCall(itm)
		if Down != null
			return void
		ItToken.Print(0)
		assert(false)
	}
}
BoxExeLineSimple := class extend BoxUnit
{
	MetaId := int
	ItToken := Token^
	Down := BoxUnit^

	this := !(Token^ itm,BoxUnit^ newObj) -> void
	{
		if DebugMode
			MetaId = GetNewId()
		ItToken = itm
		Down = newObj
	}
	PrintCode := virtual !(TIOStream^ f) -> void
	{
		oldLine := GDebugLineCallId
		defer GDebugLineCallId = oldLine
		GDebugLineCallId = MetaId
		
		if Down is in BoxExeObj
		{
			Down->{BoxExeObj^}.PrintDefaultUse(f)
		}else{
			Down.PrintCode(f)
		}
	}
	PrintDebugMeta := virtual !(TIOStream^ f) -> void
	{
		assert(ItToken != null and ItToken.Line != null)
		Down?.PrintDebugMeta(f)
		f^ << "!" << MetaId << " = !DILocation(line:" << ItToken.Line.Line << ",column:1, scope:!" << GDebugScopeId << ")\n"
	}
}

ExeDownList := type HybridQueue.{BoxExeObj^,8}
CheckExeDownList := type HybridQueue.{BoxExeObj^,20}

BoxExeObj := class extend BoxUnit
{
	ObjType := Type^

	GetType := virtual !() -> Type^
	{
		return ObjType
	}
	IsMem := virtual !() -> bool
	{
		return false
	}
	PrintDefaultUse := virtual !(TIOStream^ f) -> void
	{
		if IsMem()
		{
			PrintPointPre(f)
		}else{
			PrintPre(f)
		}
	}
	PrintPointPre := virtual !(TIOStream^ f) -> void
	{
	}
	PrintPointUse := virtual !(TIOStream^ f) -> void
	{
	}
	PrintPre := virtual !(TIOStream^ f) -> void
	{
	}
	PrintUse := virtual !(TIOStream^ f) -> void
	{
	}
}

TryGetExeCall := !(Token^ itm) -> BoxExeObj^
{
	if itm == null
		return null

	return TryCheckRegularFuncCall(itm)?
	return TryCheckMethodCall(itm)?
	
	fieldCall := TryGetFieldCall(itm)
	if fieldCall != null
		return fieldCall
	
	isOperCall := TryCheckMathOperatorCall(itm)
	if isOperCall != null
		return isOperCall
	
	prm := TryExePrime(itm)
	if prm != null
		return prm

	isParamCall := TryCheckGetParam(itm)
	if isParamCall != null
		return isParamCall
	
	unrefCall := TryGetUnrefObj(itm)
	if unrefCall != null
		return unrefCall

	return null

}


CheckFuncCallBrackets := !(Token^ itm, CheckExeDownList Objs) -> void
{
	itr := itm.Down

	while itr != null
	{
		if itr.GetValue() == "," //TODO maybe 
		{
		}else{
			obj := TryGetExeCall(itr)
			assert(obj != null)
			Objs.Push(obj)
		}
		itr = itr.Right
	}
}


GetBestFunc := !(HybridQueue.{BoxUnit^,10} x,CheckExeDownList Objs) -> BoxUnit^
{
	priorityes := HybridQueue.{int,13}
	defer priorityes.Destroy()

	for h : x
	{
		if h is in BoxFunc
		{
			fnc := h->{BoxFunc^}
			cmpRes := CmpFuncPriority(fnc.GetType(),Objs)
			priorityes.Push(cmpRes)
		}else{
			assert(false)
		}
	}

	bestI := 0
	for i : x.Size()
	{
		if priorityes[i] < priorityes[bestI]
			bestI = i
	}
	if priorityes[bestI] == CmpNoExchange
		return null
	return x[bestI]
}

CreateFuncCall := !(StringSpan name, CheckExeDownList Objs) -> BoxFuncCall^
{
	callItem := BoxUnit^
	GetItemGlobal(name, x ==>{
		callItem = GetBestFunc(x,Objs)
		if callItem == null
			return false
		return true
	})
	assert(callItem != null)
	if callItem == null
		return null
	if callItem is in BoxFunc
	{
		return new BoxFuncCall(callItem->{BoxFunc^},Objs)
	}
}

CmpNoExchange := 999000

CmpFuncPriority := !(TypeFunc^ fncType, HybridQueue.{BoxExeObj^,20} objs) -> int
{
	worstCase := 0

	minArgs :=fncType.Params.Size()
	maxArgs :=fncType.Params.Size()

	if fncType.IsVargs
		maxArgs = 20000000 //TODO INT_MAX

	if objs.Size() > maxArgs or objs.Size() < minArgs
		return CmpNoExchange

	count := min(fncType.Params.Size(),objs.Size())

	for i : count
	{
		worstCase = max(worstCase,TypePriorCmp(objs[i].GetType(),fncType.Params[i].ItType,objs[i].IsMem()))
		if worstCase == CmpNoExchange
			return CmpNoExchange
	}
	return worstCase
}
TypePriorCmp := !(Type^ frm, Type^ to, bool isMem) -> int
{
	if frm == to
		return 0

	if isMem
	{
		return CmpNoExchange
	}
	
	if frm is TypePoint and to == GTypeVoidP
		return 1000 //TODO TypeArr

	if frm is TypeStandard and to is TypeStandard
	{
		f1 := frm->{TypeStandard^}
		t1 := to->{TypeStandard^}

		if IsInt(f1) and IsInt(t1)
		{
			if f1.GetSize() > t1.GetSize()
			{
				return 2000 + (100 - t1.GetSize())
			}
			return 1000 + (100 - t1.GetSize())
		}
		if IsFloat(f1) and IsFloat(t1)
		{
			if f1.GetSize() > t1.GetSize()
			{
				return 2000 + (100 - t1.GetSize())
			}
			return 1000 + (100 - t1.GetSize())
		}
		if IsInt(f1) and IsFloat(t1)
		{
			return 1000 + (100 - t1.GetSize())
		}
		if IsFloat(f1) and IsInt(t1)
		{
			return 2000 + (100 - t1.GetSize()) //TODO warning, but not here
		}
	}
	if frm is TypePoint and to == GTypeVoidP
	{
		return 1000
	}

	return CmpNoExchange
}

TypePriorityTable := AVLMap.{Type^,AVLMap.{Type^,int}}




