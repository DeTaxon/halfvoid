
BoxFuncBody := class extend BoxFuncCommon
{
	headerHatch := THatch

	Attrs := FuncAttributes

	Name := StringSpan
	OutputName := StringSpan

	inps1 := Token^
	resTyp := Token^
	bdy := Token^

	funcLine := BoxExeLine^

	Constants := List.{BoxUnit^}
	ConstVars := List.{BoxUnit^}

	NamedParametersCount := int
	VariadicName := StringSpan

	ExitLabel := BoxLabel^

	this := !(TypeFunc^ tp, FuncAttributes atrs, HybridQueue.{StringSpan,10} names, Token^ bodyIn) -> void
	{
		Name = "anon"
		SetType(tp)
		Attrs = atrs
		bdy = bodyIn

		NamedParametersCount = names.Size()

		for par,i : tp.Params //TODO min(Params.Size(),names.Size())
		{
			name := StringSpan("")
			if i < names.Size()
				name = names[i]
			parObj := new FuncInputParam(this&,name,par.ItType,par.IsRef,i)
			vr := new MemVar(name,parObj)
			Params.Push(vr)
		}
		if tp.ResultType != GTypeVoid
		{
			resSpn := StringSpan("result")
			rFnc := new FuncLocalParam(resSpn,tp.ResultType)
			ResultVar = new MemVar(resSpn,rFnc)
		}
		if DebugMode
		{
			funcLine = new BoxExeLine() //TODO debug only ExeLine version
			funcLine.ItToken = bdy
		}
		ExitLabel = new BoxLabel() 
	}

	GetType := virtual !() -> Type^
	{
		ItTypeHatch.Await()
		return ObjType
	}

	StartedParse := bool
	ParseBody := virtual !() -> void
	{
		if StartedParse
			return void
		StartedParse = true
		GFuncsInProgress.Push(this&)
		cls := this&
		TSpawnTask(() ==> [cls] {
			cls.WorkBody()
		})
	}
	SetName := virtual !(StringSpan nm) -> void
	{
		Name = nm

		if CurrentCodeSpace != null
		{
			//assert(not CurrentCodeSpace.Functions[Name].Contain()) TODO
			CurrentCodeSpace.Functions[Name].Push(this&)
		}
	}
	GetExitLabel := virtual !() -> BoxLabel^
	{
		return ExitLabel
	}
	
	Params := HybridQueue.{MemVar^,8}
	ResultVar := MemVar^

	body := BoxBlock^
	readyState := THatch
	WorkBody := virtual !() -> void
	{
		AllFunctions.Push(this&)

		assert(UnitStack.Size() == 0)
		defer UnitStack.Destroy()

		UnitStack.PushFront(this&)
		defer readyState.Emit()

		UnitStack.PushFront(ConstVars[^])

		OutputName = GetFuncMangle(Name)
		
		CurrentScope = this&

		for par : Params
		{
			UnitStack.PushFront(par)
		}
		if ResultVar != null
			UnitStack.Push(ResultVar)
		
		body = new BoxBlock(bdy)
		body.Work()
	}
	WaitReadyState := virtual !() -> void
	{
		readyState.Await()
	}
	PrintName := virtual !(TIOStream^ f) -> void
	{
		f^ << "@" << OutputName
	}

	PrintCode := virtual !(TIOStream^ f) -> void
	{
		if body == null
			return void
		GDebugFuncId = 0

		if DebugMode
		{
			GDebugFuncId = GetNewId()
			GDebugLineCallId = funcLine.MetaId
		}
		oldScope := GDebugScopeId
		defer GDebugScopeId = oldScope
		GDebugScopeId = GDebugFuncId

		f^ << "define "
		PrintResultType(f)
		f^ << " @" << OutputName << "("
		PrintInputTypes(f)
		f^ << ")"
		if DebugMode
			f^ << " !dbg !" << GDebugFuncId
		f^ << "\n"
		f^ << "{\n"


		rTyp := GetType()->{TypeFunc^}.ResultType

		Params[^].Value->{FuncInputParam^}.PrintCode(f)
		if ResultVar != null
			ResultVar.PrintCode(f)
		
		body.PrintCode(f)

		ExitLabel.PrintCode(f)

		if rTyp == GTypeVoid
		{
			f^ << "ret void"
			if DebugMode
				f^ << " , !dbg !" << GDebugLineCallId
			f^ << "\n"
		}else{
			if ResultVar != null
			{
				tmpList := CheckExeDownList
				cl := BoxFuncCall(ResultVar.Value,tmpList)

				cl.PrintPre(f)
				f^ << "ret "
				cl.GetType().PrintType(f)
				f^ << " "
				cl.PrintUse(f)
				if DebugMode
					f^ << " , !dbg !" << GDebugLineCallId
				f^ <<"\n"
			}
		}
			

		f^ << "}\n"

		if DebugMode
		{
			funcLine.PrintDebugMeta(f)
			body.PrintDebugMeta(f)
			Params[^].PrintDebugMeta(f)
			ResultVar?.PrintDebugMeta(f)
		}

		if DebugMode
		{
			f^ << "!" << GDebugFuncId << " = distinct !DISubprogram(name:\""
			PrintName(f)
			f^ << "\","
			f^ << "linkageName:\""
			PrintName(f)
			f^ << "\","
			f^ << "scope: !" << GDebugFileId << " , file: !" << GDebugFileId
			f^ << ",type: !" << GetType().MetaId
			if bdy.Line != null
			{
				f^ << ", line:" << bdy.Line.Line
				f^ << ", scopeLine:" << bdy.Line.Line
			}
			f^ << ", unit: !" << cuId
			f^ << ", flags: DIFlagPrototyped"
			f^ << ", spFlags: DISPFlagDefinition"
			//if tmplId != -1
			//	f << ", templateParams:!"<<tmplId
			f^ << ")\n"
		}
	}
}
