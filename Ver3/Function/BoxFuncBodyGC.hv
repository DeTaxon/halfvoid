AppendClass BoxFuncBody
{

	gcVarsCount := int
	gcArrayVar := ParamFunc^
	gcArrayPtr := ParamFunc^

	gcSetPtr := BoxExeObj^

	NotifyGCUsed := !() -> void 
	{
		gcVarsCount = max(gcVarsCount,GCVarsInUse)

		if gcArrayPtr == null
		{
			ths := this&
			oldFnc := CurrentFunc
			CurrentFunc = this&
			gcArrayPtr = new FuncLocalParam(GTypeVoidP.GetPoint())
			CurrentFunc = oldFnc
			regularVars.Push(gcArrayPtr)
			//gcArrayPtr = new MacroParam(GTypeVoidP.GetPoint(),false,() ==>[ths]{
			//	step1 := ths.gcArrayVar.CreateCall()
			//	step2 := new UnrefFuncCall(step1)
			//	return GetExchange(step2,GTypeVoidP.GetPoint())
			//})
		}
	}
	WorkBodyGC := !() -> void
	{
		if gcVarsCount == 0
			return void
		
		x := GTypeVoidP.GetArray(gcVarsCount)
		gcArrayVar = new FuncLocalParam(x)
		regularVars.Push(gcArrayVar)

		InternalsHatch.Await()

		objs8 := CheckExeDownList
		objs8.Push(gcArrayVar.CreateCall())
		objs8.Push(GetExeInt(gcVarsCount))
		EnterCall = ExceptionEnterFunc.CreateCall(objs8)
		LeaveCall = ExceptionLeaveFunc.CreateCall()

		objs9 := CheckExeDownList
		objs9.Push(gcArrayPtr.CreateCall())
		objs9.Push(gcArrayVar.CreateCall())
		gcSetPtr = CreateFuncCall(StringSpan("="),objs9)

		assert(gcSetPtr != null)
	}
}
