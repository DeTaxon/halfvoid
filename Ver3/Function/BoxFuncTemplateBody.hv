
BoxFuncTemplateBody := class extend BoxFuncTemplate
{
	Attrs := FuncAttributes

	inps1 := Token^
	resTyp := Token^
	bdy := Token^
	cns := Token^

	headerCheckHatch := THatch

	Name := StringSpan

	//Types := HybridQueue.{FuncTemplateInput,10}
	//ResultType := FuncTemplateInput
	//IsVargs := bool

	hData := FunctionHeaderInfo

	Constants := List.{FuncTemplateConstant}

	this := !(FuncAttributes atrs,Token^ brackets1,Token^ brackets2,Token^ constToken, Token^ resToken,Token^ bodyIn) -> void
	{
		assert(brackets2 == null)//not implemented
		Attrs = atrs
		inps1 = brackets1
		resTyp = resToken
		cns = constToken
		bdy = bodyIn

		if resTyp == null
			Attrs.IsAutoResult = true

		ths := this&
		SubWork(() ==> [ths] {
			ths.ParseHeader()
			ths.headerCheckHatch.Emit()
		})
	}
	SetName := virtual !(StringSpan name) -> void
	{
		Name = name
		if CurrentCodeSpace != null
		{
			CurrentCodeSpace.Templates[Name].Push(this&)
		}
	}
	ParseHeader := virtual !() -> void
	{
		if Attrs.IsAutoResult
			hData.IsAutoResult = true
		

		if Attrs.IsLambda
		{
			hData.Types.Emplace(StringSpan(""),GTypeVoidP,false,null)
			hData.IsAutoResult = true
		}else{
			if CurrentScope is in BoxClass //TODO not static,
			{
				cls := CurrentScope->{BoxClass^}
				hData.Types.Emplace(StringSpan("this"),cls.ItType,true,null)
				Attrs.IsMethod = true
			}
		}
		hData.ParseHeader(inps1,resTyp)


		if cns != null
		{
			iter := cns.Down
			while iter != null
			{
				if iter.GetValue() != ","
				{
					cItm := TryGetExeCall(iter)
					Constants.Emplace(iter,cItm)
				}
				iter = iter.Right
			}
		}
	}
	ToFuncType := virtual !(CheckExeDownList objs,List.{BoxExeConstObj^} consts) -> TypeFunc^
	{
		headerCheckHatch.Await()

		minArgs := hData.Types.Size()
		maxArgs := hData.Types.Size()
		
		if hData.IsVariadic
			maxArgs = 2000000 //INT_MAX
		
		if objs.Size() < minArgs or objs.Size() > maxArgs
			return null
		if consts.Size() != Constants.Size()
			return null

		fInTypes := Type^[100]
		isRefs := bool[100]

		datas := HybridQueue.{Tuple.{Type^,bool},10}

		for i : objs.Size()
		{
			datas.Emplace(objs[i].GetType(),objs[i].IsMem())
		}
		resConsts := AVLMap.{StringSpan,BoxUnit^}
		defer resConsts.Destroy()
		return checkTypes(datas,consts,resConsts)
	}
	
	CreateFunc := virtual !(TypeFunc^ tp, List.{BoxExeConstObj^} consts) -> BoxFunc^
	{
		headerCheckHatch.Await()

		datas := HybridQueue.{Tuple.{Type^,bool},10}

		for i : tp.Params.Size()
		{
			datas.Emplace(tp.Params[i].ItType,tp.Params[i].IsRef)
		}
		resConsts := AVLMap.{StringSpan,BoxUnit^}
		defer resConsts.Destroy()
		checkTypes(datas,consts,resConsts)


		names := HybridQueue.{StringSpan,10}
		names.Push(hData.Types[^].Name)
		newFunc := new BoxFuncBody(tp,Attrs,names,bdy)
		newFunc.VariadicName = hData.VariadicName
		newFunc.SetPrintName(Name)

		for it,ind : resConsts
		{
			if it is ConstType
			{
				newFunc.ConstVars.Push(new TypeVar(ind,it->{ConstType^}.Value))
			}else{
				//newFunc.ConstVars.Push(new ConstVar(ind,it->{BoxExeConstObj^}))
				newFunc.ConstVars.Push(it)
			}
		}

		return newFunc
	}
	checkTypes := !(HybridQueue.{Tuple.{Type^,bool},10} objs, List.{BoxExeConstObj^} consts, AVLMap.{StringSpan,BoxUnit^} resCnsts) -> TypeFunc^
	{

		fTyps := Type^[100]
		iRef := bool[100]

		for i : consts.Size()
		{
			if Constants[i].Value == null
			{
				assert(Constants[i].ItToken is TokenTemplateType)
				tmpl := Constants[i].ItToken->{TokenTemplateType^}
				name := tmpl.Value[1..0]
				if consts[i] is ConstType
				{
					resCnsts[name] = consts[i]->{ConstType^}
				}else{
					resCnsts[name] = new ConstVar(name,consts[i])
				}
			}else{
				assert(false)
			}
		}

		for i : objs.Size()
		{
			if i >= hData.Types.Size()
			{
				assert(hData.IsVariadic)
				fTyps[i] = objs[i].0
			}else{
				if hData.Types[i].ItToken != null
				{
					fTyps[i] = checkType(objs[i].0,hData.Types[i].ItToken,resCnsts)
				}
			}
		}


		for i : objs.Size()
		{
			if fTyps[i] == null
				return null
			if IsComplexType(fTyps[i])
				iRef[i] = true
		}
		resTypeT := hData.ResultType.ItType
		//if resTypeT == null
			resTypeT = checkType(null,hData.ResultType.ItToken,resCnsts)
		assert(resTypeT != null)
		return GetFuncType(objs.Size(),fTyps[0]&,iRef[0]&,resTypeT,hData.ResultType.IsRef,hData.IsVargs)
	}
	checkType := !(Type^ tp,Token^ tk, AVLMap.{StringSpan,BoxUnit^} resCnsts) -> Type^
	{
		return CheckTemplateType(tp,tk,resCnsts)
	}

	IsOneFunc := virtual !() -> bool
	{
		headerCheckHatch.Await()

		if not hData.IsOneFunc()
			return false
		if Constants[^].Value == null
			return false
		return true
	}
	GetOneFunc := virtual !() -> BoxFunc^
	{
		resFuncTyp := hData.CreateFuncType()

		names := HybridQueue.{StringSpan,10}
		names.Push(hData.Types[^].Name)
		newFunc := new BoxFuncBody(resFuncTyp,Attrs,names,bdy)
		newFunc.SetPrintName(Name)
		return newFunc
	}

}
