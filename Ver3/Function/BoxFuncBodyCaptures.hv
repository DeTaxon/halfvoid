AppendClass BoxFuncBody
{
	ParentFunc := BoxFuncBody^
	ThisCaptureTupleType := Type^
	CaptureGetCall := BoxExeObj^

	CapturedVars := List.{ParamFunc^}
	CapturedVarsTuple := ParamFunc^
	CapturedVarsGets := List.{ParamFunc^}

	WorkBodyCaptures := !() -> void
	{
		if CapturedVars.Size() == 0 //TODO case for non captured lambdas
			return void
		
		tplClass := GetCaptureTuple()
		CapturedVarsTuple = new FuncLocalParam(tplClass.ItType)
		
		//for  it,i : CapturedVars
		//{
		//	indCall := tplClass.GetFieldByIndex(i)
		//	varCall := CapturedVarsTuple.CreateCall()
		//	dat2 := CheckExeDownList
		//	dat2.Push(varCall)
		//	cl := indCall.CreateCall(dat2)
		//	dat2.Clear()
		//	it.exeObj = cl
		//	it->SetType(FuncResultParam)
		//}

		for it, i : CapturedVarsGets
		{
			getVar := CapturedVarsTuple.CreateCall()
			c1 := new UnrefFuncCall(getVar)
			it.exeObj = GetExchange(c1,it.GetType()->{TypeFunc^}.ResultType)
		}
	}
	CreateGetCaptureCall := !() -> void
	{
		objs3 := CheckExeDownList
		objs3.Push(Params[0].Value.CreateCall())
		cnsts := List.{BoxExeConstObj^}
		cnsts.Push(GetConstType(ThisCaptureTupleType))
		lGCall := TemplateInternalGetCaptures.GetFunc(objs3,cnsts)
		assert(lGCall != null)
		cnsts.Destroy()

		CaptureGetCall = lGCall.CreateCall(objs3)
	}

	GetCaptureTuple := !() -> BoxClass^
	{
		tps := List.{Type^}
		tps.Push(CapturedVars[^].GetType()->{TypeFunc^}.ResultType)
		tplClass := GetTuple(tps)
		tps.Destroy()
		
		return tplClass
	}
}
