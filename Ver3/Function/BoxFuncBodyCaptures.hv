AppendClass BoxFuncBody
{
	ParentFunc := BoxFuncBody^
	ThisCaptureTupleType := Type^
	CaptureGetCall := BoxExeObj^

	CapturedVars := List.{ParamFunc^}
	CapturedVarsTuple := ParamFunc^
	CapturedVarsGets := List.{ParamFunc^}

	WorkBodyCaptures := !() -> void
	{
		if CapturedVars.Size() == 0 //TODO case for non captured lambdas
			return void
		
		tplClass := GetCaptureTuple()
		CapturedVarsTuple = new FuncLocalParam(tplClass.ItType)

		for it, i : CapturedVarsGets
		{
			getVar := CapturedVarsTuple.CreateCall()
			c1 := new UnrefFuncCall(getVar)
			it.exeObj = GetExchange(c1,it.GetType()->{TypeFunc^}.ResultType)
		}
	}
	CreateGetCaptureCall := !() -> void
	{
		
		asRawPar := new FuncInputParam(GTypeVoidP,false,StringSpan("%par0")) //TODO: way too bad

		CaptureGetCall = innerGetCaptureCall(asRawPar)
		getCaptureInLeafs = innerGetCaptureCall(Params[0].Value)
		asRawPar.PopulateCalls()
	}

	innerGetCaptureCall := !(ParamFunc^ val) -> BoxExeObj^
	{
		objs3 := CheckExeDownList
		objs3.Push(val.CreateCall())
		cnsts := List.{BoxExeConstObj^}
		cnsts.Push(GetConstType(ThisCaptureTupleType))
		lGCall := TemplateInternalGetCaptures.GetFunc(objs3,cnsts)
		assert(lGCall != null)
		cnsts.Destroy()
		
		return lGCall.CreateCall(objs3)
	}

	GetCaptureTuple := !() -> BoxClass^
	{
		tps := List.{Type^}
		tps.Push(CapturedVars[^].GetType()->{TypeFunc^}.ResultType)
		tplClass := GetTuple(tps)
		tps.Destroy()
		
		return tplClass
	}

	getCaptureInLeafs := BoxExeObj^
	inChain := bool
	NotifyChainCapture := !() -> void
	{
		assert(Attrs.IsLambda)

		if inChain
			return void

		Params[0].Value.NotifyCaptureUse()
		inChain = true
	}

	PrintCaptureUsage := !(TIOStream^ f,bool isFirstCall) -> void
	{
		if ParentFunc == null
			return void

		assert(CaptureGetCall != null)

		getThisCapture := CaptureGetCall
		if not isFirstCall
			getThisCapture = getCaptureInLeafs

		getThisCapture.PrintDefaultUse(f)
		ParentFunc.CapturedVarsTuple.PrintResultObj(f,0,0)
		f^ << " = getelementptr "
		ThisCaptureTupleType.PrintType(f)
		f^ << " , "
		ThisCaptureTupleType.PrintType(f)
		f^ << "* "
		getThisCapture.PrintUse(f)
		f^ << ", i32 0"
		if DebugMode
			f^ << " , !dbg !" << GDebugLineCallId
		f^ <<"\n"

		ParentFunc?.PrintCaptureUsage(f,false)
	}
}
