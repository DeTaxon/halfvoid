
TryCheckRegularFuncCall := !(Token^ itm) -> BoxExeObj^
{
	if itm.Down == null or itm.Down == null or itm.Down.Right == null
		return null
	if itm.Down?.Right.GetValue() != "()"
		return null
	if itm.Down.Right.Right != null
		return null

	Objs := CheckExeDownList
	CheckFuncCallBrackets(itm.Down.Right,Objs)

	if itm.Down is TokenIndent
	{
		asInd := itm.Down->{TokenIndent^}
		for ob : UnitStack
		{
			if ob is in BoxFuncBody and asInd.Value != "this"
			{
				fnc := ob->{BoxFuncBody^}
				if fnc.Attrs.IsMethod
				{
					try
					{
						tkn1 := TokenIndent(StringSpan("this"))
						tkn1.Line = itm.Line
						vr := TryGetExeCall(tkn1&)

						return innerTryGetMethodCall(asInd.Value,vr,Objs)?
					}catch(IException^ e)
					{
					}
				}
			}
		}

		return CreateFuncCall(asInd.Value,Objs)
	}else{
		assert(false)
	}

}
