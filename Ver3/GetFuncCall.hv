
TryCheckRegularFuncCall := !(Token^ itm) -> BoxExeObj^
{
	if itm.Down == null or itm.Down == null or itm.Down.Right == null
		return null
	if itm.Down?.Right.GetValue() != "()"
		return null
	brc := itm.Down.Right
	constsToken := brc.Right
	if constsToken != null
	{
		if constsToken.GetValue() != "."
			return null
		constsToken = constsToken.Right
		if constsToken == null or constsToken.GetValue() != "{}"
			return null
		if constsToken.Right != null
			return null
	}

	Objs := CheckExeDownList
	defer Objs.Destroy()
	CheckFuncCallBrackets(brc,Objs)

	consts := List.{BoxExeConstObj^}
	defer consts.Destroy()
	if constsToken != null
		CheckFuncCallConsts(constsToken,consts)


	if itm.Down is TokenIndent
	{
		asInd := itm.Down->{TokenIndent^}
		for ob : UnitStack
		{
			if ob is in BoxFuncBody and asInd.Value != "this"
			{
				fnc := ob->{BoxFuncBody^}
				if fnc.Attrs.IsMethod
				{
					try
					{
						tkn1 := TokenIndent(StringSpan("this"))
						tkn1.Line = itm.Line
						vr := TryGetExeCall(tkn1&)

						return innerTryGetMethodCall(asInd.Value,vr,Objs,consts)?
					}catch(IException^ e)
					{
					}
				}
			}
		}

		try
		{
		resFunc := CreateFuncCall(asInd.Value,Objs,consts)
		if resFunc != null
			return resFunc
		}catch(IException^ e)
		{}
	}
	dwnItem := TryGetExeCall(itm.Down)
	if dwnItem != null
	{
		return innerTryGetPtrCall(dwnItem,Objs)?
	}
	assert(false)
}

innerTryGetPtrCall := !(BoxExeObj^ dwnItem, CheckExeDownList Objs) -> BoxExeObj^
{
	dType := dwnItem.GetType()
	if dType is TypePoint and dType.Base is TypeFunc
	{
		fType := dType.Base->{TypeFunc^}
		if CmpFuncPriority(fType,Objs) != CmpNoExchange
		{
			return new BoxFuncPointerCall(dwnItem,Objs)
		}

	}
	return null
}
