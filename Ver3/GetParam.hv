TryCheckGetParam := !(Token^ itm) -> BoxExeObj^
{
	if itm == null return null
	if itm is TokenIndent 
	{
	}else{
		return null
	}

	asItm := itm->{TokenIndent^}


	metFuncs := HybridQueue.{BoxFuncBody^,4}

	for par : UnitStack
	{
		if par is ConstVar
		{
			cv := par->{ConstVar^}
			if cv.Name == asItm.Value
				return cv.Value
		}
		if par is in NamedVar
		{
			mv := par->{NamedVar^}
			if mv.Name == asItm.Value
			{
				if par is in MemVar
				{
					mv2 := mv->{MemVar^}
					if metFuncs.Size() != 0
					{
						mv2.NotifyCaptureUse()
						if metFuncs.Size() >= 2
						{
							for it,i : metFuncs
							{
								if i != 0
									it.NotifyChainCapture()
							}
						}
					}
					return mv2.Value.CreateCall()
				}else if par is MacroVar {
					macro := par->{MacroVar^}
					return macro.CreateCall()
				}else{
					assert(false)
				}
			}
		}
		
		if par is in BoxFuncBody
		{
			fnc := par->{BoxFuncBody^}

			metFuncs.Push(fnc)
			
			if fnc.Attrs.IsMethod and asItm.Value != "this"
			{
				clsType := fnc.Params[0].GetVarType()
				assert(clsType is TypeClass)
				cls := clsType->{TypeClass^}.ToClass

				if cls.GetField(asItm.Value) != null //todo: could use field call ifrom here
				{
					tkn1 := TokenIndent(StringSpan("this"))
					tkn2 := TokenSymbol(StringSpan("."),0)
					tkn3 := TokenIndent(asItm.Value)
					tknData := TokenData


					tknData.Down = tkn1&
					tkn1.Right = tkn2&
					tkn2.Right = tkn3&

					tkn1.Line = itm.Line
					tkn2.Line = itm.Line
					tknData.Line = itm.Line
	
					fCall := BoxExeObj^
					try
					{
						fCall = TryGetFieldCall(tknData&)
					}catch(IException^ e)
					{}
					return fCall?
				}
			}
		}
	}
	callItem := BoxUnit^
	GetItemGlobal(asItm.Value, x ==> {
		for it : x
		{
			if it is GlobalVar
			{
				callItem = it->{GlobalVar^}.Value
				return true
			}
			if it is TaskLocalVar
			{
				callItem = it
				return true
			}
			if it is in BoxFunc
			{
				callItem = new FuncPointerParam(it->{BoxFunc^})
				return true
			}
		}
		return false
	})
	if callItem != null
	{
		if callItem is TaskLocalVar
		{
			return callItem->{TaskLocalVar^}.CreateCall()
		}
		if callItem is in BoxFunc
		{
			return callItem->{BoxFunc^}.CreateCall()
		}
	}

	asType := ParseType(itm)
	if asType != null
		return GetConstType(asType)
	itm.EmitError("Could not get param "sbt + asItm.Value) //todo better explanation

	return null
}
