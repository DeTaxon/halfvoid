TryCheckGetParam := !(Token^ itm) -> BoxExeObj^
{
	if itm == null return null
	if itm is TokenIndent 
	{
	}else{
		return null
	}

	asItm := itm->{TokenIndent^}

	for par : UnitStack
	{
		if par is ConstVar
		{
			cv := par->{ConstVar^}
			if cv.Name == asItm.Value
				return cv.Value
		}
		if par is MemVar
		{
			mv := par->{MemVar^}
			if mv.Name == asItm.Value
			{
				emptyObj := CheckExeDownList
				return new BoxFuncCall(mv.Value,emptyObj)
			}
		}
		if par is in BoxFuncBody
		{
			fnc := par->{BoxFuncBody^}
			if fnc.Attrs.IsMethod and asItm.Value != "this"
			{
				tkn1 := TokenIndent(StringSpan("this"))
				tkn2 := TokenSymbol(StringSpan("."),0)
				tknData := TokenData

				tknData.Down = tkn1&
				tkn1.Right = tkn2&
				tkn2.Right = itm

				tkn1.Line = itm.Line
				tkn2.Line = itm.Line
				tknData.Line = itm.Line

				try
				{
					return TryGetExeCall(tknData&)
				}catch(IException^ e)
				{}
			}
		}
	}
	callItem := BoxUnit^
	GetItemGlobal(asItm.Value, x ==> {
		for it : x
		{
			if it is GlobalVar
			{
				callItem = it->{GlobalVar^}.Value
				return true
			}
			if it is in BoxFunc
			{
				callItem = new FuncPointerParam(it->{BoxFunc^})
				return true
			}
		}
		return false
	})
	if callItem != null
	{
		if callItem is in BoxFunc
		{
			emptyObj := CheckExeDownList
			return new BoxFuncCall(callItem->{BoxFunc^},emptyObj)
		}
	}

	assert(false) //TODO emit error

	return null
}
