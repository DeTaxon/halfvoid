
TryParseClass := !(Token^ itm) -> BoxUnit^
{
	if itm == null or itm.Down == null or itm.Down.GetValue() != "class"
		return null

	parents := HybridQueue.{Token^,2}
	constValue := Token^

	isPacked := bool

	iter := itm.Down.Right

	if iter.GetValue() == "."
	{
		constValue = iter.Right
		iter = constValue.Right
	}

	if iter.GetValue() == "extend"
	{
		iter = iter.Right
		parents.Push(iter)
		iter = iter.Right

		while iter.GetValue() == ","
		{
			iter = iter.Right
			parents.Push(iter)
			iter = iter.Right
		}
		assert(iter.GetValue() == "{}")
	}
	bdy := iter

	if bdy == null
		return null

	if constValue != null
		return new BoxClassTemplateBody(isPacked,parents,bdy,constValue)
	return new BoxClassBody(isPacked,parents,bdy)
}


BoxClassBody := class extend BoxClass
{
	Body := Token^
	ParentTokens := HybridQueue.{Token^,5}

	VParentState := THatch
	VTableState := THatch
	FieldsState := THatch

	NamedConstants := AVLMap.{StringSpan,BoxUnit^}
	PutItConstants := virtual !() -> void
	{
		UnitStack.PushFront(NamedConstants[^])
	}

	ParentScope := BoxUnit^
	GetParentScope := virtual !() -> BoxUnit^ { return ParentScope }

	this := !(bool isPacked,HybridQueue.{Token^,2} parents,Token^ bdy) -> void
	{
		ItName = "anon" //todo
		ItId = GetNewId()
		ItType = new TypeClass(this&)
		
		ParentTokens.Push(parents[^])

		ParentScope = CurrentScope
		itFile := GetFileScope()

		IsPacked = isPacked
		Body = bdy
		itFile.AllClasses.Push(this&)

		GClassesInProgress.Push(this&)
		cls := this&
		TSpawnTask(() ==> [cls,itFile] { //todo pass CurrentFile directly?
			CurrentFile = itFile
			cls.ParseBody()	
		})
	}
	AwaitTypeState := virtual !() -> void
	{
		FieldsState.Await()
	}
	AwaitReadyState := virtual !() -> void
	{
		AwaitTypeState()
	}
	ParseBody := virtual !() -> void
	{
		GParsedAllFiles.Await()
		SyntaxCompress(Body,LexHVFileRoot)

		ScopePutConstants()

		for i : ParentTokens.Size()
		{
			inhType := ParseType(ParentTokens[i])
			assert(inhType != null) //TODO
			assert(inhType is TypeClass) //TODO
			asClsParent := inhType->{TypeClass^}
			Parents.Push(asClsParent.ToClass)
		}
		//PrimeParentStep()
		VParentState.Emit()

		CurrentScope = this&

		funcs := List.{Tuple.{StringSpan,BoxFunc^}}

		iter := Body.Down

		while iter != null
		{
			if iter.Down?.Right?.GetValue() == ":="
			{
				assert(iter.Down is TokenIndent) //TODO
				name := iter.Down->{TokenIndent^}.Value

				itm := iter.Down.Right.Right

				asType := ParseType(itm)
				if asType != null
				{
					newField := new FieldParam(name,asType)
					Fields.Push(newField)
				}else
				{
					asFunc := TryParseFunction(itm)
					if asFunc != null
					{
						if asFunc is in BoxFunc
						{
							f := asFunc->{BoxFunc^}
							funcs.Emplace(name,f)
							f.SetName(name)
							f.Work()
						}else{
							assert(false) //template
						}
					}else
					{
						assert(false)
					}
				}
			}
			iter = iter.Right
		}

		if Parents.Size() != 0
		{
			Parents[0].AwaitVTableStep()
			for it,i : Parents[0].VTable
			{
				VTable.Push(it)
			}
		}

		for f : funcs
		{
			if f.1 is BoxFuncBody and f.1->{BoxFuncBody^}.Attrs.IsVirtual
			{
				vFunc := new VTableFunc(f.0,f.1)

				ind := 0

				found := false
				for it,i : VTable
				{
					if it.IsEq(vFunc)
					{
						it = vFunc
						found = true
						ind = i
						break
					}
				}

				if not found
				{
					ind = VTable.Size()
					VTable.Push(vFunc)
				}

				//Methods[f.0] .Push(new BoxVirtualFunc(f.1.GetType()->{TypeFunc^},this&,ind) )
				cnsts := List.{BoxExeConstObj^}
				defer cnsts.Destroy()
				cnsts.Push(GetExeInt(ind))
				vFunc := TemplateInternalVirtualCall.CreateFunc(f.1.GetType()->{TypeFunc^},cnsts)
				vFunc.SetName(f.0)
				Methods[f.0].Push(vFunc)
				f.1.ParseBody()
			}else
			{
				Methods[f.0] .Push(f.1)
			}
		}
		CreateVTable()
		VTableState.Emit()

		InheritStep()
		FieldsState.Emit()

	}
	GetField := virtual !(StringSpan val) -> FieldPath^
	{
		AwaitTypeState()

		for it : FieldsPath
		{
			if it.Field.Name == val
				return it
		}
	}
	AwaitParentStep := virtual !() -> void { VParentState.Await() }
	AwaitVTableStep := virtual !() -> void { VTableState.Await() }
}
