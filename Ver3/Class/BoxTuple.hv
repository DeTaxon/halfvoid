
tplDatabase := AVLMap.{Type^,BoxClassTuple^}
GetTuple := !(List.{Type^} types) -> BoxClass^
{
	typesArr := Type^[200] //todo  to Array
	typesArr[i] = types[^i]
	hck := GetFuncType(types.Size(),typesArr[0]&,null,GTypeVoid,false,false)
	if tplDatabase.Contain(hck)
		return tplDatabase[hck]
	newClass := new BoxClassTuple(types)
	tplDatabase[hck] = newClass
	AllClasses.Push(newClass)
	return newClass
}


BoxClassTuple := class extend BoxClass
{
	this := !(List.{Type^} types) -> void
	{
		ItName = "anon" //todo
		ItId = GetNewId()
		ItType = new TypeClass(this&)

		for it,i : types //todo remove i
		{
			Fields.Push(new FieldParam(StringSpan(""),types[i]))
		}
		InheritStep()
	}
}


BoxClassTupleTemplate := class extend BoxClassTemplate
{
	GetClass := virtual !(List.{BoxExeConstObj^} inpts) -> BoxClass^
	{
		lst := List.{Type^}

		for it : inpts
		{
			if it is ConstType
			{
				lst.Push(it->{ConstType^}.Value)
			}else{
				return null
			}
		}
		res := GetTuple(lst)
		lst.Destroy()
		return res
	}
}

TupleInit := !() -> void
{
	bSpace := CodeSpaces[-1]&
	nm := StringSpan("Tuple")
	bSpace.Globals[nm].Push(new TemplateTypeVar(nm,new BoxClassTupleTemplate) )
}
