BoxClassPoison := class extend BoxClass
{
	PoisonFunctions := AVLMap.{StringSpan,Token^}
	populatePoisons := !(BoxClass^ cls) -> void
	{
		if not (cls is in BoxClassBody)
			return void
		cls2 := cls->{BoxClassBody^}
		for it,ind : cls2.PoisonFunctions
		{
			if not PreVTableFuncs.Contain(ind)
			{
				newFunc := TryParseFunction(it)
				assert(newFunc != null)
				assert(newFunc is in BoxFuncTemplate)
				newFunc2 := newFunc->{BoxFuncTemplate^}.GetOneFunc()->{BoxFuncBody^}
				assert(newFunc2 is in BoxFuncBody)

				newFunc2.ParentScope = this&
				newFunc2.SetName(ind)
				newFunc2.Work()

				PreVTableFuncs[ind].Push(newFunc2)
			}
		}
		populatePoisons(cls2.Parents[^])
	}
}
