GrowableClass := class extend BoxClass
{
	classSize := VarIntObj^
	this := !(ModuleVulkan^ bs) -> void
	{
		itModule = bs

		ItName = "VulkanFunctionsClass" //todo
		ItId = GetNewId()
		ItType = new TypeClass(this&) //TODO remove duplicate from BoxClassBody,BoxTuple

		ItAlign = 1 //TODO pointer size
		ItSize = 0
		growableInit() //todo replace on super
	}
	growableInit := !() -> void
	{
		classSize = new VarIntObj(this&)
	}
	GetField := virtual !(StringSpan val) -> FieldPath^
	{
		for it : FieldsPath
		{
			if it.Field.Name == val
				return it
		}

		newFieldType := GetNewFieldType(val)

		if newFieldType == null
			return null

		newField := new FieldParam(val,newFieldType)
		Fields.Push(newField)

		fPath := new FieldPath(ItType,newField.Value)
		fPath.Field = newField
		fPath.Index = FieldsPath.Size()

		FieldsPath.Push(fPath)

		fieldAlign := newFieldType.GetAlign()
		ItAlign = max(ItAlign,fieldAlign)

		unalign := ItSize % fieldAlign
		if unalign != 0
		{
			ItSize += fieldAlign - unalign
		}

		ItSize += newFieldType.GetSize() //todo variable size object?

		for it : fieldIterators
		{
			it.ItemCreated(FieldsPath.Size() - 1)
		}

		return fPath 
	}
	GetNewFieldType := virtual !(StringSpan val) -> Type^
	{
		return null
	}
	GetClassSize := virtual !() -> BoxExeObj^
	{
		return classSize
	}

	fieldIterators := List.{GrowableClassMetaFields^} //TODO already bad, can not be used frequently
	GetFieldsIterator := virtual !(BoxExeObj^ itm) -> BoxMetaObj^
	{
		newIterator := new GrowableClassMetaFields(itm,this&)
		fieldIterators.Push(newIterator)
		return newIterator
	}
}

GrowableClassMetaFields := class extend  BoxMetaGrowingObject
{
	callObj := BoxExeObj^
	objRes := ParamFunc^
	itClass := BoxClass^

	this := !(BoxExeObj^ itm,BoxClass^ bs) -> void
	{
		itClass = bs
		callObj = itm
		objRes = new FuncResultParam(itm)
	}

	PrintDefaultUse := virtual !(TIOStream^ f) -> void
	{
		objRes.PrintCode(f)
	}

	IsMetaIteratable := virtual !() -> bool { return true }
	MetaIteretableSize := virtual !() -> int { itClass.AwaitTypeState() return itClass.FieldsPath.Size() }

	infoUser := !(int)&->void
	RegisterUser := virtual !(!(int)&->void cb) -> void //TODO toobad, not designed for that use
	{
		infoUser = cb
	}
	ItemCreated := !(int ind) -> void
	{
		infoUser(ind) //TODO can be null
	}

	GetMetaIterValue := virtual !(int ind) -> BoxExeObj^ 
	{
		itClass.AwaitTypeState()
		indCall := itClass.FieldsPath[ind]
		itms := CheckExeDownList
		itms.Push(objRes.CreateCall())
		return indCall.CreateCall(itms)
	}
	GetMetaIterIndex := virtual !(int ind) -> BoxExeObj^ 
	{
		itClass.AwaitTypeState()
		return GetExeString(GetConstString(itClass.FieldsPath[ind].Field.Name))
	}
}

VarIntObj := class extend BoxExeObj
{
	Value := BoxClass^
	this := !(BoxClass^ ptr) -> void
	{
		Value = ptr
		ObjType = GTypeInt
	}
	getVal := !() -> int
	{
		minSize := Value.ItSize
		unalign := minSize % Value.ItAlign
		if unalign != 0
			minSize += Value.ItAlign - unalign
		return minSize
	}
	PrintUse := virtual !(TIOStream^ f) -> void
	{
		f^ << getVal()
	}
	PrintConst := virtual !(TIOStream^ f) -> void
	{
		f^ << getVal()
	}
}
