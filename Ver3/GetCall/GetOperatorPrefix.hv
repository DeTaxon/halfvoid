TryGetPrefixOperator := !(Token^ itm) -> BoxExeObj^
{
	if itm.Down == null
		return null

	if itm.Down.GetValue() == "return" or itm.Down.GetValue() == "yield"
	{
		isYield := false
		if itm.Down.GetValue() == "yield"
			isYield = true

		resultCall := BoxExeObj^

		preRes := ReturnHalfState^

		if itm.Down.Right is TokenIndent and itm.Down.Right->{TokenIndent^}.Value == "void"
		{
			preRes = new ReturnHalfState(itm.Down.Right,null,isYield)
		}else{
			dwnRes := TryGetExeCall(itm.Down.Right)
			if dwnRes == null
				itm.Down.Right.EmitError("could not get result to return")
			preRes = new ReturnHalfState(itm.Down.Right,dwnRes,isYield)
		}

		if CurrentFunc.Attrs.IsAutoResult
		{
			CurrentFunc.Returns.Push(preRes)
			return preRes
		}

		preRes.ResolveStep()
		return preRes.GetReturnObj()
	}
	if itm.Down.GetValue() == "defer"
	{
		lmbdPre := CreateHeadlessLambda(itm.Down.Right)->{BoxLambdaHolder^}
		assert(lmbdPre is BoxLambdaHolder)
		//assert(lmbdPre.IsOneFunc())
		lmbd := lmbdPre.CreateOneFuncLambda()
		tp := lmbd.GetType()
		assert(tp is in TypePoint and tp.Base is TypeClass)
		arr := List.{BoxExeConstObj^}
		arr.Push(GetConstType(tp.Base))
		newType := GCDeferLambda.GetClass(arr).ItType
		arr.Destroy()
		return innerTrySetType(lmbd,newType)
	}
	if itm.Down.GetValue() == "-"
	{
		if itm.Down.Right == null
			return null
		if itm.Down.Right.Right != null
			return null
		dObj := TryGetExeCall(itm.Down.Right)
		if dObj == null
			return null

		objs5 := CheckExeDownList
		objs5.Push(dObj)
		return CreateFuncCall(StringSpan(". -"),objs5)
	}
	return null
}
