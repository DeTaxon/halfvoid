TryGetFieldCall := !(Token^ itm) -> BoxExeObj^
{
	if itm == null return null
	if itm.Down == null return null
	if itm.Down.Right == null return null
	if itm.Down.Right.Right == null return null
	if itm.Down.Right.Right.Right != null return null
	if itm.Down.Right.GetValue() != "." return null

	val := TryGetExeCall(itm.Down)
	assert(val != null) //TODO
	return innerTryGetFieldCall(val,itm.Down.Right.Right)
}

innerTryGetFieldCall := !(BoxExeObj^ val,Token^ rObj) -> BoxExeObj^
{
	if rObj is TokenIndent
	{
		name := rObj->{TokenIndent^}.Value

		typ := val.GetType()
		if typ is TypeClass
		{
			cls := typ->{TypeClass^}.ToClass
			cls.AwaitTypeState()
			fld := cls.GetField(name)

			if fld == null
				rObj.EmitError("Field not found")

			itms := CheckExeDownList
			itms.Push(val)
			return new BoxFuncCall(fld,itms)
		}
	}
	rObjVal := TryGetExeCall(rObj)
	if rObjVal? is BoxExeInt
	{
		fieldInd := rObjVal->{BoxExeInt^}.val

		typ := val.GetType()
		if typ is TypeClass or typ.Base? is TypeClass
		{
			cls :=  BoxClass^
			if typ is TypeClass
			{
				cls = typ->{TypeClass^}.ToClass
			}else{
				cls = typ.Base->{TypeClass^}.ToClass
			}
			
			fld := cls.GetFieldByIndex(fieldInd)
			assert(fld != null) //TODO

			itms := CheckExeDownList
			itms.Push(val)
			return new BoxFuncCall(fld,itms)
		}
	}

	return null
}
