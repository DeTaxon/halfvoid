ConstantHolder := class extend TGCObject
{
	Constants := List.{BoxExeConstObj^}

	"==" := !(ConstantHolder other) -> bool
	{
		if Constants.Size() != other.Constants.Size()
			return false
		
		for i : Constants.Size()
		{
			itm1 := Constants[i]
			itm2 := other.Constants[i]

			
			//if itm1->VTable != itm2->VTable
			//	return false

			if itm1 != itm2
				return false

		}
		return true
	}
	Destroy := virtual !() -> void
	{
		Constants.Destroy()
	}
}

TemplateCheckConstants := !(List.{BoxExeConstObj^} cnsts, List.{Token^} cnstsTokens, AVLMap.{StringSpan,BoxUnit^} namedConsts) -> bool
{
	if cnsts.Size() != cnstsTokens.Size()
		return false

	for cnst, i : cnsts, token : cnstsTokens
	{
		res := CheckTemplateConst(cnst,token,namedConsts)
		if res == null
			return false
	}
	//for cnst, i : cnsts, token : cnstsTokens
	//{
	//	assert(token is TokenTemplateType)
	//	tmpl := token->{TokenTemplateType^}
	//	name := tmpl.Value[1..0]
	//	if cnst is ConstType
	//	{
	//		namedConsts[name] = new TypeVar(name,cnst->{ConstType^}.Value)
	//	}else{
	//		namedConsts[name] = new ConstVar(name,cnst)
	//	}
	//}
	return true
}


typeConsts := AVLMap.{Type^,ConstType^}
GetConstType := !(Type^ tp) -> BoxExeConstObj^
{
	if typeConsts.Contain(tp)
		return typeConsts[tp]
	newCmp := new ConstType(tp)
	typeConsts[tp] = newCmp
	return newCmp
}

ConstType := class extend BoxExeConstObj
{
	Value := Type^
	this := !(Type^ tp) -> void
	{
		ObjType = GTypeVoid
		Value = tp
	}
}
