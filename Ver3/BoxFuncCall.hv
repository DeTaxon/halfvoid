globalIdIter := 0
GetNewId := !() -> int
{
	globalIdIter += 1
	return globalIdIter
}

BoxFuncCall := class extend BoxExeObj
{
	callObj := BoxFunc^
	downs := ExeDownList
	resId := int
	this := !(BoxFunc^ fnc, HybridQueue.{BoxExeObj^,20} objs) -> void
	{
		callObj = fnc
		downs.Push(objs[^])
		resId = GetNewId()
	}
	GetType := virtual !() -> Type^
	{
		return callObj.GetType().ResultType
	}

	IsMem := virtual !() -> bool
	{
		return callObj.GetType().ResultRef
	}
	PrintFuncUse := !(TIOStream^ f) -> void
	{
		fType := callObj.GetType()

		downs[^].PrintPre(f)

		if fType.ResultType != GTypeVoid
		{
			f^ << "%T" << resId << " = "
		}

		f^ << "call "
		if fType.IsVargs
		{
			fType.PrintType(f)
		}else{
			fType.ResultType.PrintType(f)
		}
		callObj.PrintName(f)

		f^ << "("
		
		needComma := false

		for dwn,i : downs
		{
			if needComma
				f^ << ","
			needComma = true

			dwn.GetType().PrintType(f)
			f^ << " "
			dwn.PrintUse(f)
		}

		f^ << ")\n" //TODO debug
	}
	PrintPre := virtual !(TIOStream^ f) -> void
	{
		PrintFuncUse(f)
	}
	PrintUse := virtual !(TIOStream^ f) -> void
	{
		f^ << "%T" << resId
	}
}
