globalIdIter := 0
GetNewId := !() -> int
{
	globalIdIter += 1
	return globalIdIter
}

BoxFuncCall := class extend BoxExeObj
{
	callObj := BoxFunc^
	downs := ExeDownList
	resId := int
	this := !(BoxFunc^ fnc, CheckExeDownList objs) -> void
	{
		callObj = fnc
		downs.Push(objs[^])
		resId = GetNewId()

		for par,i : fnc.GetType().Params
		{
			if par.IsRef
			{
				downs[i].NotifyMemUse()
			}
		}
	}
	NotifyMemUse := virtual !() -> void
	{
		callObj.NotifyMemUse()
	}
	GetType := virtual !() -> Type^
	{
		return callObj.GetType().ResultType
	}

	IsMem := virtual !() -> bool
	{
		return callObj.IsMem()
	}
	PrintFuncUse := !(TIOStream^ f) -> void
	{
		callObj.PrintFuncCall(f,resId,0,downs)
	}
	PrintPointPre := virtual !(TIOStream^ f) -> void
	{
		PrintFuncUse(f)
	}
	PrintPointUse := virtual !(TIOStream^ f) -> void
	{
		callObj.PrintResultObj(f,resId,-1)
	}
	PrintPre := virtual !(TIOStream^ f) -> void
	{
		if IsMem()
		{
			rType := GetType()

			PrintPointPre(f)
			f^ << "%TUnref" << resId << " = load "
			rType.PrintType(f)
			f^ << ","
			rType.PrintType(f)
			f^ << "* "
			PrintPointUse(f)
			f^ << "\n"
		}else{
			PrintFuncUse(f)
		}
	}
	PrintUse := virtual !(TIOStream^ f) -> void
	{
		if IsMem()
		{
			f^ << "%TUnref" << resId
		}else{
			callObj.PrintResultObj(f,resId,-1)
		}
	}
}
