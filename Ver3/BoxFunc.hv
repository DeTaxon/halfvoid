BoxFunc := class extend BoxUnit
{
	ItType := TypeFunc^
	ItTypeHatch := THatch

	GetType := !() -> TypeFunc^
	{
		ItTypeHatch.Await()
		return ItType
	}
	SetType := !(TypeFunc^ tp) -> void
	{
		ItType = tp
		ItTypeHatch.Emit()
	}
	WorkBody := virtual !() -> void
	{
	}
	SetName := virtual !(StringSpan nm) -> void
	{
	}
	WaitReadyState := virtual !() -> void
	{
	}
	PrintCode := virtual !(TIOStream^ f) -> void
	{
	}
	PrintResultType := virtual !(TIOStream^ f) -> void
	{
		ItType.ResultType.PrintType(f) //TODO return class
	}
	PrintInputTypes := virtual !(TIOStream^ f) -> void
	{
		needComma := false
		for par,i : ItType.Params
		{
			if needComma
				f^ << ","
			needComma = true

			par.ItType.PrintType(f)
			f^ << " %par" << i
		}
		if ItType.IsVargs
		{
			if needComma
				f^ << ","
			f^ << "..."
		}
	}
	PrintName := virtual !(TIOStream^ f) -> void
	{
	}
	PrintResultObj := virtual !(TIOStream^ f, int resId, int debId) -> void
	{
	}
	PrintFuncCall := virtual !(TIOStream^ f,int resId,int debId,ExeDownList lst) -> void
	{
	}
	NotifyMemUse := virtual !() -> void
	{
	}
}

BoxFuncCommon := class extend BoxFunc
{
	PrintResultObj := virtual !(TIOStream^ f, int resId, int debId) -> void
	{
		if ItType.ResultType != GTypeVoid
		{
			f^ << "%T" << resId
		}
	}
	PrintFuncCall := virtual !(TIOStream^ f,int resId,int debId,ExeDownList lst) -> void
	{
		lst[^].PrintPre(f)

		itType := GetType()

		if itType.ResultType != GTypeVoid
		{
			f^ << "%T" << resId << " = "
		}

		f^ << "call "
		if itType.IsVargs
		{
			itType.PrintType(f)
		}else{
			itType.ResultType.PrintType(f)
		}
		PrintName(f)

		f^ << "("
		
		needComma := false

		for dwn,i : lst
		{
			if needComma
				f^ << ","
			needComma = true

			dwn.GetType().PrintType(f)
			f^ << " "
			dwn.PrintUse(f)
		}

		f^ << ")\n" //TODO debug
	}
}

