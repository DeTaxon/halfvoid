BoxFunc := class extend BoxExeConstObj
{
	ItTypeHatch := THatch
	Constants := List.{BoxExeObj^} //todo  to Array for less memory consuption

	GetType := virtual !() -> Type^
	{
		ItTypeHatch.Await()
		return ObjType
	}
	SetType := !(TypeFunc^ tp) -> void
	{
		ObjType = tp
		ItTypeHatch.Emit()
	}
	IsMem := virtual !() -> bool
	{
		return GetType()->{TypeFunc^}.ResultRef
	}
	WorkBody := virtual !() -> void
	{
	}
	SetName := virtual !(StringSpan nm) -> void
	{
	}
	WaitReadyState := virtual !() -> void
	{
	}
	PrintCode := virtual !(TIOStream^ f) -> void
	{
	}
	PrintResultType := virtual !(TIOStream^ f) -> void
	{
		fTyp := GetType()->{TypeFunc^}
		fTyp.ResultType.PrintType(f) //TODO return class
	}
	ParseBody := virtual !() -> void
	{
	}
	PrintInputTypes := virtual !(TIOStream^ f) -> void
	{
		needComma := false
		for par,i : GetType()->{TypeFunc^}.Params
		{
			if needComma
				f^ << ","
			needComma = true

			par.ItType.PrintType(f)
			if par.IsRef
				f^ << "*"
			f^ << " %par" << i
		}
		if GetType()->{TypeFunc^}.IsVargs
		{
			if needComma
				f^ << ","
			f^ << "..."
		}
	}
	PrintName := virtual !(TIOStream^ f) -> void
	{
	}
	PrintResultObj := virtual !(TIOStream^ f, int resId, int debId) -> void
	{
	}
	PrintFuncCall := virtual !(TIOStream^ f,int resId,int debId,ExeDownList lst) -> void
	{
	}
}

BoxFuncCommon := class extend BoxFunc
{
	PrintResultObj := virtual !(TIOStream^ f, int resId, int debId) -> void
	{
		fTyp := GetType()->{TypeFunc^}
		if fTyp.ResultType != GTypeVoid
		{
			f^ << "%T" << resId
		}
	}
	PrintFuncCall := virtual !(TIOStream^ f,int resId,int debId,ExeDownList lst) -> void
	{
		itType := GetType()->{TypeFunc^}
	

		for itm,i : lst
		{
			if itType.Params.Size() > i and itType.Params[i].IsRef
			{
				itm.PrintPointPre(f)
			}else{
				itm.PrintPre(f)
			}
		}


		if itType.ResultType != GTypeVoid
		{
			f^ << "%T" << resId << " = "
		}

		f^ << "call "
		if itType.IsVargs
		{
			itType.PrintType(f)
		}else{
			itType.ResultType.PrintType(f)
		}
		PrintName(f)

		f^ << "("
		
		needComma := false

		for dwn,i : lst
		{
			if needComma
				f^ << ","
			needComma = true
			
			if itType.Params.Size() > i and itType.Params[i].IsRef
			{
				dwn.GetType().PrintType(f)
				f^ << "* "
				dwn.PrintPointUse(f)
			}else{
				dwn.GetType().PrintType(f)
				f^ << " "
				dwn.PrintUse(f)
			}
		}

		f^ << ")"
		if DebugMode
			f^ << ", !dbg !" << GDebugLineCallId
		f^ << "\n"
	}
}

