CLib := class 
{
	textMap := StringSpan
	libFile := vRepoFile^
	js := json^


	itFuncs := AVLMap.{StringSpan,BoxUnit^}
	itPreFuncs := AVLMap.{StringSpan,StringSpan}
	itPreConsts := AVLMap.{StringSpan,StringSpan}

	dlls := List.{StringSpan}
	initFuncName := StringSpan
	linkType := StringSpan

	initFunc := BoxFuncBodyStr^

	this := !(vRepoFile^ fil) -> void
	{
		linkType = StringSpan("dynamic")
		libFile = fil
	}
	Work := !() -> void
	{
		textMap = StringSpan(libFile.Map(),libFile.Size())

		js = new json
		js.ParseString(textMap.Get(),textMap.Size())

		for nd : js^
		{
			switch nd.Key()
			{
				case "funcs"
					for fnc : nd^
					{
						itPreFuncs[fnc.Key()] = fnc.Value()
					}
				case "libs"
					for lbs : nd^
					{
						dlls.Push(lbs.Value())
					}
				case "initname"
					initFuncName = nd.Value()
				case "consts"
					for cns : nd^
					{
						itPreConsts[nd.Key()] = nd.Value()
					}
				case "link"
					linkType = nd.Value()
			}
		}
	
	}
	PrintCode := !(TIOStream^ f) -> void
	{
		for it : itFuncs
		{
			if it is in BoxFuncDeclare
			{
				it->{BoxFuncDeclare^}.PrintCode(f)
			}
		}
	}
	
	GetItem := !(StringSpan name) -> BoxUnit^
	{
		if itFuncs.Contain(name)
			return itFuncs[name]

		if name == initFuncName
		{
			assert(initFunc == null)
			initFunc = new BoxFuncBodyStr(GetFuncType(GTypeVoid))
			itFuncs[name] = initFunc
			return initFunc
		}

		if itPreFuncs.Contain(name)
		{
			return innerGetFunc(name)
		}
		return null
	}
	innerGetFunc := !(StringSpan name) -> BoxUnit^
	{
		bdy := itPreFuncs[name]

		c := 0
		typs := Type^[40]
		isVarg := false
		bdy.DivideStr(",", x ==> {
			points := 0
			txt := x

			if txt == "..."
			{
				isVarg = true
				return void
			}

			while txt[-1..0] == "^"
			{
				points += 1
				txt = txt[0..-1]
			}
			txtToken := TokenIndent(txt)
			typs[c] = ParseType(txtToken&)
			for i : points
			{
				typs[c] = typs[c].GetPoint()
			}
			c += 1
		})
		fType := GetFuncType(c-1, typs[1]&,null,typs[0],false,isVarg)

		assert(fType != null) //TODO error check

		if linkType == "dynamic"
		{
			glVar := CreateGlobalVar(name,fType.GetPoint(),false)
			itFuncs[name] = glVar
			return glVar
		}

		func := new BoxFuncDeclare(fType,name)
		itFuncs[name] = func
		return func
	}

	CreateInitPart := !() -> void
	{
		if initFunc == null
			return void

		dt := TEchoStream //TODO better support, func from str look stupid

		dt << "lib := GetLibrary(\"" << dlls[0] << "\")\n"
		for it, ind : itFuncs
		{
			if ind == initFuncName
				continue
			dt << ind << "&->{void^^}^ = lib.Get(\"" << ind << "\")\n"
		}

		st := dt.Str()

		blank := StringSpan(st)
		initFunc.ParseString(blank)
	}
}

GetAnyFile := !() -> BoxFile^
{
	for spc : CodeSpaces
	{
		for fil : spc.Files
		{
			return fil
		}
	}
	assert(false)
}
