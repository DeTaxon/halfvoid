CheckTemplateType := !(Type^ tp,Token^ tk, AVLMap.{StringSpan,BoxUnit^} resCnsts) -> Type^
{
	if tk is TokenTemplateType
	{
		nm := tk->{TokenTemplateType^}.Value[1..0]
		//TODO: resConsts.Push()
		assert(tp != null)
		if resCnsts.Contain(nm)
		{
			if resCnsts[nm] is ConstType
			{
				vr := resCnsts[nm]->{ConstType^}
				if vr.Value != tp
				{
					assert(false)
				}
			}
		}else{
			resCnsts[nm] = GetConstType(tp)
		}
		return tp
	}
	if tk.Down?.Right?.GetValue() == "." and tk.Down.Right.Right?.GetValue() == "{}"
	{
		//lType := checkType(null,tk.Down,resCnsts) //TODO: do something with null, so i could use @Tepl.{@arg}
		//if lType == null
		//	return null
		assert(tk.Down is TokenIndent)
		if tp == null
		{
			checkRes := TypeGetGlobalByIndent(tk.Down->{TokenIndent^}.Value)

			cnsts := List.{BoxExeConstObj^}
			defer cnsts.Destroy()

			assert(checkRes is TemplateTypeVar)

			tmpl := checkRes->{TemplateTypeVar^}.Value

			i := 0
			itr := tk.Down.Right.Right.Down

			while itr != null
			{
				if itr.GetValue() != ","
				{
					resCnst := CheckTemplateConst(null,itr,resCnsts)
					if resCnst == null
						return null
					cnsts.Push(resCnst)
				}
				i += 1
				itr = itr.Right
			}
			return tmpl.GetClass(cnsts).ItType
			

		}else{
			assert(tp is in TypeClass)
			assert(false)
		}

	}
	if tk is TokenIndent
	{
		dwnTp := ParseType(tk)
		if dwnTp == null
		{
			name := tk->{TokenIndent^}.Value
			if resCnsts.Contain(name)
			{
				itm2 := resCnsts[name]
				if itm2 is ConstType
				{
					dwnTp = itm2->{ConstType^}.Value
				}
			}
		}
		if dwnTp == null
			return null
		if tp != null and tp != dwnTp
			return null
		return dwnTp
	}
	if tk.Down?.Right?.GetValue() == "^"
	{
		nxtType := Type^
		if tp != null
		{
			if not (tp is in TypePoint)
				return null
			nxtType = tp.Base
		}
		resTyp2 := CheckTemplateType(nxtType,tk.Down,resCnsts)
		if resTyp2 == null
			return null
		return resTyp2.GetPoint()
	}
	assert(false)
	return null
}
CheckTemplateConst := !(BoxExeConstObj^ cnst, Token^ itm,AVLMap.{StringSpan,BoxUnit^} resCnsts) -> BoxExeConstObj^
{
	if itm is TokenIndent
	{
		name := itm->{TokenIndent^}.Value

		if resCnsts.Contain(name)
		{
			return resCnsts[name]->{BoxExeConstObj^}
		}
	}
	assert(false)
	return null
}
