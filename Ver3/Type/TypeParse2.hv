CheckTemplateType := !(Type^ tp,Token^ tk, AVLMap.{StringSpan,BoxUnit^} resCnsts) -> Type^
{
	if tk is TokenTemplateType
	{
		if tp == null
			return null
		nm := tk->{TokenTemplateType^}.Value[1..0]
		//TODO: resConsts.Push()
		if resCnsts.Contain(nm)
		{
			if resCnsts[nm] is ConstType
			{
				vr := resCnsts[nm]->{ConstType^}
				if vr.Value != tp
				{
					assert(false)
				}
			}
		}else{
			resCnsts[nm] = GetConstType(tp)
		}
		return tp
	}
	if tk.Down?.GetValue() == "!" and tk.Down.Right?.GetValue() == "()"
	{
		skob := tk.Down.Right

		if skob.Right.GetValue() in !["&","^"]
		{}else{
			return null
		}

		//assert(tp == null) TODO
		k := 0
		types := Type^[100]
		isRefs := bool[100]

		isLambda := false

		if skob.Right.GetValue() == "&"
		{
			isLambda = true
			types[k] = GTypeVoidP
			isRefs[k] = false
			k += 1
		}

		iter := skob.Down
		while iter != null
		{
			if iter.GetValue() != ","
			{
				t := Type^
				if iter.Down?.Right?.GetValue() == "&"
				{
					t = CheckTemplateType(null,iter.Down,resCnsts)
					isRefs[k] = true
				}else{
					t = CheckTemplateType(null,iter,resCnsts)
				}
				if t == null
					return null
				types[k] = t
				k += 1
			}
			iter = iter.Right
		}

		iter = skob.Right
		ptrSize := 0

		while iter.GetValue() != "->"
		{
			if iter.GetValue() == "^"
				ptrSize += 1
			iter = iter.Right
		}
		resType := CheckTemplateType(null,iter.Right,resCnsts)

		if resType == null
			return null
		fType := GetFuncType(k,types[0]&,isRefs[0]&,resType,false,false) //TODO IsVargs, IsRetRef

		if isLambda
		{
			args := List.{BoxExeConstObj^}
			args.Push(GetConstType(fType.GetPoint()))
			InternalsHatch.Await()
			rl := GCLambda.GetClass(args)
			assert(rl != null)
			args.Destroy()
			return rl.ItType.GetPoint()
		}

		for i : ptrSize
		{
			resType = resType.GetPoint()
		}
		return resType

	}
	if tk.Down?.Right?.GetValue() == "." and tk.Down.Right.Right?.GetValue() == "{}"
	{
		//lType := checkType(null,tk.Down,resCnsts) //TODO: do something with null, so i could use @Tepl.{@arg}
		//if lType == null
		//	return null

		if not (tk.Down is TokenIndent)
		{
			return null
		}
		assert(tk.Down is TokenIndent)
		if tp == null
		{
			checkRes := TypeGetGlobalByIndent(tk.Down->{TokenIndent^}.Value)

			cnsts := List.{BoxExeConstObj^}
			defer cnsts.Destroy()

			assert(checkRes is TemplateTypeVar)

			tmpl := checkRes->{TemplateTypeVar^}.Value

			i := 0
			itr := tk.Down.Right.Right.Down

			while itr != null
			{
				if itr.GetValue() != ","
				{
					resCnst := CheckTemplateConst(null,itr,resCnsts)
					if resCnst == null
						return null
					cnsts.Push(resCnst)
				}
				i += 1
				itr = itr.Right
			}
			return tmpl.GetClass(cnsts).ItType
			

		}else{
			assert(tp is in TypeClass)
			assert(false)
		}
	}
	if tk.Down?.Right?.GetValue() == "[]"
	{
		dTyp := CheckTemplateType(null,tk.Down,resCnsts) //TODO: unnull
		if dTyp == null
			return null
		if tk.Down.Right.Down == null //TODO: array?
			return null
		if tk.Down.Right.Down.Right != null
			return null

		cnstVal := CheckTemplateConst(null,tk.Down.Right.Down,resCnsts)
		if cnstVal == null
			return null
		if cnstVal is BoxExeInt
		{
			num := cnstVal->{BoxExeInt^}.Value
			return dTyp.GetArray(num)
		}
		return null
	}
	if tk is TokenIndent
	{	
		dwnTp := GetTypeFromIndent(tk->{TokenIndent^},resCnsts&)
		if dwnTp == null
		{
			name := tk->{TokenIndent^}.Value
			if resCnsts.Contain(name)
			{
				itm2 := resCnsts[name]
				if itm2 is ConstType
				{
					dwnTp = itm2->{ConstType^}.Value
				}
			}
		}
		if dwnTp == null
			return null
		if tp != null and tp != dwnTp
			return null
		return dwnTp
	}
	if tk.Down?.Right?.GetValue() == "^"
	{
		nxtType := Type^
		if tp != null
		{
			if not (tp is in TypePoint)
				return null
			nxtType = tp.Base
		}
		resTyp2 := CheckTemplateType(nxtType,tk.Down,resCnsts)
		if resTyp2 == null
			return null
		return resTyp2.GetPoint()
	}
	//assert(false)
	return null
}
CheckTemplateConst := !(BoxExeConstObj^ cnst, Token^ itm,AVLMap.{StringSpan,BoxUnit^} resCnsts) -> BoxExeConstObj^
{
	if itm is TokenIndent
	{
		name := itm->{TokenIndent^}.Value

		if resCnsts.Contain(name)
		{
			return resCnsts[name]->{BoxExeConstObj^}
		}
		glb := TypeGetGlobalByIndent(name)
		if glb != null
		{
			if glb is ConstVar
				return glb->{ConstVar^}.Value
			if glb is TypeVar
				return GetConstType(glb->{TypeVar^}.Value)
			assert(glb is in BoxExeConstObj)
			return glb->{BoxExeConstObj^}
		}
	}
	if itm is TokenInt
	{
		val := itm->{TokenInt^}.Parsed
		return GetExeInt(val)
	}
	//assert(false)
	return null
}
