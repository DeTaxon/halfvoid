ParseType := !(Token^ obj) -> Type^
{
	if obj == null
		return null

	if obj.Down?.Right?.Right?.GetValue() == "{}"
		and obj.Down.Right.GetValue() == "."
		and obj.Down is TokenIndent
	{
		name := obj.Down->{TokenIndent^}.Value
		cnsts := List.{BoxExeConstObj^}
		iter := obj.Down.Right.Right.Down
		while iter != null
		{
			if iter.GetValue() != ","
			{
				asTyp := ParseType(iter)
				if asTyp != null
				{
					cnsts.Push(GetConstType(asTyp))
				}else{
					asVal := TryGetExeCall(iter)
					if asVal != null
					{
						assert(false)
					}else{
						return null
					}
				}
			}
			iter = iter.Right
		}
		checkRes := TypeGetGlobalByIndent(name)
		if checkRes != null and checkRes is TemplateTypeVar
		{
			asClass := checkRes->{TemplateTypeVar^}.Value.GetClass(cnsts)
			return asClass.ItType
		}
		return null
	}
	if obj is TokenIndent
	{
		asIndent := obj->{TokenIndent^}
		name := asIndent.Value

		for defs : DefsTable
		{
			if defs == null
				break
			if defs.ItName == asIndent.Value
				return defs.ItType
		}
		checkRes := TypeGetGlobalByIndent(name)
		if checkRes != null and checkRes is TypeVar
		{
			return checkRes->{TypeVar^}.Value
		}
		return null
	}
	if obj.GetValue() == "~d"
	{
		if obj.Down.GetValue() == "!" and obj.Down.Right.Right.GetValue() == "^"
		{
			k := 0
			types := Type^[100]
			isRef := bool[100]
			isVargs := false

			iter := obj.Down.Right.Down
			while iter != null
			{
				if iter.GetValue() != ","
				{
					if iter.GetValue() == "..."
					{
						isVargs = true
					}else{
						types[k] = ParseType(iter)
						if types[k] == null
							return null
						//isRef[k] = IsComplexType(types[k])
						k += 1
					}
				}
				iter = iter.Right
			}
			ptrVal := 0
			ptrMod := obj.Down.Right.Right
			while ptrMod.GetValue() == "^"
			{
				ptrVal += 1
				ptrMod = ptrMod.Right
			}
			if ptrMod.GetValue() != "->"
				return null
			if ptrMod.Right == null
				return null
			resType := ParseType(ptrMod.Right)
			if resType == null
				return null

			fType := GetFuncType(k,types[0]&,isRef[0]&,resType,false,isVargs)->{Type^}
			if fType == null
				return null
			for ptrVal
				fType = fType.GetPoint()
			return fType
		}
		if obj.Down.Right?.GetValue() == "^"
		{
			dTyp := ParseType(obj.Down)
			if dTyp != null
				return dTyp.GetPoint()
		}
	}

	return null
}

TypeGetGlobalByIndent := !(StringSpan name) -> BoxUnit^
{
		for it : UnitStack
		{
			if it is TypeVar
			{
				tv := it->{TypeVar^}
				if tv.Name == name
					return it
			}
		}
		for spc : CodeSpaces
		{
			if spc.Globals.Contain(name)
			{
				for glb : spc.Globals[name]
				{
					return glb
				}
			}
		}
}
