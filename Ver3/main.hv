
CodeFiles := List.{BoxFile^}
CodeSpaces := AVLMap.{int,BoxCodeSpace}

PriorityData := PriorityBagOld^
LexHVFileRoot := PriorityBagOld^
LexHVInputVars := PriorityBagOld^

loadLex := !(char^ filName,PriorityBagOld^^ res) -> void 
{
	pri := gRepo.GetFile(filName)
	if pri == null
	{
		printf("%s not found\n",filName)
		throw new Exception("intput error")
	}
	if not pri.IsVirtual()
	{
		printf("%s loaded from outsize\n",filName)
	}
	res^ = new PriorityBagOld(pri.Map(),pri.Size())
	pri.Unmap()
}

main := !(int argc, char^^ argv) -> int
{
	if argc == 1
	{
		args2 := char^[20]
		args2[0] = argv[0]
		args2[1] = "main2.hv"
		args2[2] = "-C0"
		args2[3] = "libs2"
		return main(4,args2[0]&)
	}


	files := new List.{char^}

	i := 1
	while i < argc
	{
		switch argv[i]
		{
			case void
				if StringSpan(argv[i][0..2]) == "-C"
				{
					num := StrToInt(argv[i][2..0]) //TODO: check for num and memory
					TFSReadFolder(StringSpan(argv[i+1]),true,zFil ==> {
						nm := zFil.GetName()
						if nm[-3..0] == ".hv"
						{
							printf("here %s\n", nm[-3..0])
						}else nm[-5..0] == ".clib"
						{
							spc := CodeSpaces[num]&
							spc.CLibs.Push(new CLib(zFil))
						}
					})
					i += 1
				}else{
					file := gRepo.GetFile(argv[i])
					fileBox := new BoxFile(file)
					CodeFiles.Push(fileBox)
					CodeSpaces[2000].Files.Push(fileBox)
				}
		}
		i += 1
	}
	
	loadLex("Priority.pr",PriorityData&)
	loadLex("LexHVFileRoot.pr",LexHVFileRoot&)
	loadLex("LexHVInputVars.pr",LexHVInputVars&)

	mac := gRepo.GetFile("Mach.m") //TODO Error check
	LoadLexMachine(mac.Map(),mac.Size()) 

	CreateStandardTypes()

	for spc : CodeSpaces
	{
		spc.CLibs[^].Work()
	}

	for fil : CodeFiles
	{
		fil2 := fil
		TSpawnTask(() ==> {
			fil2.Parse()
		})
	}

	for fil : CodeFiles
	{
		fil.loaded.Await()
	}

	mainFunc := BoxFuncBody^
	GetItemGlobal(StringSpan("main"),x ==> {
		assert(x.Size() == 1) //TODO: better main function
		assert(x[0] is BoxFuncBody)
		mainFunc = x[0]->{BoxFuncBody^}
	})
	assert(mainFunc != null)//TODO better main function

	mainFunc.ParseBody()
	mainFunc.ReadyState()

	printf("good to do\n")
	return 0
}
