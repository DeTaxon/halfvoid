UnitStack := task_local List.{BoxUnit^}
CurrentCodeSpace := task_local BoxCodeSpace^
CurrentFile := task_local BoxFile^
CurrentScope := task_local BoxUnit^
CurrentFunc := task_local BoxFuncBody^
CurrentLine := task_local BoxExeLine^
FuncStack := task_local List.{BoxFuncBody^}

HVOperators := AVLSet.{StringSpan}

DebugMode := bool
ErrorState := bool

GParsedAllFiles := THatch

GCVarsInUse := task_local int

GDebugFileId := task_local int
GDebugFuncId := task_local int
GDebugScopeId := task_local int
GDebugLineCallId := task_local int

SubWork := !(!()&->void x) -> void
{
	subLambda := x.Capture()
	
	nowState := new StackState
	nowState.Save()

	TSpawnTask(() ==> {

		nowState.Load()
		delete nowState

		subLambda()
		subLambda.Destroy()
	})
}

StackState := class
{
	itFile := BoxFile^
	itCodeSpace := BoxCodeSpace^
	itScope := BoxUnit^
	itFunc := BoxFuncBody^

	itStack := HybridQueue.{BoxUnit^,20}
	Save := !() -> void
	{
		itFile = CurrentFile
		itCodeSpace = CurrentCodeSpace
		itScope = CurrentScope
		itFunc = CurrentFunc

		for it : UnitStack
			itStack.Push(it)
	}
	Load := !() -> void
	{
		CurrentFile = itFile
		CurrentCodeSpace = itCodeSpace
		CurrentScope = itScope
		CurrentFunc = itFunc

		UnitStack.Clear()
		for it : itStack
			UnitStack.Push(it)
	}
}

