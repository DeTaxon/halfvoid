UnitStack := task_local List.{BoxUnit^}
CurrentCodeSpace := task_local BoxCodeSpace^
CurrentFile := task_local BoxFile^
CurrentScope := task_local BoxUnit^
CurrentFunc := task_local BoxFuncBody^
FuncStack := task_local List.{BoxFuncBody^}

HVOperators := AVLSet.{StringSpan}

DebugMode := bool
ErrorState := bool

GParsedAllFiles := THatch

GCVarsInUse := task_local int

GDebugFileId := task_local int
GDebugFuncId := task_local int
GDebugScopeId := task_local int
GDebugLineCallId := task_local int


SubWork := !(!()&->void x) -> void
{
    ccs := CurrentCodeSpace
    cf := CurrentFile
    cs := CurrentScope
    cfunc := CurrentFunc
    subLambda := x.Capture()

    stacks := new HybridQueue.{BoxUnit^,10}
    stacks.Push(UnitStack[^])

    TSpawnTask(() ==> {
        CurrentCodeSpace = ccs
        CurrentScope = cs
        CurrentFile = cf
        CurrentFunc = cfunc

        UnitStack.Push(stacks^[^])

        subLambda()
        subLambda.Destroy()
        delete stacks
    })
}
