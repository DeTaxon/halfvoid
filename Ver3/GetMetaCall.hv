TryGetMetaCall := !(Token^ obj) -> BoxExeObj^
{
	if obj.Down?.Right.GetValue() == "->" //todo add to compiler comething thats make it simple
	{
	}else{
		return null
	}
	
	right := obj.Down.Right.Right->{TokenIndent^}

	if right.Value == "VTable"
	{
		typ := ParseType(obj.Down)
		if typ != null
		{
			if not (typ is TypeClass)
				assert(false) //TODO
			cls := typ->{TypeClass^}.ToClass
			cls.AwaitVTableStep()
			if cls.VTable.Size() == 0
				assert(false) //TODO
			emptyObj := CheckExeDownList
			fncCall := new BoxFuncCall(cls.VTableValue.Value,emptyObj)
			return new UnrefFuncCall(fncCall)
		}
		dObj := TryGetExeCall(obj.Down)
		if dObj != null
		{
			cls := dObj.GetType()
			if cls is TypePoint and cls.Base is TypeClass
			{
				dObj = GetExchange(dObj,cls.Base)
				cls = cls.Base
			}
			if cls is TypeClass 
			{
				cls2 := cls->{TypeClass^}.ToClass
				if cls2.VTable.Size() != 0
				{
					chk := CheckExeDownList
					defer chk.Destroy() //TODO
					chk.Push(dObj)
					return new BoxFuncCall(cls2.VTableField,chk)
				}else{
					assert(false) //TODO emit , not a virtual class
				}
			}else{
				assert(false) //TODO Emit, not a class
			}
		}
		
	}
	
	assert(false)
	return null
}
