TryGetMetaCall := !(Token^ obj) -> BoxExeObj^
{
	if obj.Down?.Right?.GetValue() == "->" //todo add to compiler comething thats make it simple
	{
	}else{
		return null
	}
	r := obj.Down.Right.Right
	if r is TokenIndent
		return TryMetaIndent(obj)
	if r.GetValue() == "{}"
	{
		SyntaxCompress(r,PriorityData)
		toType := ParseType(r.Down)
		if toType == null
			r.EmitError("Can not cast to unknown type")
		lObj := TryGetExeCall(obj.Down)
		if lObj == null
			r.EmitError("Unknown object to case")
		return GetExchange(lObj,toType)

	}
	return null

}
TryMetaIndent := !(Token^ obj) -> BoxExeObj^
{	
	right := obj.Down.Right.Right->{TokenIndent^}

	if right.Value == "TypeGroup"
	{
		typ := ParseType(obj.Down)
		if typ == null
			obj.Down.EmitError("Object for TypeGroup must be type")
		if typ is TypeClass
			return GetExeString(StringSpan("Class"))
		if typ is TypeStandard
			return GetExeString(StringSpan("Prime"))
		if typ is in TypePoint
			return GetExeString(StringSpan("Pointer"))
		if typ is in TypeFunc
			return GetExeString(StringSpan("Function"))
		assert(false)
		return null
	}
	if right.Value == "VTable"
	{
		typ := ParseType(obj.Down)
		if typ != null
		{
			if not (typ is TypeClass)
				assert(false) //TODO
			cls := typ->{TypeClass^}.ToClass
			cls.AwaitVTableStep()
			if cls.VTable.Size() == 0
				return GObjNone
			emptyObj := CheckExeDownList
			fncCall := new BoxFuncCall(cls.VTableValue.Value,emptyObj)
			return new UnrefFuncCall(fncCall)
		}
		dObj := TryGetExeCall(obj.Down)
		if dObj != null
		{
			cls := dObj.GetType()
			if cls is TypePoint and cls.Base is TypeClass
			{
				dObj = GetExchange(dObj,cls.Base)
				cls = cls.Base
			}
			if cls is TypeClass 
			{
				cls2 := cls->{TypeClass^}.ToClass
				cls2.AwaitVTableStep()
				if cls2.VTable.Size() != 0
				{
					chk := CheckExeDownList
					defer chk.Destroy() //TODO
					chk.Push(dObj)
					return new BoxFuncCall(cls2.VTableField,chk)
				}else{
					return GObjNone
				}
			}else{
				assert(false) //TODO Emit, not a class
			}
		}
		
	}
	
	assert(false)
	return null
}
