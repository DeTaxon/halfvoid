FuncInputParam := class extend BoxFuncCommon
{
	pNumber := int
	isRef := bool
	isMem := bool
	parentFunc := BoxFuncBody^
	this := !(BoxFuncBody^ pFunc,Type^ pType,bool isRef,int paramNum) -> void
	{
		parentFunc = pFunc
		SetType(GetFuncType(0,null,null,pType,true,false))
		pNumber = paramNum
	}
	IsMem := virtual !() -> bool
	{
		return isMem
	}
	PrintCode := virtual !(TIOStream^ f) -> void
	{
		if not isMem 
			return void
		rType := GetType().ResultType
		f^ << "%P" << pNumber << " = alloca "
		rType.PrintType(f)
		if isRef
			f^ << "*"
		f^ << "\n"
		
		f^ << "store "
		rType.PrintType(f)
		if isRef
			f^ << "*"
		f^ << " %par" << pNumber
		f^ << " , "
		rType.PrintType(f)
		f^ << "*"
		if isRef
			f^ << "*"
		f^ << " %P" << pNumber << "\n"

	}
	PrintResultObj := virtual !(TIOStream^ f, int resId, int debId) -> void
	{
		if ItType.ResultType != GTypeVoid
		{
			if isMem
			{
				f^ << "%P" << pNumber
			}else{
				f^ << "%par" << pNumber
			}
		}
	}
	PrintFuncCall := virtual !(TIOStream^ f,int resId,int debId,ExeDownList lst) -> void
	{
	}
	NotifyMemUse := virtual !() -> void
	{
		isMem = true
	}
}
FuncLocalParam := class extend BoxFuncCommon
{
	pType := Type^
	varId := int
	this := !(Type^ tp) -> void
	{
		pType = tp
		varId = GetNewId()
		SetType(GetFuncType(0,null,null,pType,true,false))
	}
	IsMem := virtual !() -> bool
	{
		return true
	}
	PrintCode := virtual !(TIOStream^ f) -> void
	{
		f^ << "%V" << varId << " = alloca "
		pType.PrintType(f)
		f^ << "\n"

		if IsInt(pType)
		{
			f^ << "store "
			pType.PrintType(f)
			f^ << " 0, "
			pType.PrintType(f)
			f^ << "* %V" << varId << "\n"
		}
	}
	PrintResultObj := virtual !(TIOStream^ f, int resId, int debId) -> void
	{
		f^ << "%V" << varId 
	}
	PrintFuncCall := virtual !(TIOStream^ f,int resId,int debId,ExeDownList lst) -> void
	{
	}
}
