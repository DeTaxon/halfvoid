FuncInputParam := class extend BoxFuncCommon
{
	pNumber := int
	isRef := bool
	parentFunc := BoxFuncBody^
	varName := StringSpan
	varId := int
	this := !(BoxFuncBody^ pFunc,StringSpan vName,Type^ pType,bool isRef,int paramNum) -> void
	{
		parentFunc = pFunc
		SetType(GetFuncType(0,null,null,pType,true,false))
		pNumber = paramNum
		varName = vName
		if DebugMode
			varId = GetNewId()
	}
	IsMem := virtual !() -> bool
	{
		return false
	}
	PrintCode := virtual !(TIOStream^ f) -> void
	{
		if DebugMode
		{
			pType := GetType().ResultType
			f^ << "call void @llvm.dbg.value(metadata "
			pType.PrintType(f)
			f^ << " "
			PrintResultObj(f,0,0)
			f^ << " , metadata !" << varId << " , metadata !DIExpression()) , !dbg !" << GDebugLineCallId << "\n"
		}
	}
	PrintResultObj := virtual !(TIOStream^ f, int resId, int debId) -> void
	{
		if ItType.ResultType != GTypeVoid
		{
			f^ << "%par" << pNumber
		}
	}
	PrintFuncCall := virtual !(TIOStream^ f,int resId,int debId,ExeDownList lst) -> void
	{
	}
	NotifyMemUse := virtual !() -> void
	{
		this&->SetType(FuncInputParamInMem)
	}
	PrintDebugMeta := virtual !(TIOStream^ f) -> void
	{
		rType := GetType().ResultType

		f^ << "!" << varId << " = !DILocalVariable(name: \"" << varName << "\" , scope:!" << GDebugScopeId << " , file:!" << GDebugFileId
		//f^ << ", arg: " << (pNumber + 1)
		//f^ << ", flags: DIFlagArtificial"
		f^ << ", line: " << 0 << ", type:!" << rType.MetaId
		f^ << ")\n"
	}
}
FuncInputParamInMem := class extend FuncInputParam
{
	IsMem := virtual !() -> bool
	{
		return true
	}
	PrintCode := virtual !(TIOStream^ f) -> void
	{
		rType := GetType().ResultType
		f^ << "%P" << pNumber << " = alloca "
		rType.PrintType(f)
		if isRef
			f^ << "*"
		if DebugMode
			f^ << " , !dbg !" << GDebugLineCallId
		f^ << "\n"
		
		f^ << "store "
		rType.PrintType(f)
		if isRef
			f^ << "*"
		f^ << " %par" << pNumber
		f^ << " , "
		rType.PrintType(f)
		f^ << "*"
		if isRef
			f^ << "*"
		f^ << " %P" << pNumber
		if DebugMode
			f^ << " , !dbg !" << GDebugLineCallId
		f^ << "\n"

		if DebugMode
		{
			pType := GetType().ResultType
			f^ << "call void @llvm.dbg.declare(metadata "
			rType.PrintType(f)
			f^ << "* %P" << pNumber
			f^ << " , metadata !" << varId << " , metadata !DIExpression()) , !dbg !" << GDebugLineCallId << "\n"
		}

	}
	PrintResultObj := virtual !(TIOStream^ f, int resId, int debId) -> void
	{
		if ItType.ResultType != GTypeVoid
		{
			f^ << "%P" << pNumber
		}
	}
}
