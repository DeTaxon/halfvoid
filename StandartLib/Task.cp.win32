AppendClass TaskBox
{
	startContext := void^
	eventHandle := void^
	winPollArr := RawArray.{void^}

	osInit := !() -> void
	{
		startContext = ConvertThreadToFiber(null)

		winPollArr."this"()
		winPollArr.Reserve(10)

		eventHandle = CreateEventA(null,0,0,null->{u8^})
		winPollArr.Create() = eventHandle
		//pollData.Create().0 = 1
	}
	initedM := bool
	monitorEv := void^
	monNr := 0
	buf := char[4096] //TODO: unbuf
	ove := OVERLAPPED
	dirH := void^
	initMonitor := !() -> void
	{
		if initedM return void
		initedM = true

		monitorEv = CreateEventA(null,0,0,null->{u8^})
		monNr = winPollArr.Size()
		winPollArr.Create() = monitorEv
		ove.event = monitorEv

	}
	addMonitor := !(char^ pathName,!(char^)&->void callb,bool isRec) -> void
	{
		initMonitor()

		dirH = CreateFileW(Utf8ToUtf16(pathName),GENERIC_READ ,FILE_SHARE_READ or_b FILE_SHARE_WRITE or_b FILE_SHARE_DELETE, null,OPEN_EXISTING
		,FILE_FLAG_BACKUP_SEMANTICS or_b FILE_FLAG_OVERLAPPED,null)
		doMonitor()
	}
	doMonitor := !() -> void
	{
		FILE_NOTIFY_CHANGE_LAST_ACCESS := 0x20
		res := ReadDirectoryChangesW(dirH,buf[0]&,4096,1,FILE_NOTIFY_CHANGE_LAST_ACCESS,null,ove&,null)
	}
	notifyMain := !() -> void
	{
		SetEvent(eventHandle)
	}
	osCreateTask := !(TaskData^ startTask) -> void
	{
	      startTask.fiber = CreateFiber(stackSize->{s64},ucontextStartTask,null)
	}
	taskWaitSleep := !(double sleepTime) -> void
	{
		res := WaitForMultipleObjects(winPollArr.Size(),winPollArr.Data(),0,(sleepTime*1000)->{int})
		if res in 0..64
		{
			if res == monNr
			{
				ResetEvent(monitorEv)
				printf("hello\n")
				doMonitor()
			}
		}
	}
}
