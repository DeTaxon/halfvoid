
O_RDONLY := 0
O_WRONLY := 1
O_RDWR := 2

O_APPEND := 1024
O_CREAT := 64
O_TRUNC := 512
O_TMPFILE := 4259840

PROT_READ := 1
PROT_WRITE := 2
PROT_NONE := 0

MAP_SHARED := 1
MAP_PRIVATE := 2
MAP_ANON := 32

sem_t := class
{
	sAlign := s64
	sFields := char[24]
}

pthread_t := type u64

pthread_mutex_init := !(void^ a,void^ b) -> void declare
pthread_mutex_lock := !(void^ a) -> void declare
pthread_mutex_unlock := !(void^ a) -> void declare
pthread_mutex_destroy := !(void^ a) -> void declare

pthread_cond_init := !(void^ a,void^ b) -> void declare
pthread_cond_wait := !(void^ a,void^ b) -> void declare
pthread_cond_signal := !(void^ a) -> void declare
pthread_cond_broadcast := !(void^ a) -> void declare
pthread_cond_destroy := !(void^ a) -> void declare

//sem_open := !(char^ name, int oflags) -> sem_t^ declare
sem_init := !(sem_t^ semPtr,int pshared, u32 value) -> int declare
sem_wait := !(sem_t^ semPtr) -> int declare
sem_post := !(sem_t^ semPtr) -> int declare
sem_destroy := !(sem_t^ semPtr) -> int declare

pthread_create := !(pthread_t^ thrPtr, void^ attrs, void^  callFunc,void^ arg) -> int declare
pthread_join := !(pthread_t thrId,void^^ retValue) -> int declare

open := !(char^ name,int flags,int mode) -> int declare
write := !(int d,void^ toS, int size) -> int declare
close := !(int fd) -> void declare

sleep := !(int seconds) -> int declare

ftruncate := !(int fd,u64 size) -> int declare

mmap := !(void^ addt,u64 len,int prot, int flags, int fd, void^ offset) -> void^ declare
munmap := !(void^ addt,s64 len) -> int declare

fstat := !(int fd,char^ st) -> int declare

posixGetFileSize := !(int fd,u64^ size) -> bool
{
	dataD := char[144]
	val := fstat(fd,dataD->{char^})
	if val == -1 return false
	asNeed1 := dataD->{char^}[48]&
	asNeed2 := asNeed1->{u64^}
	size^ = asNeed2^
	return true
}


realpath := !(char^ inp, char^ outp) -> char^ declare

mkstemp := !(char^ ndm) -> int declare

mkdir := !(char^ nm, int mode) -> int declare
opendir := !(char^ inp) -> void^ declare
closedir := !(void^ dirFd) -> int declare
readdir := !(void^ dirFd) -> void^ declare
stat := !(char^ pth, void^ outStat) -> int declare


dlopen := !(char^ itName,int flgs) -> void^ declare
dlsym := !(void^ modId,char^ funcName) -> void^ declare
dlclose := !(void^ modId) -> void declare

OpenLib := !(char^ fileName) ->void^
{
	return dlopen(fileName,2)
}
LoadFuncLib := !(void^ libId, char^ funcName) -> void^
{
	return dlsym(libId,funcName)
}
CloseLib := !(void^ libId) -> void
{
	dlclose(libId)
}

remove := !(char^ toDel) -> int declare

nanosleep := !(void^ a,void^ b) -> int declare

TSleep := !(double timeSleep) -> void
{
	tmStruct := u64[2]
	tmStruct[0] = timeSleep->{int}
	timeSleep -= tmStruct[0]->{int}
	tmStruct[1] = (timeSleep*1000000000.0)->{int}
	if tmStruct[1] >= 999999999
		tmStruct[1] = 999999999
	nanosleep(tmStruct[0]&,null)
}

TCreateDir := !(char^ pth) -> void
{
	if mkdir(pth,511) != 0
		throw new Exception("Can not create directory")
}

c_long := type s64
