
main := !(char^[] args) -> int
{

	//itM := MappedFile^
	//itM = new MappedFile("Priority.pr")
	//defer itM.Close()
	//pr := new PriorityBagOld(itM.point,itM.Size())

	itBuilder := LexBuilder

	itBuilder.ApplyReg("$?[a-zA-Z_][a-zA-Z0-9_]*",1)
	itBuilder.ApplyReg("(@ | #)[a-zA-Z0-9_]*",2)
	itBuilder.ApplyReg("\"((\\\\ [^]) | [^\"\\\\])*\"",3)
	itBuilder.ApplyReg("'( (\\\\ [^]) | [^ '\\\\])  '",4)
	itBuilder.ApplyReg("[0-9]+(_[0-9]+)*",5)
	itBuilder.ApplyReg("[0-9]+.[0-9]+",6)
	itBuilder.ApplyReg("0x[0-9a-fA-F]+",7)


	tmpArr := new AVLSet.{StringSpan}
	allOpers := new AVLSet.{char^}

	
	FSReadFolder(StringSpan("."),false, (x) ==> [tmpArr]{
		if x.GetName().End == ".pr"
		{
			blb := x.GetBlob()
			blb.IncRef()
			pr := new PriorityBagOld(blb.GetPointer(),blb.Size())
			tmpArr.Insert(StringSpan(pr.Opers[^]))
		}
	})
	printf(" wut %i\n",tmpArr.Size())

	tmpArr.Insert(StringSpan(":="))
	tmpArr.Insert(StringSpan("=>"))
	tmpArr.Insert(StringSpan("-->"))
	tmpArr.Insert(StringSpan("extern"))
	tmpArr.Insert(StringSpan("at"))
	tmpArr.Insert(StringSpan("defer"))
	tmpArr.Insert(StringSpan("type"))
	tmpArr.Insert(StringSpan("virtual"))
	//tmpArr.Insert(pr.Opers[^])
	//pr.AddExtra(tmpArr^)
	LexKeyWords := ![":=","=>","==>","...",":",".",",","?","!",".","|"]
	AllKeyWords := !["return","for","if","else","while","do","delete","switch","case" 
		,"class","extern" ,"extend" ,"at" 
		,"defer" ,"type" ,"virtual" ,"new" 
		,"delete" ,"thread_local" ,"task_local" ,"keep_name" 
		,"packed_class" ,"self_return" ,"try" ,"catch" 
		,"throw" ,"on_exception" ,"yield" ,"AppendClass" ,"default" ,"weak","poison","defer_tail"
		,"static","field"]

	tmpArr.Insert(StringSpan(LexKeyWords[^]))
	//tmpArr.Insert(AllKeyWords[^])

	for it,i : tmpArr^ {
		buff2 := char[64]
		k := 0

		for j : it.Size()
		{
			c := it[j]

			if c in "-+?[]^*|()"
			{
				buff2[k] = '\\'
				buff2[k+1] = c
				k += 2
			}else{
				buff2[k] = c
				k += 1
			}
		}
		buff2[k] = 0
		itBuilder.ApplyReg(buff2[0]&,50 + i)
	}

	//itBuilder.ApplyReg("\\( | \\) | \\{ | \\. | \\} | \\[ | \\]",8)
	//itBuilder.ApplyReg("\\? | \\, | \\! | \\| | \\.",8)
	itBuilder.ApplyReg("\\(",40)
	itBuilder.ApplyReg("\\{",41)
	itBuilder.ApplyReg("\\[",42)
	itBuilder.ApplyReg("\\)",43)
	itBuilder.ApplyReg("\\}",44)
	itBuilder.ApplyReg("\\]",45)

	itBuilder.ApplyReg("/ /[^\n]*",9)
	itBuilder.ApplyReg("\\ | \\t",10) // space
	itBuilder.ApplyReg("\n",20)
	itBuilder.ApplyReg("; [^\n]*",21)

	res := itBuilder.GenerateMachine()

	mSize := res.ComputeBlobSize()
	outData := malloc(mSize)->{u8^}
	res.SerializeToMap(outData)
	outFile := TFile("Mach.m","wb")
	outFile.Write(outData->{void^},mSize)
	outFile.Close()

	return 0
}
