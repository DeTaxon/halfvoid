
MAX_PATH := 260

CP_UTF8 := 65001
MB_PRECOMPOSED := 1
WC_COMPOSITECHECK := 512

MultiByteToWideChar := !(int abc1,int flags,char^ inpStr,int inpSize,u16^ outStr,int outSize) -> int declare
WideCharToMultiByte := !(int abc1,int flags,u16^ inpStr,int inpSize,char^ outStr,int outSize,void^ defChar,void^ usedDef) -> int declare

GENERIC_READ :=  0x80000000
GENERIC_WRITE := 0x40000000

FILE_SHARE_READ := 1
FILE_SHARE_WRITE := 2
FILE_SHARE_DELETE := 4

CREATE_ALWAYS := 2
CREATE_NEW := 1
OPEN_ALWAYS := 4
OPEN_EXISTING := 3
TRUNCATE_EXISTING := 5

FILE_ATTRIBUTE_NORMAL := 128
FILE_ATTRIBUTE_TEMPORARY := 256

CreateFileW := !(u16^ fileName, int access, int shareMode, void^ security,int createDisp,int flags,void^ tempFile) -> void^ declare
GetFullPathNameW := !(u16^ wideCh,int buffSize,u16^ ptrToBuff,u16^ plFilePart) -> int declare
CloseHandle := !(void^ hndl) -> void declare

FILE_ATTRIBUTE_DIRECTORY := 16
GetFileAttributesW := !(u16^ filName) -> int declare

FILETIME := class
{
	dwLowDateTime := u32
	dwLowDateTime := u32
}
BY_HANDLE_FILE_INFORMATION := class
{
	dwFileAttributes := u32
	ftCreationTime := FILETIME
	ftLastAccessTime := FILETIME
	ftLastWriteTime := FILETIME
	dwVolumeSerialNumber := u32
	nFileSizeHigh := u32
	nFileSizeLow := u32
	nNumberOfLinks := u32
	nFileIndexHigh := u32
	nFileIndexLow := u32
}

GetFileInformationByHandle := !(void^ filId,BY_HANDLE_FILE_INFORMATION^ res) -> int declare

WIN32_FIND_DATAW := class
{
	dwFileAttributes := int
	ftCreationTime := FILETIME
	ftLastAccessTime := FILETIME
	ftLastWriteTime := FILETIME
	nFileSizeHigh := u32
	nFileSizeLow := u32
	reserved0 := u32
	reserved1 := u32
	cFileName := u16[260] // 260 = MAX_PATH
	cAlternateFileName := u16[14]
}
FindFirstFileW := !(u16^ fileNamme,WIN32_FIND_DATAW^ resDat) ->void^ declare
FindNextFileW := !(void^ hndl, WIN32_FIND_DATAW^ resDat) -> bool declare
FindClose := !(void^ hndl) -> bool declare

FILE_MAP_ALL_ACCESS := 0xF001F
FILE_MAP_READ := 4

PAGE_READONLY := 2
PAGE_READWRITE := 4
PAGE_WRITECOPY := 8

CreateFileMappingW := !(void^ hndl,void^ scure,int flags,u32 sizeHi,u32 sizeLo,void^ lpName) -> void^ declare
MapViewOfFile := !(void^ hndl, int accs, u32 offsetHi, u32 offsetLo,size_t sizeToMap) -> void^ declare
UnmapViewOfFile := !(void^ hndl) -> void declare

Utf8ToUtf16 := !(char^ itStr) -> u16[]
{
	retSize := MultiByteToWideChar(CP_UTF8,MB_PRECOMPOSED,itStr,-1,null,0)
	preRet := new u16[retSize + 1] ; $temp
	MultiByteToWideChar(CP_UTF8,MB_PRECOMPOSED,itStr,-1,preRet,retSize)
	preRet[retSize] = 0
	return preRet
}
Utf16ToUtf8 := !(u16^ itStr) -> char^
{
	resSize := WideCharToMultiByte(CP_UTF8,WC_COMPOSITECHECK,itStr,-1,null->{char^},0,null,null)
	preRet := new char[resSize + 1] ; $temp
	WideCharToMultiByte(CP_UTF8,WC_COMPOSITECHECK,itStr,-1,preRet,resSize,null,null)
	preRet[resSize] = 0
	return preRet
}

LoadLibraryW := !(u16^ itNam) -> void^ declare
GetProcAddress := !(void^ modId,char^ itName) -> void^ declare
FreeLibrary := !(void^ modId) -> void declare

OpenLib := !(char^ fileName) ->void^
{
	asW := Utf8ToUtf16(fileName)
	return LoadLibraryW(asW)
}
LoadFuncLib := !(void^ libId, char^ funcName) -> void^
{
	return GetProcAddress(libId,funcName)
}
CloseLib := !(void^ libId) -> void
{
	FreeLibrary(libId)
}
