LLVMWriteContext := class
{
	writeStream := Stream^

	funcCallCounter := int
	deferObjects := HybridStack.{BoxExeObj^,20}

	funcDebugMetas := List.{BoxExeObj^}

	currentFunction := BoxFuncBody^

	exitNodes := ContextExitNode

	LocalVarIds := AVLMap.{void^,int}

	GetLocalVarId := !(void^ obj) -> int
	{
		if LocalVarIds.Contain(obj)
			return LocalVarIds[obj]
		result = LocalVarIds.Size()
		LocalVarIds[obj] = result
	}

	Clear := !() -> void
	{
		exitNodes.subNodes.Destroy()
		LocalVarIds.Destroy()
	}
	GetNewId := !() -> int
	{
		funcCallCounter += 1
		return funcCallCounter
	}
	
	PrintExitPaths := !() -> void
	{
		exitNodes.PrintExits(this&)
	}
}

ContextExitNode := class extend TGCObject
{
	subNodes := AVLMap.{BoxExeObj^,ContextExitNode}
	exitLabel := BoxLabel^

	GetLabel := !() -> BoxLabel^
	{
		if exitLabel == null
			exitLabel = new BoxLabel()
		return exitLabel
	}

	PrintExits := !(LLVMWriteContext^ ctx) -> void
	{
		switch subNodes.Size()
		{
			case 1
				for it,ind : subNodes
				{
					it.PrintExits(ctx)
					ind.PrintDefer(ctx)
				}
				if exitLabel != null
				{
					exitLabel.PrintGo(ctx)
					exitLabel.PrintCode(ctx)
				}
			case 0
				//meh
				if exitLabel != null
					exitLabel.PrintCode(ctx)
			case void
				{
					lbl := GetLabel()
					for it,ind : subNodes
					{
						it.PrintExits(ctx)
						ind.PrintDefer(ctx)
						lbl.PrintGo(ctx)
					}
					lbl.PrintCode(ctx)
				}
		}
	}
}
