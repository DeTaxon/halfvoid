TryGetMetaCall := !(Token^ obj) -> BoxExeObj^
{
	return TryGetMetaGlobals(obj)?

	if obj.Down?.Right?.GetValue() == "is"
	{
		return TryGetTypeCheck(obj)
	}
	if obj.Down?.Right?.GetValue() == "->" //todo add to compiler comething thats make it simple
	{
	}else{
		return null
	}
	r := obj.Down.Right.Right
	if r is TokenIndent
		return TryMetaIndent(obj)
	if r.GetValue() == "{}"
	{
		SyntaxCompress(r,PriorityData)
		toType := ParseType(r.Down)
		if toType == null
			r.EmitError("Can not cast to unknown type")
		lObj := TryGetExeCall(obj.Down)
		if lObj == null
		{
			r.EmitError("Unknown object to cast")
		}
		res := GetExchange2(lObj,toType,false)
		if res != null
			return res
		return TryRemoveAutoCast(null,![lObj], (newVr,newObjs) ==> {
			return GetExchange2(newObjs[0],toType,false)
		})

	}
	return null

}
TryMetaIndent := !(Token^ obj) -> BoxExeObj^
{	
	right := obj.Down.Right.Right->{TokenIndent^}

	if right.Value == "TypeGroup"
	{
		typ := getMetaDownType(obj.Down)
		if typ is TypeClass
			return GetExeString(StringSpan("Class").GetString())
		if typ is TypeStandard
			return GetExeString(StringSpan("Prime").GetString())
		if typ is TypeInteger
			return GetExeString(StringSpan("Prime").GetString())
		if typ is TypeVector
			return GetExeString(StringSpan("Prime").GetString())
		if typ is in TypePoint
			return GetExeString(StringSpan("Pointer").GetString())
		if typ == GTypeStr
			return GetExeString(StringSpan("Str").GetString())
		if typ is in TypeFunc
			return GetExeString(StringSpan("Function").GetString())
		if typ is in TypeArr
			return GetExeString(StringSpan("Array").GetString())
		if typ is in TypeEnum
			return GetExeString(StringSpan("Enum").GetString())
		if typ is TypeArrayView
			return GetExeString(StringSpan("ArrayView").GetString())
		assert(false)
		return null
	}
	if right.Value == "IsGCClass"
	{
		typ := getMetaDownType(obj.Down)
		if typ == null
		{
			obj.Down.EmitError("Object for IsGCClass must have a type")
		}
		if IsGCType(typ)
			return GBoolTrue
		return GBoolFalse
	}
	if right.Value == "IsGCPointer"
	{
		typ := getMetaDownType(obj.Down)
		if typ == null
		{
			obj.Down.EmitError("Object for IsGCPointer must have a type")
		}
		if IsGCPtr(typ)
			return GBoolTrue
		return GBoolFalse
	}
	if right.Value == "Type"
	{
		dwnObj := TryGetExeCall(obj.Down)
		if dwnObj == null
			obj.EmitError("Can not get type")
		return GetConstType(dwnObj.GetType())
	}
	if right.Value == "TypeBase"
	{
		typ := getMetaDownType(obj.Down)
		if typ == null
		{
			obj.Down.EmitError("Object for TypeBase must have a type")
		}
		if typ.Base == null
			obj.Down.EmitError("Object for TypeBase does not have base class")
		return GetConstType(typ.Base)
	}
	if right.Value == "TypeName"
	{
		typ := getMetaDownType(obj.Down)
		if typ == null
		{
			obj.Down.EmitError("Object for TypeBase must have a type")
		}
		return GetExeString(typ.GetBADStr())
	}
	if right.Value == "TypeId"
	{
		itType8 := ParseType(obj.Down)
		if itType8 == null
			obj.EmitError("Can not get type")
		if itType8 is TypeClass
		{
			cls := itType8->{TypeClass^}.ToClass
			if cls is BoxClassBody
			{
				cls.AwaitVTableStep()
				return GetExeInt(cls->{BoxClassBody^}.VTableId)
			}
		}
		return GetExeInt(0)
	}
	if right.Value == "TypeSize"
	{
		itType := getMetaDownType(obj.Down)
		if itType != null
		{
			if itType is in TypeClass
			{
				return itType->{TypeClass^}.ToClass.GetClassSize()
			}
			return GetExeInt(itType.GetSize())
		}else{
			obj.EmitError("Can not get TypeSize, it is not a type")
		}
	}
	if right.Value == "AllFields"
	{
		return TryGetMetaFields(obj)
	}
	if right.Value == "ArraySize"
	{
		typ := getMetaDownType(obj.Down)
		if typ == null
			return null
		if typ is not TypeArr
			return null
		return GetExeInt(typ->{TypeArr^}.len)
	}
	if right.Value == "VTable"
	{
		typ := ParseType(obj.Down)
		if typ != null
		{
			if not (typ is TypeClass)
				obj.Down.EmitError("Item is not a class")
			cls := typ->{TypeClass^}.ToClass
			cls.AwaitVTableStep()
			if cls.VTable.Size() == 0
				return GObjNone
			fncCall := cls.VTableValue.proxy&
			return new UnrefFuncCall(fncCall)
		}
		dObj := TryGetExeCall(obj.Down)
		if dObj != null
		{
			cls := dObj.GetType()
			if cls is in TypePoint and cls.Base is TypeClass
			{
				dObj = GetExchange(dObj,cls.Base)
				cls = cls.Base
			}
			if cls is TypeClass 
			{
				cls2 := cls->{TypeClass^}.ToClass
				cls2.AwaitVTableStep()
				if cls2.VTable.Size() != 0
				{
					chk := CheckExeDownList
					chk.Push(dObj)
					return cls2.VTableField.CreateCall(chk)
				}else{
					return GObjNone
				}
			}else{
				obj.EmitError("Left of ->VTable is not a class")
			}
		}
		obj.Down.EmitError("Compiler error. How did you get there?")
	}

	if right.Value == "SetType"
	{
		dwnRes := TryGetExeCall(obj.Down)
		typ := ParseType(obj.Down.Right.Right.Right.Down)
		setCall := innerTrySetType(dwnRes,typ)
		if setCall == null
			obj.EmitError("Can not set type")
		return setCall
	}

	if right.Value == "EnumToCStr"
	{
		typ := getMetaDownType(obj.Down)
		if typ == null
			return null
		if typ is not in TypeEnum
		{
			obj.EmitError("Object is not enumeration")
		}
		return enumGetCStrTable(typ)
	}
	if right.Value == "AsString"
	{
		dwnRes := TryGetExeCall(obj.Down)
		if dwnRes == null //TODO error
			return null
		if dwnRes.GetType() is not TypeStr //TODO error
			return null

		if dwnRes.IsMem()
		{
			unrf := new UnrefFuncCall(dwnRes)
			exc := new PtrExchange(unrf,GTypeStringP.GetPoint())
			return new PtrToRef(exc)
		}else{
			return new PtrExchange(dwnRes,GTypeStringP)
		}
	}

	printf("hm %s\n",right.Value)
	right.EmitError("Unknown metafield")
	
	assert(false)
	return null
}

getMetaDownType := !(Token^ obj) -> Type^
{
	typ := ParseType(obj)
	if typ != null
		return typ

	dwnObj := TryGetExeCall(obj)
	if dwnObj != null
	{
		if dwnObj is ConstType
		{
			return dwnObj->{ConstType^}.Value
		}
		return dwnObj.GetType()
	}

	return null
}

innerTryGetOperMeta := !(Token^ itm) -> BoxExeObj^
{
	if itm.Down == null return null
	if itm.Down.Right == null return null
	if itm.Down.Right.Right == null return null

	if itm.Down.Right.GetValue() == ">="
	{
		tp1 := ParseType(itm.Down)
		tp2 := ParseType(itm.Down.Right.Right)

		if tp1 == null
		{
			obj1 := TryGetExeCall(itm.Down)
			if obj1? is ConstType
			{
				tp1 = obj1->{ConstType^}.Value
			}else{
				return null
			}
		}
		if tp2 == null
		{
			obj2 := TryGetExeCall(itm.Down)
			if obj2? is ConstType
			{
				tp2 = obj2->{ConstType^}.Value
			}else{
				return null
			}
		}
		
		if TypeFight(tp1,tp2) == tp2
		{
			return GBoolTrue
		}
		return GBoolFalse
	}

}



innerTrySetType := !(BoxExeObj^ obj,Type^ toType) -> BoxExeObj^
{
	if obj == null
		return null
	if toType == null
		return null
	itObj := obj
	
	if obj.GetType() is TypeClass
		itObj = new UnrefFuncCall(itObj)

	cnsts := List.{BoxExeConstObj^}
	cnsts.Push(GetConstType(toType))
	objs := CheckExeDownList
	objs.Push(itObj)
	fnc := GInternalSetType.GetFunc(objs,cnsts)
	cnsts.Destroy()
	assert(fnc != null)
	if fnc == null
		return null
	return fnc.CreateCall(objs)
}
