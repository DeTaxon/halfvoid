TryGetMetaCall := !(Token^ obj) -> BoxExeObj^
{
	return TryGetMetaGlobals(obj)?

	if obj.Down?.Right?.GetValue() == "is"
	{
		return TryGetTypeCheck(obj)
	}
	if obj.Down?.Right?.GetValue() == "->" //todo add to compiler comething thats make it simple
	{
	}else{
		return null
	}
	r := obj.Down.Right.Right
	if r is TokenIndent
		return TryMetaIndent(obj)
	if r.GetValue() == "{}"
	{
		SyntaxCompress(r,PriorityData)
		toType := ParseType(r.Down)
		if toType == null
		{
			CurrentWork?.SetErrorMessage(r.MakeError("Can not cast to unknown type"))
			return null
		}
		lObj := TryGetExeCall(obj.Down)
		if lObj == null
		{
			CurrentWork?.SetErrorMessage(r.MakeError("Unknown object to cast"))
			return null
		}
		res := GetExchange2(lObj,toType,false)
		if res != null
			return res
		return TryRemoveAutoCast(null,![lObj], (newVr,newObjs) ==> {
			return GetExchange2(newObjs[0],toType,false)
		})

	}
	return null

}
TryMetaIndent := !(Token^ obj) -> BoxExeObj^
{	
	right := obj.Down.Right.Right->{TokenIndent^}

	if right.Value == "TypeGroup"
	{
		typ := getMetaDownType(obj.Down)
		if typ is TypeClass
			return GetExeString(StringSpan("Class").GetString())
		if typ is TypeStandard
			return GetExeString(StringSpan("Prime").GetString())
		if typ is TypeInteger
			return GetExeString(StringSpan("Prime").GetString())
		if typ is TypeVector
			return GetExeString(StringSpan("Prime").GetString())
		if typ is in TypePoint
			return GetExeString(StringSpan("Pointer").GetString())
		if typ == GTypeStr
			return GetExeString(StringSpan("Str").GetString())
		if typ is in TypeFunc
			return GetExeString(StringSpan("Function").GetString())
		if typ is in TypeArr
			return GetExeString(StringSpan("Array").GetString())
		if typ is in TypeEnum
			return GetExeString(StringSpan("Enum").GetString())
		if typ is TypeArrayView
			return GetExeString(StringSpan("ArrayView").GetString())
		assert(false)
		return null
	}
	if right.Value == "IsGCClass"
	{
		typ := getMetaDownType(obj.Down)
		if typ == null
		{
			CurrentWork?.SetErrorMessage(obj.Down.MakeError("Object for IsGCClass must have a type"))
			return null
		}
		if IsGCType(typ)
			return GBoolTrue
		return GBoolFalse
	}
	if right.Value == "IsGCPointer"
	{
		typ := getMetaDownType(obj.Down)
		if typ == null
		{
			CurrentWork?.SetErrorMessage(obj.Down.MakeError("Object for IsGCPointer must have a type"))
			return null
		}
		if IsGCPtr(typ)
			return GBoolTrue
		return GBoolFalse
	}
	if right.Value in !["IsInt","IsSInt","IsUInt"]
	{
		typ := getMetaDownType(obj.Down)
		if typ == null
		{
			CurrentWork?.SetErrorMessage(obj.Down.MakeError("Object for IsInt must have a type"))
			return null
		}

		isUInt := IsUInt(typ)

		if not IsInt(typ)
			return GBoolFalse
		if right.Value == "IsSInt" and isUInt
			return GBoolTrue
		if right.Value == "IsUInt" and not isUInt
			return GBoolTrue
		return GBoolTrue
	}
	if right.Value == "IsFloat"
	{
		typ := getMetaDownType(obj.Down)
		if typ == null
		{
			CurrentWork?.SetErrorMessage(obj.Down.MakeError("Object for IsFloat must have a type"))
			return null
		}

		if not IsFloat(typ)
			return GBoolFalse
		return GBoolTrue
	}
	if right.Value == "IsStaticArray"
	{
		typ := getMetaDownType(obj.Down)
		if typ == null
		{
			CurrentWork?.SetErrorMessage(obj.Down.MakeError("Object for IsStaticArray must have a type"))
			return null
		}

		if typ is not TypeArr
			return GBoolFalse
		return GBoolTrue
	}
	if right.Value == "IsVector"
	{
		typ := getMetaDownType(obj.Down)
		if typ == null
		{
			CurrentWork?.SetErrorMessage(obj.Down.MakeError("Object for IsVector must have a type"))
			return null
		}

		if typ is not TypeVector
			return GBoolFalse
		return GBoolTrue
	}
	if right.Value == "Type"
	{
		dwnObj := TryGetExeCall(obj.Down)
		if dwnObj == null
		{
			CurrentWork?.SetErrorMessage(obj.MakeError("Can not get type"))
			return null
		}
		return dwnObj.GetType()
	}
	if right.Value == "TypeBase"
	{
		typ := getMetaDownType(obj.Down)
		if typ == null
		{
			CurrentWork?.SetErrorMessage(obj.Down.MakeError("Object for TypeBase must have a type"))
			return null
		}
		if typ.Base == null
		{
			CurrentWork?.SetErrorMessage(obj.Down.MakeError("Object for TypeBase does not have base class"))
			return null
		}
		return typ.Base
	}
	if right.Value == "TypeName"
	{
		typ := getMetaDownType(obj.Down)
		if typ == null
		{
			CurrentWork?.SetErrorMessage(obj.Down.MakeError("Object for TypeBase must have a type"))
			return null
		}
		return GetExeString(typ.GetBADStr())
	}
	if right.Value == "TypeId"
	{
		itType8 := ParseType(obj.Down)
		if itType8 == null
		{
			CurrentWork?.SetErrorMessage(obj.MakeError("Can not get type"))
			return null
		}
		return TypeIdObjFromType(itType8)
	}
	if right.Value == "TypeSize"
	{
		itType := getMetaDownType(obj.Down)
		if itType != null
		{
			if CurrentFunc != null and itType is in TypeClass
			{
				DB_TypeSizeUsage.Add(CurrentFunc,itType->{TypeClass^}.ToClass)
			}
			if itType is in TypeClass
			{
				return itType->{TypeClass^}.ToClass.GetClassSize()
			}
			return GetExeInt(itType.GetSize())
		}else{
			CurrentWork?.SetErrorMessage(obj.MakeError("Can not get TypeSize, it is not a type"))
			return null
		}
	}
	if right.Value in !["AllFields","#AllFields"]
	{
		return TryGetMetaFields(obj)
	}
	if right.Value == "LocalFields"
	{
		return TryGetMetaFields(obj,true)
	}
	if right.Value == "ArraySize"
	{
		typ := getMetaDownType(obj.Down)
		if typ == null
			return null
		if typ is not TypeArr
			return null
		return GetExeInt(typ->{TypeArr^}.len)
	}
	if right.Value == "VecSize"
	{
		typ := getMetaDownType(obj.Down)
		if typ == null
			return null
		if typ is not TypeVector
			return null
		return GetExeInt(typ->{TypeVector^}.vecElementCount)
	}
	if right.Value == "VTable"
	{
		typ := ParseType(obj.Down)
		if typ != null
		{
			if not (typ is TypeClass)
			{
				CurrentWork?.SetErrorMessage(obj.Down.MakeError("Item is not a class"))
				return null
			}
			cls := typ->{TypeClass^}.ToClass
			cls.AwaitVTableStep()
			if cls.VTable.Size() == 0
				return GObjNone
			fncCall := cls.VTableValue.proxy&

			DB_VTableUsage.Add(cls,CurrentFunc?)
			return new UnrefFuncCall(fncCall)
		}
		dObj := TryGetExeCall(obj.Down)
		if dObj != null
		{
			cls := dObj.GetType()
			if cls is in TypePoint and cls.Base is TypeClass
			{
				dObj = GetExchange(dObj,cls.Base)
				cls = cls.Base
			}
			if cls is TypeClass 
			{
				cls2 := cls->{TypeClass^}.ToClass
				cls2.AwaitVTableStep()
				if cls2.VTable.Size() != 0
				{
					DB_VTableUsage.Add(cls2,CurrentFunc?)
					chk := CheckExeDownList
					chk.Push(dObj)
					return cls2.VTableField.CreateCall(chk)
				}else{
					return GObjNone
				}
			}else{
				CurrentWork?.SetErrorMessage(obj.MakeError("Left of ->VTable is not a class"))
				return null
			}
		}
		CurrentWork?.SetErrorMessage(obj.Down.MakeError("Compiler error. How did you get there?"))
		return null
	}

	if right.Value == "SetType"
	{
		dwnRes := TryGetExeCall(obj.Down)
		typ := ParseType(obj.Down.Right.Right.Right.Down)
		setCall := innerTrySetType(dwnRes,typ)
		if setCall == null
		{
			CurrentWork?.SetErrorMessage(obj.MakeError("Can not set type"))
			return null
		}
		return setCall
	}

	if right.Value == "EnumToCStr"
	{
		typ := getMetaDownType(obj.Down)
		if typ == null
			return null
		if typ is not in TypeEnum
		{
			CurrentWork?.SetErrorMessage(obj.MakeError("Object is not enumeration"))
			return null
		}
		return enumGetCStrTable(typ)
	}
	if right.Value == "AsString"
	{
		dwnRes := TryGetExeCall(obj.Down)
		if dwnRes == null //TODO error
			return null
		if dwnRes.GetType() is not TypeStr //TODO error
			return null

		return strAsString(dwnRes)
	}

	CurrentWork?.SetErrorMessage(right.MakeError("Unknown metafield"))
	return null
}
strAsString := !(BoxExeObj^ obj) -> BoxExeObj^
{
	if obj.IsMem()// and useMem
	{
		return new StrToStringPointerExchange(obj,GTypeStringP)
	}else{
		return new PtrExchange(obj,GTypeStringP)
	}
}

StrToStringPointerExchange := class extend BoxExeObj
{
	resId := int
	Down := BoxExeObj^
	this := !(BoxExeObj^ obj, Type^ toType) -> void
	{
		Down = obj
		ObjType = toType
	}
	IsMem := virtual !() -> bool { return Down.IsMem() }
	NotifyMemUse := virtual !() -> void
	{
		Down.NotifyMemUse()
	}
	PrintPointPre := virtual !(LLVMWriteContext^ ctx) -> void
	{
		Down.PrintPointPre(ctx)
	}
	PrintPointUse := virtual !(LLVMWriteContext^ ctx) -> void
	{
		Down.PrintPointUse(ctx)
	}
	PrintPre := virtual !(LLVMWriteContext^ ctx) -> void
	{
		Down.PrintPre(ctx)
	}
	PrintUse := virtual !(LLVMWriteContext^ ctx) -> void
	{
		Down.PrintUse(ctx)
	}
	WriteMC := virtual !(MCBuildContext^ ctx) -> WriteMCResult
	{
		return Down.WriteMC(ctx)
	}

	IsEditSupported := virtual true
	ElementName := virtual "StrToStringPointer"

	SubElementsCount := virtual !() -> int { return 1 }
	GetSubElement := virtual !(int index) -> HV_Object^
	{
		if index == 0
			return Down
		return null
	}
}

getMetaDownType := !(Token^ obj) -> Type^
{
	typ := ParseType(obj)
	if typ != null
		return typ

	dwnObj := TryGetExeCall(obj)
	if dwnObj != null
	{
		if dwnObj is in Type
		{
			return dwnObj->{Type^}
		}
		return dwnObj.GetType()
	}

	return null
}

innerTryGetOperMeta := !(Token^ itm) -> BoxExeObj^
{
	if itm.Down == null return null
	if itm.Down.Right == null return null
	if itm.Down.Right.Right == null return null

	if itm.Down.Right.GetValue() == ">="
	{
		tp1 := ParseType(itm.Down)
		tp2 := ParseType(itm.Down.Right.Right)

		if tp1 == null
		{
			obj1 := TryGetExeCall(itm.Down)
			if obj1? is in Type
			{
				tp1 = obj1->{Type^}
			}else{
				return null
			}
		}
		if tp2 == null
		{
			obj2 := TryGetExeCall(itm.Down)
			if obj2? is in Type
			{
				tp2 = obj2->{Type^}
			}else{
				return null
			}
		}
		
		if TypeFight(tp1,tp2) == tp2
		{
			return GBoolTrue
		}
		return GBoolFalse
	}

}



innerTrySetType := !(BoxExeObj^ obj,Type^ toType) -> BoxExeObj^
{
	if obj == null
		return null
	if toType == null
		return null
	itObj := obj
	
	if obj.GetType() is TypeClass
		itObj = new UnrefFuncCall(itObj)

	cnsts := List.{BoxExeConstObj^}
	cnsts.Push(toType)
	objs := CheckExeDownList
	objs.Push(itObj)
	fnc := GInternalSetType.GetFunc(objs,cnsts)
	cnsts.Destroy()
	assert(fnc != null)
	if fnc == null
		return null
	return fnc.CreateCall(objs)
}
