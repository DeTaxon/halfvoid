TryGetTypeCheck := !(Token^ obj) -> BoxExeObj^
{
	assert(obj.Down.Right.GetValue() == "is")

	makeNegative := false
	makeInCheck := false

	iter := obj.Down.Right.Right
	if iter.GetValue() == "not"
	{
		makeNegative = true
		iter = iter.Right
	}
	if iter.GetValue() == "in"
	{
		makeInCheck = true
		iter = iter.Right
	}

	expType := ParseType(iter)
	if expType == null
	{
		CurrentWork?.SetErrorMessage(iter.MakeError("Can not get type"))
		return null
	}
	if not IsVirtualClass(expType)
	{
		CurrentWork?.SetErrorMessage(iter.MakeError("Type on right of is must be a virtual class"))
		return null
	}
	checkObj := TryGetExeCall(obj.Down)
	if checkObj == null
		return null

	isVCls := IsVirtualClass(checkObj.GetType())

	if not ( (isVCls and checkObj.IsMem())  or IsVirtualClass(checkObj.GetType().Base))
	{
		CurrentWork?.SetErrorMessage(obj.Down.MakeError("Object on left of is must have type of a pointer to virtual class"))
		return null
	}

	return CreateTypeIsCheck(checkObj,expType,makeInCheck,makeNegative)
}

CreateTypeIsCheck := !(BoxExeObj^ checkObj, Type^ expType,bool isIn, bool makeNegative) -> BoxExeObj^
{
	rCall := BoxExeObj^
	if isIn
	{
		fnc := TemplateInternalIsInSameType.GetFunc(![checkObj],![expType])
		rCall = fnc.CreateCall(![checkObj])
	}else{
		rCall = new IsSameTypeChecker(checkObj,expType->{TypeClass^})
	}
	if makeNegative
		rCall = CreateFuncCall(StringSpan(". not"),![rCall],![])
	return rCall
}

IsSameTypeChecker := class extend BoxExeObj
{
	DownObj := BoxExeObj^
	TargetType := TypeClass^
	QuitLabel := BoxLabel
	CheckLabel := BoxLabel
	EndLabel := BoxLabel
	resId := int
	this := !(BoxExeObj^ dwnObj, TypeClass^ expType) -> void
	{
		ObjType = GTypeBool
		DownObj = dwnObj
		QuitLabel."this"()
		CheckLabel."this"()
		EndLabel."this"()

		TargetType = expType

		if DownObj.GetType() is in TypePoint
			assert(DownObj.GetType().Base is in TypeClass)
	}
	IsMem := virtual !() -> bool
	{
		return false
	}
	PrintPre := virtual !(LLVMWriteContext^ ctx) -> void
	{
		f := ctx.writeStream

		objIsRef := true
		classType := DownObj.GetType()

		if classType is in TypePoint
		{
			objIsRef = false
			classType = classType.Base

			assert(classType is in TypeClass)
		}

		vType := classType->{TypeClass^}.ToClass
		vTableType := vType.VTableType

		if objIsRef
			DownObj.PrintPointPre(ctx)
		else
			DownObj.PrintPre(ctx)

		resId = ctx.GetNewId()

		baseType := Type^
		if objIsRef
			baseType = DownObj.GetType()
		else
			baseType = DownObj.GetType().Base


		f^ << "%TNullCheck" << resId << " = icmp eq ptr "
		if objIsRef
			DownObj.PrintPointUse(ctx)
		else
			DownObj.PrintUse(ctx)
		f^ << ", null"
		if DebugMode
			f^ << ", !dbg !" << GDebugLineCallId
		f^ << "\n"

		f^ << "br i1 %TNullCheck" << resId << " , label "
		QuitLabel.PrintLabel(ctx)
		f^ << ", label "
		CheckLabel.PrintLabel(ctx)
		if DebugMode
			f^ << ", !dbg !" << GDebugLineCallId
		f^ << "\n"


		CheckLabel.PrintCode(ctx)

		f^ << "%TPtr" << resId << " = getelementptr "
		baseType.PrintType(ctx)
		f^ << " , "
		baseType.GetPoint().PrintType(ctx)
		f^ << " "

		if objIsRef
			DownObj.PrintPointUse(ctx)
		else
			DownObj.PrintUse(ctx)

		f^ <<", i32 0, i32 0\n"
		f^ << "%TVTable" << resId << " = load "
		vTableType.ItType.PrintType(ctx)
		f^ << "* , "
		vTableType.ItType.PrintType(ctx)
		f^ << "** %TPtr" << resId

		if DebugMode
			f^ << ", !dbg !" << GDebugLineCallId
		f^ << "\n"

		f^ << "%TPre" << resId << " = bitcast "
		vTableType.ItType.PrintType(ctx)
		f^ << "* %TVTable" << resId << " to "
		TargetType.ToClass.VTableType.ItType.PrintType(ctx)
		f^ << "*"
		f^ << "\n"

		f^ << "%TVal" << resId << " = icmp eq "
		TargetType.ToClass.VTableType.ItType.PrintType(ctx)
		f^ << "* %TPre" << resId << " , "
		TargetType.ToClass.VTableValue.PrintOutputName(ctx)
		f^ << "\n"

		EndLabel.PrintGo(ctx)

		QuitLabel.PrintCode(ctx)

		EndLabel.PrintCode(ctx)

		f^ << "%T" << resId << " = phi i1 [0,"
		QuitLabel.PrintLabel(ctx)
		f^ << "] , [%TVal" << resId << ","
		CheckLabel.PrintLabel(ctx)
		f^ << "]"
		if DebugMode
			f^ << ", !dbg !" << GDebugLineCallId
		f^ << "\n"
		
	}
	PrintUse := virtual !(LLVMWriteContext^ ctx) -> void
	{
		ctx.writeStream^ << "%T" << resId
	}
}


IsVirtualClass := !(Type^ tp) -> bool
{
	if tp == null
		return false
	if not (tp is TypeClass)
		return false
	asClass := tp->{TypeClass^}.ToClass

	asClass.AwaitVTableStep()
	return asClass.VTable.Size() != 0	
}
