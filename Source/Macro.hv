IsIntString := !(StringSpan spn) -> bool
{
	for c : spn
	{
		if not (c in '0'..'9')
			return false
	}
	return true
}
IsOperator := !(Token^ itm) -> bool
{
	if itm is TokenSymbol
	{
		itm2 := itm->{TokenSymbol^}
		if itm2.GetValue() == "=="
			return true
	}
	return false
}
// MacroContainLambda := !(Token^ itm) -> bool
// {
// 	if itm == null
// 		return false
// 	if itm is TokenTemplateType
// 	{
// 		if IsIntString(itm->{TokenTemplateType^}.Value[1..0])
// 			return true
// 	}
// 	if itm.Down?.Right?.Right?.Right == null and IsOperator(itm.Down.Right)
// 	{
// 		return MacroContainLambda(itm.Down) or MacroContainLambda(itm.Down.Right.Right)
// 	}
// 	return false
// }

CheckMacroStep := !(Token^ itm) -> void
{

	if itm.GetValue() == "{}"
		return void
	if itm.GetValue() == "()"
	{
		SyntaxCompress(itm,PriorityData)
	}

	iter := itm.Down
	while iter != null
	{
		CheckMacroStep(iter)
		iter = iter.Right
	}
	if itm.Down?.Right?.GetValue() == "[]" and itm.Down.Right.Down?.GetValue() == "^"
	{
		assert(CurrentLine != null)

		indToken := itm.Down.Right.Down.Right
		indName := StringSpan
		if indToken != null
		{
			if not (indToken is TokenIndent)
			{
				CurrentFuncWork.SetErrorMessage(itm.MakeError("Unknown cycle index object"))
				return void
			}
			indName = indToken->{TokenIndent^}.Value
		}
		//CurrentLine.MacroCycleMacro.Emplace(itm,GetCycleVarName(),indName)
		CurrentLine.MacroCycleMacro.Emplace(itm,StringSpan("it"),indName)
	}
}

TryGetMacroCall := !(Token^ itm) -> BoxExeObj^
{
	if CurrentLine?.MacroCycleMacro.Size() != 0
	{
		for it : CurrentLine.MacroCycleMacro
		{
			if it.0 == itm
			{
				indToken := TokenIndent(it.1)
				return TryGetExeCall(indToken&)
			}
		}
	}
	return null
}

TryGetUnitCall :=  !(Token^ itm) -> BoxUnit^
{
	return new BoxExeLine(itm)
}

// GetMacroCycledObj := !(Token^ itm, int i) -> BoxUnit^
// {
// 	if i >= MacroCycleRemade.Size()
// 		return innerTryGetUnitCall(itm)
	
// 	forItems := HybridQueue.{ForSubObjects,5}

// 	el := ForSubObjects

// 	el.DownToken = MacroCycleRemade[i].0.Down
// 	el.ValueName = MacroCycleRemade[i].1
// 	el.IndexName = MacroCycleRemade[i].2

// 	forItems.Push(el)

// 	return GetForParsed(itm,forItems, () ==> {
// 		return GetMacroCycledObj(itm,i+1)
// 	})
// }

//MacroCycleRemade := List.{Tuple.{Token^,StringSpan,StringSpan}}

GetCycleVarName := !() -> StringSpan
{
	buff := char[255]
	sprintf(buff[0]&,"ItVar%i",GetNewId())
	result = GetConstString(buff[0]&)
}
