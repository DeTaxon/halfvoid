
CliWin := class extend WindowCli
{
	StatusList := List.{Str}
	HotloadList := List.{Str}
	ConsoleList := List.{Str}

	tabs := LayoutTabs^

	InitWindow := virtual !() -> GUIObject^
	{
		tabs = new  LayoutTabs(![
			new LayoutTab("Status",
				new LayoutHorizontal(![
					new MultilineText(StatusList)
				])
			),
			new LayoutTab("Hotload",
				new LayoutHorizontal(![
					new MultilineText(HotloadList)
				])
			),
			new LayoutTab("Console",
				new LayoutHorizontal(![
					new MultilineText(ConsoleList)
				])
			),
		])
	
		return new FrameCli(tabs)
	}
	KeyPressed := virtual !(int keyChar) -> void
	{
		switch keyChar
		{
		case '\t'
			tabs.NextTab()
			Refresh()
		case 'q'
			cliQuit = true
			while cliWorks != 0
				TSleep(0.2)
			cliWin.Quit()
		case 'j'
			TestJavaCompile()
		case 't'
			TestOptWave()
		case 'r'
			StartInterpreter()
		}
	}
}

runInProgress := bool

StartInterpreter := !() -> void
{
	if runInProgress
		return void
	runInProgress = true
	TSpawnTask(() ==> {
		//@work 
		{
			toRun := intGetFunc("main")
			toRun.ParseBody()
			WaitForParsingObjects()

			CompileAndRunCode(toRun->{BoxFuncBody^})
		}
		runInProgress = false
	})
}
TestJavaCompile := !() -> void
{
	if runInProgress
		return void
	runInProgress = true
	TSpawnTask(() ==> {
		//@work 
		{
			toRun := intGetFunc("JavaCompile")

			fncRn := GInterpCntx.GetMCFunc(toRun->{BoxFuncBody^})
			fncPtr := GInterpCntx.GetFunctionPointer(fncRn)->{!(void^)^->void}

			cmplFunc := intGetFunc("JavaMain")
			mcFuncCmpl := GInterpCntx.GetMCFunc(cmplFunc->{BoxFuncBody^})

			hvb := new HVBFunction(mcFuncCmpl)

			fncPtr(hvb)
		}
		runInProgress = false
	})
}
TestOptWave := !() -> void
{
	if runInProgress
		return void
	runInProgress = true
	TSpawnTask(() ==> {
		//@work 
		{
			hotload := HotloadContext

			CurrentHotloadContext = hotload&

			toRun := intGetFunc("TestWave")

			fncRn := GInterpCntx.GetMCFunc(toRun->{BoxFuncBody^})
			fncPtr := GInterpCntx.GetFunctionPointer(fncRn)->{!()^->void}
			fncPtr()

			ReloadApply(hotload&)
		}
		runInProgress = false
	})
}

StreamOnLambda := class extend Stream
{
	readLambda := !(void^,s64)&->void
	writeLambda := !(void^,s64)&->void
	this := !(!(void^,s64)&-> void rl, !(void^,s64)&->void wl) -> void
	{
		readLambda = rl?.Capture()
		writeLambda = wl?.Capture()
	}
	Read := virtual !(void^ data, s64 sLen) -> void
	{
		readLambda?(data,sLen)
	}
	Write := virtual !(void^ data, s64 sLen) -> void
	{
		writeLambda?(data,sLen)
	}
}

cliWin := CliWin^
cliQuit := bool
cliWorks := int

EnterCliMode := !() -> int
{
	ExpectWorkers(2)

	cliWin = new CliWin

	HotloadStream& = new StreamOnLambda(null,(data,sLen) ==> {
		st := Str
		st->AsString = new String(data->{char^},sLen->{int})
		cliWin.HotloadList.Push(st)
		cliWin.Refresh()
	})
	HotloadStream& = new TextStream(HotloadStream&)

	TSpawnTask(() ==> {

		AsyncMonitorFolderNonStop(".",true,(changedObj,changedOption) ==> {

			if changedObj is not in File
				return void

			hotload := GHotloadCntx& 
			asFile := changedObj->{File^}

			CheckEmbededFile(hotload,asFile)

			fName := asFile.GetName()

			if fName.End == ".hv"
			{
				ChangedHVFile(hotload,asFile,changedOption)
			}
			StartWorkBox()
		})
	})

	TSpawnTask(() ==> {
		CliParseMain()
	})

	StartStatusMonitor()

	cliWin.Run()
	exit(0) //TODO 

}

gSomeOneOnWork := bool
StartWorkBox := !() -> void
{
	if gSomeOneOnWork
		return void

	gSomeOneOnWork = true

	SubWork(() ==> {
		WaitForParsingObjects()
		gSomeOneOnWork = false
	})

}

ChangedHVFile := !(HotloadContext^ hotload,File^ asFile,FSChangeEvent changeOption) -> void
{
	fName := asFile.GetName()

	if changeOption == "Created"
	{
		absPath := asFile.GetAbsPath()

		foundFile := File^

		for spc : CodeSpaces
		{
			for thisFiles : spc.Files
			{
				if thisFiles.file.GetAbsPath() == absPath
				{
					foundFile = thisFiles.file
					break
				}
			}
			if foundFile != null
				break
		}

		if foundFile != null
		{
			HotloadStream << "Test , redeemed reload\n" //TODO delete after i see it
			ReloadFile(hotload,foundFile)
		}else{
			HotloadStream << "File was created " << fName << "\n"
			newFile := new BoxFile(asFile)
			CodeSpaces[0].Files.Push(newFile) // TODO determine codespace number
		}

		return void
	}
	ReloadFile(hotload,asFile)
}

ReloadFile := !(HotloadContext^ hotload,File^ asFile) -> void
{
	flId := asFile.GetAbsPath()

	foundFile := BoxFile^
	for spc : CodeSpaces
	{
		for thisFile : spc.Files
		{
			fId := thisFile.file.GetAbsPath()
			if fId == flId
			{
				foundFile = thisFile
				break
			}
		}
		if foundFile != null
			break
	}
	if foundFile == null
	{
		HotloadStream << "Changed file " << asFile.GetName() << " not found in list\n"
		return void
	}
	HotloadStream << "Changed file " << asFile.GetName() <<" , reloading content\n"

	foundFile.ReloadFile(hotload,asFile)

}

CliParseMain := !() -> void
{
	mainFuncName := "internalHVEntryPoint"

	WaitForParsingObjects()
	mainFunc := intGetFunc(mainFuncName)
	assert(mainFunc != null)
	assert(mainFunc is BoxFuncBody)
	mainFunc.ParseBody()
	
	WaitForParsingObjects()

	mainFunc.ForceOutputName("main")

	WaitForParsingObjects()

	TLSStep()

	while WorkBag.works.Size() != 0
	{
		WaitForParsingObjects()
		TSleep(0.01)
		if WorkBag.works.Size() != 0
			WorkBag.CancelAll()
	}

	for it : CodeSpaces
	{
		for libs : it.Modules
			libs.CreateInitPart()
	}

	while WorkBag.works.Size() != 0
	{
		WaitForParsingObjects()
		TSleep(0.01)
		if WorkBag.works.Size() != 0
			WorkBag.CancelAll()
	}

	CompileAndRunInit()

	conVar := intGetGlobalVar("Console")
	if conVar != null
	{
		conVar.NotifyUseAndWait()
		globVar := GInterpCntx.GetGlobalVarMem(conVar)

		newStream := Stream^
		newStream = new StreamOnLambda(null,(data,sLen) ==> {
			st := Str
			st->AsString = new String(data->{char^},sLen->{int})
			cliWin.ConsoleList.Push(st)
			cliWin.Refresh()
		})
		newStream = new TextStream(newStream)

		globVar->{Stream^^}^ = newStream
	}
}
