
CliWin := class extend WindowCli
{
	ErrorList := List.{Str}
	LogList := List.{Str}
	ConsoleList := List.{Str}

	tabs := LayoutTabs^

	InitWindow := virtual !() -> GUIObject^
	{
		tabs = new  LayoutTabs(![
			new LayoutHorizontal(![
				new MultilineText(ErrorList)
			]),
			new LayoutHorizontal(![
				new MultilineText(LogList)
			]),
			new LayoutHorizontal(![
				new MultilineText(ConsoleList)
			]),
		])
	
		return new FrameCli(tabs)
	}
	KeyPressed := virtual !(int keyChar) -> void
	{
		switch keyChar
		{
		case '\t'
			tabs.NextTab()
			Refresh()
		case 'r'
			StartInterpreter()
		}
	}
}

StartInterpreter := !() -> void
{
	TSpawnTask(() ==> {
		toRun := intGetFunc(RunModeFuncName)
		toRun.ParseBody()
		WaitForParsingObjects()

		CompileAndRunCode(toRun->{BoxFuncBody^})
	})
}

StreamOnLambda := class extend Stream
{
	readLambda := !(void^,s64)&->void
	writeLambda := !(void^,s64)&->void
	this := !(!(void^,s64)&-> void rl, !(void^,s64)&->void wl) -> void
	{
		readLambda = rl
		writeLambda = wl
	}
	Read := virtual !(void^ data, s64 sLen) -> void
	{
		readLambda?(data,sLen)
	}
	Write := virtual !(void^ data, s64 sLen) -> void
	{
		writeLambda?(data,sLen)
	}
}


EnterCliMode := !() -> void
{
	win := new CliWin

	//TODO allow interpreter to work with variadics
	Console& = new StreamOnLambda(null,(data,sLen) ==> [win&]{
		st := Str
		st->AsString = new String(data->{char^},sLen->{int})
		win.ConsoleList.Push(st)
		win.Refresh()
	})
	Console& = new TextStream(Console&)

	TSpawnTask(() ==> {

		hotload := HotloadContext

		AsyncMonitorFolderNonStop(StringSpan("."),true,(changedFile) ==> [win&] {
			asFile := changedFile->{File^}


			flId := asFile.GetId()


			foundFile := BoxFile^
			for spc : CodeSpaces
			{
				for thisFile : spc.Files
				{
					fId := thisFile.file.GetId()
					if fId == flId
					{
						foundFile = thisFile
						break
					}
				}
				if foundFile != null
					break
			}
			if foundFile == null
				return void

			foundFile.ReloadFile(hotload&,asFile)

			hotload.FailedToCompile[^].Recompile()
			hotload.FailedToCompile.Destroy()

			WaitForParsingObjects()

			//win.ErrorList.Clear()

			win.ErrorList.Push(StrConcat("Error size ",WorkBag.works.Size()))
			if WorkBag.works.Size() != 0
			{
				for it : WorkBag.works
				{
					msg := WorkToError(it)
					if msg->AsString == null
						continue
					win.ErrorList.Push(msg)
				}
				for it : WorkBag.works
				{
					if it is not CWorkFuncCompile
						continue
					hotload.FailedToCompile.Push(it->{CWorkFuncCompile^}.itFunc)
				}
				WorkBag.CancelAll()
			}else{
				GInterpCntx.ReloadFunctions(hotload&)
				hotload.Reset()
			}
			win.Refresh()

		})
	})

	win.Run()

}
