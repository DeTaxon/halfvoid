


DB_EmbeddedFiles := HVTable2.{BoxFuncBody^,File^}

DB_ClassExtends := HVTable2.{BoxClass^,BoxClass^} //Left extend right
DB_TypeSizeUsage := HVTable2.{BoxFunc^,BoxClass^}
DB_VTableUsage := HVTable2.{BoxClass^, BoxFunc^}
DB_ClassComposition := HVTable2.{BoxClass^, BoxClass^} // Left uses right
DB_FieldUsage := HVTable2.{BoxFunc^,BoxClass^}
DB_LocalVarUsage := HVTable2.{BoxFunc^,BoxClass^}
DB_EnumUsage := HVTable2.{BoxFunc^,BoxEnum^}


DB_ForgetFunction := !(BoxFunc^ fnc) -> void
{
	if fnc is in BoxFuncBody
		DB_EmbeddedFiles.Key.RemoveAll(fnc->{BoxFuncBody^})

	DB_TypeSizeUsage.Key.RemoveAll(fnc)
	DB_FieldUsage.Key.RemoveAll(fnc)
	DB_LocalVarUsage.Key.RemoveAll(fnc)
	DB_EnumUsage.Key.RemoveAll(fnc)
}

DB_ForgetClass := !(HotloadContext^ ctx, BoxClass^ cls) -> void
{
	if ctx != null
	{
		DB_FieldUsage.Value.Get(cls,x ==> {
			ctx.AddFunction(x)
		})
		DB_LocalVarUsage.Value.Get(cls,x ==> {
			ctx.AddFunction(x)
		})
		DB_ClassComposition.Value.Get(cls,x ==> {
			ctx.AddClass(x)
		})
		DB_ClassExtends.Value.Get(cls,x ==> {
			ctx.AddClass(x)
		})
	}
	CodeSpaces[^].Globals[cls.Name].DeleteIf(x ==> { return x == cls } )
	CodeSpaces[^].Types.Remove(cls.Name)
}
