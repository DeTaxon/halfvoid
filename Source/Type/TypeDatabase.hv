
//TypesDatabase := AVLMap.{StringSpan,BoxUnit^}

GetTypeByName := !(StringSpan name) -> Type^
{
	res := GetTypeObjByName(name)
	if res != null
		return TypeObjToType(res)
	return null
}
TypeObjToType := !(BoxUnit^ res) -> Type^
{
	if res == null
		return null
	if res is TypeVar
		return res->{TypeVar^}.Value
	if res is in Type
		return res->{Type^}
	return null
}

GetTypeObjByName := !(StringSpan name) -> BoxUnit^
{
	for it : UnitStack
	{
		if it is TypeVar
		{
			tv := it->{TypeVar^}
			if tv.Name == name
				return tv
		}
		if it is ConstVar
		{
			tv := it->{ConstVar^}
			if tv.Name == name
			{
				vl := tv.Value
				if vl is in Type
					return vl->{Type^}
			}
		}
	}



	for sp : CodeSpaces.Reverse
	{
		if sp.Types.Contain(name)
		{
			itm := sp.Types[name]
			if itm is in Type
			{
				return itm
			}else if itm is TypeVar
			{
				return itm
			}else if itm is TemplateTypeVar
			{
				return itm
			}else if itm is TypedefTemplateVar
			{
				return itm
			}else if itm is in BoxClass 
			{
				assert(false)
			}else{
				assert(false)
			}
		}
		for module : sp.Modules
		{
			tp := module.GetType(name)
			if tp != null
			{
				sp.Types[name] = tp
				return tp
			}
		}
	}
	return null
}

TypeDatabaseInitDefaults := !() -> void
{
	for defs : DefsTable
	{
		if defs == null
			break
		CodeSpaces[-1].Types[defs.ItName] = defs.ItType
	}
}

