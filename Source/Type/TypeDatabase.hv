
TypesDatabase := AVLMap.{StringSpan,BoxUnit^}

GetTypeByName := !(StringSpan name) -> Type^
{
	res := GetTypeObjByName(name)
	if res != null
		return TypeObjToType(res)
	return null
}
TypeObjToType := !(BoxUnit^ res) -> Type^
{
	if res == null
		return null
	if res is TypeVar
		return res->{TypeVar^}.Value
	if res is ConstType
		return res->{ConstType^}.Value
	return null
}

GetTypeObjByName := !(StringSpan name) -> BoxUnit^
{
	for it : UnitStack
	{
		if it is TypeVar
		{
			tv := it->{TypeVar^}
			if tv.Name == name
				return tv
		}
		if it is ConstVar
		{
			tv := it->{ConstVar^}
			if tv.Name == name
			{
				vl := tv.Value
				if vl is ConstType
					return vl->{ConstType^}
			}
		}
	}

	if TypesDatabase.Contain(name)
	{
		itm := TypesDatabase[name]
		if itm is ConstType
		{
			return itm
		}else if itm is TypeVar
		{
			return itm
		}else if itm is TemplateTypeVar
		{
			return itm
		}else if itm is TypedefTemplateVar
		{
			return itm
		}else if itm is in BoxClass 
		{
			assert(false)
		}else{
			assert(false)
		}
	}

	for sp : CodeSpaces
	{
		for module : sp.Modules
		{
			tp := module.GetType(name)
			if tp != null
			{
				tp2 := GetConstType(tp)
				TypesDatabase[name] = tp2
				return tp2
			}
		}
	}
	return null
}

TypeDatabaseInitDefaults := !() -> void
{
	for defs : DefsTable
	{
		if defs == null
			break
		TypesDatabase[defs.ItName] = GetConstType(defs.ItType)
	}
}

