CheckTemplateType := !(Type^ tp,Token^ tk, AVLMap.{StringSpan,BoxUnit^} resCnsts) -> Type^
{
	return CheckTemplateType(null,tp,tk,resCnsts)
}
CheckTemplateType := !(BoxExeObj^ obj, Type^ tp,Token^ tk, AVLMap.{StringSpan,BoxUnit^} resCnsts) -> Type^
{
	if tk is TokenIndent
	{	
		dwnTp := GetTypeFromIndent(tk->{TokenIndent^},resCnsts&)
		if dwnTp == null
		{
			name := tk->{TokenIndent^}.Value
			if resCnsts.Contain(name)
			{
				itm2 := resCnsts[name]
				if itm2 is ConstType
				{
					dwnTp = itm2->{ConstType^}.Value
				}
			}
		}
		if dwnTp == null
			return null
		if tp != null and tp != dwnTp
			return null
		return dwnTp
	}
	if tk is TokenTemplateType
	{
		if tp == null
			return null
		nm := tk->{TokenTemplateType^}.Value[1..0]

		if resCnsts.Contain(nm)
		{
			if resCnsts[nm] is ConstType
			{
				vr := resCnsts[nm]->{ConstType^}
				if vr.Value != tp
				{
					return null
				}
			}
		}else{
			resCnsts[nm] = GetConstType(tp)
		}
		return tp
	}
	if tk.Down?.GetValue() == "!" and tk.Down.Right?.GetValue() == "()"
	{
		skob := tk.Down.Right

		if skob.Right.GetValue() in !["&","^"]
		{}else{
			return null
		}

		k := 0
		types := Type^[100]
		isRefs := bool[100]

		isLambda := false
		isVarg := false

		SyntaxCompress(tk.Down.Right,LexHVInputVars)

		baseFuncType := TypeFunc^

		if skob.Right.GetValue() == "&"
		{
			isLambda = true
			types[k] = GTypeVoidP
			isRefs[k] = false
			k += 1

			if tp != null and tp is in TypePoint 
				and tp.Base is TypeClass 
				and tp.Base->{TypeClass^}.ToClass.TemplateParent == GCLambda
			{
				lCls := tp.Base->{TypeClass^}.ToClass
				clsFnc := lCls.Constants.Constants[0]->{ConstType^}.Value.Base->{TypeFunc^}
				baseFuncType = FuncTypePopFront(clsFnc)
			}

		}


		iter := skob.Down
		while iter != null
		{
			if iter.GetValue() == "..."
			{
				if iter.Right != null
					return null
				isVarg = true
			}else if iter.GetValue() != ","
			{
				t := Type^

				t = CheckTemplateType(null,iter,resCnsts)
				if t == null
					return null

				if iter.Right?.GetValue() == "&" //TODO switch to ref
				{
					isRefs[k] = true
					iter = iter.Right
				}
				types[k] = t
				if t is in TypeClass or t is in TypeArr
				{
					isRefs[k] = true
				}
				k += 1
			}
			iter = iter.Right
		}

		iter = skob.Right
		ptrSize := 0

		while iter.GetValue() != "->"
		{
			if iter.GetValue() == "^"
				ptrSize += 1
			iter = iter.Right
		}
		iter = iter.Right

		resType := Type^
		resRef := bool

		if iter.GetValue() == "ref"
		{
			resRef = true
			iter = iter.Right
		}
		if baseFuncType != null
		{
			resType = CheckTemplateType(baseFuncType.ResultType,iter,resCnsts)
		}else{
			resType = CheckTemplateType(null,iter,resCnsts)
		}


		if resType == null
			return null
		fType := GetFuncType(k,types[0]&,isRefs[0]&,resType,resRef,isVarg)->{Type^}

		if isLambda
		{
			args := List.{BoxExeConstObj^}
			args.Push(GetConstType(fType.GetPoint()))
			InternalsHatch.Await()
			rl := GCLambda.GetClass(args)
			assert(rl != null)
			args.Destroy()
			return rl.ItType.GetPoint()
		}

		for i : ptrSize
		{
			fType = fType.GetPoint()
		}
		return fType

	}
	if tk.Down?.Right?.GetValue() == "." and tk.Down.Right.Right?.GetValue() == "{}"
	{
		//lType := checkType(null,tk.Down,resCnsts) //TODO: do something with null, so i could use @Tepl.{@arg}
		//if lType == null
		//	return null

		if not (tk.Down is TokenIndent)
		{
			return null
		}
		assert(tk.Down is TokenIndent)

		cls := BoxClass^
		if tp != null
		{
			if not (tp is TypeClass)
				return null
			cls = tp->{TypeClass^}.ToClass
		}

		checkRes := TypeGetGlobalByIndent(tk.Down->{TokenIndent^}.Value)

		if checkRes == null
			checkRes = GetTypeObjByName(tk.Down->{TokenIndent^}.Value)

		if checkRes == null
			return null

		cnsts := List.{BoxExeConstObj^}

		tmpl := BoxClassTemplate^

		if checkRes is TemplateTypeVar
		{
			tmpl = checkRes->{TemplateTypeVar^}.Value
		}
		if checkRes is in ConstVar 
		{
			vr := checkRes->{ConstVar^}
			if vr.Value is ConstTemplateType
			{
				tmpl = vr.Value->{ConstTemplateType^}.Value
			}
		}

		typedefTemplate := TypedefTemplateConst^
		if checkRes is TypedefTemplateVar
		{
			typedefTemplate = checkRes->{TypedefTemplateVar^}.Value
		}

		//assert(tmpl != null)
		if tmpl == null and typedefTemplate == null
			return null

		if cls?.TemplateParent != tmpl?
		{
			return null
		}

		i := 0

		SyntaxCompress(tk.Down.Right.Right,LexHVInputVars)

		itr := tk.Down.Right.Right.Down

		while itr != null
		{
			if itr.GetValue() != ","
			{
				itConst := BoxExeConstObj^
				if cls != null
				{
					if cls.Constants == null or i >= cls.Constants.Constants.Size()
						return null
					itConst = cls.Constants.Constants[i]
				}
				resCnst := CheckTemplateConst(itConst,itr,resCnsts)
				if resCnst == null
				{
					return null
				}
				cnsts.Push(resCnst)
			}
			i += 1
			itr = itr.Right
		}
		if tmpl != null
		{
			if cls?.Constants?.Constants.Size() != cnsts.Size()
				return null
			return tmpl.GetClass(cnsts).ItType
		}
		if typedefTemplate != null
		{
			return typedefTemplate.GetType(cnsts)
		}

			
	}
	if tk.Down?.Right?.GetValue() == "[]"
	{
		if tk.Down.Right.Down == null
		{
			dwnType := Type^
			if tp? is in TypeClass or (tp? is in TypePoint and tp?.Base is in TypeClass)
			{
				tpClass := BoxClass^
				if tp is in TypeClass
				{
					tpClass = tp->{TypeClass^}.ToClass
				}else{
					tpClass = tp.Base->{TypeClass^}.ToClass
				}
				if not tpClass.IsViewType()
					return null

				clItr := tpClass
				while clItr.TemplateParent != ArrayViewTemplate
				{
					assert(clItr.Parents.Size() != 0)
					clItr = clItr.Parents[0] //todo Multi inherence support
				}
				dwnType = clItr.Constants?.Constants[0]->{ConstType^}.Value
			}
			if tp? is TypeArr
			{
				dwnType = tp.Base
			}
			if tp? is TypeArrayView
			{
				dwnType = tp.Base
			}
			dTyp2 := CheckTemplateType(dwnType,tk.Down,resCnsts) //TODO: unnull
			if dTyp2 == null
				return null
			return dTyp2.GetArrayView()

		}

		baseType := Type^
		constVal := BoxExeConstObj^
		if tp != null and tp is TypeArr
		{
			asArr := tp->{TypeArr^}
			baseType = tp.Base
			constVal = GetExeInt(asArr.len)
		}

		dTyp := CheckTemplateType(baseType,tk.Down,resCnsts)
		if dTyp == null
		{
			dwnType := ParseType(tk.Down)
			if dwnType != null
			{
				if obj? is BoxArrayHolder
				{
					for it : obj->{BoxArrayHolder^}.vals
					{
						if not CanExchange(it,dwnType)
							return null
					}
					return dwnType.GetArray(constVal->{BoxExeInt^}.Value)
				}
			}
			return null
		}


		if tk.Down.Right.Down.Right != null
			return null

		cnstVal := CheckTemplateConst(constVal,tk.Down.Right.Down,resCnsts)
		if cnstVal == null
			return null
		if cnstVal is BoxExeInt
		{
			num := cnstVal->{BoxExeInt^}.Value
			return dTyp.GetArray(num)
		}
		return null
	}
	if tk.Down?.Right?.GetValue() == "^"
	{
		nxtType := Type^
		if tp != null
		{
			if not (tp is in TypePoint)
				return null
			nxtType = tp.Base
		}
		resTyp2 := CheckTemplateType(nxtType,tk.Down,resCnsts)
		if resTyp2 == null
			return null
		return resTyp2.GetPoint()
	}
	//assert(false)
	return null
}
CheckTemplateConst := !(BoxExeConstObj^ cnst, Token^ itm,AVLMap.{StringSpan,BoxUnit^} resCnsts) -> BoxExeConstObj^
{

	if itm is TokenIndent
	{
		name := itm->{TokenIndent^}.Value
		
		if resCnsts.Contain(name)
		{
			assert(resCnsts[name] is in BoxExeConstObj)
			return resCnsts[name]->{BoxExeConstObj^}
		}
		//glb := TypeGetGlobalByIndent(name)
		//if glb == null
		//	glb = GetTypeObjByName(name)
		glb := GetTypeObjByName(name)
		if glb == null
			glb = TypeGetGlobalByIndent(name)
		if glb != null
		{
			if glb is ConstVar
				return glb->{ConstVar^}.Value
			if glb is TypeVar
				return GetConstType(glb->{TypeVar^}.Value)
			if glb is in TemplateTypeVar
				return GetConstTemplateType(glb->{TemplateTypeVar^}.Value)
			if glb is ConstType
				return glb->{BoxExeConstObj^}
			itm.EmitError("software error, Globals variables must use consts")
			assert(glb is in BoxExeConstObj)
			return glb->{BoxExeConstObj^}
		}
	}
	if itm is TokenInt
	{
		val := itm->{TokenInt^}.Parsed
		return GetExeInt(val)
	}

	if cnst == null or cnst is ConstType
	{
		inType := Type^
		if cnst != null
			inType = cnst->{ConstType^}.Value
		resTp := CheckTemplateType(inType,itm,resCnsts)
		if resTp != null
			return GetConstType(resTp)
	}

	if itm is TokenTemplateType
	{
		nm := itm->{TokenTemplateType^}.Value[1..0]
		if cnst == null
			return null

		assert(cnst is in BoxExeConstObj)
		if not (cnst is in BoxExeConstObj)
			return null
		val := cnst

		if resCnsts.Contain(nm)
		{
			if resCnsts[nm] != val
			{
				assert(false)
				return null
			}
		}else{
			assert(val != null)
			assert(val is in BoxExeConstObj)
			resCnsts[nm] = val
		}
		return val
	
	}
	//assert(false)
	return null
}
