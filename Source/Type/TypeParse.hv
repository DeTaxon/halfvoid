GetTypeFromIndent := !(Token^ obj,AVLMap.{StringSpan,BoxUnit^}^ resCnsts) -> Type^
{
	assert(obj is TokenIndent)

	asIndent := obj->{TokenIndent^}
	name := asIndent.Value

	if resCnsts?.Contain(name)
	{
		itm := resCnsts^[name]
		if itm is TypeVar
		{
			vr := itm->{TypeVar^}
			return vr.Value
		}
		if itm is ConstType
		{
			vr := itm->{ConstType^}
			return vr.Value
		}
	}


	return GetTypeByName(name)?

	checkRes := TypeGetGlobalByIndent(name)
	if checkRes == null
		return null

	if  checkRes is TypeVar
	{
		return checkRes->{TypeVar^}.Value
	}
	if checkRes is in GlobalVar
		return null
	if checkRes is ConstType
		return checkRes->{ConstType^}.Value
	if checkRes is in BoxFunc
		return null
	if checkRes is in BoxFuncTemplate
		return null
	if checkRes is BoxExeInt
		return null
	if checkRes is TypedefTemplateVar
	{
		tmplVar := checkRes->{TypedefTemplateVar^}
		cnsts6 := List.{BoxExeConstObj^}
		return tmplVar.Value.GetType(cnsts6)
	}
	if checkRes is TaskLocalVarDelayed
		return null
	if checkRes is ConstVar
	{
		cn := checkRes->{ConstVar^}
		if cn.Value is BoxFuncTemplateConst
			return null
	}
	if checkRes is TemplateTypeVar
	{
		obj.EmitError("Got object, but dont know what it is, software error1")
		assert(false)
		return null
	}
	if checkRes != null
	{
		printf("hmm %s %i\n",name,checkRes is ConstVar)
		obj.EmitError("Got object, but dont know what it is, software error2")
	}
	assert(checkRes == null)
	return null
}

ParseType := !(Token^ obj) -> Type^
{
	if obj == null
		return null

	someMap := AVLMap.{StringSpan,BoxUnit^}
	return CheckTemplateType(null,obj,someMap)
}

TypeGetGlobalByIndent := !(StringSpan name) -> BoxUnit^
{
		for it : UnitStack
		{
			if it is TypeVar
			{
				tv := it->{TypeVar^}
				if tv.Name == name
					return it
			}
			if it is ConstVar
			{
				tv := it->{ConstVar^}
				if tv.Name == name
					return it
			}
		}
		for spc : CodeSpaces
		{
			if spc.Globals.Contain(name)
			{
				for glb : spc.Globals[name]
				{
					return glb
				}
			}
			for lb : spc.Modules
			{
				return lb.GetItem(name)?
			}
		}
}
