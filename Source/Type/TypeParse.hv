GetTypeFromIndent := !(Token^ obj,AVLMap.{StringSpan,BoxUnit^}^ resCnsts) -> Type^
{
	assert(obj is TokenIndent)

	asIndent := obj->{TokenIndent^}
	name := asIndent.Value

	if resCnsts?.Contain(name)
	{
		itm := resCnsts^[name]
		if itm is TypeVar
		{
			vr := itm->{TypeVar^}
			return vr.Value
		}
		if itm is in Type
		{
			return itm->{Type^}
		}
	}


	res3 := GetTypeObjByName(name)
	if res3 != null
	{
		return TypeObjToType(res3)?

		if res3 is TypedefTemplateVar
		{
			tmplVar := res3->{TypedefTemplateVar^}
			cnsts6 := List.{BoxExeConstObj^}
			return tmplVar.Value.GetType(cnsts6)
		}else if res3 is TemplateTypeVar{
			return null
		}else{
			assert(false)
		}
	}

	return null
}

ParseType := !(Token^ obj) -> Type^
{
	if obj == null
		return null

	someMap := AVLMap.{StringSpan,BoxUnit^}
	return CheckTemplateType(null,obj,someMap)
}

TypeGetGlobalByIndent := !(StringSpan name) -> BoxUnit^
{
	for it : UnitStack
	{
		if it is TypeVar
		{
			tv := it->{TypeVar^}
			if tv.Name == name
				return it
		}
		if it is ConstVar
		{
			tv := it->{ConstVar^}
			if tv.Name == name
				return it
		}
	}
	for spc : CodeSpaces
	{
		if spc.Globals.Contain(name)
		{
			for glb : spc.Globals[name]
			{
				return glb
			}
		}
		for lb : spc.Modules
		{
			return lb.GetItem(name)?
		}
	}
	return GetItemUser(name)?
}
