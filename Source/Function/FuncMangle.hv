
FuncNameDatabase := AVLSet.{StringSpan}
FuncNameIter := int

GetFuncMangle := !(StringSpan name) -> StringSpan
{
	buff := char[1024] //todo unconst

	if isRegularName(name)
	{
		if FuncNameDatabase.Contain(name)
		{
			itId := FuncNameIter
			FuncNameIter += 1

			memcpy(buff[0]&,name.NonNullStr(),name.Size())
			sprintf(buff[name.Size()]&,"_%i",itId)
			
			spn := GetConstString(buff[0]&)
			FuncNameDatabase.Insert(spn)
			result = spn
		}else{
			FuncNameDatabase.Insert(name)
			result = name
		}
	}else{
		FuncNameIter += 1

		switch name
		{
			case "[]"
				sprintf(buff[0]&,"operator_square_brackets_%i", FuncNameIter)
			case "!="
				sprintf(buff[0]&,"operator_not_equal_%i", FuncNameIter)
			case "=="
				sprintf(buff[0]&,"operator_equal_%i", FuncNameIter)
			case void
				sprintf(buff[0]&,"anon_func_%i", FuncNameIter)
		}

		spn := GetConstString(buff[0]&)
		FuncNameDatabase.Insert(spn)
		result = spn
	}
}

isRegularName := !(StringSpan name) -> bool
{
	for i : name.Size()
	{
		switch name[i]
		{
			case in 'a'..'z'
			case in 'A'..'Z'
			case in '0'..'9'
			case '_'

			case void
				return false
		}
	}
	return true
}

