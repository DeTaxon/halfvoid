
BoxFuncBody := class extend BoxFuncCommon
{
	Attrs := FuncAttributes

	Name := Str
	OutputName := Str

	inps1 := Token^
	resTyp := Token^
	bdy := Token^

	funcLine := BoxExeLine^

	Constants := List.{BoxUnit^}
	ConstVars := List.{BoxUnit^}

	headerHash := u32
	hash := u32

	NamedParametersCount := int
	VariadicName := StringSpan

	DefaultValues := AVLMap.{int,Token^}
	DefaultValues2 := AVLMap.{int,BoxExeObj^}

	ExitLabel := BoxLabel^

	InputVarNames := List.{StringSpan}

	Properties := AVLMap.{Str,FunctionPropertie^}
	BlockedExchange := AVLSet.{int}

	classUnroll := ClassUnroll

	TemplateParent := BoxFuncTemplateBody^

	body := BoxBlock^

	ParentScope := BoxUnit^
	GetParentScope := virtual !() -> BoxUnit^
	{
		return ParentScope
	}

	GetDefaultValuesCount := virtual !() -> int
	{
		return max(DefaultValues.Size(),DefaultValues2.Size())
	}

	GetDefaultValue := virtual !(int i) -> BoxExeObj^
	{
		if not DefaultValues2.Contain(i)
			return null
		return DefaultValues2[i]
	}
	GetDefaultToken := virtual !(int i) -> Token^
	{
		if not DefaultValues.Contain(i)
			return null
		return DefaultValues[i]
	}


	this := !(TypeFunc^ tp, FuncAttributes atrs, HybridQueue.{StringSpan,10} names, Token^ bodyIn) -> void
	{
		Name = "anon"
		SetType(tp)
		Attrs = atrs
		bdy = bodyIn

		if not Attrs.IsAutoResult
		{
			ResultTypeHatch.Emit()
		}

		NamedParametersCount = names.Size()
		InputVarNames.Push(names[^])

		if DebugMode
		{
			funcLine = new BoxExeLine()
			funcLine.ItToken = bdy
			assert(funcLine.ItToken.Line != null)
		}
		ExitLabel = new BoxLabel()
	}
	GetBaseClass := !() -> BoxClass^
	{
		if ParentScope == null
			return null
		if ParentScope is in BoxClass
			return ParentScope->{BoxClass^}
		return null
	}

	ResultTypeHatch := THatch
	GetType := virtual !() -> Type^
	{
		ItTypeHatch.Await()
		ResultTypeHatch.Await()
		return ObjType
	}

	IsParsed := virtual !() -> bool
	{
		return StartedParse
	}

	StartedParse := bool
	StartedParseForced := bool
	ParseBody := virtual !() -> void
	{
		if StartedParse
		{
			ComputeDesire(parseTask?.Desired,CurrentTask.Desired)
			return void
		}
		StartedParse = true
		cls := this&

		createCWork()

		parseTask = TSpawnTask(() ==> [cls] {
			cls.ParseBodyForced()
		})
		ComputeDesire(parseTask.Desired,CurrentTask.Desired)
	}
	ParseBodyForced := virtual !() -> void
	{
		if StartedParseForced
			return void
		StartedParseForced = true

		this.WorkBody()
	}
	GetGoodName := virtual !() -> Str
	{
		echo := TEchoStream

		if ParentScope? is in BoxClassBody
		{
			echo << ParentScope->{BoxClassBody^}.GetGoodName()
			echo << "::"
		}

		echo << Name
		if Constants.Size() != 0
		{
			echo << ".{"
			for it,i : Constants
			{
				if it is not in BoxExeConstObj
				if i != 0
					echo << ","
				it->{BoxExeConstObj^}.PrintDebug(echo)
			}
			echo << "}"
		}
		result = echo.GetStr()
	}
	SetName := virtual !(Str nm) -> void
	{
		Name = nm
	}
	GetName := virtual !() -> Str
	{
		return Name
	}
	SetPrintName := virtual !(Str nm) -> void
	{
		Name = nm
	}
	ForceOutputName := virtual !(Str nm) -> void {
		OutputName = nm
	}
	GetExitLabel := virtual !() -> BoxLabel^
	{
		return ExitLabel
	}


	thisWork := CWorkFuncCompile^
	createCWork := !() -> CWorkFuncCompile^
	{
		return thisWork?

		thisWork = new CWorkFuncCompile(this&)
		WorkBag.AddWork(thisWork)
		return thisWork
	}

	readyState := THatch
	parseTask := Task^
	WorkBody := virtual !() -> void
	{
		if #Var("Tracy") TracyPrintf("Started function %p %s",this&,GetGoodName())
		CurrentFuncWork = createCWork()
		CurrentWork = CurrentFuncWork
		//TracyZone("Parsing function")
		GParsedAllFiles.Await()

		if ParentScope? is in BoxClass
		{
			ParentScope->{BoxClass^}.AwaitTypeState()
			ParentScope->{BoxClass^}.AwaitReadyState()
			ParentScope->{BoxClass^}.AwaitParentStep()
		}

		oldVarsCount := GCVarsInUse
		GCVarsInUse = 0

		oldFunc := CurrentFunc //todo defer  PushStack(CurrentFunc,this&)
		FuncStack.PushFront(this&)
		CurrentFunc = this&

		oldReturns := CurrentReturns
		CurrentReturns = returnHolder&
		
		CurrentReturns.IsAutoResult = Attrs.IsAutoResult
		CurrentReturns.ExitLabel = GetExitLabel()


		if not Attrs.IsAutoResult
		{
			fTy := this.GetType()->{TypeFunc^}
			returnHolder.ResultRef = fTy.ResultRef
			returnHolder.ResultType = fTy.ResultType
		}

		AllFunctions.Push(this&)

		stackSize := UnitStack.Size()

		if stackSize == 0 //todo better way of readding constants
			ScopePutConstants()

		UnitStack.PushFront(this&)

		tp := ObjType->{TypeFunc^}

		for par,i : tp.Params
		{
			name := StringSpan("")
			if i < InputVarNames.Size()
			{
				name = InputVarNames[i]
			}else{
				if i == 0 and Attrs.IsMethod
				{
					name = StringSpan("this")
				}else{
					name = GetParSpan(i)
				}
			}
			newVar := new FuncInputVar(name,par.ItType,true,par.IsRef)
			Params.Push(newVar)
		}
		if not Attrs.IsAutoResult
		{
			CreateResultVar()
			returnHolder.ResultVar = ResultVar 
		}

		UnitStack.PushFront(ConstVars[^])

		OutputName = GetFuncMangle(Name)
		
		CurrentScope = this&

		for par : Params
		{
			UnitStack.PushFront(par)
		}
		
		if ResultVar != null
			UnitStack.PushFront(ResultVar)
		
		body = new BoxBlock
		returnHolder.ReturnBlock = body
		body."this"(bdy)
		body.Work()

		if CurrentFuncWork.IsCanceled
			return void


		if Attrs.IsAutoResult
		{
			CheckReturnStep()
			CreateResultVar()

			fTy := this.GetType()->{TypeFunc^}
			returnHolder.ResultRef = fTy.ResultRef
			returnHolder.ResultType = fTy.ResultType
			returnHolder.ResultVar = ResultVar

			if ResultVar != null
				UnitStack.PushFront(ResultVar)

			ResolveReturnVars()
		}


		YieldWork()
		CreateInputParams()
		LocalVariablesStep()
		
		while UnitStack.Size() > stackSize
		{
			UnitStack.Pop()
		}
		FuncStack.Pop()
		
		CurrentReturns = oldReturns
		CurrentFunc = oldFunc
		GCVarsInUse = oldVarsCount

		ResultTypeHatch.Emit()

		assert(GetType() != null and GetType()->{TypeFunc^}.ResultType != null)
		NormalizeType(GetType().GetPoint())

		if #Var("Tracy") TracyPrintf("Function %p %s parse ended",this&,GetGoodName())
		readyState.Emit()
		parseTask = null
		thisWork = null
	}
	WaitReadyState := virtual !() -> void
	{
		if #Var("Tracy") and not readyState.Emited()
		{
			if #Var("Tracy") TracyPrintf("Task paused on function %p %s",this&,GetGoodName())
			readyState.Await()
			if #Var("Tracy") TracyPrintf("Task Resumed from function %p %s",this&,GetGoodName())
		}else{
			readyState.Await()
		}
	}
	PrintName := virtual !(LLVMWriteContext^ ctx) -> void
	{
		if OutputName->AsString == null or OutputName.Size() == 0
		{
			OutputName = GetFuncMangle(StringSpan("Anon"))
		}
		ctx.writeStream^ << "@" << OutputName
	}
	IsComplete := virtual !() -> bool
	{
		return readyState.Emited()
	}
	PutItConstants := virtual !() -> void
	{
		for it : ConstVars
		{
			UnitStack.PushFront(it)
		}
	}
	
	PrintCode := virtual !(LLVMWriteContext^ ctx) -> void
	{
		if body == null
			return void
		f := ctx.writeStream

		ctx.funcCallCounter = 1
		ctx.currentFunction = this&

		GDebugFuncId = 0
		CurrentFunc = this&

		if DebugMode and funcLine != null
		{
			GDebugFuncId = GetNewId()
			GDebugLineCallId = funcLine.MetaId
		}
		oldScope := GDebugScopeId
		defer GDebugScopeId = oldScope
		GDebugScopeId = GDebugFuncId

		ctx.deferObjects.Destroy()
		ctx.Clear()

		f^ << "define "
		PrintResultType(ctx)
		f^ << " "
		PrintName(ctx)
		f^ << "("
		PrintInputTypes(ctx)
		f^ << ")"
		if DebugMode
			f^ << " !dbg !" << GDebugFuncId
		f^ << "\n"
		f^ << "{\n"

		PrintLocalVars(ctx)
		ResultVar?.PrintCode(ctx)
		ParamsLocalVars[^].PrintCode(ctx)
		Params[^].PrintCode(ctx)

		PrintStackData(ctx)

		PrintYieldCodeParamsGC(ctx)

		PrintYieldCodeGo(ctx)

		rTyp := GetType()->{TypeFunc^}.ResultType
		
		body.PrintCode(ctx)

		YieldPrintFinilize(ctx)

		ExitLabel.PrintGo(ctx)

		ctx.PrintExitPaths()

		ExitLabel.PrintCode(ctx)

		isCmplx := rTyp.IsComplexReturn() and not GetType()->{TypeFunc^}.ResultRef

		if rTyp == GTypeVoid or isCmplx
		{
			f^ << "ret void"
			if DebugMode
				f^ << " , !dbg !" << GDebugLineCallId
			f^ << "\n"
		}else{
			if ResultVar != null
			{
				tmpList := CheckExeDownList
				cl := ResultVar.CreateVarBaseCall()

				cl.PrintPre(ctx)
				f^ << "ret "
				cl.GetType().PrintType(ctx)
				f^ << " "
				cl.PrintUse(ctx)
				if DebugMode
					f^ << " , !dbg !" << GDebugLineCallId
				f^ <<"\n"
			}
		}

		f^ << "}\n"

		if DebugMode
		{
			oldFileId := GDebugFileId //todo fix FileId

			if bdy?.Line?.File != null
			{
				GDebugFileId = bdy.Line.File.fileId
			}

			funcLine.PrintDebugMeta(ctx)
			body.PrintDebugMeta(ctx)
			Params[^].PrintDebugMeta(ctx)
			ResultVar?.PrintDebugMeta(ctx)

			f^ << "!" << GDebugFuncId << " = distinct !DISubprogram(name:\""
			PrintName(ctx)
			f^ << "\","
			f^ << "linkageName:\""
			PrintName(ctx)
			f^ << "\","
			f^ << "scope: !" << GDebugFileId << " , file: !" << GDebugFileId
			f^ << ",type: !" << GetType().MetaId
			if bdy.Line != null
			{
				f^ << ", line:" << bdy.Line.Line
				f^ << ", scopeLine:" << bdy.Line.Line
			}
			f^ << ", unit: !" << cuId
			f^ << ", flags: DIFlagPrototyped"
			f^ << ", spFlags: DISPFlagDefinition"
			//if tmplId != -1
			//	f << ", templateParams:!"<<tmplId
			f^ << ")\n"

			//inlineFunctions[^].PrintDebugMeta(ctx)

			ctx.funcDebugMetas[^].PrintDebugPostFuncMeta(ctx)
			ctx.funcDebugMetas.Destroy()

			GDebugFileId = oldFileId
		}
	}
	GetHeaderHash := virtual !() -> u32
	{
		return headerHash
	}
	GetFullHash := virtual !() -> u32
	{
		return hash
	}
}

GetParSpan := !(int i) -> StringSpan
{
	buff := char[100]
	sprintf(buff[0]&,"%%par%i",i)
	result = GetConstString(buff[0]&)
}

CWorkFuncCompile := class extend CWorkUnit
{
	itFunc := BoxFuncBody^
	itError := Str
	itLine := int
	IsCanceled := bool
	isFailed := bool

	this := !(BoxFuncBody^ b) -> void
	{
		itFunc = b
	}

	DoWork := virtual !() -> CWorkState 
	{
		if isFailed
			return "Failed"
		if IsDone()
			return "Complete"
		return "Failed"
	}
	IsDone := virtual !() -> bool 
	{
		return itFunc.IsComplete()
	}
	GetErrorMessage := virtual !() -> Str 
	{	
		return itError
	}
	SetErrorMessage := virtual !(Str setError) -> void 
	{
		if isFailed
			return void
		itError = setError
		isFailed = true
	}
	ClearError := virtual !() -> void
	{
		itError = null
		isFailed = false
	}
	Cancel := virtual !() -> void
	{
		IsCanceled = true
	}
	GetWorkTask := virtual !() -> Task^ 
	{
		return itFunc.parseTask
	}
}
