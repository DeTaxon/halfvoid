
BoxMultipleResult := class extends BoxExeObj
{
	BaseResult := BoxFuncCall^
	FirstResult := BoxExeObj^
	FirstResultVar := LocalVar^

	MultyVars := AVLMap.{int,LocalVar^}

	GetLocalVar := !(int indx) -> LocalVar^
	{
		if indx == 0
			return FirstResultVar

		return MultyVars[indx]?


		tInt := TokenInt
		tInt.Parsed = indx

		assert(BaseResult.ResultVar != null)
		subCall := innerTryGetFieldCall(BaseResult.ResultVar.CreateVarCall(),tInt&)

		if subCall == null
			return null

		if BaseResult.callObj.GetType()->{TypeFunc^}.GetResult(indx).IsRef
			subCall = new PtrToRef(subCall)
		
		result = ToLocalVar(subCall)
		MultyVars[indx] = result
	}
	IsMem := virtual !() -> bool
	{
		return FirstResult.IsMem() 
	}
	PrintPointPre := virtual !(LLVMWriteContext^ ctx) -> void
	{
		BaseResult?.PrintDefaultUse(ctx)
		FirstResultVar.PrintDefaultUse(ctx)
		MultyVars[^].PrintDefaultUse(ctx)
		FirstResult.PrintPointPre(ctx)
	}
	PrintPointUse := virtual !(LLVMWriteContext^ ctx) -> void
	{
		FirstResult.PrintPointUse(ctx)
	}
	PrintPre := virtual !(LLVMWriteContext^ ctx) -> void
	{
		BaseResult?.PrintDefaultUse(ctx)
		FirstResultVar.PrintDefaultUse(ctx)
		MultyVars[^].PrintDefaultUse(ctx)
		FirstResult.PrintPre(ctx)
	}
	PrintUse := virtual !(LLVMWriteContext^ ctx) -> void
	{
		FirstResult.PrintUse(ctx)
	}

}
