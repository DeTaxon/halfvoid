
BoxMultipleResult := class extends BoxExeObj
{
	BaseResult := BoxFuncCall^

	MultyVars := AVLMap.{int,LocalVar^}

	VarsCount := int

	this := !(BoxFuncCall^ funcCall) -> void
	{
		BaseResult = funcCall
		FirstResultVar := GetLocalVar(0)
		ObjType = FirstResultVar.CreateVarCall().GetType()

		assert(BaseResult.GetType() is in TypeClass)

		tpl := BaseResult.GetType()->{TypeClass^}.ToClass
		VarsCount = tpl.GetLocalFieldsCount()

		printf("yep %i\n",VarsCount)
	}

	ResultCount := !() -> int
	{
		return VarsCount
	}

	GetLocalVar := !(int indx) -> LocalVar^
	{
		return MultyVars[indx]?


		tInt := TokenInt
		tInt.Parsed = indx

		assert(BaseResult.ResultVar != null)
		subCall := innerTryGetFieldCall(BaseResult.ResultVar.CreateVarCall(),tInt&)

		if subCall == null
			return null

		if BaseResult.callObj.GetType()->{TypeFunc^}.GetResult(indx).IsRef
			subCall = new PtrToRef(subCall)
		
		result = ToFakeLocalVar(subCall)
		MultyVars[indx] = result
	}
	IsMem := virtual !() -> bool
	{
		return true
	}
	PrintPointPre := virtual !(LLVMWriteContext^ ctx) -> void
	{
		BaseResult?.PrintDefaultUse(ctx)
		MultyVars[^].PrintDefaultUse(ctx)
	}
	PrintPointUse := virtual !(LLVMWriteContext^ ctx) -> void
	{
		GetLocalVar(0).CreateVarCall().PrintPointUse(ctx)
	}
	PrintPre := virtual !(LLVMWriteContext^ ctx) -> void
	{
		BaseResult?.PrintDefaultUse(ctx)
		MultyVars[^].PrintDefaultUse(ctx)
	}
	PrintUse := virtual !(LLVMWriteContext^ ctx) -> void
	{
		GetLocalVar(0).CreateVarCall().PrintUse(ctx)
	}

}
