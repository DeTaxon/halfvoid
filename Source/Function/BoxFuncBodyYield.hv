AppendClass BoxFuncBody
{
	Yields := List.{BoxYield^}
	YieldStart := BoxLabel^
	YieldStateInt := LocalVar^
	//YieldTupleVar := ParamFunc^
	YieldFinilize := BoxExeObj^
    
	Params := HybridQueue.{FuncInputVar^,8}
	ParamsLocalVars := HybridQueue.{LocalVar^,8}

	ResultVar := LocalVar^

	PutYieldState := !(BoxYield^ yld) -> int
	{
		if YieldStart == null
			YieldStart = new BoxLabel()

		res := Yields.Size() + 1
		Yields.Push(yld)
		return res
	}
	IsGenerator := !() -> bool
	{
		return Yields.Size() != 0
	}

	CreateInputParams := !() -> void
	{
		for it, i : Params
		{
			getVar := new GetFuncInputVar(it,i,it.GetBaseType())

			if it.NeedMemUse
			{
				locVar := new LocalVar(it.itName,it.GetBaseType(),true,it.isReference)
				this.LocalVars.Push(locVar)

				objs := CheckExeDownList
				objs.Push(locVar.proxy&)
				objs.Push(getVar)
				setVar := CreateFuncCall(StringSpan("="),objs)
				assert(setVar != null)
				it.createVar.Push(setVar)
				it.SetCall(locVar.proxy&)

				ParamsLocalVars.Push(locVar)
			}else{
				it.createVar.Push(new FuncLocalDebugInfoValue(it.proxy&,it))
				it.SetCall(getVar)
			}
		}
	}
	GetYieldStateParam := !() -> LocalVar^
	{
		if YieldStateInt == null
		{
			assert(CurrentFunc == this&)
			YieldStateInt = new LocalVar(StringSpan(".anon"),GTypeInt,true,false)
		}
		return YieldStateInt
	}
	GetYieldTuple := !() -> BoxClass^
	{
		tps := List.{Type^}

		if not IsGenerator()
			return GetTuple(tps,true)
		
		for it,i : LocalVars
		{
			tps.Push(it.GetBaseType())
		}
		return GetTuple(tps,true)
	}
	YieldWork := !() -> void
	{
		if Yields.Size() == 0
			return void
		
		objs := CheckExeDownList
		cnsts := List.{BoxExeConstObj^}

		objs.Push(YieldStateInt.CreateVarCall())
		objs.Push(GetExeInt(-1))
		YieldFinilize = CreateFuncCall(StringSpan("="),objs,cnsts)

	}
	PrintYieldCodeParams := !(LLVMWriteContext^ ctx) -> void
	{
		if YieldStateInt == null
			return void

		YieldStateInt.PrintCode(ctx)
	}
	PrintYieldCodeParamsGC := !(LLVMWriteContext^ ctx) -> void
	{
		if YieldStateInt == null
			return void

	}
	PrintYieldCodeGo := !(LLVMWriteContext^ ctx) -> void
	{
		if YieldStateInt == null
			return void
		f := ctx.writeStream

		cl := YieldStateInt.CreateVarCall() //todo??
		cl.PrintPre(ctx)

		f^ << "switch i32 "
		cl.PrintUse(ctx)
		f^ << ", label "
		YieldStart.PrintLabel(ctx)
		f^ << "["
		for it,i : Yields
		{
			c:= i + 1
			f^ << "i32 " << c << ", label " 
			it.GetLabel().PrintLabel(ctx)
			f^ << "\n"
		}
		//f << "i32 " << (SLambdaFinishYieldValue - 1) << ", label %QuitFunc\n" TODO: error function
		f^ << "]"
		if DebugMode
			f^ << ", !dbg !" << GDebugLineCallId
		"\n"

		YieldStart?.PrintCode(ctx)
	}
	YieldPrintFinilize := !(LLVMWriteContext^ ctx) -> void
	{
		if YieldStateInt == null
			return void
		assert(YieldFinilize != null)
		YieldFinilize.PrintDefaultUse(ctx)
	}
}
