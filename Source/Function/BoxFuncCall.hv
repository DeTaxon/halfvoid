globalIdIter := 0
GetNewId := !() -> int
{
	globalIdIter += 1
	return globalIdIter
}

BoxFuncCall := class extend BoxExeObj
{
	callObj := BoxFunc^
	downs := ExeDownList
	resId := int
	unrefResId := int

	ResultVar := LocalVar^
	ExtraWork := List.{BoxExeObj^}

	this := !(BoxFunc^ fnc) -> void
	{
		callObj = fnc
		assert(callObj != null)

		if callObj is in BoxFunc
			callObj->{BoxFunc^}.ParseBody()

		empty := CheckExeDownList
		CheckInputs(fnc.GetType()->{TypeFunc^},fnc,empty)
	}
	this := !(BoxFunc^ fnc, BoxExeObj^[] objs) -> void
	{
		callObj = fnc
		assert(callObj != null)

		if callObj is in BoxFunc
			callObj->{BoxFunc^}.ParseBody()

		CheckInputs(fnc.GetType()->{TypeFunc^},fnc,objs)
	}
	CheckInputs := !(TypeFunc^ fType,BoxFunc^ fnc, BoxExeObj^[] objs) -> void
	{
		itType := NormalizeFuncType(fType)

		if fType.ResultType.IsComplexReturn() and not fType.ResultRef
		{
			ResultVar = new LocalVar(StringSpan("anon"),fType.ResultType,true,false)
			CurrentFunc.AddLocalVar(ResultVar)
			downs.Push(ResultVar.CreateVarCall())

			if this& is BoxFuncCall
			{
				this&->SetType(BoxFuncComplexCall)
			}else if this& is BoxFuncPointerCall {
				this&->SetType(BoxFuncPointerComplexCall)
			}else{
				assert(false)
			}
		}

		diffCount := itType.Params.Size() - fType.Params.Size()

		downs.Push(objs[^])

		for par,i : itType.Params
		{
			if i >= downs.Size()
			{
				assert(fnc != null)
				defToken := fnc.GetDefaultToken(i - diffCount)
				assert(defToken != null)

				if defToken.GetValue() == "static"
				{
					if par.ItType != GTypeVoid
					{
						assert(par.IsRef)
						glVar := CreateGlobalVar(StringSpan("anon"),par.ItType,false)
						varCall := glVar.proxy&
						downs.Push(varCall)
					}else{
						downs.Push(GVoidObj)
					}
					defToken = defToken.Right
				}else{
					newCall := TryGetExeCall(defToken)
					if newCall == null
						defToken.EmitError("Could not execute default token, called function is incorrect")
					downs.Push(newCall)
				}
				
				continue
			}

			newObj := downs[i]
			assert(downs[i] != null)
			if downs[i].GetType() != par.ItType
			{
				exchangeLimit := 50
				while true
				{
					pre := newObj
					newObj = GetExchange(newObj,par.ItType,par.IsRef)
					exchangeLimit -= 1
					if newObj == null or exchangeLimit <= 0
					{
						tmpl := TEchoStream
						tmpl << "Could not exchange type from "
						//downs[i].GetType().PrintDebugName(tmpl&)
						tmpl << downs[i].GetType().GetBADStr().Str()
						tmpl << " to "
						//par.ItType.PrintDebugName(tmpl&)
						tmpl << par.ItType.GetBADStr().Str()
						tmpl << "\n"
						tmpl << "Expect ref " << (par.IsRef ?: "yes" : "no") << "\n"
						c := tmpl.GetString()
						c.IncRef() //TODO memory leak
						if CurrentLine?.ItToken != null
						{
							CurrentLine.ItToken.EmitError(c.Str())
						}else{
							printf("%s",c.Str())
							exit(-1)
						}
					}
					if newObj.GetType() == par.ItType
						break
				}
				downs[i] = newObj
			}
			downs[i] = newObj
		}
		if downs.Size() > itType.Params.Size()
		{
			assert(fType.IsVargs)

			for i : downs.Size()
			{
				if i < fType.Params.Size()
					continue
				tp := downs[i].GetType()
				if IsInt(tp) and not (tp == GTypeU64 or GTypeS64 == tp)
				{
					if IsUInt(tp)
					{
						downs[i] = GetExchange(downs[i],GTypeU64)
					}else{
						downs[i] = GetExchange(downs[i],GTypeS64)
					}
				}else if tp == GTypeFloat
				{
					downs[i] = GetExchange(downs[i],GTypeDouble)
				}else if tp is in TypeClass
				{
					stTyp := GTypeChar.GetPoint()
					while downs[i] != null and downs[i].GetType() != stTyp
					{
						downs[i] = GetExchange(downs[i],stTyp)
					}
					if downs[i] == null
					{

						if CurrentLine?.ItToken != null
						{
							CurrentLine.ItToken.EmitError("Passed class to c-variadic function, transfer function not found\n")
						}else{
							printf("Passed class to c-variadic function, transfer function not found\n")
							exit(-1)
						}
					}
				}
			}
		}

		for par,i : itType.Params
		{
			if i >= downs.Size()
				break
			if par.IsRef
			{
				downs[i].NotifyMemUse()
			}
		}

		if targetLinux
		{
			leftFloats := 8
			leftInts := 6
			needRework := false
			k := 0
			types4 := Type^[100]
			isRefs4 := bool[100]

			newDown := ExeDownList
			preVars := List.{LocalVar^}
			preRes := ExeDownList

			for it,i : fType.Params
			{
				if it.IsRef
				{
					types4[k] = it.ItType
					isRefs4[k] = true
					newDown.Push(downs[i])
					k += 1
					leftInts -= 1
				}else if it.ItType is TypeClass
				{
					cls := it.ItType->{TypeClass^}.ToClass
					if cls.Fields.Size() <= 4
					{
						floats := 0
						ints := 0
						others := 0

						for fld : cls.Fields
						{
							if fld.Value == GTypeFloat
							{
								floats += 1
							}else if IsInt(fld.Value)
							{
								ints += 1
							}else{
								others += 1
							}
						}

						if floats <= leftFloats and ints <= leftInts and others == 0
						{
							needRework = true
							leftFloats -= floats
							leftInts -= floats

							newLocalVar := ToLocalVar(,downs[i])
							preVars.Push(newLocalVar)

							if floats != 0 and ints == 0
							{
								oo := floats
								fInd := 0
								while oo >= 2
								{
									gt := newLocalVar.proxy&->{BoxExeObj^}
									gt = GetExchange2(gt,GTypeVec2f.GetPoint(),false)
									gt = GetElementRetrive(gt,GetExeInt(fInd))
									newDown.Push(gt)
									oo -= 2
									types4[k] = GTypeVec2f
									k += 1
									fInd += 1
								}
								if oo != 0
								{
									gt := newLocalVar.proxy&->{BoxExeObj^}
									gt = GetExchange2(gt,GTypeFloat.GetPoint(),false)
									gt = GetElementRetrive(gt,GetExeInt(fInd*2))
									newDown.Push(gt)
									types4[k] = GTypeFloat
									k += 1
								}
							}else if ints != 0 and floats == 0
							{
								typSize := downs[i].GetType().GetSize()

								oo := typSize
								fInd := 0
								while oo != 0
								{
									if oo >= 8
									{
										gt := newLocalVar.proxy&->{BoxExeObj^}
										gt = GetExchange2(gt,GTypeU8.GetPoint(),false)
										gt = GetElementRetrive(gt,GetExeInt(fInd))
										gt = new UnrefFuncCall(gt)
										gt = GetExchange2(gt,GTypeU64.GetPoint(),false)
										gt = new PtrToRefFuncCall(gt)
										newDown.Push(gt)
										types4[k] = GTypeU64
										k += 1
										oo -= 8
										fInd += 8
									}else if oo >= 4 {
										gt := newLocalVar.proxy&->{BoxExeObj^}
										gt = GetExchange2(gt,GTypeU8.GetPoint(),false)
										gt = GetElementRetrive(gt,GetExeInt(fInd))
										gt = new UnrefFuncCall(gt)
										gt = GetExchange2(gt,GTypeInt.GetPoint(),false)
										gt = new PtrToRefFuncCall(gt)
										newDown.Push(gt)
										types4[k] = GTypeInt
										k += 1
										oo -= 4
										fInd += 4
									}else {
										assert(false)
									}
								}
							}else{
								assert(false)
							}
							
						}else{
							types4[k] = it.ItType
							newDown.Push(downs[i])
							k += 1
						}
					}
				}else{
					types4[k] = it.ItType
					newDown.Push(downs[i])
					k += 1
					leftInts -= 1
				}
			}
			if needRework //and this& is BoxFuncPointerCall
			{
				assert(this& is BoxFuncPointerCall)

				asPtr := this&->{BoxFuncPointerCall^}

				newFunc := GetFuncType(k,types4[0]&,isRefs4[0]&,fType.ResultType,fType.ResultRef,fType.IsVargs)
				asPtr.ItPtrFunc = GetExchange2(asPtr.ItPtrFunc,newFunc.GetPoint(),false)
				asPtr.PreCalls.Push(preRes[^])
				asPtr.PreVars.Push(preVars[^])
				asPtr.downs.Destroy()
				asPtr.downs.Push(newDown[^])
			}
		}
		if targetWindows
		{
			leftVars := 4
			needRework := false
			k := 0
			types4 := Type^[100]
			isRefs4 := bool[100]

			newDown := ExeDownList
			preRes := ExeDownList

			for it,i : fType.Params
			{
				if it.IsRef
				{
					types4[k] = it.ItType
					isRefs4[k] = true
					newDown.Push(downs[i])
					k += 1
					leftVars -= 1
				}else if it.ItType is TypeClass and leftVars > 0 and it.ItType.GetSize() <= 8
				{
					needRework = true

					dObj := BoxExeObj^
					dObj = new UnrefFuncCall(downs[i])
					dObj = GetExchange2(dObj,GTypeU64.GetPoint(),false)
					assert(dObj != null)
					dObj = new PtrToRef(dObj)

					types4[k] = GTypeU64
					newDown.Push(dObj)
					k += 1
					leftVars -= 1

				}else{
					types4[k] = it.ItType
					newDown.Push(downs[i])
					k += 1
					leftVars -= 1
				}
			}
			if needRework //and this& is BoxFuncPointerCall
			{
				assert(this& is BoxFuncPointerCall)

				asPtr := this&->{BoxFuncPointerCall^}

				newFunc := GetFuncType(k,types4[0]&,isRefs4[0]&,fType.ResultType,fType.ResultRef,fType.IsVargs)
				asPtr.ItPtrFunc = GetExchange2(asPtr.ItPtrFunc,newFunc.GetPoint(),false)
				asPtr.PreCalls.Push(preRes[^])
				asPtr.downs.Destroy()
				asPtr.downs.Push(newDown[^])
			}
		}
	}
	NotifyMemUse := virtual !() -> void
	{
		callObj.NotifyMemUse()
	}
	GetType := virtual !() -> Type^
	{
		assert(callObj != null)
		return callObj.GetType()->{TypeFunc^}.ResultType
	}

	IsMem := virtual !() -> bool
	{
		return callObj.IsMem()
	}

	PassedFuncCall := !(LLVMWriteContext^ ctx, int passedId)  -> void
	{
		callObj.PrintFuncCall(ctx,passedId,0,downs)
	}
	PassedFuncResult := !(LLVMWriteContext^ ctx, int passedId)  -> void
	{
		callObj.PrintResultObj(ctx,passedId,-1)
	}

	PrintFuncUse := virtual !(LLVMWriteContext^ ctx) -> void
	{
		ResultVar?.PrintCode(ctx)
		callObj.PrintFuncCall(ctx,resId,0,downs)
		ExtraWork[^].PrintDefaultUse(ctx)
	}
	PrintFuncResult := virtual !(LLVMWriteContext^ ctx) -> void
	{
		callObj.PrintResultObj(ctx,resId,-1)
	}
	PrintPointPre := virtual !(LLVMWriteContext^ ctx) -> void
	{
		resId = ctx.GetNewId()
		PrintFuncUse(ctx)
	}
	PrintPointUse := virtual !(LLVMWriteContext^ ctx) -> void
	{
		PrintFuncResult(ctx)
	}
	PrintPre := virtual !(LLVMWriteContext^ ctx) -> void
	{
		if IsMem()
		{
			unrefResId = ctx.GetNewId()
			PrintUnrefObj(ctx,unrefResId,this&)
		}else{
			resId = ctx.GetNewId()
			PrintFuncUse(ctx)
		}
	}
	PrintUse := virtual !(LLVMWriteContext^ ctx) -> void
	{
		if IsMem()
		{
			ctx.writeStream^ << "%TUnref" << unrefResId
		}else{
			PrintFuncResult(ctx)
		}
	}
	PrintDebugMeta := virtual !(LLVMWriteContext^ ctx) -> void
	{
		downs[^].PrintDebugMeta(ctx)
		ExtraWork[^].PrintDebugMeta(ctx)
	}
}
BoxFuncComplexCall := class extend BoxFuncCall
{
	IsMem := virtual !() -> bool
	{
		return true
	}
	PrintPointUse := virtual !(LLVMWriteContext^ ctx) -> void
	{
		downs[0].PrintPointUse(ctx)
	}
}
BoxFuncPointerCall := class extend BoxFuncCall
{
	PreVars := List.{LocalVar^}
	PreCalls := List.{BoxExeObj^}
	ItPtrFunc := BoxExeObj^
	this := !(BoxExeObj^ ptrVal,BoxExeObj^[] objs) -> void
	{
		ItPtrFunc = ptrVal
		CheckInputs(ptrVal.GetType().Base->{TypeFunc^},null,objs)
	}
	GetType := virtual !() -> Type^
	{
		ft := ItPtrFunc.GetType().Base->{TypeFunc^}
		return ft.ResultType
	}
	PrintFuncUse := virtual !(LLVMWriteContext^ ctx) -> void
	{
		ResultVar?.PrintCode(ctx)
		PreVars[^].PrintCode(ctx)
		PreCalls[^].PrintDefaultUse(ctx)
		PrintFuncCallCommon(ctx,ItPtrFunc,resId,downs)
	}
	PrintFuncResult := virtual !(LLVMWriteContext^ ctx) -> void
	{
		PrintFuncCallResultCommon(ctx,ItPtrFunc.GetType().Base->{TypeFunc^},resId)
	}
	NotifyMemUse := virtual !() -> void
	{
	}
	IsMem := virtual !() -> bool
	{
		return ItPtrFunc.GetType().Base->{TypeFunc^}.ResultRef
	}
}
BoxFuncPointerComplexCall := class extend BoxFuncPointerCall
{
	IsMem := virtual !() -> bool
	{
		return true
	}
	PrintPointUse := virtual !(LLVMWriteContext^ ctx) -> void
	{
		downs[0].PrintPointUse(ctx)
	}
}
