
BoxFuncTemplateBody := class extend BoxFuncTemplate
{
	Attrs := FuncAttributes

	inps1 := Token^
	resTyp := Token^
	bdy := Token^
	RunToken := Token^
	cns := Token^

	headerCheckHatch := THatch

	Name := Str

	headerHash := u32
	hash := u32

	hData := FunctionHeaderInfo

	TempPrefix := TemplatePrefix
	Properties := AVLMap.{Str,Token^}
	TemplateProperties := AVLMap.{Str,List.{FunctionPropertie^}}
	BlockedExchange := AVLSet.{int}

	sState := StackState

	this := !(FuncAttributes atrs,Token^ brackets1,Token^ brackets2,Token^ constToken, Token^ resToken,Token^ bodyIn, Token^ runToken) -> void
	{
		assert(brackets2 == null)//not implemented
		Attrs = atrs
		inps1 = brackets1
		resTyp = resToken
		cns = constToken
		bdy = bodyIn
		RunToken = runToken
		ObjType = GTypeNone

		if resTyp == null
			Attrs.IsAutoResult = true

		sState.Save()
		ParentScope = CurrentScope
	}

	ReloadFunctions := !(HotloadContext^ ctx,PFunctionParser^ headerData,Blob^ fileData) -> void
	{
		if headerData != null
		{
			Attrs = headerData.Attr
			inps1 = headerData.brackets
			resTyp = headerData.resultToken
			cns = headerData.constToken
			bdy = headerData.bodyToken

			if resTyp == null
				Attrs.IsAutoResult = true

			headerHash = headerData.ComputeHeaderHash(fileData)
			hash = headerData.ComputeHash(fileData)
		}

		for it : AllFuncs[^]
		{
			if it is not in BoxFuncBody
				continue

			it->{BoxFuncBody^}.ReloadFunction(ctx,headerData)
		}
	}
	GetDefaultValuesCount := virtual !() -> int 
	{
		StartParseHeader()
		return hData.DefaultValues.Size() 
	}


	ParentScope := BoxUnit^
	GetParentScope := virtual !() -> BoxUnit^
	{
		return ParentScope
	}

	startedParse := bool
	StartParseHeader := !() -> void
	{
		if startedParse
		{
			headerCheckHatch.Await()
		}else{
			startedParse = true

			forwardCall := false

			stk := CurrentTask.GetStackUsage()
			if stk.Free() > 1000000 and not DisableScary
			{
				forwardCall = true
			}
			
			if forwardCall
			{
				oldStack := StackState
				oldStack.Save()
				defer oldStack.Load()

				ParseHeader()
				headerCheckHatch.Emit()
			}else{
				TSpawnTask(() ==> {
					ParseHeader()
					headerCheckHatch.Emit()
				})
				headerCheckHatch.Await()
			}

		}
		
	}

	SetName := virtual !(Str name) -> void
	{
		Name = name
	}
	ParseHeader := virtual !() -> void
	{
		sState.Load()

		if Attrs.IsAutoResult
			hData.IsAutoResult = true
		

		if Attrs.IsLambda
		{
			hData.Types.Emplace(StringSpan(""),GTypeVoidP,false,null->{Token^})
			hData.IsAutoResult = true
		}else{
			if CurrentScope is in BoxClass //TODO allow static functions
			{
				cls := CurrentScope->{BoxClass^}
				hData.Types.Emplace(StringSpan("this"),cls.ItType,true,null->{Token^})
				Attrs.IsMethod = true
			}
		}
		hData.ParseHeader(inps1,resTyp)


		if cns != null
		{
			TempPrefix.CheckToken(cns)
		}
	}
	ToFuncType := virtual !(BoxExeObj^[] objs,BoxExeConstObj^[] consts) -> TypeFunc^
	{
		StartParseHeader()

		minArgs := hData.Types.Size()
		maxArgs := hData.Types.Size()
		
		minArgs -= GetDefaultValuesCount()

		if hData.IsVariadic
			maxArgs = 2000000 //INT_MAX
		
		if objs.Size() < minArgs or objs.Size() > maxArgs
			return null
		if not TempPrefix.CheckByCount(consts.Size())
			return null

		fInTypes := Type^[100]
		isRefs := bool[100]

		datas := HybridQueue.{Tuple.{BoxExeObj^,Type^,bool},10}

		for it,i  : objs
		{
			if it? is BoxArrayHolder and i < hData.Types.Size() and it->{BoxArrayHolder^}.GetArraySize() == 0
			{
				if hData.Types[i].ItType == null
					return null
			}
		}


		failed := false
		addObjType := (int i) ==> {
			if objs[i] == null
			{
				failed = true
			} else if objs[i] is BoxArrayHolder
			{
				ar := objs[i]->{BoxArrayHolder^}

				if ar.GetArraySize() == 0
				{
					assert(hData.Types[i].ItType != null)
					datas.Emplace(objs[i],hData.Types[i].ItType,hData.Types[i].IsRef)
					assert(hData.Types[i].ItType? is in Type)
				}else{
					datas.Emplace(objs[i],ar.GetArrayType(),true)
				}//TODO better exchange
			}else{
				datas.Emplace(objs[i],objs[i].GetType(),objs[i].IsMem())
				assert(objs[i].GetType() is in Type)
			}
		}

		if objs.Size() > hData.Types.Size()
		{
			for i : objs.Size()
			{
				addObjType(i)
			}
		}else{
			for i : hData.Types.Size()
			{
				if i < objs.Size()
				{
					addObjType(i)
				}else{
					datas.Emplace(null->{BoxExeObj^},hData.Types[i].ItType,hData.Types[i].IsRef)
					assert(hData.Types[i].ItType? is in Type)
				}
			}
		}
		if failed
			return null

		resConsts := AVLMap.{Str,BoxUnit^}
		return checkTypes(datas,consts,resConsts)
	}
	
	CreateFunc := virtual !(TypeFunc^ tp, BoxExeConstObj^[] consts) -> BoxFunc^
	{
		StartParseHeader()


		StackCheckpoint()
		ScopePutConstants()

		datas := HybridQueue.{Tuple.{BoxExeObj^,Type^,bool},10}

		for i : tp.Params.Size()
		{
			datas.Emplace(null->{BoxExeObj^},tp.Params[i].ItType,tp.Params[i].IsRef)
		}
		resConsts := AVLMap.{Str,BoxUnit^}
		checkTypes(datas,consts,resConsts)

		if Name == "SetVariant"
		{
			checkTypes(datas,consts,resConsts)
		}


		names := HybridQueue.{StringSpan,10}
		names.Push(hData.Types[^].Name)
		newFunc := new BoxFuncBody(tp,Attrs,names,bdy)

		newFunc.VariadicName = hData.VariadicName
		newFunc.SetPrintName(Name)
		newFunc.DefaultValues[ind] = hData.DefaultValues[^ind]
		newFunc.ParentScope = ParentScope
		newFunc.TemplateParent = this&

		newFunc.headerHash = this.headerHash
		newFunc.hash = this.hash

		TempPrefix.PopulateVars(resConsts,newFunc.ConstVars)
		ConstMapToList(resConsts,newFunc.ConstVars) //TODO for stupid reasons it's doubled

		CheckPropertieAutoCast(this&,newFunc)

		newFunc.BlockedExchange.Insert(this.BlockedExchange[^])

		return newFunc
	}
	checkTypes := !(HybridQueue.{Tuple.{BoxExeObj^,Type^,bool},10} objs, BoxExeConstObj^[] consts, AVLMap.{Str,BoxUnit^} resCnsts) -> TypeFunc^
	{
		//TODO , multi round check

		//TODO completly replace stack, not add


		StackCheckpoint()
		ScopePutConstants()

		fTyps := Type^[100]
		iRef := bool[100]

		inObjs := HybridQueue.{BoxExeObj^,20}
		inObjs.Push(objs[^].0)
		inObjsTypes := HybridQueue.{Type^,20}
		inObjsTypes.Push(objs[^].1)
		inTokens := HybridQueue.{Token^,20}
		inTokens.Push(hData.Types[^].ItToken)
		if not TempPrefix.CheckConsts(consts,resCnsts,inObjs,inObjsTypes,inTokens)
			return null

		for i : objs.Size()
		{
			if i >= hData.Types.Size()
			{
				assert(hData.IsVariadic)
				fTyps[i] = objs[i].1
			}else{
				iRef[i] = hData.Types[i].IsRef
				if hData.Types[i].ItType != null
				{
					fTyps[i] = hData.Types[i].ItType
				}else if hData.Types[i].ItToken != null
				{
					fTyps[i] = checkType(objs[i].0,objs[i].1,hData.Types[i].ItToken,resCnsts)
				}
			}
		}


		for i : objs.Size()
		{
			if fTyps[i] == null
				return null
			if IsComplexType(fTyps[i])
				iRef[i] = true
		}
		resTypeT := hData.ResultType.ItType

		rTokenTree := hData.ResultType.ItToken
		if rTokenTree?.GetValue() == "ref"
		{
			rTokenTree = rTokenTree.Right
		}

		resTypeT = checkType(null,null,rTokenTree,resCnsts)
		if resTypeT == null and rTokenTree != null
		{
			CurrentWork?.SetErrorMessage(rTokenTree.MakeError("Can not get result value"))
			return null
		}
		return GetFuncType(objs.Size(),ArraySpan.{Type^}(fTyps[0]&,objs.Size()),ArraySpan.{bool}(iRef[0]&,objs.Size()),resTypeT,hData.ResultType.IsRef,hData.IsVargs)
	}
	checkType := !(BoxExeObj^ obj,Type^ tp,Token^ tk, AVLMap.{Str,BoxUnit^} resCnsts) -> Type^
	{
		return CheckTemplateType(obj,tp,tk,resCnsts)
	}
	AwaitHeaderParse := !() -> void
	{
		StartParseHeader()
		headerCheckHatch.Await()
	}

	IsOneFunc := virtual !() -> bool
	{
		StartParseHeader()

		if not hData.IsOneFunc()
			return false
		if not TempPrefix.IsOneOption()
			return false
		return true
	}
	GetOneFunc := virtual !() -> BoxFunc^
	{
		StartParseHeader()
			
		resFuncTyp := hData.CreateFuncType()
		cnsts := List.{BoxExeConstObj^}
		return GetFuncByType(resFuncTyp,cnsts)
	}
	CheckPriority := virtual !(TypeFunc^ tp,BoxExeObj^[] objs,BoxExeConstObj^[] consts) -> int
	{
		if TemplateProperties.Contain("#FilterBeConst")
		{
			for it : TemplateProperties["#FilterBeConst"]
			{
				prop := it->{FilterBeConstPropertie^}
				if prop.InputIndex < objs.Size()
				{
					if prop.ExpectBeConst != objs[prop.InputIndex].IsConst
					{
						return CmpNoExchange
					}
				}
			}
		}
		return CmpFuncPriority(tp,objs,GetDefaultValuesCount(),BlockedExchange)
	}
	GetHeaderHash := virtual !() -> u32
	{
		return headerHash
	}
	GetFullHash := virtual !() -> u32
	{
		return hash
	}
}
