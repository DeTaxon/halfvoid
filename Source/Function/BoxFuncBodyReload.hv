AppendClass BoxFuncBody
{
	ClearFunction := !() -> void
	{
		StartedParse = false
		StartedParseForced = false

		//ResultTypeHatch.Reset()
		readyState.Reset()

		//ExitLabel = null
		
		WorkBag.works.DeleteIf(x ==> [c = this&]{
			if x is not CWorkFuncCompile
				return false
			return x->{CWorkFuncCompile^}.itFunc == c
		})

		Yields.Destroy()
		YieldStart = null
		YieldStateInt = null
		YieldFinilize = null

		Params.Destroy()
		ParamsLocalVars.Destroy()

		ResultVar = null

		returnHolder.Reset()
		printResultVar = false

		LocalVars.Destroy()
		LocalVarsDeferChecks.Destroy()
		LocalVarsToDeferGuard.Destroy()

		body = null
		readyState.Reset()

		DB_TypeSizeUsage.Key.RemoveAll(this&)
		DB_FieldUsage.Key.RemoveAll(this&)
		DB_LocalVarUsage.Key.RemoveAll(this&)
	}

	ReloadFunction := !(HotloadContext^ ctx,PFunctionParser^ headerData) -> void
	{
		if headerData != null
		{
			inps1 = headerData.brackets
			resTyp = headerData.resultToken
			bdy = headerData.bodyToken
		}

		ClearFunction()
		if StartedParse or StartedParseForced
		{
			ParseBody()
			ctx.ChangedFunctions.Push(this&)
		}
	}
	Recompile := !() -> void
	{
		ClearFunction()
		ParseBody()
	}
}
