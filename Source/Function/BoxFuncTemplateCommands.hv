

CheckTemplateBodyCommandsSingle := !(BoxFuncTemplateBody^ fnc, Token^ cmd) -> void
{
	if cmd.Down? is TokenIndent
	{
		name := cmd.Down->{TokenIndent^}.Value
		switch name
		{
		case "#Mark"
			if cmd.Down.Right?.GetValue() == "()"
			{
				skb := cmd.Down.Right
				SyntaxCompress(skb,LexHVFileRoot)
				if skb.Down?.Right == null and skb.Down is TokenString
				{
					markValue := skb.Down->{TokenString^}.Value->AsString
					MarkObject(markValue,fnc)
				}else{
					//TODO emit error
				}
			}else{
				//TODO emit error
			}
		case "#TemplateResist"
			fnc.Properties["#TemplateResist"] = null
		case "#AddAutoCast"
			fnc.Properties["#AddAutoCast"] = cmd
		case "#ExpectExactType"
			if cmd.Down?.Right?.GetValue() == "()"
			{
				intValue := TryGetExeCall(cmd.Down.Right.Down)
				if intValue? is BoxExeInt
				{
					fnc.BlockedExchange.Insert(intValue->{BoxExeInt^}.Value - 1) //-1 - input counts from 1, but i need from zero
				}
			}else{
				assert(false) //TODO error
			}
		case "#FilterBeConst"
			if cmd.Down?.Right?.GetValue() == "()"
			{
				skb := cmd.Down.Right
				SyntaxCompress(skb,LexHVFileRoot)
				intValue := TryGetExeCall(skb.Down)
				if intValue? is BoxExeInt
				{
					constCheck := true
					if skb.Down?.Right?.Right != null
					{
						constVal := TryGetExeCall(skb.Down.Right.Right)
						if constVal? is BoxExeBool
						{
							constCheck = constVal == GBoolTrue
						}
					}
					newPropertie := new FilterBeConstPropertie
					newPropertie.InputIndex = intValue->{BoxExeInt^}.Value - 1
					newPropertie.ExpectBeConst = constCheck

					fnc.TemplateProperties["#FilterBeConst"].Push(newPropertie)
				}
			}else{
				assert(false) //TODO error
			}
			
		}
	}
	
}
CheckTemplateBodyCommands := !(BoxFuncTemplateBody^ fnc,Token^[] cmds) -> void
{
	if cmds != null
	{
		CheckTemplateBodyCommandsSingle(fnc,cmds[^])
	}

	if fnc.RunToken != null
	{
		iter := fnc.RunToken
		SyntaxCompress(iter,LexHVFileRoot)

		iter = iter.Down

		while iter != null
		{
			CheckTemplateBodyCommandsSingle(fnc,iter)
			iter = iter.Right
		}
	}
}
FilterBeConstPropertie := class extend FunctionPropertie
{
	InputIndex := int
	ExpectBeConst := bool
}
