BoxFunc := class extend BoxExeConstObj
{
	ItTypeHatch := THatch

	GetType := virtual !() -> Type^
	{
		ItTypeHatch.Await()
		return ObjType
	}
	SetType := !(TypeFunc^ tp) -> void
	{
		ObjType = tp
		ItTypeHatch.Emit()
	}
	IsMem := virtual !() -> bool
	{
		return GetType()->{TypeFunc^}.ResultRef
	}
	GetDefaultValuesCount := virtual !() -> int
	{
		return 0
	}
	GetDefaultToken := virtual !(int i) -> Token^
	{
		return null
	}

	WorkBody := virtual !() -> void
	{
	}
	SetName := virtual !(StringSpan nm) -> void
	{
	}
	ForceOutputName := virtual !(StringSpan nm) -> void {}
	SetPrintName := virtual !(StringSpan nm) -> void
	{
	}
	WaitReadyState := virtual !() -> void
	{
	}
	PrintCode := virtual !(Stream^ f) -> void
	{
	}
	GetExitLabel := virtual !() -> BoxLabel^
	{
		assert(false)
	}
	PrintResultType := virtual !(Stream^ f) -> void
	{
		fTyp := GetType()->{TypeFunc^}
		if fTyp.ResultType.IsComplexReturn() and not fTyp.ResultRef
		{
			GTypeVoid.PrintType(f)
		}else{
			fTyp.ResultType.PrintType(f)
			if fTyp.ResultRef
				f^ << "*"
		}
	}
	ParseBody := virtual !() -> void
	{
	}
	ParseBodyForced := virtual !() -> void
	{
	}
	PrintUse := virtual !(Stream^ f) -> void
	{
		PrintName(f)
	}
	PrintInputTypes := virtual !(Stream^ f) -> void
	{
		fTyp := GetType()->{TypeFunc^}
		needComma := false

		if fTyp.ResultType.IsComplexReturn() and not fTyp.ResultRef
		{
			fTyp.ResultType.PrintType(f)
			f^ << "* %result" 
			needComma = true
		}

		for par,i : fTyp.Params
		{
			if needComma
				f^ << ","
			needComma = true

			inType := par.ItType
			if not par.IsRef
				inType = NormalizeType(inType)
			inType.PrintType(f)
			if par.IsRef
				f^ << "*"
			f^ << " %par" << i
		}
		if GetType()->{TypeFunc^}.IsVargs
		{
			if needComma
				f^ << ","
			f^ << "..."
		}
	}
	PrintName := virtual !(Stream^ f) -> void
	{
	}

	PrintResultObj := virtual !(Stream^ f, int resId, int debId) -> void
	{
	}
	PrintFuncCall := virtual !(Stream^ f,int resId,int debId,ExeDownList lst) -> void
	{
	}


	CreateCall := virtual !() -> BoxExeObj^
	{
		empty := CheckExeDownList
		return CreateCall(empty)
	}
	CreateCall := virtual !(CheckExeDownList objs) -> BoxExeObj^
	{
		if this.IsConstexpr
		{
			check := true
			for it : objs
			{
				if not it.IsConst
				{
					check = false
					break
				}
			}
			if check
			{
				return Execute(objs)
			}
		}
		return new BoxFuncCall(this&,objs) //MUST BE NEW BOXFUNCCALL
	}
	
	IsConstexpr := virtual false
}

BoxFuncCommon := class extend BoxFunc
{
	PrintResultObj := virtual !(Stream^ f, int resId, int debId) -> void
	{
		fTyp := GetType()->{TypeFunc^}
		if not (fTyp.ResultType == GTypeVoid and not fTyp.ResultRef)
		{
			f^ << "%T" << resId
		}
	}
	PrintFuncCall := virtual !(Stream^ f,int resId,int debId,ExeDownList lst) -> void
	{
		PrintFuncCallCommon(f,this&,resId,lst)
	}
}

PrintFuncCallResultCommon := !(Stream^ f,TypeFunc^ fTyp,int resId) -> void
{
	if not (fTyp.ResultType == GTypeVoid and not fTyp.ResultRef)
	{
		f^ << "%T" << resId
	}
}
PrintFuncCallCommon := !(Stream^ f,BoxExeObj^ fncObj,int resId,ExeDownList lst) -> void
{
	itType := TypeFunc^
	if fncObj is in BoxFunc
	{
		itType = fncObj.GetType()->{TypeFunc^}
	}else{
		tmpType := fncObj.GetType()
		assert(tmpType is in TypePoint and tmpType.Base is TypeFunc)
		itType = tmpType.Base->{TypeFunc^}
	}

	sType := itType
	itType = NormalizeFuncType(itType)

	for itm,i : lst
	{
		if i < itType.Params.Size() and (itType.Params[i].IsRef or itType.Params[i].ItType is TypeClass)
		{
			itm.PrintPointPre(f)
		}else{
			itm.PrintPre(f)
		}
	}
	fncObj.PrintPre(f)

	if itType.ResultType != GTypeVoid
	{
		f^ << "%T" << resId << " = "
	}

	f^ << "call "
	if itType.IsVargs
	{
		itType.PrintType(f)
	}else{
		itType.ResultType.PrintType(f)
		if itType.ResultRef
			f^ << "*"
	}
	fncObj.PrintUse(f)

	f^ << "("
	
	needComma := false

	for dwn,i : lst
	{
		if needComma
			f^ << ","
		needComma = true
		
		if i < itType.Params.Size() and itType.Params[i].IsRef
		{
			inType := dwn.GetType()
			inType = NormalizeType(inType)
			inType.PrintType(f)
			f^ << "* "
			dwn.PrintPointUse(f)
		}else{'
			if i < itType.Params.Size() and itType.Params[i].ItType is in TypeClass
			{
				tp := dwn.GetType()
				tp.PrintType(f)
				f^ << "* "
				f^ << "byval("
				tp.PrintType(f)
				f^ << ") "
				dwn.PrintPointUse(f)
			}else{
				inType := dwn.GetType()
				inType = NormalizeType(inType)
				inType.PrintType(f)
				f^ << " "
				dwn.PrintUse(f)
			}
		}
	}

	f^ << ")"
	if DebugMode
		f^ << ", !dbg !" << GDebugLineCallId
	f^ << "\n"
}

NormalizeType := !(Type^ oldType) -> Type^
{
	if oldType is in TypePoint and oldType.Base is TypeFunc
	{
		return NormalizeFuncType(oldType.Base->{TypeFunc^}).GetPoint()
	}
	return oldType
}

NormalizeFuncType := !(TypeFunc^ inp) -> TypeFunc^
{
	if inp.ResultType.IsComplexReturn()
	{
	}else{
		return inp
	}

	if inp.ResultRef
		return inp
	
	k := 0
	typs := Type^[100]
	bls := bool[100]

	typs[0] = inp.ResultType
	bls[0] = true
	k += 1

	for i : inp.Params.Size()
	{
		typs[k] = inp.Params[i].ItType
		bls[k] = inp.Params[i].IsRef
		k += 1
	}
	return GetFuncType(k,typs[0]&,bls[0]&,GTypeVoid,false,inp.IsVargs)
}
