
CreateBuiltinsBool := !() -> void
{
	bSpace := CodeSpaces[-1]&

	x := GTypeBool
	storeType := GetFuncType(![x,x],![true,false],GTypeVoid)
	cmpType := GetFuncType(![x,x],GTypeBool)

	bSpace.Functions[StringSpan("=")].Push(new BuiltInPrimeStore(storeType) )
	bSpace.Functions[StringSpan("==")].Push(new BuiltInIntBase(cmpType,"icmp eq") )
	bSpace.Functions[StringSpan("!=")].Push(new BuiltInIntBase(cmpType,"icmp ne") )
	bSpace.Functions[StringSpan(". not")].Push(new BuiltInBoolNot() )
	bSpace.Functions[StringSpan("<=>")].Push(new BuildInSpaceShipBool() )
}

BuiltInBoolNot := class extend BoxFuncCommon
{
	this := !() -> void
	{
		SetType(GetFuncType(![GTypeBool],GTypeBool))
	}
	PrintFuncCall := virtual !(LLVMWriteContext^ ctx,int resId,int debId,ExeDownList lst) -> void
	{
		lst[0].PrintPre(ctx)
		
		f := ctx.writeStream
		tFunc := GetType()->{TypeFunc^}
		tp := tFunc.Params[0].ItType

		f^ << "%T" << resId << " = xor " 
		tp.PrintType(ctx)
		f^ << " "
		lst[0].PrintUse(ctx)
		f^ << ", 1"
		if DebugMode
			f^ << " , !dbg !" << GDebugLineCallId
		f^ << "\n"
	}
}
BuildInSpaceShipBool := class extend BoxFuncCommon
{
	this := !() -> void
	{
		tp := GTypeBool
		SetType(GetFuncType(![tp,tp],GTypeInt))
	}
	PrintFuncCall := virtual !(LLVMWriteContext^ ctx,int resId,int debId,ExeDownList lst) -> void
	{
		f := ctx.writeStream
		tp := this.GetType()->{TypeFunc^}.Params[0].ItType
		lst[0].PrintPre(ctx)
		lst[1].PrintPre(ctx)

		f^ << "%Xr" << resId << " = xor i1 " 
		lst[0].PrintUse(ctx)
		f^ << " , "
		lst[1].PrintUse(ctx)
		f^ << "\n"


		f^ << "%Possible" << resId << " = select i1 "
		lst[1].PrintUse(ctx)
		f^ << " , i32 1, i32 -1\n"

		f^ << "%T" << resId << " = select i1 %Xr" << resId << " , i32 0, i32 %Possible" << resId << "\n"

	}
}
