BuiltInAssert := class extend BoxFuncCommon
{
	trueLabel := BoxLabel^
	falseLabel := BoxLabel^
	this := !() -> void
	{
		SetType(GetFuncType(![GTypeBool],GTypeVoid))
	}
	PrintFuncCall := virtual !(LLVMWriteContext^ ctx,int resId,int debId,ExeDownList lst) -> void
	{
		if not DebugMode
			return void

		trueLabel = new BoxLabel()
		falseLabel = new BoxLabel()

		lst[0].PrintPre(ctx)
		
		PrintBranch(ctx,lst[0],trueLabel,falseLabel)
		
		f := ctx.writeStream

		falseLabel.PrintCode(ctx)
		f^ << "call void @llvm.debugtrap()"
		if DebugMode
			f^ << " , !dbg !" << GDebugLineCallId
		f^ << "\n"
		trueLabel.PrintCode(ctx)
	}
}

builtInSetJump := BuiltInSetJump^

BuiltInSetJump := class extend BoxFuncCommon
{
	this := !() -> void
	{
		SetType(GetFuncType(![GTypeVoidP.GetArray(5)],GTypeInt))
	}
	PrintFuncCall := virtual !(LLVMWriteContext^ ctx,int resId,int debId,ExeDownList lst) -> void
	{
		f := ctx.writeStream
		ItId := GetNewId()

		lst[0].PrintPointPre(ctx)

  		f^ << "%Frame" << ItId << "  = call i8* @llvm.frameaddress.p0i8(i32 0)\n"

		f^ << "%FrameStore" << ItId << " = getelementptr [5 x i8*], [5 x i8*]* "
		lst[0].PrintPointUse(ctx)
		f^ << ", i64 0, i64 0\n"

		f^ << "store i8* %Frame" << ItId << ", i8** %FrameStore" << ItId << ", align 16\n"
  		f^ << "%Stack" << ItId << " = call i8* @llvm.stacksave()\n"

		f^ << "%StackStore" << ItId << " = getelementptr [5 x i8*], [5 x i8*]* "
		lst[0].PrintPointUse(ctx)
		f^ << ", i64 0, i64 2\n"

  		f^ << "store i8* %Stack" << ItId << ", i8** %StackStore"<< ItId <<", align 16\n"

		f^ << "%E" << ItId << " = bitcast [5 x i8*]* "
		lst[0].PrintPointUse(ctx)
		f^ << " to i8*\n"

  		f^ << "%T" << resId << " = call i32 @llvm.eh.sjlj.setjmp(i8* %E" << ItId <<")\n"
		if DebugMode
			f^ << " , !dbg !" << GDebugLineCallId
		f^ << "\n"
	}
}
BuiltInLongJump := class extend BoxFuncCommon
{
	this := !() -> void
	{
		SetType(GetFuncType(![GTypeVoidP],GTypeVoid))
	}
	PrintFuncCall := virtual !(LLVMWriteContext^ ctx,int resId,int debId,ExeDownList lst) -> void
	{
		f := ctx.writeStream

		lst[^].PrintPre(ctx)
		
		f^ << "call void @llvm.eh.sjlj.longjmp(i8* "
		lst[0].PrintUse(ctx)
		f^ << ")"
		if DebugMode
			f^ << " , !dbg !" << GDebugLineCallId
		f^ << "\n"
	}
}
BuiltInMemBarrier := class extend BoxFuncCommon
{
	this := !() -> void
	{
		SetType(GetFuncType(0,null,null,GTypeVoid,false,false))
	}
	PrintFuncCall := virtual !(LLVMWriteContext^ ctx,int resId,int debId,ExeDownList lst) -> void
	{
		ctx.writeStream^ << "call void asm sideeffect \"\", \"~{memory},~{dirflag},~{fpsr},~{flags}\"()"
	}
}
BuiltInMemsetInlineInt := class extend BoxFuncCommon
{
	this := !() -> void
	{
		SetType(GetFuncType(4,![GTypeVoidP,GTypeU8,GTypeInt,GTypeBool],null,GTypeVoid,false,false))
	}
	PrintFuncCall := virtual !(LLVMWriteContext^ ctx,int resId,int debId,ExeDownList lst) -> void
	{
		f := ctx.writeStream

		lst[^].PrintPre(ctx)
		f^ << "call void @llvm.memset.inline.p0.p0i8.i32("
		f^ << "i8* "
		lst[0].PrintUse(ctx)
		f^ << ", i8 "
		lst[1].PrintUse(ctx)
		f^ << ", i32 "
		lst[2].PrintUse(ctx)
		f^ << ",i1 "
		lst[3].PrintUse(ctx)
		f^ << ")\n"
	}
}
BuiltInGSWrite := class extend BoxFuncCommon
{
	this := !() -> void
	{
		SetType(GetFuncType(![GTypeU64],GTypeVoid))
	}
	PrintFuncCall := virtual !(LLVMWriteContext^ ctx,int resId,int debId,ExeDownList lst) -> void
	{
		f := ctx.writeStream

		lst[0].PrintPre(ctx)
  		f^ << "call void @llvm.x86.wrgsbase.64(i64 "
		lst[0].PrintUse(ctx)
		f^ << ") \n"
	}
}
BuiltInGSRead := class extend BoxFuncCommon
{
	this := !() -> void
	{
		SetType(GetFuncType(GTypeU64))
	}
	PrintFuncCall := virtual !(LLVMWriteContext^ ctx,int resId,int debId,ExeDownList lst) -> void
	{
  		ctx.writeStream^ << "%T" << resId << " =  call i64 @llvm.x86.rdgsbase.64() \n"
	}
}
BuiltInDegreeSuffix := class extend BoxFuncCommon
{
	this := !(TypeFunc^ iType) -> void
	{
		SetType(iType)
	}
	PrintFuncCall := virtual !(LLVMWriteContext^ ctx,int resId,int debId,ExeDownList lst) -> void
	{
		f := ctx.writeStream

		lst[0].PrintPre(ctx)

		tp := GetType()->{TypeFunc^}.ResultType

		f^ << "%T" << resId << " = fmul " 
		tp.PrintType(ctx)
		f^ << " " << "0.017453292519943295" << ", "
		lst[0].PrintUse(ctx)
		if DebugMode
			f^ << " , !dbg !" << GDebugLineCallId
		f^ << "\n"
	}
}
BuiltInLLVMProxy := class extend BoxFuncCommon
{
	funcName := char^
	this := !(char^ fName, TypeFunc^ iType) -> void
	{
		funcName = fName
		SetType(iType)
	}
	PrintFuncCall := virtual !(LLVMWriteContext^ ctx,int resId,int debId,ExeDownList lst) -> void
	{
		f := ctx.writeStream

		lst[^].PrintPre(ctx)

		f^ << "call void " << funcName << "("
		for it,i : lst
		{
			if i != 0
				f^ << ","
			it.GetType().PrintType(ctx)
			f^ << " "
			it.PrintUse(ctx)
		}
		f^ << ")"
		if DebugMode
			f^ << " , !dbg !" << GDebugLineCallId
		f^ <<"\n"
	}
}
BuiltInVaArgTemplate := class extend BoxFuncTemplate
{
	this := !() -> void
	{
	}
	ToFuncType := virtual !(BoxExeObj^[] objs, BoxExeConstObj^[] consts) -> TypeFunc^
	{
		if objs.Size() != 1 or consts.Size() != 1
			return null

		if objs[0].GetType() is not in TypePoint
			return null

		if consts[0] is not in Type
			return null


		return GetFuncType(![GTypeVoidP],consts[0]->{Type^})
		
	}
	CreateFuncCall := virtual !(BoxExeObj^[] objs,BoxExeConstObj^[] consts,FuncInputObjects^ iObjs) -> BoxExeObj^
	{
		getType := consts[0]->{Type^}
		if targetLinux  // TODO add windows support
		{
			if IsPtrLikeType(getType) or IsInt(getType)
			{
				callGetInt := CreateFuncCall("vaListLoadInt",objs)
				assert(callGetInt != null)

				if callGetInt?.GetType() != getType
				{
					callGetInt = GetExchange(callGetInt,getType)
				}

				return callGetInt?
			}
			if IsFloat(getType)
			{
				callGetFloat := CreateFuncCall("vaListLoadFloat",objs)
				assert(callGetFloat != null)

				if callGetFloat?.GetType() != getType
				{
					callGetFloat = GetExchange(callGetFloat,getType)
				}

				return callGetFloat?

			}
		}
		return super(objs,consts,iObjs)
	}
	CreateFunc := virtual !(TypeFunc^ tp, BoxExeConstObj^[] consts) -> BoxFunc^
	{
		return new BuiltInVaArg(tp,consts[0]->{Type^})
	}
}
BuiltInVaArg := class extend BoxFuncCommon
{
	TargetType := Type^
	this := !(TypeFunc^ iType,Type^ newType) -> void
	{
		SetType(iType)
		TargetType = newType
	}
	PrintFuncCall := virtual !(LLVMWriteContext^ ctx,int resId,int debId,ExeDownList lst) -> void
	{
		f := ctx.writeStream

		lst[0].PrintPre(ctx)

		f^ << "%T" << resId << " = va_arg ptr "
		lst[0].PrintUse(ctx)
		f^ << " , "
		TargetType.PrintType(ctx)

		if DebugMode
			f^ << " , !dbg !" << GDebugLineCallId
		f^ <<"\n"
	}
}

CreateBuildInTools := !() -> void
{
	bSpace := CodeSpaces[-1]&
	bSpace.Functions["assert"].Push(new BuiltInAssert() )
	bSpace.Functions["llvmLongJump"].Push(new BuiltInLongJump() )
	bSpace.Functions["MemBarrier"].Push(new BuiltInMemBarrier() )
	bSpace.Functions["llvmMemsetInlineInt"].Push(new BuiltInMemsetInlineInt() )

	bSpace.Functions["llvmGSWrite"].Push(new BuiltInGSWrite() )
	bSpace.Functions["llvmGSRead" ].Push(new BuiltInGSRead()  )

	builtInSetJump = new BuiltInSetJump() 
	bSpace.Functions["llvmSetJump"].Push(builtInSetJump)

	bSpace.Functions["va_start"].Push(new BuiltInLLVMProxy("@llvm.va_start",GetFuncType(![GTypeVoidP],GTypeVoid)))
	bSpace.Functions["va_end"].Push(new BuiltInLLVMProxy("@llvm.va_end",GetFuncType(![GTypeVoidP],GTypeVoid)))
	bSpace.Functions["va_copy"].Push(new BuiltInLLVMProxy("@llvm.va_copy",GetFuncType(![GTypeVoidP,GTypeVoidP],GTypeVoid)))
	bSpace.Templates["va_arg"].Push(new BuiltInVaArgTemplate)
}
