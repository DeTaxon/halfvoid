BuiltInIntBase := class extend BoxFuncCommon
{
	llvm := char^
	this := !(TypeFunc^ iType,char^ llvmOper) -> void
	{
		SetType(iType)
		llvm = llvmOper
	}
	PrintFuncCall := virtual !(LLVMWriteContext^ ctx,int resId,int debId,ExeDownList lst) -> void
	{
		f := ctx.writeStream

		lst[^].PrintPre(ctx)
		
		tFunc := GetType()->{TypeFunc^}
		tp := tFunc.Params[0].ItType

		f^ << "%T" << resId << " = " << llvm << " " 
		tp.PrintType(ctx)
		f^ << " "
		lst[0].PrintUse(ctx)
		f^ << ","
		lst[1].PrintUse(ctx)
		if DebugMode
			f^ << " , !dbg !" << GDebugLineCallId
		f^ << "\n"
	}
}

BuiltInIntEqAndOper := class extend BoxFuncCommon
{
	llvm := char^
	this := !(TypeFunc^ iType,char^ llvmOper) -> void
	{
		SetType(iType)
		llvm = llvmOper
	}
	PrintFuncCall := virtual !(LLVMWriteContext^ ctx,int resId,int debId,ExeDownList lst) -> void
	{
		f := ctx.writeStream

		lst[0].PrintPointPre(ctx)
		lst[1].PrintPre(ctx)

		tp := GetType()->{TypeFunc^}.ResultType

		f^ << "%Temp" << resId << " = load "
		tp.PrintType(ctx)
		f^ << ","
		tp.GetPoint().PrintType(ctx)
		f^ << " "
		lst[0].PrintPointUse(ctx)
		if DebugMode
			f^ << " , !dbg !" << GDebugLineCallId
		f^ << "\n"

		f^ << "%T" << resId << " = " << llvm << " " 
		tp.PrintType(ctx)
		f^ << " %Temp" << resId
		f^ << ","
		lst[1].PrintUse(ctx)
		if DebugMode
			f^ << " , !dbg !" << GDebugLineCallId
		f^ << "\n"

		f^ << "store "
		tp.PrintType(ctx)
		f^ << " %T" << resId << ","
		tp.GetPoint().PrintType(ctx)
		f^ << " "
		lst[0].PrintPointUse(ctx)
		if DebugMode
			f^ << " , !dbg !" << GDebugLineCallId
		f^ << "\n"
	}
}
BuiltInInterlockOper := class extend BoxFuncCommon
{
	llvm := char^
	this := !(TypeFunc^ iType,char^ llvmOper) -> void
	{
		SetType(iType)
		llvm = llvmOper
	}
	PrintFuncCall := virtual !(LLVMWriteContext^ ctx,int resId,int debId,ExeDownList lst) -> void
	{
		f := ctx.writeStream

		lst[0].PrintPointPre(ctx)
		lst[1].PrintPre(ctx)

		tp := GetType()->{TypeFunc^}.ResultType

		f^ << "%T" << resId << " = atomicrmw " << llvm << " " 
		tp.GetPoint().PrintType(ctx)
		f^ << " "
		lst[0].PrintPointUse(ctx)
		f^ << " , "
		tp.PrintType(ctx)
		f^ << " "
		lst[1].PrintUse(ctx)
		f^ << " acquire"
		if DebugMode
			f^ << " , !dbg !" << GDebugLineCallId
		f^ << "\n"

		if DebugMode
			f^ << " , !dbg !" << GDebugLineCallId
		f^ << "\n"
	}
}

BuiltInIntDecInc := class extend BoxFuncCommon
{
	llvm := char^
	this := !(TypeFunc^ iType,char^ llvmOper) -> void
	{
		SetType(iType)
		llvm = llvmOper
	}
	PrintFuncCall := virtual !(LLVMWriteContext^ ctx,int resId,int debId,ExeDownList lst) -> void
	{
		f := ctx.writeStream

		lst[0].PrintPointPre(ctx)

		tp := GetType()->{TypeFunc^}.ResultType

		f^ << "%T" << resId << " = load "
		tp.PrintType(ctx)
		f^ << ","
		tp.GetPoint().PrintType(ctx)
		f^ << " "
		lst[0].PrintPointUse(ctx)
		if DebugMode
			f^ << " , !dbg !" << GDebugLineCallId
		f^ << "\n"

		f^ << "%Temp" << resId << " = " << llvm << " " 
		tp.PrintType(ctx)
		f^ << " %T" << resId
		f^ << ", 1"
		if DebugMode
			f^ << " , !dbg !" << GDebugLineCallId
		f^ << "\n"

		f^ << "store "
		tp.PrintType(ctx)
		f^ << " %Temp" << resId << ","
		tp.GetPoint().PrintType(ctx)
		f^ << " "
		lst[0].PrintPointUse(ctx)
		if DebugMode
			f^ << " , !dbg !" << GDebugLineCallId
		f^ << "\n"
	}
}
BuiltInIntMinus := class extend BoxFuncCommon
{
	llvm := char^
	cnstVal := char^
	this := !(TypeFunc^ iType,char^ lvm,char^ cv) -> void
	{
		SetType(iType)
		llvm = lvm
		cnstVal = cv
	}
	PrintFuncCall := virtual !(LLVMWriteContext^ ctx,int resId,int debId,ExeDownList lst) -> void
	{
		f := ctx.writeStream

		lst[0].PrintPre(ctx)

		tp := GetType()->{TypeFunc^}.ResultType

		f^ << "%T" << resId << " = "<< llvm <<" " 
		tp.PrintType(ctx)
		f^ << " " << cnstVal << ", "
		lst[0].PrintUse(ctx)
		if DebugMode
			f^ << " , !dbg !" << GDebugLineCallId
		f^ << "\n"
	}
}
BuiltInPrimeStore := class extend BoxFuncCommon
{
	this := !(TypeFunc^ iType) -> void
	{
		SetType(iType)
	}
	PrintFuncCall := virtual !(LLVMWriteContext^ ctx,int resId,int debId,ExeDownList lst) -> void
	{
		f := ctx.writeStream

		lst[0].PrintPointPre(ctx)
		lst[1].PrintPre(ctx)

		bs := GetType()
		tp := bs->{TypeFunc^}.Params[0].ItType

		f^ << "store "
		PrintTypeNormalized(ctx,tp)
		f^ << " "
		lst[1].PrintUse(ctx)
		f^ << ","
		PrintTypeNormalized(ctx,tp)
		f^ << "* "
		lst[0].PrintPointUse(ctx)
		if DebugMode
			f^ << " , !dbg !" << GDebugLineCallId
		f^ << "\n"
	}
}


BuiltInIntSuffixU := class extend BoxFuncCommon
{
	this := !() -> void
	{
		SetType(GetFuncType(![GTypeInt],GTypeU64))
	}
	//PrintFuncCall := virtual !(LLVMWriteContext^ ctx,int resId,int debId,ExeDownList lst) -> void
	//{
	//}
	CreateCall := virtual !(BoxExeObj^[] objs) -> BoxExeObj^
	{
		assert(objs.Size() == 1)

		return GetExchange(objs[0],GTypeU64)
	}
}
BuiltInIntSuffixF := class extend BoxFuncCommon
{
	this := !() -> void
	{
		SetType(GetFuncType(![GTypeDouble],GTypeFloat))
	}
	//PrintFuncCall := virtual !(LLVMWriteContext^ ctx,int resId,int debId,ExeDownList lst) -> void
	//{
	//}
	CreateCall := virtual !(BoxExeObj^[] objs) -> BoxExeObj^
	{
		assert(objs.Size() == 1)

		return GetExchange(objs[0],GTypeFloat)
	}
}

BuiltinSpaceShipUnsigned := class extend BoxFuncCommon
{
	isSigned := bool
	this := !(Type^ tp,bool inIsSigned) -> void
	{
		isSigned = inIsSigned
		SetType(GetFuncType(![tp,tp],GTypeInt))
	}
	PrintFuncCall := virtual !(LLVMWriteContext^ ctx,int resId,int debId,ExeDownList lst) -> void
	{
		f := ctx.writeStream

		tp := this.GetType()->{TypeFunc^}.Params[0].ItType
		lst[0].PrintPre(ctx)
		lst[1].PrintPre(ctx)

		f^ << "%EqCheck" << resId << " = icmp eq "
		tp.PrintType(ctx)
		lst[0].PrintUse(ctx)
		f^ << " , "
		lst[1].PrintUse(ctx)
		f^ << "\n"

		f^ << "%BiggerCheck" << resId << " = icmp "
		if isSigned
		{
			f^ << "sgt "
		}else{
			f^ << "ugt "
		}
		tp.PrintType(ctx)
		lst[0].PrintUse(ctx)
		f^ << " , "
		lst[1].PrintUse(ctx)
		f^ << "\n"

		f^ << "%Possible" << resId << " = select i1 %BiggerCheck" << resId << " , i32 1, i32 -1\n"
		f^ << "%T" << resId << " = select i1 %EqCheck" << resId << " , i32 0, i32 %Possible" << resId << "\n"

	}
}

CreateBuiltinsInt := !() -> void
{
	bSpace := CodeSpaces[-1]&

	bSpace.Functions[StringSpan("suffix U")].Push(new BuiltInIntSuffixU())
	bSpace.Functions[StringSpan("suffix f")].Push(new BuiltInIntSuffixF())


	ForEachIntType( (x,isSigned) ==> {
		strt := GetFuncType(![x,x],x)
		baseRefed := GetFuncType(![x,x],![true,false],x)
		storeType := GetFuncType(![x,x],![true,false],GTypeVoid)
		cmpType := GetFuncType(![x,x],GTypeBool)
		incType := GetFuncType(![x],![true],x)
		unarMinusType := GetFuncType(![x],x)

		bSpace.Functions[StringSpan("+")].Push(new BuiltInIntBase(strt,"add") )
		bSpace.Functions[StringSpan("-")].Push(new BuiltInIntBase(strt,"sub") )
		bSpace.Functions[StringSpan("*")].Push(new BuiltInIntBase(strt,"mul") )

		bSpace.Functions[StringSpan("shl")].Push(new BuiltInIntBase(strt,"shl") )
		if isSigned
		{
			bSpace.Functions[StringSpan("shr")].Push(new BuiltInIntBase(strt,"ashr") )
		}else{
			bSpace.Functions[StringSpan("shr")].Push(new BuiltInIntBase(strt,"lshr") )
		}

		bSpace.Functions[StringSpan("+=")].Push(new BuiltInIntEqAndOper(baseRefed,"add") )
		bSpace.Functions[StringSpan("-=")].Push(new BuiltInIntEqAndOper(baseRefed,"sub") )
		bSpace.Functions[StringSpan("*=")].Push(new BuiltInIntEqAndOper(baseRefed,"mul") )


		bSpace.Functions[StringSpan("InterlockAdd")].Push(new BuiltInInterlockOper(baseRefed,"add") )
		bSpace.Functions[StringSpan("InterlockSub")].Push(new BuiltInInterlockOper(baseRefed,"sub") )
		bSpace.Functions[StringSpan("InterlockSet")].Push(new BuiltInInterlockOper(baseRefed,"xchg"))

		bSpace.Functions[StringSpan("++")].Push(new BuiltInIntDecInc(incType,"add") )
		bSpace.Functions[StringSpan("--")].Push(new BuiltInIntDecInc(incType,"sub") )

		bSpace.Functions[StringSpan(". -")].Push(new BuiltInIntMinus(unarMinusType,"sub","0") )

		bSpace.Functions[StringSpan("<=>")].Push(new BuiltinSpaceShipUnsigned(x,isSigned))

		bSpace.Functions[StringSpan("=")].Push(new BuiltInPrimeStore(storeType) )

		bSpace.Functions[StringSpan("and_b")].Push(new BuiltInIntBase(strt,"and") )
		bSpace.Functions[StringSpan("or_b")].Push(new BuiltInIntBase(strt,"or") )
		bSpace.Functions[StringSpan("xor_b")].Push(new BuiltInIntBase(strt,"xor") )

		bSpace.Functions[StringSpan(". not_b")].Push(new BuiltInIntMinus(unarMinusType,"xor","-1") )

		if isSigned
		{
			bSpace.Functions[StringSpan("div")].Push(new BuiltInIntBase(strt,"sdiv") )
			bSpace.Functions[StringSpan("mod")].Push(new BuiltInIntBase(strt,"srem") )
		}else{
			bSpace.Functions[StringSpan("div")].Push(new BuiltInIntBase(strt,"udiv") )
			bSpace.Functions[StringSpan("mod")].Push(new BuiltInIntBase(strt,"urem") )
		}

		bSpace.Functions[StringSpan("==")].Push(new BuiltInIntBase(cmpType,"icmp eq") )
		bSpace.Functions[StringSpan("!=")].Push(new BuiltInIntBase(cmpType,"icmp ne") )

		if isSigned
		{
			bSpace.Functions[StringSpan(">=")].Push(new BuiltInIntBase(cmpType,"icmp sge") )
			bSpace.Functions[StringSpan("<=")].Push(new BuiltInIntBase(cmpType,"icmp sle") )
			bSpace.Functions[StringSpan(">")].Push(new BuiltInIntBase(cmpType,"icmp sgt") )
			bSpace.Functions[StringSpan("<")].Push(new BuiltInIntBase(cmpType,"icmp slt") )
		}else{
			bSpace.Functions[StringSpan(">=")].Push(new BuiltInIntBase(cmpType,"icmp uge") )
			bSpace.Functions[StringSpan("<=")].Push(new BuiltInIntBase(cmpType,"icmp ule") )
			bSpace.Functions[StringSpan(">")].Push(new BuiltInIntBase(cmpType,"icmp ugt") )
			bSpace.Functions[StringSpan("<")].Push(new BuiltInIntBase(cmpType,"icmp ult") )
		}


	})
	ForEachFloatType( (x) ==> {
		strt := GetFuncType(![x,x],x)
		strtToInt := GetFuncType(![x,x],GTypeInt)
		storeType := GetFuncType(![x,x],![true,false],GTypeVoid)
		unarMinusType := GetFuncType(![x],x)
		baseRefed := GetFuncType(![x,x],![true,false],x)
		cmpType := GetFuncType(![x,x],GTypeBool)

		bSpace.Functions[StringSpan("=")].Push(new BuiltInPrimeStore(storeType) )

		bSpace.Functions[StringSpan("+")].Push(new BuiltInIntBase(strt,"fadd") )
		bSpace.Functions[StringSpan("-")].Push(new BuiltInIntBase(strt,"fsub") )
		bSpace.Functions[StringSpan("*")].Push(new BuiltInIntBase(strt,"fmul") )
		bSpace.Functions[StringSpan("/")].Push(new BuiltInIntBase(strt,"fdiv") )

		bSpace.Functions[StringSpan("+=")].Push(new BuiltInIntEqAndOper(baseRefed,"fadd") )
		bSpace.Functions[StringSpan("-=")].Push(new BuiltInIntEqAndOper(baseRefed,"fsub") )
		bSpace.Functions[StringSpan("*=")].Push(new BuiltInIntEqAndOper(baseRefed,"fmul") )

		bSpace.Functions[StringSpan(". -")].Push(new BuiltInIntMinus(unarMinusType,"fsub","0.0") )

		if x == GTypeDouble
		{
			bSpace.Functions[StringSpan("suffix deg")].Push(new BuiltInDegreeSuffix(unarMinusType) )
		}

		bSpace.Functions[StringSpan("<=>")].Push(new BuiltInFloatSpaceship(strtToInt) )

		bSpace.Functions[StringSpan(">=")].Push(new BuiltInIntBase(cmpType,"fcmp uge") )
		bSpace.Functions[StringSpan("<=")].Push(new BuiltInIntBase(cmpType,"fcmp ule") )
		bSpace.Functions[StringSpan(">")].Push(new BuiltInIntBase(cmpType,"fcmp ugt") )
		bSpace.Functions[StringSpan("<")].Push(new BuiltInIntBase(cmpType,"fcmp ult") )

		bSpace.Functions[StringSpan("==")].Push(new BuiltInIntBase(cmpType,"fcmp ueq") )
		bSpace.Functions[StringSpan("!=")].Push(new BuiltInIntBase(cmpType,"fcmp une") )

		bSpace.Functions[StringSpan("cos")].Push(new BuiltInFloatCosSin(unarMinusType,"cos"))
		bSpace.Functions[StringSpan("sin")].Push(new BuiltInFloatCosSin(unarMinusType,"sin"))
	})
}
BuiltInFloatSpaceship := class extend BoxFuncCommon
{
	this := !(TypeFunc^ iType) -> void
	{
		SetType(iType)
	}
	PrintFuncCall := virtual !(LLVMWriteContext^ ctx,int resId,int debId,ExeDownList lst) -> void
	{
		f := ctx.writeStream

		lst[0].PrintPre(ctx)
		lst[1].PrintPre(ctx)

		tpFunc := GetType()->{TypeFunc^}
		tp := tpFunc.Params[0].ItType

		f^ << "%TDiff" << resId << " = fsub " 
		tp.PrintType(ctx)
		f^ << " " 
		lst[0].PrintUse(ctx)
		f^ <<  ", "
		lst[1].PrintUse(ctx)
		if DebugMode
			f^ << " , !dbg !" << GDebugLineCallId
		f^ << "\n"

		f^ << "%TIsVal" << resId << " = fcmp une " tp.PrintType(ctx) f^ << "%TDiff" << resId << " , 0.0\n"
		f^ << "%TIsValInt" << resId << " = sext i1 %TIsVal" << resId << " to i32\n"
		f^ << "%TIsNeg" << resId << " = fcmp ult " tp.PrintType(ctx) f^ << "%TDiff" << resId << " , 0.0\n"
		f^ << "%TIsNegInt" << resId << " = select i1 %TIsNeg" << resId << ", i32 -1, i32 1\n"

		f^ << "%T" << resId << " = and i32 %TIsNegInt" << resId << ", %TIsValInt" << resId
		if DebugMode
			f^ << " , !dbg !" << GDebugLineCallId
		f^ << "\n"
	}
}
BuiltInFloatCosSin := class extend BoxFuncCommon
{
	fncName := char^
	this := !(TypeFunc^ iType,char^ fName) -> void
	{
		SetType(iType)
		fncName = fName
	}
	PrintFuncCall := virtual !(LLVMWriteContext^ ctx,int resId,int debId,ExeDownList lst) -> void
	{
		f := ctx.writeStream
		lst[0].PrintPre(ctx)

		tp := GetType()->{TypeFunc^}.ResultType

		f^ << "%T" << resId << " = call "
		tp.PrintType(ctx)
		f^ << " @llvm." << fncName << "." 
		if tp == GTypeFloat
		{
			f^ << "f32"
		}else{
			assert(tp == GTypeDouble)
			f^ << "f64"
		}
		f^ << "("
		tp.PrintType(ctx)
		f^ << " "
		lst[0].PrintUse(ctx)
		f^ << ")"
		if DebugMode
			f^ << " , !dbg !" << GDebugLineCallId
		f^ << "\n"
	}
}
