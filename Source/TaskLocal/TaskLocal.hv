TaskLocalVar := class extend NamedVar
{
	itType := Type^
	itIndex := int
	this := !(StringSpan name,Type^ tp) -> void
	{
		Name = name
		itType = tp
		itIndex = TaskLocalTypes.Size()
		TaskLocalTypes.Push(tp)
		assert(tp != null)
	}
	CreateCall := virtual !() -> BoxExeObj^
	{
		TaskLocalHatch.Await()
		getVar := getTaskVarFunc.CreateCall()
		getVarTypes := GetExchange2(getVar,tupleVarType.ItType.GetPoint(),false)

		funcObj := tupleVarType.GetFieldByIndex(itIndex)

		objs := CheckExeDownList
		objs.Push(getVarTypes)
		return funcObj.CreateCall(objs)
	}
}
TaskLocalVarDelayed := class extend NamedVar
{
	itType := Type^
	itIndex := int
	itHatch := THatch
	itToken := Token^
	this := !(StringSpan name,Token^ tp) -> void
	{
		Name = name
		itToken = tp

		TaskLocalDelayedVars.Push(this&)

		SubWork(() ==> {
			GParsedAllFiles.Await()
			itType = ParseType(itToken)
			itIndex = TaskLocalTypes.Size()
			assert(itType != null)
			TaskLocalTypes.Push(itType)
			itHatch.Emit()
		})
	}

	PrintCode := virtual !(LLVMWriteContext^ ctx) -> void
	{
	}
	CreateCall := virtual !() -> BoxExeObj^
	{
		itHatch.Await()
		TaskLocalHatch.Await()
		getVar := getTaskVarFunc.CreateCall()
		getVarTypes := GetExchange2(getVar,tupleVarType.ItType.GetPoint(),false)

		funcObj := tupleVarType.GetFieldByIndex(itIndex)

		assert(funcObj != null)

		objs := CheckExeDownList
		objs.Push(getVarTypes)
		return funcObj.CreateCall(objs)
	}
}

TaskLocalDelayedVars := List.{TaskLocalVarDelayed^}

getTaskVarFunc := BoxFunc^
tupleVarType := BoxClassTupleDelayed^

TaskLocalHatch := THatch

TaskLocalTypes := List.{Type^}

PreInitTaskLocal := !() -> void
{
	tupleVarType = new BoxClassTupleDelayed()

	AllClasses.Push(tupleVarType)

	bSpace := CodeSpaces[-1]&

	varName := StringSpan("internalHVTaskLocalTuple")
	CodeSpaces[-1].Types[varName] = new TypeVar(varName,tupleVarType.ItType) //todo make it pretty
}

InitTaskLocal := !() -> void
{

	SubWork(() ==> {
		GParsedAllFiles.Await()
		for it : TaskLocalDelayedVars
		{
			it.itHatch.Await()
		}

		getTaskVarFunc = intGetFunc("internalHVGetTaskLocalTuple")
		//tupleVarType = GetTuple(TaskLocalTypes)
		tupleVarType.InitTuple(TaskLocalTypes)
		TaskLocalHatch.Emit()
	})
}

BoxClassTupleDelayed := class extend BoxClass
{
	fieldsHatch := THatch
	this := !() -> void
	{
		ItName = "anon" //todo
		ItId = GetNewId()
		ItType = new TypeClass(this&)
	}
	InitTuple := !(List.{Type^} types) -> void
	{
		buildCtx := ClassBuildContext

		for it,i : types //todo remove i
		{
			Fields.Push(new FieldParam(StringSpan(""),types[i]))
		}
		InheritStep(buildCtx)
		fieldsHatch.Emit()
	}
	AwaitTypeState := virtual !() -> void
	{
		fieldsHatch.Await()
	}
}
