
GUsingCacheFile := bool

CFile := CacheFile^
RegsCache := CacheStringModule^
LexFileCache := CacheFileModule^

OpenCacheFile := !(char^ fileName) -> void
{
	GUsingCacheFile = true
	CFile = new CacheFile(fileName)
	RegsCache = CFile.GetStringModule("RegExp")
	LexFileCache = CFile.GetFileModule("LexFiles")
}


TryGetCacheOfFile := !(vRepoFile^ fl) -> Blob^
{
	if not GUsingCacheFile
		return null

	return LexFileCache.TryGetCacheValue(fl)
}



CacheBlobByStringReg := !(StringView value, !()&-> BoxRawData^ cb) -> BoxRawData^
{
	if not GUsingCacheFile
		return cb()

	cb2 := cb
	resBlob := BoxRawData^
	blb := RegsCache.CacheBlobByString(value,() ==> {
		resBlob = cb2()
		bl := new BlobOnVector(resBlob.ValueSize)
		memcpy(bl.GetPointer(),resBlob.Value,bl.Size())
		return bl->{Blob^}
	})
	
	if resBlob != null
		return resBlob
	
	why := malloc(blb.Size())
	memcpy(why,blb.GetPointer(),blb.Size())
	resBlob = new BoxRawData(why->{u8^},blb.Size())
	return resBlob

}
FinilizeCache := !() -> void
{
	if not GUsingCacheFile
		return void
	
	for it : CodeSpaces
	{
		for fl : it.Files
		{
			if fl.tokensChanged
			{
				SerializeTokens(fl.file,fl.fileTokens)
			}
		}
	}
	CFile.Flush()
}



