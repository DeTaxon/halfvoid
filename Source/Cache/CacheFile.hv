
GUsingCacheFile := bool

CFile := CacheFile^
RegsCache := CacheStringModule^
LexFileCache := CacheFileModule^

OpenCacheFile := !(char^ fileName) -> void
{
	GUsingCacheFile = true
	CFile = new CacheFile(fileName)
	RegsCache = CFile.GetStringModule("RegExp")
	LexFileCache = CFile.GetFileModule("LexFiles")
}


TryGetCacheOfFile := !(File^ fl) -> Blob^
{
	if not GUsingCacheFile
		return null

	return LexFileCache.TryGetCacheValue(fl)
}



blobsCache := AVLMap.{Blob^,BoxRawData^}
CacheBlobByStringReg := !(StringView value, !()&-> Blob^ cb) -> BoxRawData^
{
	if not GUsingCacheFile
	{
		blb := cb()
		return new BoxRawData(blb)
	}

	blb := RegsCache.CacheBlobByString(value,cb)

	if blobsCache.Contain(blb)
		return blobsCache[blb]

	result = new BoxRawData(blb)
	blobsCache[blb] = result

}
FinilizeCache := !() -> void
{
	if not GUsingCacheFile
		return void
	
	for it : CodeSpaces
	{
		for fl : it.Files
		{
			if fl.tokensChanged
			{
				SerializeTokens(fl.file,fl.fileTokens)
			}
		}
	}
	CFile.Flush()
}



