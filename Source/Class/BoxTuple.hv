
tplDatabase := AVLMap.{Type^,BoxClassTuple^}
GetTuple := !(List.{Type^} types) -> BoxClass^
{
	return GetTuple(types,false,false)
}
GetTuple := !(List.{Type^} types, bool simpleTuple) -> BoxClass^
{
	return GetTuple(types,simpleTuple,false)
}
GetTuple := !(List.{Type^} types, bool simpleTuple,bool isVTable) -> BoxClass^ //TODO remove isVTable to class, maybe just make CreateTuple instead of GetTuple
{
	typesArr := Type^[200] //todo  to Array
	typesArr[i] = types[^i].GetPoint()
	hck := GetFuncType(types.Size(),TArraySpan.{Type^}(typesArr[0]&,types.Size()),null,GTypeVoid,false,false)
	if tplDatabase.Contain(hck)
		return tplDatabase[hck]
	newClass := new BoxClassTuple(types,simpleTuple)
	tplDatabase[hck] = newClass
	if isVTable
	{
		AllClasses.PushFront(newClass)
	}else{
		AllClasses.Push(newClass)
	}
	return newClass
}


BoxClassTuple := class extend BoxClassPoison
{
	mthHatch := THatch
	this := !(List.{Type^} types,bool simpleTuple) -> void
	{
		ItName = "Tuple"
		ItId = GetNewId()
		ItType = new TypeClass(this&)

		needGC := false

		for it,i : types //todo remove i
		{
			Fields.Push(new FieldParam(StringSpan(""),types[i]))

			if not simpleTuple
			{
				if IsGCPtr(it) or IsGCType(it)
				{
					needGC = true
				}	
			}
			if it == GTypeVoid
			{
				assert(false)
			}
		}


		if needGC
		{
			assert(GCType != null)
			Parents.Push(GCType->{TypeClass^}.ToClass)
		}
		

		SubWork(() ==> {
			//InternalsHatch.Await()
			assert(GDefautlSetTemplate != null)
			assert(TemplateInternalTupleConstructor != null)
			assert(GDefautlCompareTemplate != null)

			buildCtx := ClassBuildContext
			buildCtx.MemParents.Push(Parents[^])

			cnsts := List.{BoxExeConstObj^}
			setFunc := GDefautlSetTemplate.CreateFunc(GetFuncType(2,![ItType,ItType],![true,true],GTypeVoid,false,false),cnsts)
			DefaultSpace.Methods[StringSpan("=")].Push(setFunc)

			typs := Type^[100]
			isRef := bool[100]

			typs[0] = ItType
			isRef[0] = true

			for it,i : Fields
			{
				t := it.Value
				typs[i + 1] = t
				if t is in TypeClass or t is in TypeArr
					isRef[i + 1] = true
			}
			ll := Fields.Size() + 1
			fType := GetFuncType(ll,TArraySpan.{Type^}(typs[0]&,ll),TArraySpan.{bool}(isRef[0]&,ll),GTypeVoid,false,false)
			cnstrFunc := TemplateInternalTupleConstructor.CreateFunc(fType,cnsts)
			DefaultSpace.Methods[StringSpan("this")].Push(cnstrFunc)

			
			cmpFunc := GDefautlCompareTemplate.CreateFunc(GetFuncType(2,![ItType,ItType],![true,true],GTypeInt,false,false),cnsts)
			DefaultSpace.Methods[StringSpan("<=>")].Push(cmpFunc)

			ScopePutConstants()

			CurrentScope = this&

			if Parents.Size() != 0
			{
				Parents[0].AwaitVTableStep()
				for it,i : Parents[0].VTable
				{
					VTable.Push(it)
				}
				populatePoisons(Parents[0])
			}

			PrimeParentStep()

			PrepareVTable(buildCtx)
			CreateVTable(buildCtx)

			InheritStep(buildCtx)

			mthHatch.Emit()
		})
	}

	GetMethods := virtual !(StringSpan name, !(HybridQueue.{BoxUnit^,10})& -> bool cb) -> void
	{	
		mthHatch.Await()

		objs := HybridQueue.{BoxUnit^,10}
		populateMethods(name,StringSpan(""),objs)

		if objs.Size() != 0
			cb(objs)
	}
	GetMethodsInFields := virtual !(StringSpan name,FieldSpace^ fieldPtr, !(HybridQueue.{BoxUnit^,10})& -> bool cb) -> void
	{
		mthHatch.Await()
		assert(fieldPtr != null)
	}
	AwaitParentState := virtual !() -> void
	{
		mthHatch.Await()
	}
	AwaitTypeState := virtual !() -> void
	{
		mthHatch.Await()
	}
}


BoxClassTupleTemplate := class extend BoxClassTemplate
{
	GetClass := virtual !(List.{BoxExeConstObj^} inpts) -> BoxClass^
	{
		lst := List.{Type^}

		for it : inpts
		{
			if it is ConstType
			{
				lst.Push(it->{ConstType^}.Value)
			}else{
				return null
			}
		}
		res := GetTuple(lst)
		lst.Destroy()
		return res
	}
}

TupleInit := !() -> void
{
	bSpace := CodeSpaces[-1]&
	nm := StringSpan("Tuple")
	bSpace.Globals[nm].Push(new TemplateTypeVar(nm,new BoxClassTupleTemplate) )
}
