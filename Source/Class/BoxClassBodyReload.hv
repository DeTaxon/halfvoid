AppendClass BoxClassBody
{
	
	ReloadClass := !(HotloadContext^ ctx) -> void
	{
		className := GetGoodName()

		HotloadStream << "Started reload of class " << className << "\n"

		oldData := new ClassReloadOldData
		oldData.ctx = ctx

		for it, ind : DefaultSpace.MethodTemplates
		{
			setLine := ref oldData.OldFuncTemplates[ind]
			setLine.Push(it[^])
		}
		for it, ind : DefaultSpace.Methods
		{
			setLine := ref oldData.OldFuncs[ind]
			setLine.Push(it[^])
		}

		DefaultSpace.MethodTemplates.Destroy()

		WorkBody(oldData)

		HotloadStream << "Reload result: Recovered  Function templates = " << oldData.RecoveredFuncTemplates.Size()
			<< " , Functions = " << oldData.RecoveredFuncs.Size()
			<< "\n"

		HotloadStream << "End of reload of class " << className << "\n"

		oldData = null
	}
}


ClassReloadOldData := class extend TGCObject
{
	ctx := HotloadContext^

	OldFuncs := AVLMap.{Str,List.{BoxFunc^}}
	RecoveredFuncs := List.{BoxFunc^}

	OldFuncTemplates := AVLMap.{Str,List.{BoxFuncTemplate^}}
	RecoveredFuncTemplates := List.{BoxFuncTemplate^}

}
