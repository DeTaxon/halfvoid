AppendClass BoxClassBody
{
	
	ReloadClass := !(HotloadContext^ ctx) -> void
	{
		className := GetGoodName()

		if not startedParse
			return void

		HotloadStream << "Started reload of class " << className << "\n"

		oldData := new ClassReloadOldData
		oldData.ctx = ctx

		for it, ind : DefaultSpace.MethodTemplates
		{
			setLine := ref oldData.OldFuncTemplates[ind]
			setLine.Push(it[^])
		}
		for it, ind : DefaultSpace.Methods
		{
			setLine := ref oldData.OldFuncs[ind]
			setLine.Push(it[^])
		}

		for it, ind : PreVTableFuncs
		{
			setLine := ref oldData.OldFuncs[ind]
			setLine.Push(it[^])
		}

		oldSize := ItType.GetSize()
		oldHash := GetMemStructureHash()

		oldData.VTableType = VTableType
		oldData.VTableValue = VTableValue
		oldData.VTableField = VTableField

		PrimeParents.Destroy()
		Parents.Destroy()

		oldData.OldFields.Push(Fields[^])
		oldData.OldFieldPaths.Push(FieldsPath[^])

		DefaultSpace.MethodTemplates.Destroy()

		Fields.Destroy()
		FieldsPath.Destroy()

		VTable.Destroy()
		VTableType = null
		VTableValue = null
		VTableField = null

		WorkBody(oldData)

		newSize := ItType.GetSize()
		newHash := GetMemStructureHash()

		if newSize != oldSize
		{
			HotloadStream << "Class " << className << " changed size from " << oldSize << " to " << newSize << "\n"
			

			cnt := DB_TypeSizeUsage.bckwrd.Contain(this&) ?: "true" : "false"

			DB_TypeSizeUsage.Value.Get(this&,x ==> {
				if x is in BoxFuncBody
				{
					ctx.ReloadFunctions.PushUniq(x->{BoxFuncBody^})
				}
			})
			DB_LocalVarUsage.Value.Get(this&,x ==> {
				if x is in BoxFuncBody
				{
					ctx.ReloadFunctions.PushUniq(x->{BoxFuncBody^})
				}
			})
		}

		if VTableType != oldData.VTableType
		{
			HotloadStream << "Class " << className << " changed virtual table\n"

			ctx.ChangedVirtualTables.Push(this&)
			//TODO delete old vtable
		}

		if oldHash != newHash
		{
			HotloadStream << "Class " << className << " changed structure\n"
			DB_LocalVarUsage.Value.Get(this&,x ==> {
				if x is in BoxFuncBody
					ctx.ReloadFunctions.PushUniq(x->{BoxFuncBody^})
			})
			DB_FieldUsage.Value.Get(this&,x ==> {
				if x is in BoxFuncBody
					ctx.ReloadFunctions.PushUniq(x->{BoxFuncBody^})
			})

			DB_ClassExtends.Value.Get(this&, x ==> {
				HotloadStream << "Reloading class \n"
				if x is in BoxClassBody
				{
					ctx.ReloadClasses.PushUniq(x->{BoxClassBody^})
				}
			})
			DB_ClassExtends.Value.RemoveAll(this&)
		}

		HotloadStream << "Reload result: Recovered  Function templates = " << oldData.RecoveredFuncTemplates.Size()
			<< " , Functions = " << oldData.RecoveredFuncs.Size() << "/" << oldData.OldFuncs.Size()
			<< " , Fields = " << oldData.RecoveredFields.Size() << "/" << oldData.OldFields.Size()
			<< "\n"

		HotloadStream << "End of reload of class " << className << "\n"

		oldData = null
	}

	GetMemStructureHash := !() -> u32
	{
		hs := Crc32
		for it : Parents
		{
			th := it.ItType.ItHash
			hs.Feed(th&,4)
		}
		for it : Fields
		{
			th := it.Value.ItHash
			hs.Feed(th&,4)
		}
		return hs.Get()
	}
}


ClassReloadOldData := class extend TGCObject
{
	ctx := HotloadContext^

	OldFuncs := AVLMap.{Str,List.{BoxFunc^}}
	RecoveredFuncs := List.{BoxFunc^}

	OldFuncTemplates := AVLMap.{Str,List.{BoxFuncTemplate^}}
	RecoveredFuncTemplates := List.{BoxFuncTemplate^}

	OldFields := List.{FieldParam^}
	OldFieldPaths := List.{FieldPath^}
	RecoveredFields := List.{FieldParam^}

	VTableType := BoxClass^
	VTableValue := GlobalVar2^
	VTableField := FieldPath^ 

}
