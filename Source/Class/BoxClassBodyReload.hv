AppendClass BoxClassBody
{
	
	ReloadClass := !(HotloadContext^ ctx) -> void
	{
		className := GetGoodName()

		HotloadStream << "Started reload of class " << className << "\n"

		oldData := new ClassReloadOldData
		oldData.ctx = ctx

		for it, ind : DefaultSpace.MethodTemplates
		{
			setLine := ref oldData.OldFuncTemplates[ind]
			setLine.Push(it[^])
		}
		for it, ind : DefaultSpace.Methods
		{
			setLine := ref oldData.OldFuncs[ind]
			setLine.Push(it[^])
		}

		oldData.OldFields.Push(Fields[^])
		oldData.OldFieldPaths.Push(FieldsPath[^])

		DefaultSpace.MethodTemplates.Destroy()

		Fields.Destroy()
		FieldsPath.Destroy()

		oldMemStruct := GetMemStructureHash()

		WorkBody(oldData)

		curMemStructure := GetMemStructureHash()

		HotloadStream << "Reload result: Recovered  Function templates = " << oldData.RecoveredFuncTemplates.Size()
			<< " , Functions = " << oldData.RecoveredFuncs.Size() << "/" << oldData.OldFuncs.Size()
			<< " , Fields = " << oldData.RecoveredFields.Size() << "/" << oldData.OldFields.Size()
			<< "\n"

		HotloadStream << "End of reload of class " << className << "\n"

		oldData = null
	}

	GetMemStructureHash := !() -> u32
	{
		return 0
	}
}


ClassReloadOldData := class extend TGCObject
{
	ctx := HotloadContext^

	OldFuncs := AVLMap.{Str,List.{BoxFunc^}}
	RecoveredFuncs := List.{BoxFunc^}

	OldFuncTemplates := AVLMap.{Str,List.{BoxFuncTemplate^}}
	RecoveredFuncTemplates := List.{BoxFuncTemplate^}

	OldFields := List.{FieldParam^}
	OldFieldPaths := List.{FieldPath^}
	RecoveredFields := List.{FieldParam^}

}
