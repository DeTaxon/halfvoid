AppendClass BoxClassBody
{
	//TODO work with append
	//TODO fields
	//TODO somehow templates
	//TODO template virtual methods
	
	ReloadClass := !(HotloadContext^ ctx) -> void
	{
		classFuncs := List.{Tuple.{Token^,String^,u32,Type^}}
		checkReloadBody(ctx,Body,ctx.GetFileData(ClassFile),classFuncs)
		for it : Appends
		{
			//TODO good fileData, from it.0 file
			checkReloadBody(ctx,it.1,ctx.GetFileData(it.0),classFuncs)
		}

		fncs := List.{BoxFuncBody^}

		for it : DefaultSpace.Methods[^]
		{
			if it is not in BoxFuncBody
				continue
			fnc := it->{BoxFuncBody^}
			fncs.Push(fnc)
		}
		for it : PreVTableFuncs[^]
		{
			if it is not in BoxFuncBody
				continue
			fnc := it->{BoxFuncBody^}
			fncs.Push(fnc)
		}
		for it : classFuncs
		{
			foundFunc := BoxFuncBody^
			for fnc : fncs
			{
				if fnc.Name == it.1^
				{
					if it.3 == null
					{
						//WHAT?
						foundFunc = fnc
						break
					}else{
						if it.3 == fnc.GetType()
						{
							foundFunc = fnc
							break
						}
					}
				}
			}

			//TODO deleted functions somehow
			if foundFunc == null
			{
				//TODO new function
			}else{
				if foundFunc.hash == it.2
				{
					//nothing changed to function :)
				}else{
					itm := it.0.Down.Right.Right
					while itm.GetValue() in  !["virtual","poison"]
						itm = itm.Right
					p := PFunctionParser(itm)
					foundFunc.ReloadFunction(ctx,p)
					foundFunc.hash = it.2

					if PreVTableFuncs[^].ContainIf(@1 == foundFunc)
					{
						ctx.ChangedVirtualFunctions.Push(foundFunc)
					}
				}
			}
		}

	}

	checkReloadBody := !(HotloadContext^ ctx,Token^ tokens,Blob^ fileData,List.{Tuple.{Token^,String^,u32,Type^}} classFuncs) -> void
	{
		SyntaxCompress(tokens,LexHVFileRoot)
		iter := tokens.Down
		while iter != null
		{
			if iter.Down == null or iter.Down.Right == null or iter.Down.Right.GetValue() != ":="
			{
				iter = iter.Right
				continue
			}

			stVal := iter.Down.Right
			itm := stVal.Right

			isVirtual := false
			isPoison := false

			while itm.GetValue() in !["virtual","poison"]
			{
				isVirtual = isVirtual or itm.GetValue() == "virtual"
				isPoison = isPoison or itm.GetValue() == "poison"
				itm = itm.Right
			}

			name := String^
			if stVal.Left is TokenString
			{
				name = stVal.Left->{TokenString^}.Value
			}else if stVal.Left is TokenIndent
			{
				name = stVal.Left->{TokenIndent^}.Value.GetString()
			}else{
				assert(false)
			}

			c := PFunctionParser(itm)

			if c.IsFound()
			{
				classFuncs.Push(!{iter,name,c.ComputeHash(fileData),c.TryCreateFuncType(ItType)})
			}
			iter = iter.Right
		}

	}
}
