TableIdIter := int

AppendClass BoxClass
{
	PreVTableVars := AVLMap.{StringSpan,VTableEntry^}
	PreVTableFuncs := AVLMap.{StringSpan,List.{BoxFunc^}}

	VTable := List.{VTableEntry^}
	VTableType := BoxClass^
	VTableValue := GlobalVar2^
	VTableField := FieldPath^

	VTableId := int
	VTableCheckTypeArray := GlobalVar2^

	PrintVTable := virtual !(LLVMWriteContext^ ctx) -> void
	{
		if VTable.Size() == 0
			return void
		VTableValue.PrintCodeVar(ctx)
	}
	GetVTableIds := !(BoxArrayHolder dat) -> void
	{
		dat.vals.Push(GetExeInt(VTableId))
		Parents[^].GetVTableIds(dat)
	}
	PrepareVTable := !(ClassBuildContext buildCtx) -> void
	{
		if PreVTableVars.Size() != 0 or PreVTableFuncs.Size() != 0 or VTable.Size() != 0
		{
			TableIdIter += 1
			VTableId = TableIdIter

			arrHolder := BoxArrayHolder(GTypeInt,true,null)
			GetVTableIds(arrHolder)
			arrHolder.vals.Push(GetExeInt(0))

			newVar := CreateGlobalVar(StringSpan("$anon"),arrHolder.GetArrayType(),false)
			newVar.value = arrHolder.GetAsConst()
			VTableCheckTypeArray = newVar

			itName := StringSpan("@TypeInfo")

			assert(newVar != null)

			newConst := new CheckInfoConst(newVar)
			newVirtualVar := new VTableVar(itName,newConst)
			if VTable.Size() == 0
			{
				VTable.Push(newVirtualVar)
			}else{
				assert(VTable[0] is VTableVar and VTable[0].Name == itName)
				VTable[0] = newVirtualVar
			}
		}

		for it : PreVTableVars
		{
			found := false
			for inVar : VTable
			{
				if inVar.IsEq(it)
				{
					inVar = it
					found = true
					break
				}
			}
			if not found
			{
				VTable.Push(it)
			}
		}


		for fncList,fncName : PreVTableFuncs
		{
			for fnc : fncList
			{
				vFunc := new VTableFunc(fncName,fnc)

				ind := 0

				found := false
				for it,i : VTable
				{
					if it.IsEq(vFunc)
					{
						it = vFunc
						found = true
						ind = i
						break
					}
				}

				if not found
				{
					ind = VTable.Size()
					VTable.Push(vFunc)
				}

				vFunc := new BuildInVirtualCall(fnc,ind)
				vFunc.SetName(fncName)
				DefaultSpace.VirtualCleanMethods[fncName].Push(fnc)
				DefaultSpace.VirtualMethods[fncName].Push(vFunc)
				fnc.ParseBody()
			}
		}
	}
	CreateVTable := !(ClassBuildContext buildCtx) -> void
	{
		if VTable.Size() == 0
			return void
		tps := List.{Type^}

		for it : VTable
		{
			tps.Push(it.GetType())
		}
		VTableType = GetTuple(tps,true,true)
		VTableType.StartParseBody()
		VTableValue = new GlobalVar2(StringSpan(""),VTableType.ItType,false)
		
		cnst := new ClassConstValue
		cnst.ItType = VTableType.ItType

		for it : VTable
		{
			cnst.Value.Push(it.GetConst())
		}
		VTableValue.value = cnst
		VTableField = new FieldPathAbs(ItType,VTableType.ItType.GetPoint())
	}

	GetFieldInVTable := virtual !(StringSpan val) -> BoxFunc^
	{
		AwaitVTableStep()
		
		for it,i : VTable
		{
			if it is VTableVar 
				and it->{VTableVar^}.Name == val
			{
				asVar := it->{VTableVar^}
				cnsts := List.{BoxExeConstObj^}
				cnsts.Push(GetExeInt(i))
				res := TemplateInternalGetVTableVariable.CreateFunc(GetFuncType(1,![ItType][0]&,![true][0]&,asVar.GetType(),true,false), cnsts)
				cnsts.Destroy()
				return res
			}
		}
		return null
	}
}

VTableEntry := class
{
	Name := StringSpan

	PrintType := virtual !(LLVMWriteContext^ ctx) -> void { GetType().PrintType(ctx) }
	PrintConst := virtual !(LLVMWriteContext^ ctx) -> void {}
	IsEq := virtual !(VTableEntry^ cmp) -> bool {return false}
	GetType := virtual !() -> Type^ { return null }
	GetConst := virtual !() -> BoxExeConstObj^ { return null }
}

CheckInfoConst := class extend BoxExeConstObj
{
	ItGlobVar := GlobalVar2^
	this := !(GlobalVar2^ gv) -> void
	{
		ItGlobVar = gv
		ObjType = GTypeVoidP
	}
	PrintConst := virtual !(LLVMWriteContext^ ctx) -> void
	{
		f := ctx.writeStream

		f^ << "bitcast ("
		ItGlobVar.proxy.ObjType.PrintType(ctx)
		f^ << "* "
		ItGlobVar.PrintOutputName(ctx)
		f^ << " to i8*)"
	}
}

VTableVar := class extend VTableEntry
{
	ItConst := BoxExeConstObj^
	this := !(StringSpan nm, BoxExeConstObj^ cnst) -> void
	{
		Name = nm
		ItConst = cnst
	}
	PrintType := virtual !(LLVMWriteContext^ ctx) -> void { ItConst.GetType().PrintType(ctx) }
	PrintConst := virtual !(LLVMWriteContext^ ctx) -> void { ItConst.PrintUse(ctx)}
	IsEq := virtual !(VTableEntry^ cmp) -> bool {
		if not (cmp is VTableVar)
			return false
		asSameType := cmp->{VTableVar^}
		if asSameType.Name != Name
			return false
		if ItConst.GetType() != asSameType.ItConst.GetType()
			return false
		return true
	}
	GetType := virtual !() -> Type^ { return ItConst.GetType() }
	GetConst := virtual !() -> BoxExeConstObj^ { return ItConst }
}
VTableFunc := class extend VTableEntry
{
	Value := BoxFunc^

	this := !(StringSpan nm, BoxFunc^ fn) -> void
	{
		Name = nm
		Value = fn
	}
	GetType := virtual !() -> Type^
	{
		return Value.GetType().GetPoint()
	}
	PrintType := virtual !(LLVMWriteContext^ ctx) -> void 
	{
		Value.GetType().PrintType(ctx)
		ctx.writeStream^ << "*"
	}
	GetConst := virtual !() -> BoxExeConstObj^
	{
		return new ConstFuncPtr(Value)
	}
	PrintConst := virtual !(LLVMWriteContext^ ctx) -> void 
	{
		Value.PrintName(ctx)
	}
	IsEq := virtual !(VTableEntry^ cmp) -> bool 
	{
		if Name != cmp.Name
			return false
		if cmp is VTableFunc
		{
			f1 := Value.GetType()->{TypeFunc^}
			f2 := cmp->{VTableFunc^}.Value.GetType()->{TypeFunc^}

			if f1.Params.Size() != f2.Params.Size()
				return false
			for i : f1.Params.Size()
			{
				if i == 0
					continue
				if f1.Params[i].ItType != f2.Params[i].ItType
					return false
				if f1.Params[i].IsRef != f2.Params[i].IsRef
					return false
			}

			return true
		}
		return false
	}
}
