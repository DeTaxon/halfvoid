ResistFunc := class extend BoxFuncCommon
{
	base := BoxFunc^
	resId := int

	this := !(BoxFunc^ baseFunc,Type^ fncType) -> void
	{
		base = baseFunc
		SetType(fncType->{TypeFunc^})
		if baseFunc is in BoxFuncBody
		{
			baseFunc->{BoxFuncBody^}.ParseBody()
		}
	}
	PrintName := virtual !(LLVMWriteContext^ ctx) -> void
	{
		ctx.writeStream^ << " bitcast ("
		base.GetType().PrintType(ctx)
		ctx.writeStream^ << "* "
		base.PrintUse(ctx)
		ctx.writeStream^ << " to "
		GetType().PrintType(ctx)
		ctx.writeStream^ << "*)"
	}
	PrintPre := virtual !(LLVMWriteContext^ ctx) -> void
	{
	}
	PrintUse := virtual !(LLVMWriteContext^ ctx) -> void
	{
		PrintName(ctx)
	}
	PrintFuncCall := virtual !(LLVMWriteContext^ ctx,int resId,int debId,ExeDownList lst) -> void
	{
		PrintFuncCallCommon(ctx,this&,resId,lst)
	}
	ParseBody := virtual !() -> void
	{
		base.ParseBody()
	}
}
