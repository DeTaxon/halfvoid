BoxClassPoison := class extend BoxClass
{
	PoisonFunctions := AVLMap.{StringSpan,Tuple.{Token^,bool}} //bool isVirtual
	PoisonFields := AVLMap.{StringSpan,Tuple.{Token^,bool}}

	populatePoisons := !(BoxClass^ cls) -> void
	{
		if not (cls is in BoxClassBody)
			return void
		cls2 := cls->{BoxClassBody^}
		for it,ind : cls2.PoisonFunctions
		{
			if not it.1
			{
				newFunc := TryParseFunction(it.0)
				assert(newFunc != null) //TODO error
				assert(newFunc is in BoxFuncTemplateBody)
				asTmpl := newFunc->{BoxFuncTemplateBody^}
				asTmpl.SetName(ind)
				asTmpl.ParentScope = this&
				DefaultSpace.MethodTemplates[ind].Push(asTmpl)
			}else{
				if not PreVTableFuncs.Contain(ind)
				{
					newFunc := TryParseFunction(it.0)
					assert(newFunc != null) //TODO error
					assert(newFunc is in BoxFuncTemplate)
					newFunc2 := newFunc->{BoxFuncTemplate^}.GetOneFunc()->{BoxFuncBody^}
					assert(newFunc2 is in BoxFuncBody)

					newFunc2.ParentScope = this&
					newFunc2.SetName(ind)
					newFunc2.Work()

					PreVTableFuncs[ind].Push(newFunc2)
				}
			}
		}
		for it, ind : cls2.PoisonFields
		{
			assert(it.1)
			if PreVTableVars.Contain(ind)
				continue
			exeObj := TryGetExeCall(it.0)
			if exeObj == null
			{
				CurrentWork?.SetErrorMessage(it.0.MakeError("Can not set poison variable, could not compute"))
				return void
			}
			if exeObj is not in BoxExeConstObj
			{
				CurrentWork?.SetErrorMessage(it.0.MakeError("Poison value must compute to constant"))
				return void
			}
			newVal := new VTableVar(ind,exeObj->{BoxExeConstObj^})
			PreVTableVars[ind] = newVal
		}
		populatePoisons(cls2.Parents[^])
	}
}
