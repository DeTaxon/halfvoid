

PClassParser := class
{
	isFound := bool
	classToken := Token^

	isPacked := bool
	parents := HybridQueue.{Tuple.{Token^,InheritanceType},2}
	bodyToken := Token^
	constValue := Token^

	this := !(Token^ itm) -> void
	{
		classToken = itm

		if itm == null or itm.Down == null
			return void
		itm = itm.Down

		if  itm.GetValue() != "class" and itm.GetValue() != "packed_class"
			return void
		

		if itm.GetValue() == "packed_class"
			isPacked = true

		iter := itm.Right

		if iter.GetValue() == "."
		{
			constValue = iter.Right
			iter = constValue.Right
		}

		while iter.GetValue() in !["extend","#Reserve"]
		{
			iter = iter.Right

			inh := InheritanceType
			switch iter.Left.GetValue()
			{
				case "extend" inh = "extend"
				case "#Reserve" inh = "reserve"
			}

			parents.Emplace(iter,inh)
			iter = iter.Right

			while iter.GetValue() == ","
			{
				iter = iter.Right
				parents.Emplace(iter,inh)
				iter = iter.Right
			}
			assert(iter.GetValue() == "{}")
		}
		bodyToken = iter

		if bodyToken == null
			return void
		isFound = true
	}


	IsFound := !() -> bool
	{
		return isFound
	}
	IsTemplate := !() -> bool
	{
		return constValue != null
	}

	CreateObject := !() -> BoxUnit^
	{
		if not IsFound()
			return null
		if constValue != null
			return new BoxClassTemplateBody(isPacked,parents,bodyToken,constValue)
		return new BoxClassBody(isPacked,parents,bodyToken)
	}
	ComputeHash := !(Blob^ fileData) -> u32
	{
		if fileData.Size() == 0
			return 0
		if classToken.Line == null or bodyToken == null
			return 0
		if bodyToken is not TokenSkobSymbol
			return 0
		asSkob := bodyToken->{TokenSkobSymbol^}

		if asSkob.EndLine == null
			return 0

		startLine := classToken.Line.Line
		endLine := asSkob.EndLine.Line

		arr := fileData.GetPointer()
		startLineIndex := 0
		i := 0
		curLine := 1
		blbSize := fileData.Size()
		while i < blbSize and curLine != startLine
		{
			if arr[i] == '\n'
				curLine += 1
			i += 1
		}
		startLineIndex = i
		while i < blbSize and curLine != endLine
		{
			if arr[i] == '\n'
				curLine += 1
			i += 1
		}
		while i < blbSize and arr[i] != '\n'
		{
			i += 1
		}
		if i < blbSize
			i += 1
		funcCode := StringSpan(arr[startLineIndex]&,i - startLineIndex)

		crc := Crc32()
		crc.Feed(funcCode.NonNullStr(),funcCode.Size())
		return crc.Get()
	}
}

TryParseClass := !(Token^ itm) -> BoxUnit^
{
	c := PClassParser(itm)
	if not c.IsFound()
		return null
	return c.CreateObject()
}


BoxClassBody := class extend BoxClassPoison
{
	Body := Token^
	ClassFile := BoxFile^
	ParentTokens := HybridQueue.{Tuple.{Token^,InheritanceType},5}

	VParentState := THatch
	VTableState := THatch
	FieldsState := THatch

	parseTask := Task^

	NamedConstants := AVLMap.{StringSpan,BoxUnit^}
	NamedConstantsVars := List.{BoxUnit^}

	hash := u32

	ComputeConsts := !() -> void
	{
		for it,ind : NamedConstants
		{
			if it is in Type
			{
				NamedConstantsVars.Push(new TypeVar(ind,it->{Type^}))
			}else if it is TypeVariadicVar {
				NamedConstantsVars.Push(it)
			}else{
				assert(it is in BoxExeConstObj)
				NamedConstantsVars.Push(new ConstVar(ind,it->{BoxExeConstObj^}))
			}
		}
	}
	PutItConstants := virtual !() -> void
	{
		for it : NamedConstantsVars
		{
			UnitStack.PushFront(it)
		}
	}

	ParentScope := BoxUnit^
	GetParentScope := virtual !() -> BoxUnit^ { return ParentScope }

	this := !(bool isPacked,HybridQueue.{Tuple.{Token^,InheritanceType},2} parents,Token^ bdy) -> void
	{
		Name = "anon" //todo
		ItId = GetNewId()
		ItType = new TypeClass(this&)
		
		ParentTokens.Push(parents[^])

		ParentScope = CurrentScope
		itFile := GetFileScope()

		IsPacked = isPacked
		Body = bdy

		classFile = CurrentFile

		hvClass.baseClass = this&
	}

	startedParse := bool
	classFile := BoxFile^
	StartParseBody := virtual !() -> void
	{
		if startedParse
		{
			//ComputeDesire(parseTask?.Desired,CurrentTask.Desired)
			return void
		}
		startedParse = true

		//GClassesInProgress.Push(this&)
		AddClassWork()

		cls := this&
		parseTask = TSpawnTask(() ==> [cls] { //todo pass CurrentFile directly?
			CurrentWork = AddClassWork()
			CurrentFile = cls.classFile
			cls.WorkBody(null)
		})
		//ComputeDesire(parseTask.Desired,CurrentTask.Desired)
	}
	AddClassWork := !() -> CWorkUnit^
	{
		result = new CWorkClassCompile(this&)
		WorkBag.AddWork(result)
	}
	AwaitTypeState := virtual !() -> void
	{
		StartParseBody()

		if #Var("Tracy") and not FieldsState.Emited()
		{
			if #Var("Tracy") TracyPrintf("Task paused on class %p %s",this&,GetGoodName())
			FieldsState.Await()
			if #Var("Tracy") TracyPrintf("Task Resumed from class %p %s",this&,GetGoodName())
		}else{
			FieldsState.Await()
		}
	}
	AwaitReadyState := virtual !() -> void
	{
		StartParseBody()
		AwaitTypeState()
	}
	GetGoodName := !() -> Str
	{
		echo := TEchoStream
		
		echo << Name
		if Constants?.Constants.Size() != 0
		{
			echo << ".{"
			for it,i : Constants.Constants
			{
				if it is not in BoxExeConstObj
				if i != 0
					echo << ","
				it->{BoxExeConstObj^}.PrintDebug(echo)
			}
			echo << "}"
		}
		result->AsString = echo.GetString()
	}
	WorkBody := virtual !(ClassReloadOldData^ oldData) -> void
	{
		GParsedAllFiles.Await()

		if #Var("Tracy") TracyPrintf("Started class parse %p %s",this&,GetGoodName())

		ScopePutConstants()

		buildCtx := ClassBuildContext

		for i : ParentTokens.Size()
		{
			inhType := CheckTemplateType(null,ParentTokens[i].0,NamedConstants)
			if inhType == null
			{
				CurrentWork?.SetErrorMessage(ParentTokens[i].0.MakeError("can not inherit unknown class"))
				return void
			}
			if not (inhType is TypeClass)
			{
				CurrentWork?.SetErrorMessage(ParentTokens[i].0.MakeError("parent type must be class"))
				return void
			}
			asClsParent := inhType->{TypeClass^}
			asClsParent.ToClass.StartParseBody()
			asClsParent.ToClass.AwaitParentStep()

			buildCtx.All.Emplace(asClsParent.ToClass,ParentTokens[i].1)
		}
		
		for it : buildCtx.All
		{
			if it.1 == "reserve"
				continue

			for ress : it.0.Reserved
			{
				buildCtx.ReservedParents.Push(ress)
			}
		}
		for it : buildCtx.All
		{
			itReserved := false
			for inReserv : buildCtx.ReservedParents
			{
				if inReserv == it.0
					itReserved = true
			}
			if itReserved
			{
				buildCtx.FillReserve.Push(it.0)
			}else{
				buildCtx.MemParents.Push(it.0)
				if not (it.1 == "reserve")
					buildCtx.FieldsParents.Push(it.0)
			}
		}

		for it : buildCtx.MemParents
		{
			Parents.Push(it)
		}

		for it : buildCtx.All
		{
			if not (it.1 == "reserve")
				continue
			buildCtx.ReservedParents.Push(it.0)
		}

		for it : buildCtx.ReservedParents
		{
			isMissed := true
			for fld : buildCtx.FillReserve
			{
				if fld == it
					isMissed = false
			}
			if isMissed
			{
				buildCtx.UnfilledReserve.Push(it)
			}
		}
		Reserved.Push(buildCtx.UnfilledReserve[^])

		for it : buildCtx.FillReserve
		{
			ApplyedReserve.Push(it)	
		}

		PrimeParentStep()
		VParentState.Emit()

		CurrentScope = this&

		funcs := List.{Tuple.{StringSpan,BoxFunc^}}

		checkClassBody(Body,oldData,funcs)
		for it : Appends
		{
			checkClassBody(it.1,oldData,funcs)
		}
		
		if buildCtx.MemParents.Size() != 0
		{
			buildCtx.MemParents[0].AwaitVTableStep()
			for it,i : buildCtx.MemParents[0].VTable
			{
				VTable.Push(it)
			}
		}

		populatePoisons(Parents[^])

		PrepareVTable(buildCtx)
		CreateVTable(buildCtx)

		VTableState.Emit()

		CheckVTableFuncUsage()

		InheritStep(buildCtx,oldData)

		if #Var("Tracy") TracyPrintf("Ended class parse %p %s",this&,GetGoodName())
		FieldsState.Emit()

	}

	CheckVTableFuncUsage := !() -> void
	{
		fam := GetFamily()

		for usedFunc : fam.UsedVirtualFunctions
		{
			spn := usedFunc->AsString.AsStringSpan()

			if PreVTableFuncs.Contain(spn)
			{
				PreVTableFuncs[spn][^].ParseBody()
			}
		}
	}

	checkClassBody := !(Token^ bodyVal,ClassReloadOldData^ oldData,@TT funcs) -> void
	{
		SyntaxCompress(bodyVal,LexHVFileRoot)
		iter := bodyVal.Down

		while iter != null
		{
			if iter.Down?.Right?.GetValue() == ":="
			{
				assert(iter.Down is TokenIndent or iter.Down is TokenString) // left of := can only be name by syntax creation
				name := StringSpan
				if iter.Down is TokenIndent
				{
					name = iter.Down->{TokenIndent^}.Value
				}else{
					name = StringSpan(iter.Down->{TokenString^}.Value.Str())
				}

				itm := iter.Down.Right.Right

				asType := ParseType(itm)
				if asType != null
				{
					newField := FieldParam^
					if oldData != null
					{
						for it : oldData.OldFields
						{
							if it.Name == name and it.Value == asType
							{
								newField = it
								oldData.RecoveredFields.Push(it)
								break
							}
						}
					}
					if newField == null
						newField = new FieldParam(name,asType)
					Fields.Push(newField)
				}else
				{

					asFunc := BoxUnit^
					isPoison := false
					isVirtual := false

					while true
					{
						switch itm.GetValue()
						{
							case "poison"
								isPoison = true
								itm = itm.Right
							case "virtual"
								isVirtual = true
								itm = itm.Right
							case void
								break
						}
					}

					fncParser := PFunctionParser(itm)
					fncUsed := false

					if fncParser.IsFound()
					{
						if oldData != null
						{
							fncHash := fncParser.ComputeHeaderHash(bodyVal.Line.File.fileData)
							thisFullHash := u32
							for it : oldData.OldFuncTemplates[name]?
							{
								if it.GetHeaderHash() == fncHash
								{
									asFunc = it
									thisFullHash = it.GetFullHash()
									oldData.RecoveredFuncTemplates.Push(it)
									break
								}
							}
							for it : oldData.OldFuncs[name]?
							{
								if it.GetHeaderHash() == fncHash
								{
									asFunc = it
									thisFullHash = it.GetFullHash()
									oldData.RecoveredFuncs.Push(it)
									break
								}
							}
							if asFunc != null
							{
								fncHash2 := fncParser.ComputeHash(bodyVal.Line.File.fileData)

								if fncHash2 != thisFullHash
								{
									HotloadStream << "Function in class changed body\n"
									if asFunc is in BoxFuncBody
									{
										asFunc->{BoxFuncBody^}.ReloadFunction(oldData.ctx,fncParser&)
									}else if asFunc is in BoxFuncTemplateBody {
										asFunc->{BoxFuncTemplateBody^}.ReloadFunctions(oldData.ctx,fncParser&,bodyVal.Line.File.fileData)
									}
								}
							}

						}
						if asFunc == null
						{
							if not isPoison and TemplateParent? is in BoxClassTemplateBody
							{
								pr := TemplateParent->{BoxClassTemplateBody^}
								if pr.ResistFunctions.Contain(fncParser.bodyToken)
								{
									readyFunc := pr.ResistFunctions[fncParser.bodyToken]->{BoxFuncBody^}
									probData := fncParser.CreateObject()->{BoxFuncTemplateBody^}
									probData.IsOneFunc()
									probData.AwaitHeaderParse()

									asFunc = new ResistFunc(readyFunc,probData.hData.CreateFuncType())

									delete probData
								}
							}

							if asFunc == null
							{
								asFunc = fncParser.CreateObject()

								assert(asFunc is in BoxFuncTemplateBody)

								tmpl := asFunc->{BoxFuncTemplateBody^}

								if tmpl.Properties.Contain("#TemplateResist") and TemplateParent? is in BoxClassTemplateBody
								{
									tmpl := TemplateParent->{BoxClassTemplateBody^}

									asTmplt := asFunc->{BoxFuncTemplateBody^}
									assert(asTmplt.IsOneFunc())
									asTmplt.IsOneFunc()
									asTmplt.AwaitHeaderParse()
									newFunc := asTmplt.GetOneFunc()

									tmpl.ResistFunctions[fncParser.bodyToken] = newFunc
								}
							}
						}
					}

					if fncUsed
					{
					}else if asFunc != null
					{
						if isPoison
						{
							assert(asFunc is in BoxFuncTemplateBody)
							asTmpl := asFunc->{BoxFuncTemplateBody^}
							PoisonFunctions[name] = !{itm,isVirtual}
						}
						if asFunc is in BoxFuncTemplate and asFunc->{BoxFuncTemplate^}.IsOneFunc()
						{
							//TODO maybe i only need templates
							asFunc = asFunc->{BoxFuncTemplate^}.GetOneFunc()
						}
						if asFunc is in BoxFunc
						{
							if asFunc is in BoxFuncBody
								asFunc->{BoxFuncBody^}.ParentScope = this&

							f := asFunc->{BoxFunc^}
							f.SetName(name)
							f.Work()

							if f is in BoxFuncBody and ParentScope is BoxFile
							{
								f2 := f->{BoxFuncBody^}
								f2.hash = fncParser.ComputeHash(ParentScope->{BoxFile^}.fileData)
								f2.headerHash = fncParser.ComputeHeaderHash(ParentScope->{BoxFile^}.fileData)
							}

							if isVirtual
							{
								PreVTableFuncs[name].Push(f)
							}else{
								DefaultSpace.Methods[name].Push(f)
							}
						}else {
							if isPoison
							{
								CurrentWork?.SetErrorMessage(itm.MakeError("poison function can not be template"))
								return void
							}
							tmpl := asFunc->{BoxFuncTemplate^}
							tmpl.SetName(name)
							DefaultSpace.MethodTemplates[name].Push(tmpl)
						}
					}else
					{
						if itm.Down?.GetValue() == "fake"
						{
							CheckFakeFields(iter)
						}else{
							if itm.GetValue() == "default"
							{
								assert(GDefaultSetTemplate != null)
								assert(GDefaultCompareTemplate != null)

								setFunc := BoxFunc^
								cnsts := List.{BoxExeConstObj^}
								switch name
								{
									case "="
										setFunc = GDefaultSetTemplate.CreateFunc(GetFuncType(2,![ItType,ItType],![true,true],GTypeVoid,false,false),cnsts)
									case "<=>"
										setFunc = GDefaultCompareTemplate.CreateFunc(GetFuncType(2,![ItType,ItType],![true,true],GTypeInt,false,false),cnsts)
									case void
										CurrentWork?.SetErrorMessage(itm.MakeError("unknown default operator"))
										return void
								}
								assert(setFunc != null)
								DefaultSpace.Methods[name].Push(setFunc)
							}else {
								exeObj := TryGetExeCall(itm)
								if exeObj == null
								{
									CurrentWork?.SetErrorMessage(itm.MakeError("Unknown object"))
									return void
								}
								if exeObj is in BoxExeConstObj and isVirtual
								{
									newVal := new VTableVar(name,exeObj->{BoxExeConstObj^})
									PreVTableVars[name] = newVal
									if isPoison
									{
										PoisonFields[name] = !{itm,true}
									}
								}else{
									CurrentWork?.SetErrorMessage(itm.MakeError("Unknown object"))
									return void
								}
							}
						}
					}
				}
			}
			iter = iter.Right
		}

	}
	CheckFakeFields := !(Token^ itm) -> void
	{
		if not (itm.Down is TokenIndent)
		{
			CurrentWork?.SetErrorMessage(itm.MakeError("fake field must be named by simple word"))
			return void
		}

		fieldName := itm.Down->{TokenIndent^}.Value.AsStringSpan()
		
		skob := itm.Down.Right.Right.Down.Right
		SyntaxCompress(skob,LexHVFileRoot)

		itr := skob.Down

		thisField := FieldSpaces[fieldName]&

		thisField.itClass = this&

		while itr != null
		{
			if itr.Down == null or itr.Down.Right == null or itr.Down.Right.GetValue() != ":="
			{
				CurrentWork?.SetErrorMessage(itr.MakeError("Fake field can only contain functions"))
				return void
			}
			name := StringSpan

			if itr.Down is TokenString
			{
				name = StringSpan(itr.Down->{TokenString^}.Value.Str())
			}else{
				assert(itr.Down is TokenIndent)
				name = itr.Down->{TokenIndent^}.Value
			}

			asFunc := TryParseFunction(itr.Down.Right.Right)
			if asFunc != null
			{
				if asFunc is in BoxFuncTemplate and asFunc->{BoxFuncTemplate^}.IsOneFunc()
				{
					asFunc = asFunc->{BoxFuncTemplate^}.GetOneFunc()
				}
				if asFunc is in BoxFunc
				{
					if asFunc is in BoxFuncBody
						asFunc->{BoxFuncBody^}.ParentScope = this&

					f := asFunc->{BoxFunc^}
					thisField.Methods[name].Push(f)
					f.SetName(name)
					f.Work()
				}else {
					tmpl := asFunc->{BoxFuncTemplate^}
					tmpl.SetName(name)
					thisField.MethodTemplates[name].Push(tmpl)
				}
			}else
			{
			}
			itr = itr.Right
		}
	}
	AwaitParentStep := virtual !() -> void { StartParseBody() VParentState.Await() }
	AwaitVTableStep := virtual !() -> void { StartParseBody() VTableState.Await() }

	IsComplete := virtual !() -> bool
	{
		return FieldsState.Emited()
	}
}

CWorkClassCompile := class extend CWorkUnit
{
	itClass := BoxClassBody^

	this := !(BoxClassBody^ b) -> void
	{
		itClass = b
	}

	DoWork := virtual !() -> CWorkState 
	{
		if IsDone()
			return "Complete"
		return "Failed"
	}
	IsDone := virtual !() -> bool 
	{
		return itClass.IsComplete()
	}
	GetErrorMessage := virtual !() -> String^ 
	{	
	}
	
	GetWorkTask := virtual !() -> Task^ 
	{
		return itClass.parseTask
	}
}
