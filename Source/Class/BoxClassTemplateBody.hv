BoxClassTemplate := class extend BoxUnit
{
	GetClass := virtual !(BoxExeConstObj^[] inpts) -> BoxClass^
	{
		assert(false)
	}
	SetName := virtual !(StringSpan newName) -> void {}
}

BoxClassTemplateBody := class extend BoxClassTemplate
{
	constantsToken := Token^
	bodyToken := Token^
	
	IsPacked := bool
	ItParents := HybridQueue.{Tuple.{Token^,InheritanceType},2}

	ItConstsTokens := List.{Token^}

	ItName := StringSpan

	ParentScope := BoxUnit^
	ItFile := BoxFile^

	ResistFunctions := AVLMap.{FileLine^,AVLMap.{StringSpan,BoxUnit^}}

	this := !(bool isPacked,HybridQueue.{Tuple.{Token^,InheritanceType},2} parents,Token^ bdy, Token^ cnsts) -> void
	{
		bodyToken = bdy
		constantsToken = cnsts
		IsPacked = isPacked
		ItParents.Push(parents[^])
		ItFile = CurrentFile

		if cnsts != null
			SyntaxCompress(cnsts,LexHVInputVars)

		iter := cnsts.Down
		while iter != null
		{
			if iter.GetValue() != ","
			{
				ItConstsTokens.Push(iter)
			}
			iter = iter.Right
		}
		ItName = "@anon"
		ParentScope = CurrentScope
	}
	SetName := virtual !(StringSpan newName) -> void
	{
		ItName = newName
	}

	classes := AVLMap.{int,List.{Tuple.{ConstantHolder^,BoxClass^}}}
	GetClass := virtual !(BoxExeConstObj^[] inpts) -> BoxClass^
	{
		hsh := 0
		
		for it : inpts
		{
			if it is in Type
			{
				hsh += it->{Type^}.ItHash
			}
		}

		itList := ref classes[hsh]

		inConsts := new ConstantHolder
		inConsts.Constants.Push(inpts[^])

		for it : itList
		{
			if it.0^ == inConsts^
			{
				delete inConsts
				return it.1
			}
		}
		result = CreateClass(inConsts,inpts)
		itList.Emplace(inConsts,result)
	}
	CreateClass := virtual !(ConstantHolder^ inConsts,BoxExeConstObj^[] inpts) -> BoxClass^
	{
		namedConstants := AVLMap.{StringSpan,BoxUnit^}
		TemplateCheckConstants(inpts,ItConstsTokens,namedConstants)

		oldScope := CurrentScope
		defer CurrentScope = oldScope
		CurrentScope = ParentScope

		newClass := new BoxClassBody(IsPacked,ItParents,bodyToken)
		newClass.Constants = inConsts
		newClass.SetName(ItName)

		newClass.NamedConstants[i] = namedConstants[^i]
		newClass.ComputeConsts()
		newClass.TemplateParent = this&
		newClass.IsPacked = IsPacked

		ItFile?.FileClasses.Push(newClass)

		return newClass
	}
}
