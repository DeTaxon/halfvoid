AppendClass BoxClass
{

	fieldsOffset := int

	InheritStep := !(ClassBuildContext ctx,ClassReloadOldData^ oldData) -> void
	{
		assert(FieldsPath.Size() == 0)

		Parents[^].AwaitTypeState()

		DB_ClassExtends.Add(this&,Parents[^])

		DefaultSpace.itClass = this&
		assert(Parents.Size() <= 1) //FieldSpace does not support multiple inheritance
		if Parents.Size() != 0
		{
			DefaultSpace.baseSpace = Parents[0].DefaultSpace&
			for par : Parents //TODO move to BoxClass
			{
				for pSpace,ind : par.FieldSpaces
				{
					FieldSpaces[ind].baseSpace = pSpace&
					FieldSpaces[ind].itClass = this&
				}
			}
		}

		ItAlign = 1
		ItAlign = max(ItAlign,Parents[^].ItAlign)

		posOffset := 0
		posMemOffset := 0

		if VTable.Size() != 0
		{
			posOffset += 1
			posMemOffset = GArchByteSize
			ItAlign = max(ItAlign,GArchByteSize)
		}

		assert(Parents.Size() <= 1)
		if Parents.Size() > 0
		{
			posMemOffset = Parents[0].ItSize
			posOffset += Parents[0].GetFieldsCount()

			cb := (BoxClass^ cls, int id) ==> {
				RecalculateSize()

				//dependentsOnGrow[^](cls,id) //todo cls or this?
				//fieldIterators[^].ItemCreated(id)
				
			}
		}

		if Parents.Size() >= 2
		{
			assert(false) //TODO
		}


		for fil,i : Fields
		{
			fil.Value.NotifyUse()

			fPath := FieldPath^

			if oldData != null
			{
				for it : oldData.OldFieldPaths
				{
					if it.Field == fil
					{
						fPath = it
						break
					}
				}
			}

			if fPath == null
				fPath = new FieldPath(ItType,fil.Value)
			fPath.Field = fil
			fPath.Index = i

			unalign := posMemOffset mod fil.Value.GetAlign()
			ItAlign = max(ItAlign,fil.Value.GetAlign())

			if unalign != 0 and not IsPacked
			{
				posMemOffset += fil.Value.GetAlign() - unalign
			}
			fieldSize := fil.Value.GetSize()
			if fieldSize == 0 and fil.Value is TypeClass
				fieldSize = 1 //TODO Zero size class optimization
			fPath.MemOffset = posMemOffset
			posMemOffset += fieldSize

			FieldsPath.Push(fPath)

			if fil.Value is in TypeClass
			{
				fldClass := fil.Value->{TypeClass^}.ToClass
				DB_ClassComposition.Add(this&,fldClass)
			}
		}
		if IsPacked
			ItAlign = 1
		ItSize = posMemOffset
		fieldsOffset = posOffset

	}
	GetLocalFieldsCount := !() -> int
	{
		return Fields.Size()
	}
	GetFieldsCount := !() -> int
	{
		sum := 0
		for it : Parents
			sum += it.GetFieldsCount()
		sum += Fields.Size()
		return sum
	}

	AddExtraField := !(Str newName, Type^ newFieldType) -> FieldPath^
	{
		//TODO check for existing name

		AwaitTypeState()
		
		posMemOffset := ItSize

		newField := new FieldParam(newName,newFieldType)
		newPath := new FieldPath(ItType,newFieldType)
		newPath.Index = FieldsPath.Size()

		newPath.Field = newField

		unalign := ItSize mod newFieldType.GetAlign()
		ItAlign = max(ItAlign,newFieldType.GetAlign())

		if unalign != 0 and not IsPacked
		{
			posMemOffset += newFieldType.GetAlign() - unalign
		}
		fieldSize := newFieldType.GetSize()
		if fieldSize == 0 and newFieldType is TypeClass
			fieldSize = 1 //TODO Zero size class optimization
		newPath.MemOffset = posMemOffset
		posMemOffset += fieldSize

		FieldsPath.Push(newPath)
		Fields.Push(newField)
		if IsPacked
			ItAlign = 1
		ItSize = posMemOffset

		newFieldId := GetFieldsCount() - 1

		if newFieldType is in TypeClass
		{
			fldClass := newFieldType->{TypeClass^}.ToClass
			DB_ClassComposition.Add(this&,fldClass)
		}
		//fieldLayoutChanged()

		DB_TypeSizeUsage.Value.Get(this&,x ==> {
			GHotloadCntx.AddFunction(x)
		})

		DB_ClassExtends.Value.Get(this&,x ==> {
			x->{BoxClassBody^}.fieldLayoutChanged()
		})
		DB_ClassComposition.Value.Get(this&, x ==> {
			x->{BoxClassBody^}.fieldLayoutChanged()
		})

		return newPath
	}

	GetFieldFailedCB := virtual !(Str val) -> Type^
	{
		return null
	}
	GetField := virtual !(Str val) -> FieldPath^
	{
		AwaitTypeState()

		for it : FieldsPath
		{
			if it.Field.Name == val
				return it
		}
		for it : Parents
		{
			return it.GetField(val)
		}

		if LazyFields.Contain(val)
		{
			//TODO instead of adding at the end? maybe add in order of creation
			obj := ref LazyFields[val]

			if obj.0 != null
				return AddExtraField(val,obj.0)
			newType := ParseType(obj.1)
			if newType != null
				return AddExtraField(val,newType)
			//TODO if newType == null , emit that field of class is ill
		}

		newType := GetFieldFailedCB(val)
		if newType != null
			return AddExtraField(val,newType)

		return null
	}
	GetFieldByIndex := virtual !(int val) -> FieldPath^
	{
		AwaitTypeState()

		assert(Parents.Size() <= 1)

		totalCount := GetFieldsCount()
		offsetCount := totalCount - Fields.Size()

		if val < 0 or val >= totalCount
			return null
		if val < offsetCount
			return Parents[0].GetFieldByIndex(val)
		return FieldsPath[val - offsetCount]
	}
	GetFieldByIndexRaw := virtual !(int val) -> FieldPath^
	{
		AwaitTypeState()

		if VTableField != null
		{
			if val == 0
			{
				return VTableField
			}else{
				val -= 1
			}
		}

		assert(Parents.Size() <= 1)

		totalCount := GetFieldsCount()
		offsetCount := totalCount - Fields.Size()

		if val < 0 or val >= totalCount
			return null
		if val < offsetCount
			return Parents[0].GetFieldByIndex(val)
		return FieldsPath[val - offsetCount]
	}
	GetFieldByIndexTuple := virtual !(int val) -> FieldPath^
	{
		AwaitTypeState()

		assert(Parents.Size() <= 1)

		if val < 0 or val >= FieldsPath.Size()
			return null
		return FieldsPath[val]
	}
	GetFieldsIterator := virtual !(BoxExeObj^ itm) -> BoxMetaObj^
	{
		DB_TypeSizeUsage.Add(CurrentFunc?,this&)
		return new GrowableClassMetaFields(itm,this&)
	}
	GetFieldsIteratorLocal := virtual !(BoxExeObj^ itm) -> BoxMetaObj^
	{
		DB_TypeSizeUsage.Add(CurrentFunc?,this&)
		return new GrowableClassMetaFieldsLocal(itm,this&)
	}

	RecalculateSize := !() -> void
	{
		Parents[^].AwaitTypeState()

		assert(Parents.Size() <= 1) //FieldSpace does not support multiple inheritance

		ItAlign = 1
		ItAlign = max(ItAlign,Parents[^].ItAlign)

		posOffset := 0
		posMemOffset := 0

		if VTable.Size() != 0
		{
			posOffset += 1
			posMemOffset = GArchByteSize
			ItAlign = max(ItAlign,GArchByteSize)
		}

		assert(Parents.Size() <= 1)
		if Parents.Size() > 0
		{
			assert(Parents.Size() <= 1) //WARNING, posMemOfsset sets to ItSize in line below
			posMemOffset = Parents[0].ItSize
			posOffset += Parents[0].GetFieldsCount()
		}

		for fil,i : Fields
		{
			unalign := posMemOffset mod fil.Value.GetAlign()
			ItAlign = max(ItAlign,fil.Value.GetAlign())

			if unalign != 0 and not IsPacked
			{
				posMemOffset += fil.Value.GetAlign() - unalign
			}
			fieldSize := fil.Value.GetSize()
			if fieldSize == 0 and fil.Value is TypeClass
				fieldSize = 1 //TODO Zero size class optimization
			FieldsPath[i].MemOffset = posMemOffset
			posMemOffset += fieldSize
		}
		if IsPacked
			ItAlign = 1
		ItSize = posMemOffset
		fieldsOffset = posOffset
	}

	fieldLayoutChanged := !() -> void
	{
		fncs := List.{BoxFunc^}
		DB_FieldUsage.Value.Get(this&,x ==> {
			fncs.Push(x)
		})
		GHotloadCntx.AddFunction(fncs[^])

		DB_ClassExtends.Value.Get(this&,x ==> {
			x->{BoxClassBody^}.fieldLayoutChanged()
		})
		DB_ClassComposition.Value.Get(this&, x ==> {
			x->{BoxClassBody^}.fieldLayoutChanged()
		})
		RecalculateSize()
	}
}
FieldParam := class extend BoxUnit
{
	Name := Str
	Value := Type^
	this := !(Str name, Type^ val) -> void
	{
		Name = name
		Value = val
	}
}
FieldPath := class extend BoxFuncCommon
{
	Field := FieldParam^
	Index := int
	MemOffset := int

	this := !(Type^ baseClass, Type^ res) -> void
	{
		bsClass := baseClass //TODO
		SetType(GetFuncType(1,ArraySpan.{Type^}(bsClass&,1),null,res,true,false))
	}
	IsMem := virtual !() -> bool
	{
		return true
	}
	PrintCode := virtual !(LLVMWriteContext^ ctx) -> void
	{

	}
	PrintResultObj := virtual !(LLVMWriteContext^ ctx, int resId, int debId) -> void
	{
		ctx.writeStream^ << "%T" << resId 
	}
	PrintDebugMeta := virtual !(LLVMWriteContext^ ctx) -> void
	{
	}
	PrintFuncCall := virtual !(LLVMWriteContext^ ctx,int resId,int debId,ExeDownList lst) -> void
	{
		f := ctx.writeStream
		tp := lst[0].GetType()

		assert(tp is TypeClass)
		cls := tp->{TypeClass^}.ToClass
		lst[0].PrintPointPre(ctx)
		f^ << "%T" << resId << " = getelementptr "
		tp.PrintType(ctx)
		f^ << ","
		tp.PrintType(ctx)
		f^ << "* "
		lst[0].PrintPointUse(ctx)
		f^ << " , i32 0, i32 " << GetIndex(cls)
		if DebugMode
			f^ << ", !dbg !" << GDebugLineCallId
		f^ << "\n"
	}
	GetIndex := virtual !(BoxClass^ cls) -> int
	{
		return cls.fieldsOffset + Index
	}
}
FieldPathAbs := class extend FieldPath
{
	this := !(Type^ baseClass, Type^ res) -> void
	{
		SetType(GetFuncType(1,ArraySpan.{Type^}(baseClass&,1),null,res,true,false))
	}
	GetIndex := virtual !(BoxClass^ cls) -> int
	{
		return Index
	}
}
