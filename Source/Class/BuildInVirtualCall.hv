BuildInVirtualCall := class extend BoxFuncCommon
{
	funcIndex := int
	notedUse := bool
	wrappedFunc := BoxFunc^
	this := !(BoxFunc^ inWFunc,int inFuncIndex) -> void
	{
		NormalizeType(inWFunc.GetType().GetPoint())
		wrappedFunc = inWFunc
		funcIndex = inFuncIndex
		SetType(inWFunc.GetType()->{TypeFunc^})
	}
	CreateCall := virtual !(BoxExeObj^[] objs,FuncInputObjects^ iObjs) -> BoxExeObj^
	{
		TryForceVirtualUse()
		return super(objs,iObjs)
	}
	TryForceVirtualUse := !() -> void
	{
		if notedUse
			return void
		if wrappedFunc is in BoxFuncBody
		{
			notedUse = true

			fnc := wrappedFunc->{BoxFuncBody^}
			assert(fnc.ParentScope is in BoxClass)
			baseClass := fnc.ParentScope->{BoxClass^}
			fam := baseClass.GetFamily()
			fam.NotifyVirtualFuncUsage(fnc.Name)
		}
	}
	PrintFuncCall := virtual !(LLVMWriteContext^ ctx,int resId,int debId,ExeDownList lst) -> void
	{
		f := ctx.writeStream

		funcType := wrappedFunc.GetType() ->{TypeFunc^}
		normFuncTypePtr := NormalizeType(funcType.GetPoint())

		thisIndex := 0
		if funcType.ResultType.IsComplexReturn() and not funcType.ResultRef
			thisIndex = 1

		thisItem := lst[thisIndex]
		wrappedThis := virtualNoPreCallWrapper(thisItem)

		clsType := thisItem.GetType()

		assert(clsType is TypeClass)
		vTableType := clsType->{TypeClass^}.ToClass->{BoxClassBody^}.VTableType.ItType

		newList := ExeDownList
		newList.Push(lst[^])
		newList[thisIndex] = wrappedThis&

		thisItem.PrintPointPre(ctx)

		f^ << "%VTableIndex" << resId << " = getelementptr "
		clsType.PrintType(ctx)
		f^ << " , "
		clsType.PrintType(ctx)
		f^ << "* "
		thisItem.PrintPointUse(ctx)
		f^ << " , i32 0, i32 0"
		if DebugMode
			f^ << " , !dbg !" << GDebugLineCallId
		f^ << "\n"

		f^ << "%VTable" << resId << " = load "
		vTableType.PrintType(ctx)
		f^ << "* , "
		vTableType.PrintType(ctx)
		f^ << "** %VTableIndex" << resId
		if DebugMode
			f^ << " , !dbg !" << GDebugLineCallId
		f^ << "\n"

		f^ << "%FuncIndex" << resId << " = getelementptr "
		vTableType.PrintType(ctx)
		f^ << " , "
		vTableType.PrintType(ctx)
		f^ << "* %VTable" << resId <<  ", i32 0, i32 " << funcIndex
		if DebugMode
			f^ << " , !dbg !" << GDebugLineCallId
		f^ << "\n"

		f^ << "%FuncPtr" << resId << " = load "
		normFuncTypePtr.PrintType(ctx)
		f^ << " , "
		normFuncTypePtr.PrintType(ctx)
		f^ << "* %FuncIndex" << resId
		if DebugMode
			f^ << " , !dbg !" << GDebugLineCallId
		f^ << "\n"

		fncObj := virtualGetPointer(normFuncTypePtr,resId)

		PrintFuncCallCommon(ctx,fncObj&,resId,newList)
	}
}

virtualGetPointer := class extend BoxExeObj
{
	varIndex := int
	this := !(Type^ tp,int inIndex) -> void
	{
		ObjType = tp
		varIndex = inIndex
	}
	PrintPre := virtual !(LLVMWriteContext^ ctx) -> void
	{
	}
	PrintUse := virtual !(LLVMWriteContext^ ctx) -> void
	{
		ctx.writeStream^ << "%FuncPtr" << varIndex
	}
}
virtualNoPreCallWrapper := class extend BoxExeObj
{
	wrapped := BoxExeObj^
	this := !(BoxExeObj^ toWrap) -> void
	{
		wrapped = toWrap
		ObjType = toWrap.GetType()
	}
	PrintPointPre := virtual !(LLVMWriteContext^ ctx) -> void
	{
	}
	PrintPointUse := virtual !(LLVMWriteContext^ ctx) -> void
	{
		wrapped.PrintPointUse(ctx)
	}

}
