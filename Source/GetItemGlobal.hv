
GetItemGlobal := !(StringSpan name, !(HybridQueue.{BoxUnit^,10})&->bool cb) -> void
{
	lst := HybridQueue.{BoxUnit^,10}
	for spc : CodeSpaces.Reverse
	{
		lst.Destroy()
		if spc.Globals.Contain(name)
		{
			lst.Push(spc.Globals[name][^])
		}
		if spc.Functions.Contain(name)
		{
			lst.Push(spc.Functions[name][^])
		}
		if spc.Templates.Contain(name)
		{
			lst.Push(spc.Templates[name][^])
		}
		if lst.Size() != 0
		{
			if cb(lst)
				return void
		}
	}
	for spc : CodeSpaces.Reverse
	{
		lst.Destroy()
		for cl : spc.Modules
		{
			fnc := cl.GetItem(name)
			if fnc != null
				lst.Push(fnc)
		}
		if lst.Size() != 0
		{
			if cb(lst)
				return void
		}
	}
}

GetItemGlobalFunc := !(StringSpan name, !(HybridQueue.{BoxUnit^,10})&->bool cb) -> void
{
	lst := HybridQueue.{BoxUnit^,10}
	for spc : CodeSpaces.Reverse
	{
		lst.Destroy()
		if spc.Functions.Contain(name)
		{
			lst.Push(spc.Functions[name][^])
		}
		if spc.Templates.Contain(name)
		{
			lst.Push(spc.Templates[name][^])
		}
		if lst.Size() != 0
		{
			if cb(lst)
				return void
		}
	}
}

GetItemGlobal2 := !(StringSpan[] names, !(HybridQueue.{BoxUnit^,10}, StringSpan[])&->bool cb) -> void 
{
	
	lst := HybridQueue.{BoxUnit^,10}
	resNames := HybridQueue.{StringSpan,10}

	for spc : CodeSpaces.Reverse
	{
		lst.Destroy()
		resNames.Destroy()

		for nm : names
		{
			if spc.Globals.Contain(nm)
			{
				lst.Push(spc.Globals[nm][^])

				while resNames.Size() <	lst.Size()
					resNames.Push(nm)
			}
			if spc.Functions.Contain(nm)
			{
				lst.Push(spc.Functions[nm][^])
				while resNames.Size() <	lst.Size()
					resNames.Push(nm)
			}
			if spc.Templates.Contain(nm)
			{
				lst.Push(spc.Templates[nm][^])
				while resNames.Size() <	lst.Size()
					resNames.Push(nm)
			}
		}
		if lst.Size() != 0
		{
			if cb(lst,resNames&)
				return void
		}
	}

	//TODO module support?
	//for spc : CodeSpaces.Reverse
	//{
	//	lst.Destroy()
	//	for cl : spc.Modules
	//	{
	//		fnc := cl.GetItem(name)
	//		if fnc != null
	//			lst.Push(fnc)
	//	}
	//	if lst.Size() != 0
	//	{
	//		if cb(lst)
	//			return void
	//	}
	//}
}
