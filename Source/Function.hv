PFunctionParser := class
{
	found := bool
	isTemplate := bool
	Attr := FuncAttributes
	decorators := HybridQueue.{TokenTemplateType^,10}
	baseToken := Token^
	brackets := Token^
	constToken := Token^
	resultToken := Token^
	bodyToken := Token^

	runToken := Token^
	compilerCommands := List.{Token^}

	this := !(Token^ obj) -> void
	{

		if obj == null or obj.Down == null 
			return void

		baseToken = obj

		iter := obj.Down
		
		while iter is TokenTemplateType
		{
			decorators.Push(iter->{TokenTemplateType^})

			iter = iter.Right
			if iter == null 
				return void
		}

		if iter == null
			return void

		if iter.GetValue() == "inline"
		{
			iter = iter.Right
			Attr.IsInline = true
			assert(iter != null)
		}

		if iter.GetValue() != "!"
			return void
		
		iter = iter.Right
		if iter == null 
			return void

		if iter.GetValue() != "()"
			return void

		brackets = iter

		isTemplate = ContainTemplateObj(brackets)

		iter = iter.Right
		if iter == null 
			return void

		if iter.GetValue() == "."
		{
			iter = iter.Right
			if iter.GetValue() != "{}"
				return void
			constToken = iter
			iter = iter.Right
		}


		if iter.GetValue() == "->" 
		{
			iter = iter.Right
			if iter == null 
				return void

			resultToken = iter

			if iter.GetValue() == "ref"
			{
				iter = iter.Right
				if iter == null 
					return void
			}

			iter = iter.Right
			if iter == null 
				return void

			while iter.GetValue() == ","
			{
				iter = iter.Right
				if iter.GetValue() == "ref"
					iter = iter.Right
				iter = iter.Right
			}
		}

		while iter is TokenData
			and iter?.Down? is TokenIndent 
			and iter.Down->{TokenIndent^}.Value[0] == '#'
		{
			compilerCommands.Push(iter)
			iter = iter.Right
		}

		if iter?.GetValue() == "#"
		{
			runToken  = iter.Right
			iter = iter.Right.Right
		}


		if iter == null or iter.GetValue() != "{}"
			return void

		bodyToken = iter

		iter = iter.Right

		if iter?.GetValue() == "#"
		{
			runToken  = iter.Right
			iter = iter.Right.Right
		}

		found = true
		return void

	}
	IsFound := !() -> bool
	{
		return found
	}
	ComputeHeaderHash := !() -> u32
	{
		fileData := bodyToken.Line.File.fileData
		if fileData.Size() == 0
			return 0
		if baseToken.Line == null or bodyToken == null
			return 0
		if bodyToken is not TokenSkobSymbol
			return 0

		startLine := brackets.Line.Line
		endLine := brackets.Line.Line

		if resultToken != null
			endLine = resultToken.Line.Line

		return ComputeHashOnLines(fileData,startLine,endLine)
	}
	ComputeHash := !() -> u32
	{
		fileData := baseToken.Line.File.fileData

		if fileData.Size() == 0
			return 0
		if baseToken.Line == null or bodyToken == null
			return 0
		if bodyToken is not TokenSkobSymbol
			return 0
		asSkob := bodyToken->{TokenSkobSymbol^}

		if asSkob.EndLine == null
			return 0

		startLine := baseToken.Line.Line
		endLine := asSkob.EndLine.Line

		return ComputeHashOnLines(fileData,startLine,endLine)
	}
	CreateObject := !() -> BoxFuncTemplate^
	{
		asTempl := new BoxFuncTemplateBody(Attr,brackets,null,constToken,resultToken,bodyToken,runToken)->{BoxFuncTemplate^}

		asTempl->{BoxFuncTemplateBody^}.SetName("anon")

		if runToken != null or compilerCommands.Size() != 0
		{
			CheckTemplateBodyCommands(asTempl->{BoxFuncTemplateBody^},compilerCommands)
		}

		for it : decorators
		{
			asTempl = new BoxFuncTemplateDecorator(asTempl,it)
		}

		return asTempl
	}
	TryCreateFuncType := !(Type^ classInMethod) -> Type^
	{
		c := FunctionHeaderInfo
		if classInMethod != null
		{
			c.Types.Emplace(StringSpan(),classInMethod,true,null->{Token^})
		}
		c.ParseHeader(brackets,resultToken)
		return c.TryCreateFuncType()
	}
}

TryParseFunction := !(Token^ obj) -> BoxUnit^
{
	c := PFunctionParser(obj)
	if not c.IsFound()
		return null
	return c.CreateObject()
}

ContainTemplateObj := !(Token^ itm) -> bool
{
	if itm is TokenTemplateType
		return true
	iter := itm.Down
	while iter != null
	{
		if ContainTemplateObj(iter)
			return true
		iter = iter.Right
	}
	return false
}

FuncAttributes := class
{
	IsMethod := bool
	IsStatic := bool
	IsLambda := bool
	IsAutoResult := bool
	IsInline := bool

	//not for functions
	IsVirtual := bool
	IsPoison := bool
		
	"=" := default
}

labelIdIterator := 1
BoxLabel := class extend BoxExeObj
{
	id := int
	this := !() -> void
	{
		id = labelIdIterator
		labelIdIterator += 1
	}
	PrintLabel := virtual !(LLVMWriteContext^ ctx) -> void
	{
		ctx.writeStream^ << "%L" << id
	}
	PrintGo := virtual !(LLVMWriteContext^ ctx) -> void
	{
		f := ctx.writeStream

		f^ << "br label %L" << id
		if DebugMode
			f^ << ", !dbg !" << GDebugLineCallId
		f^ << "\n"
	}
	PrintCode := virtual !(LLVMWriteContext^ ctx) -> void
	{
		PrintGo(ctx)
		PrintLabelCreate(ctx)
	}
	PrintLabelCreate := virtual !(LLVMWriteContext^ ctx) -> void
	{
		ctx.writeStream^ << "L" << id << ":\n"
	}
}



BoxLabel2 := class extend BoxLabel
{
	this := !() -> void
	{
	}
	CreateId := !(LLVMWriteContext^ ctx) -> void
	{
		id = ctx.GetNewId()
		id = GetNewId()
	}
}
