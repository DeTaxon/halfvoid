TryParseFunction := !(Token^ obj) -> BoxUnit^
{
	Attr := FuncAttributes

	if obj == null or obj.Down == null return null

	iter := obj.Down

	decorators := HybridQueue.{TokenTemplateType^,10}
	
	while iter is TokenTemplateType
	{
		decorators.Push(iter->{TokenTemplateType^})

		iter = iter.Right
		if iter == null return null
	}

	if iter == null
		return null

	if iter.GetValue() == "inline"
	{
		iter = iter.Right
		Attr.IsInline = true
		assert(iter != null)
	}

	if iter.GetValue() != "!"
		return null
	
	iter = iter.Right
	if iter == null return null

	if iter.GetValue() != "()"
		return null

	brackets := iter

	isTemplate := ContainTemplateObj(brackets)

	iter = iter.Right
	if iter == null return null

	constToken := Token^

	if iter.GetValue() == "."
	{
		iter = iter.Right
		if iter.GetValue() != "{}"
			return null
		constToken = iter
		iter = iter.Right
	}

	resultToken := Token^

	if iter.GetValue() == "->" 
	{
		iter = iter.Right
		if iter == null return null

		resultToken = iter

		if iter.GetValue() == "ref"
		{
			iter = iter.Right
			if iter == null return null
		}

		iter = iter.Right
		if iter == null return null
	}


	if iter.GetValue() != "{}" return null

	asTempl := new BoxFuncTemplateBody(Attr,brackets,null,constToken,resultToken,iter)->{BoxFuncTemplate^}

	for it : decorators
	{
		asTempl = new BoxFuncTemplateDecorator(asTempl,it)
	}

	return asTempl

}

ContainTemplateObj := !(Token^ itm) -> bool
{
	if itm is TokenTemplateType
		return true
	iter := itm.Down
	while iter != null
	{
		if ContainTemplateObj(iter)
			return true
		iter = iter.Right
	}
	return false
}

FuncAttributes := class
{
	IsMethod := bool
	IsVirtual := bool
	IsStatic := bool
	IsLambda := bool
	IsAutoResult := bool
	IsInline := bool
		
	"=" := default
}

labelIdIterator := 1
BoxLabel := class extend BoxExeObj
{
	id := int
	this := !() -> void
	{
		id = labelIdIterator
		labelIdIterator += 1
	}
	PrintLabel := virtual !(LLVMWriteContext^ ctx) -> void
	{
		ctx.writeStream^ << "%L" << id
	}
	PrintGo := virtual !(LLVMWriteContext^ ctx) -> void
	{
		f := ctx.writeStream

		f^ << "br label %L" << id
		if DebugMode
			f^ << ", !dbg !" << GDebugLineCallId
		f^ << "\n"
	}
	PrintCode := virtual !(LLVMWriteContext^ ctx) -> void
	{
		PrintGo(ctx)
		PrintLabelCreate(ctx)
	}
	PrintLabelCreate := virtual !(LLVMWriteContext^ ctx) -> void
	{
		ctx.writeStream^ << "L" << id << ":\n"
	}
}



