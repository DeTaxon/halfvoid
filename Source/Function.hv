PFunctionParser := class
{
	found := bool
	isTemplate := bool
	Attr := FuncAttributes
	decorators := HybridQueue.{TokenTemplateType^,10}
	brackets := Token^
	constToken := Token^
	resultToken := Token^
	bodyToken := Token^

	this := !(Token^ obj) -> void
	{

		if obj == null or obj.Down == null 
			return void

		iter := obj.Down

		
		while iter is TokenTemplateType
		{
			decorators.Push(iter->{TokenTemplateType^})

			iter = iter.Right
			if iter == null 
				return void
		}

		if iter == null
			return void

		if iter.GetValue() == "inline"
		{
			iter = iter.Right
			Attr.IsInline = true
			assert(iter != null)
		}

		if iter.GetValue() != "!"
			return void
		
		iter = iter.Right
		if iter == null 
			return void

		if iter.GetValue() != "()"
			return void

		brackets = iter

		isTemplate = ContainTemplateObj(brackets)

		iter = iter.Right
		if iter == null 
			return void

		if iter.GetValue() == "."
		{
			iter = iter.Right
			if iter.GetValue() != "{}"
				return void
			constToken = iter
			iter = iter.Right
		}


		if iter.GetValue() == "->" 
		{
			iter = iter.Right
			if iter == null 
				return void

			resultToken = iter

			if iter.GetValue() == "ref"
			{
				iter = iter.Right
				if iter == null 
					return void
			}

			iter = iter.Right
			if iter == null 
				return void
		}


		if iter.GetValue() != "{}" 
			return void

		bodyToken = iter

		found = true
		return void

	}
	IsFound := !() -> bool
	{
		return found
	}
	ComputeHash := !(Blob^ fileData) -> u32
	{
		
	}
	CreateObject := !() -> BoxUnit^
	{
		asTempl := new BoxFuncTemplateBody(Attr,brackets,null,constToken,resultToken,bodyToken)->{BoxFuncTemplate^}

		for it : decorators
		{
			asTempl = new BoxFuncTemplateDecorator(asTempl,it)
		}

		return asTempl
	}
}

TryParseFunction := !(Token^ obj) -> BoxUnit^
{
	c := PFunctionParser(obj)
	if not c.IsFound()
		return null
	return c.CreateObject()
}

ContainTemplateObj := !(Token^ itm) -> bool
{
	if itm is TokenTemplateType
		return true
	iter := itm.Down
	while iter != null
	{
		if ContainTemplateObj(iter)
			return true
		iter = iter.Right
	}
	return false
}

FuncAttributes := class
{
	IsMethod := bool
	IsVirtual := bool
	IsStatic := bool
	IsLambda := bool
	IsAutoResult := bool
	IsInline := bool
		
	"=" := default
}

labelIdIterator := 1
BoxLabel := class extend BoxExeObj
{
	id := int
	this := !() -> void
	{
		id = labelIdIterator
		labelIdIterator += 1
	}
	PrintLabel := virtual !(LLVMWriteContext^ ctx) -> void
	{
		ctx.writeStream^ << "%L" << id
	}
	PrintGo := virtual !(LLVMWriteContext^ ctx) -> void
	{
		f := ctx.writeStream

		f^ << "br label %L" << id
		if DebugMode
			f^ << ", !dbg !" << GDebugLineCallId
		f^ << "\n"
	}
	PrintCode := virtual !(LLVMWriteContext^ ctx) -> void
	{
		PrintGo(ctx)
		PrintLabelCreate(ctx)
	}
	PrintLabelCreate := virtual !(LLVMWriteContext^ ctx) -> void
	{
		ctx.writeStream^ << "L" << id << ":\n"
	}
}



BoxLabel2 := class extend BoxLabel
{
	this := !() -> void
	{
	}
	CreateId := !(LLVMWriteContext^ ctx) -> void
	{
		id = ctx.GetNewId()
		id = GetNewId()
	}
}
