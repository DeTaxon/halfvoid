
TryAddCallCommand := !(Token^ itm) -> BoxExeObj^
{
	cmd := itm.Down->{TokenIndent^}.Value

	if cmd == "#CreateCallCommand"
	{
		posArgs := List.{Token^}
		namedArgs := AVLMap.{Str,Token^}

		if not ParseCmdInputs(itm.Down.Right,posArgs,namedArgs)
		{
			MakeErrorMsg(itm,"Could not parse inputs")
			return null
		}
		if not namedArgs.Contain(StringSpan("Name"))
		{
			MakeErrorMsg(itm,"Command must have a Name")
			return null
		}

		cmdName := namedArgs[StringSpan("Name")]
		if cmdName is not TokenString
		{
			MakeErrorMsg(itm,"Command name must be a string")
			return null
		}

		echo := TEchoStream
		echo << "#" << cmdName->{TokenString^}.Value.Str()
		spn := echo.GetStr().Str()

		userCmd := ref UserCommands[spn]

		if not namedArgs.Contain(StringSpan("Call"))
		{
			MakeErrorMsg(itm,"Command must have a Call function")
			return null
		}

		c := PFunctionParser(namedArgs[StringSpan("Call")])
		if not c.IsFound()
		{
			MakeErrorMsg(itm,"Call object is not a function")
			return null
		}
		fncTmplt := c.CreateObject()
		assert(fncTmplt != null and fncTmplt is in BoxFuncTemplate) //TODO to error
		assert(fncTmplt->{BoxFuncTemplate^}.IsOneFunc()) //TODO error check
		fnc := fncTmplt->{BoxFuncTemplate^}.GetOneFunc()
		userCmd.CallFunction = fnc->{BoxFuncBody^}

		fncResult := fnc.GetType()->{TypeFunc^}.ResultType

		if fncResult == GTypeVoid {}
		else if TypeFight(fncResult,GBlobType.GetPoint()) == GBlobType.GetPoint() {}
		else {
			MakeErrorMsg(itm,"Call function uses function with non cmopatable type, compatable types [void,Blob^]")
			return null
		}

		if namedArgs.Contain(StringSpan("ExchangeOutput"))
		{
			c2 := PFunctionParser(namedArgs[StringSpan("ExchangeOutput")])
			if not c2.IsFound()
			{
				MakeErrorMsg(itm,"ExchangeOut object is not a function")
				return null
			}
			fncTmplt := c2.CreateObject()
			assert(fncTmplt != null and fncTmplt is in BoxFuncTemplate) //TODO to error
			assert(fncTmplt->{BoxFuncTemplate^}.IsOneFunc()) //TODO error check
			fnc := fncTmplt->{BoxFuncTemplate^}.GetOneFunc()

			userCmd.ExchangeOut = fnc->{BoxFuncBody^}
			
		}

		if namedArgs.Contain(StringSpan("CacheOn")) and CFile != null
		{
			userCmd.UseCache = true
			userCmd.CachedValues = CFile.GetModule(cmdName->{TokenString^}.Value)
		}


		return GObjNone
	}
	if UserCommands.Contain(cmd)
	{
		userCmd := ref UserCommands[cmd]

		objVals := CheckExeDownList
		namedObjs := AVLMap.{Str,BoxExeObj^}
		if not CheckFuncCallBrackets(itm.Down.Right,objVals,namedObjs)
			return null

		fType := userCmd.CallFunction.GetType()->{TypeFunc^}

		for it,i : objVals 
		{
			if not it.IsConst
			{
				MakeErrorMsg(itm,"All inputs must be consts")
				return null
			}
			if it.GetType() == fType.Params[i].ItType
			{
				//fine, nothing to do
			} else if it is BoxExeString and fType.Params[i].ItType == GRepoFileType.GetPoint()
			{
			}else{
				MakeErrorMsg(itm,"Input variables must be same type, no exchange for now ")
				return null
			}
		}

		usedFiles := List.{File^}

		valBoxes := s64[120]
		inptPointers := List.{void^}
		for it,i : objVals
		{
			switch it is
			{
			case BoxExeInt
				valBoxes[i] = it.Value
				inptPointers.Push(valBoxes[i]&)
			case BoxExeString
				if fType.Params[i].ItType == GRepoFileType.GetPoint()
				{
					fil :=  File^
					if it.Value.Start == "local:"
					{
						fldr := itm.Line.File.file.GetUpFolder()
						fil = FSGetFile2(fldr,it.Value^[6..0])
					}else{
						fil = FSGetFile(it.Value)
					}
					if fil == null
					{
						MakeErrorMsg(itm,"File not found")
						return null
					}
					valBoxes[i] = fil->{size_t}
					inptPointers.Push(valBoxes[i]&)
					usedFiles.Push(fil)
				}else{
					assert(false)
				}
			case void
				assert(false)
			}
		}

		fncResult := userCmd.CallFunction.GetType()->{TypeFunc^}.ResultType

		callObj := () ==> Blob^
		{
			resultBlob := void^
			interpFnc := GInterpCntx.GetMCFunc(userCmd.CallFunction)
			interpResult := MCInterpFunction2Resulted(GInterpCntx&,interpFnc,inptPointers,resultBlob&)

			resMessage := interpResult.GetErrorMessage()
			if resMessage->AsString != null //TODO i dont need AsString
			{
				CurrentFuncWork.SetErrorMessage(resMessage)
				return null
			}

			if fncResult == GTypeVoid {
				return new BlobSpan
			}else if TypeFight(fncResult,GBlobType.GetPoint()) == GBlobType.GetPoint() 
			{
				if resultBlob == null
					return null
				blb := resultBlob->{Blob^}
				newBlob := MakeBlob(blb.Size())
				memcpy(newBlob.GetPointer(),blb.GetPointer(),blb.Size())
				return newBlob
			}
		}
		resBlb := Blob^

		if userCmd.UseCache
		{
			CacheString := TEchoStream

			CacheString << cmd 

			for it : objVals
			{
				switch it is
				{
				case BoxExeInt
					CacheString << it.Value
				case BoxExeString
					CacheString << it.Value
				case void
					assert(false)
				}
				CacheString << "_~&aâ„–_"
			}

			resBlb = userCmd.CachedValues.GetCachedValue(CacheString.GetStr(),usedFiles,callObj)
		}else{

			resBlb = callObj()
		}
		if CurrentFuncWork.isFailed
			return null

		if TypeFight(fncResult,GBlobType.GetPoint()) == GBlobType.GetPoint()
		{
			if resBlb == null
			{
				return GetExchange(GObjNull,GBlobType.GetPoint())
			}else{
				res := new BoxRawData(resBlb)
				blobSize := resBlb.Size()
				blobDatas.Push(res)

				ptrToBlob := CreateFuncCall(StringSpan("internalHVCreateBlobOnSpan"),![res->{BoxExeObj^},GetExeS64(blobSize)])
				assert(ptrToBlob != null)
				blobRefToPtr := new UnrefFuncCall(ptrToBlob)
				blbRes := new PtrExchange(blobRefToPtr,GBlobType.GetPoint())

				if userCmd.ExchangeOut != null
				{
					return userCmd.ExchangeOut.CreateCall(![blbRes])
				}
				return blbRes
			}
		}
		
		return GObjNone
	}
	if cmd == "#Run"
	{
		return CommandRun(itm)	
	}
	return null
}


ParseCmdInputs := !(Token^ itm,List.{Token^} posArgs,AVLMap.{Str,Token^} res) -> bool
{
	SyntaxCompress(itm,LexHVFileRoot)
	itr := itm.Down
	while itr != null
	{
		if itr.GetValue() == ","
		{
			itr = itr.Right
			continue
		}

		if itr.Down?.Right?.GetValue() == "="
		{
			if itr.Down is not TokenIndent
				return false
			key := itr.Down->{TokenIndent^}.Value
			res[key] = itr.Down.Right.Right
		}else{
			posArgs.Push(itr)
		}
			
		itr = itr.Right
	}
	return true
}

UserCommands := AVLMap.{Str,UserCommandObj}

UserCommandObj := class
{
	CallFunction := BoxFuncBody^
	ExchangeOut := BoxFuncBody^

	UseCache := bool
	CachedValues := CacheModule^
}
