
EmbedInfo := class
{
	baseFile := File^
	embedData := Blob^
	rawData := BoxRawData^

	compressionType := char^
	fileSize := s64
	compressedSize := s64
	fileName := StringSpan

	UpdateData := !(Blob^ newData) -> void
	{
		embedData = newData
		switch compressionType
		{
			case "None"
			case "Deflate"
				embedData = CompressBlobDeflate(newData)
			case void
		}

		baseFile = baseFile
		fileSize = newData.Size()
		compressedSize = embedData.Size()
		if rawData == null
		{
			rawData = new BoxRawData(embedData)
		}else{
			rawData.ItBlob = embedData
		}

	}
}

EmbeddedObjects := AVLMap.{Str,AVLMap.{void^,EmbedInfo}}

CreateEmbeddedObj := !(Str cmp,void^ key,StringSpan setFileName,char^ compType, !()&->Blob^ cb, File^ baseFile = null) -> BoxExeObj^
{
	cType := compType
	module := ref EmbeddedObjects[cmp]

	blobExist := module.Contain(key)
	embInfo := ref module[key]
	if not blobExist
	{
		embInfo.embedData = cb()

		embInfo.fileSize = embInfo.embedData.Size()
		embInfo.fileName = setFileName

		switch compType
		{
			case "None"
			case "Deflate"
				{
					if embInfo.embedData.Size() <= 1
					{
						cType = "None"
					}else{
						embInfo.embedData = CompressBlobDeflate(embInfo.embedData)
					}
				}
			case void
				return null
		}

		embInfo.baseFile = baseFile
		embInfo.compressionType = cType
		embInfo.compressedSize = embInfo.embedData.Size()
		embInfo.rawData = new BoxRawData(embInfo.embedData)
	}

	objs := CheckExeDownList
	objs.Push(embInfo.rawData)
	objs.Push(GetExeInt(embInfo.fileSize))
	objs.Push(GetExeInt(embInfo.compressedSize))
	objs.Push(embInfo.compressionType == "Deflate" ?: GBoolTrue : GBoolFalse)
	objs.Push(GetExeString(embInfo.fileName.GetString()))

	cnsts := List.{BoxExeConstObj^}
	return CreateFuncCall(StringSpan("internalGetEmbeddedFile"),objs,cnsts)
}

PrintEmbeddedFiles := !(LLVMWriteContext^ ctx) -> void
{
	for it : blobDatas
	{
		it.PrintGlobal(ctx)
	}
	EmbeddedObjects[^][^].rawData.PrintGlobal(ctx)
}



SomeFiles :=  List.{File^}

NormalizeFile := !(File^ fl) -> File^
{
	bf := fl.GetAbsPath()

	if bf->AsString == null
		return null
	
	for it : SomeFiles
	{
		if it.GetAbsPath() == bf
			return it
	}

	SomeFiles.Push(fl)

	return fl
}
