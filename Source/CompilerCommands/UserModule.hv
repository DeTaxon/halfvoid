TryAddCreateModule := !(Token^ itm) -> BoxExeObj^
{
	cmd := itm.Down->{TokenIndent^}.Value
	if cmd != "#Module"
		return null

	posArgs := List.{Token^}
	namedArgs := AVLMap.{Str,Token^}

	if not ParseCmdInputs(itm.Down.Right,posArgs,namedArgs)
	{
		CurrentWork?.SetErrorMessage(itm.MakeError("Could not parse inputs"))
		return null
	}

	newModule := new UserModule

	bdy := new TokenSymbol(StringSpan("{}"),0)
	bdy.Down = itm.Down.Right.Down
	bdy.Down?.Up = bdy

	parents := HybridQueue.{Tuple.{Token^,InheritanceType},2}
	par1 := new TokenIndent("internalHVModuleBase")
	c := InheritanceType
	c = "extends"
	parents.Emplace(par1,c)

	resultClass := new BoxClassBody(false,parents,bdy)
	resultClass.Name = "ModuleName"

	newModule.bodyClass = resultClass

	UserModules.Push(newModule)
	return GObjNone
}

GetItemUser := !(Str name) -> BoxExeObj^
{
	for it : UserModules
	{
		if not it.ExpectFunctionsComplete()
			continue

		if it.impClass == null
		{
			if it.startedCompile
				continue

			it.startedCompile = true

			SubWork(() ==> {
				it.bodyClass.AwaitReadyState()
				it.bodyClass.AwaitTypeState()
				resType := it.bodyClass.ItType
				tmpl := intGetTemplate("internalHVCreateBase")
				assert(tmpl != null)
				fnc := tmpl.GetFunc(![],![resType])
				assert(fnc != null)
				
				mcFunc := GInterpCntx.GetMCFunc(fnc->{BoxFuncBody^})
				MCInterpFunction(GInterpCntx&,mcFunc,null,it.impClass&)
				it.finishedRun = true
			})
		}
		if not it.finishedRun
			continue

		res := BoxExeObj^
		res = it.impClass?.GetItem(name)?->{BoxExeObj^}
		if res? is in BoxExeObj
			return res
	}
}

UserModules := List.{UserModule^}

UserModule := class
{
	bodyClass := BoxClassBody^
	impClass := internalHVModuleBase^

	startedCompile := bool
	finishedRun := bool
	isCompiled := bool
	compileWork := CWorkUserModuleCompilation^

	ExpectFunctionsComplete := !() -> bool
	{
		if isCompiled
			return true

		if compileWork == null
		{

			bodyClass.StartParseBody()

			newWork := new CWorkUserModuleCompilation
			newWork.waitModuleClass = bodyClass
			newWork.AddClass(bodyClass)
			WorkBag.AddWork(newWork)
			compileWork = newWork
		}
		if compileWork.IsDone()
		{
			isCompiled = true
			compileWork = null
			return true
		}
		return false
	}
}

CWorkUserModuleCompilation := class extend CWorkUnit
{
	waitFunctions := List.{BoxFuncBody^}
	waitClasses := List.{BoxClass^}
	waitModuleClass := BoxClass^

	this := !(BoxUnit^ startFunction) -> void
	{
		AddUnit(startFunction)
	}
	AddClass := !(BoxClass^ cls) -> void
	{
		if cls.IsComplete()
			return void
		waitClasses.Push(cls)

	}
	AddUnit := !(BoxUnit^ newUnit) -> void
	{
		if newUnit is in BoxFuncBody
		{
			bFunc := newUnit->{BoxFuncBody^}
			bFunc.ParseBody()
			if not bFunc.IsComplete()
				waitFunctions.Push(bFunc)
		}else if newUnit is BuildInVirtualCall{
			vCall := newUnit->{BuildInVirtualCall^}
			vCall.TryForceVirtualUse()
			AddUnit(vCall.wrappedFunc)
		}else{
			printf("unknown object to wait in user module %s\n",newUnit.UnitName)
			assert(false)
		}
	}
	DoWork := virtual !() -> CWorkState 
	{
		if IsDone()
		{
			return "Complete"
		}

		if waitModuleClass?.IsComplete()
		{
			waitModuleClass.GetMethods(StringSpan("GetItem"),x ==> {
				AddUnit(x[^])
			})
			waitModuleClass = null
		}

		if waitClasses.Size() != 0
		{
			frnt := waitClasses[0]
			if frnt.IsComplete()
			{
				waitClasses.Pop()
			}
		}

		while waitFunctions.Size() != 0 and waitFunctions[0].IsComplete()
		{
			frnt := waitFunctions[0]
			waitFunctions.Pop()

			//mc := GInterpCntx.GetMCFunc(frnt)

			//for it : mc.Objects
			//{
			//	if it& is MCConstFunction
			//	{
			//		AddUnit(it&->{MCConstFunction^}.GetValue())
			//	}
			//}
		}

		if IsDone()
			return "Complete"
		return "Failed"
	}
	IsDone := virtual !() -> bool 
	{
		return waitClasses.Size() == 0 and waitFunctions.Size() == 0
	}
	GetErrorMessage := virtual !() -> Str 
	{
	}
}
