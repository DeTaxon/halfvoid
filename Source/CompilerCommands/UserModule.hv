TryAddCreateModule := !(Token^ itm) -> BoxExeObj^
{
	cmd := itm.Down->{TokenIndent^}.Value
	if cmd != "#Module"
		return null

	posArgs := List.{Token^}
	namedArgs := AVLMap.{StringSpan,Token^}

	if not ParseCmdInputs(itm.Down.Right,posArgs,namedArgs)
		itm.EmitError("Could not parse inputs")

	newModule := new UserModule

	bdy := new TokenSymbol(StringSpan("{}"),0)
	bdy.Down = itm.Down.Right.Down
	bdy.Down?.Up = bdy

	parents := HybridQueue.{Tuple.{Token^,InheritanceType},2}
	par1 := new TokenIndent(StringSpan("internalHVModuleBase"))
	c := InheritanceType
	c = "extend"
	parents.Emplace(par1,c)

	resultClass := new BoxClassBody(false,parents,bdy)

	newModule.bodyClass = resultClass

	UserModules.Push(newModule)
	return GObjNone
}

GetItemUser := !(StringView name) -> BoxExeObj^
{
	for it : UserModules
	{
		if not it.ExpectFunctionsComplete()
			continue
		if it.impClass == null
		{
			it.bodyClass.AwaitReadyState()
			it.bodyClass.AwaitTypeState()
			resType := GetConstType(it.bodyClass.ItType)
			tmpl := intGetTemplate("internalHVCreateBase")
			assert(tmpl != null)
			fnc := tmpl.GetFunc(![],![resType])
			assert(fnc != null)
			

			mcFunc := GInterpCntx.GetMCFunc(fnc->{BoxFuncBody^})
			MCInterpFunction(GInterpCntx&,mcFunc,null,it.impClass&)
		}
		return it.impClass?.GetItem(name)?->{BoxExeObj^}
	}
}

UserModules := List.{UserModule^}

UserModule := class
{
	bodyClass := BoxClassBody^
	impClass := internalHVModuleBase^

	isCompiled := bool
	compileWork := CWorkUserModuleCompilation^

	ExpectFunctionsComplete := !() -> bool
	{
		if isCompiled
			return true

		if compileWork == null
		{
			newWork := new CWorkUserModuleCompilation
			bodyClass.GetMethods(StringSpan("GetItem"),x ==> {
				newWork.AddUnit(x[^])
			})
			WorkBag.AddWork(newWork)
			compileWork = newWork
		}
		if compileWork.IsDone()
		{
			printf("YEEEEES\n")
			isCompiled = true
			compileWork = null
			return true
		}
		return false
	}
}

CWorkUserModuleCompilation := class extend CWorkUnit
{
	waitFunctions := List.{BoxFuncBody^}

	this := !(BoxUnit^ startFunction) -> void
	{
		AddUnit(startFunction)
	}
	AddUnit := !(BoxUnit^ newUnit) -> void
	{
		if newUnit is in BoxFuncBody
		{
			waitFunctions.Push(newUnit->{BoxFuncBody^})
		}else if newUnit is BuildInVirtualCall{
			vCall := newUnit->{BuildInVirtualCall^}
			AddUnit(vCall.wrappedFunc)
		}else{
			printf("unknown object to wait in user module %s\n",newUnit.UnitName)
			assert(false)
		}
	}
	DoWork := virtual !() -> CWorkState 
	{
		if IsDone()
			return "Complete"

		while true
		{
			if waitFunctions.Size() == 0
				return "Complete"
			frnt := waitFunctions[0]
			if frnt.IsComplete()
				waitFunctions.Pop()
		}


		return "Failed"
	}
	IsDone := virtual !() -> bool 
	{
		return waitFunctions.Size() == 0
	}
	GetErrorMessage := virtual !() -> String^ 
	{
		return null
	}
}
