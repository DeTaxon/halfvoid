TryGetCommand := !(Token^ itm) -> BoxExeObj^ 
{
	if itm == null or itm.Down == null
		return null
	cmd := itm.Down->{TokenIndent^}.Value

	for CmpFnc : #MarkedFunctions("CompilerCommand")
	{
		return CmpFnc(cmd,itm)?
	}

	if cmd == "#DebugMode"
	{
		if DebugMode
			return GBoolTrue
		return GBoolFalse
	}

	if cmd == "#File" or cmd == "#FileLocal"
	{
		return TryEmbedFile(itm)
	}
	if cmd == "#EmbVKShader" or cmd == "#EmbVKShaderLocal"
	{
		return TryEmbeddVKShader(itm)
	}
	if cmd == "#Regexp"
	{
		return CommandGetRegexp(itm)	
	}
	if cmd == "#OS"
	{
		if targetLinux
			return GetExeString(StringSpan("Linux").GetString())
		if targetWindows
			return GetExeString(StringSpan("Windows").GetString())
		assert(false)
	}
	if cmd == "#MarkedFunctions" or cmd == "#MarkFunction"
	{
		return TryGetMarkedFunctions(itm)
	}
	if cmd == "#TLSSize"
	{
		return GetExeInt(TLSSize)
	}
	if cmd == "#Tracy"
	{
		if UseTracy
			return GBoolTrue
		return GBoolFalse
	}
	if cmd == "#ThisClass"
	{
		itrScope := CurrentScope
		while itrScope != null
		{
			if itrScope is in BoxClass
				break
			itrScope = itrScope.GetParentScope()
		}
		if itrScope == null
			itm.EmitError("Command is not in class")
		return GetConstType(itrScope->{BoxClass^}.ItType)
	}
	itm.EmitError("Command not found")	
}
