TryEmbedFile := !(Token^ itm) -> BoxExeObj^
{
	if itm.Down.Right == null or itm.Down.Right.GetValue() != "()"
	{
		itm.EmitError("usage #File(name)")
	}
	skb := itm.Down.Right
	if skb.Down == null or not (skb.Down is TokenString)
	{
		itm.EmitError("usage #File(name)")
	}

	isLocal := itm.Down->{TokenIndent^}.Value == "#FileLocal"
	 
	fileName := skb.Down->{TokenString^}.Value

	
	itFile := vRepoFile^

	if isLocal
	{
		itFile = itm.Line.File.file.GetFile(fileName)
	}else{
		itFile = FSGetFile(fileName) //todo exceptions?
	}

	if itFile == null
		itm.EmitError("File not found")
	

	emb := EmbFile^
	if not embeddedFiles.Contain(itFile)
	{
		emb = new EmbFile(itFile)
		embeddedFiles[itFile] = emb
	}else{
		emb = embeddedFiles[itFile]
	}

	objs := CheckExeDownList
	objs.Push(emb.data)
	objs.Push(GetExeInt(emb.GetSize()))
	objs.Push(GBoolFalse)
	objs.Push(GetExeString(fileName))

	cnsts := List.{BoxExeConstObj^}

	return CreateFuncCall(StringSpan("internalGetEmbeddedFile"),objs,cnsts)
}



embeddedFiles := AVLMap.{vRepoFile^,EmbFile^}
blobDatas := List.{BoxRawData^}

BoxRawData := class extend BoxExeObj
{
	ItBlob := Blob^
	ItId := int

	this := !(Blob^ setBlob) -> void
	{
		ItId = GetNewId()

		ItBlob = setBlob

		ObjType = GTypeVoidP
	}
	PrintGlobal := virtual !(Stream^ f) -> void
	{
		ValueSize := ItBlob.Size()
		Value := ItBlob.GetPointer()->{u8^}

		f^ << "@File" << ItId << " = global [" << ValueSize << " x i8] ["
		for i : ValueSize
		{
			if i != 0
				f^ << ","
			f^ << "i8 " << Value[i]->{int}
		}
		f^ << "]\n"
	}
	PrintPre := virtual !(Stream^ f) -> void
	{
	}
	PrintUse := virtual !(Stream^ f) -> void
	{
		ValueSize := ItBlob.Size()
		f^ << "getelementptr inbounds ([" << ValueSize << " x i8] , [ " << ValueSize << " x i8]* @File" << ItId <<" , i32 0, i32 0)"
	}

	GetSize := !() -> int
	{
		return ItBlob.Size()
	}

}

EmbFile := class
{
	itFile := vRepoFile^
	fileMap := FileView^
	data := BoxRawData^

	this := !(vRepoFile^ inFile) -> void
	{
		itFile = inFile

		fileMap = inFile.GetMap()
		fileBlob := new BlobOnVector(fileMap.Size())
		if fileMap.Size() != 0
			memcpy(fileBlob.GetPointer(),fileMap.Get(),fileMap.Size())
		data = new BoxRawData(fileBlob)
	}
	GetSize := !() -> int 
	{
		return data.GetSize()
	}
	PrintGlobal := !(Stream^ f) -> void
	{
		data.PrintGlobal(f)
	}
}

PrintEmbeddedFiles := !(Stream^ f) -> void
{
	for it : embeddedFiles
	{
		it.PrintGlobal(f)
	}
	for it : blobDatas
	{
		it.PrintGlobal(f)
	}
}
