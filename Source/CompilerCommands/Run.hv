CommandRun := !(Token^ itm) -> BoxExeObj^
{
	if 	itm == null return null
	if 	itm.Down == null return null
	if 	itm.Down.Right == null return null
	if 	itm.Down.Right.GetValue() != "{}" return null

	
	Attr := FuncAttributes
	brackets := new TokenSymbol(StringSpan("()"),0)
	resultToken :=  new TokenIndent("void")
	bodyToken := itm.Down.Right

	asTempl := new BoxFuncTemplateBody(Attr,brackets,null,null,resultToken,bodyToken,null)

	assert(asTempl.IsOneFunc())

	oneFunc := asTempl.GetOneFunc()->{BoxFuncBody^}
	newWork := new CRunWork

	SubWork(() ==> [oneFunc,newWork] {
		CompileAndRunCode(oneFunc)
		newWork.isDone = true
	})

	return GObjNone
}


CRunWork := class extend CWorkUnit
{
	isDone := bool

	DoWork := virtual !() -> CWorkState {}
	IsDone := virtual !() -> bool { return isDone }
	GetErrorMessage := virtual !() -> Str {}
	SetErrorMessage := virtual !(Str newMessage) -> void {}
	Cancel := virtual !() -> void {} //maybe?
	GetWorkTask := virtual !() -> Task^ {}
}
