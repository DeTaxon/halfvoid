TryGetUnrefObj := !(Token^ itm) -> BoxExeObj^
{
	if itm == null return null
	if itm.Down == null return null
	if itm.Down.Right == null return null
	if itm.Down.Right.Right != null return null
	if itm.Down.Right.GetValue() != "&" return null

	dwn := TryGetExeCall(itm.Down)

	if dwn == null
	{
		CurrentFuncWork?.SetErrorMessage(itm.MakeError("can not get pointer to error object"))
		return null
	}
	dwn.NotifyMemUse()
	if not dwn.IsMem()
	{
		CurrentFuncWork?.SetErrorMessage(itm.MakeError("can not get pointer to object, it is not on the memory"))
		return null
	}

	if dwn is LocalVarProxyOut
	{
		pOut := dwn->{LocalVarProxyOut^}
		if pOut.Down? is in PtrToRef
		{
			resObj := pOut.Down->{PtrToRef^}.Down
			if resObj is RemovedUnref
				return resObj
			return new RemovedUnref(resObj)
		}
	}
	if dwn is in PtrToRef
	{
		resObj := dwn->{PtrToRef^}.Down
		if resObj is RemovedUnref
			return resObj
		return new RemovedUnref(resObj)
	}

	return new UnrefFuncCall(dwn)
}
TryGetPtrObj := !(Token^ itm) -> BoxExeObj^
{
	if itm == null return null
	if itm.Down == null return null
	if itm.Down.Right == null return null
	if itm.Down.Right.Right != null return null
	if itm.Down.Right.GetValue() != "^" return null

	dwn := TryGetExeCall(itm.Down)

	if dwn == null
	{
		CurrentFuncWork?.SetErrorMessage(itm.MakeError("can not dereference object"))
		return null
	}

	if dwn.GetType() is in TypePoint
		return new PtrToRef(dwn)
}

UnrefFuncCall := class extend BoxExeObj
{
	Down := BoxExeObj^
	this := !(BoxExeObj^ obj) -> void
	{
		Down = obj
		ObjType = Down.GetType().GetPoint()
		obj.NotifyMemUse()
	}
	IsMem := virtual !() -> bool
	{
		return false
	}
	PrintPre := virtual !(LLVMWriteContext^ ctx) -> void
	{
		Down.PrintPointPre(ctx)
	}
	PrintUse := virtual !(LLVMWriteContext^ ctx) -> void
	{
		Down.PrintPointUse(ctx)
	}
}

PrintUnrefObj := !(LLVMWriteContext^ ctx,int id,BoxExeObj^ obj) -> void
{
	f := ctx.writeStream
	rType := NormalizeType(obj.GetType())

	obj.PrintPointPre(ctx)
	f^ << "%TUnref" << id << " = load "
	rType.PrintType(ctx)
	f^ << ","
	rType.PrintType(ctx)
	f^ << "* "
	obj.PrintPointUse(ctx)
	if DebugMode
		f^ << ", !dgb !" << GDebugLineCallId
	f^ << "\n"
}

GetElementRetrive := !(BoxExeObj^ hm, BoxExeObj^ ind) -> BoxExeObj^
{
	objs := CheckExeDownList
	objs.Push(hm)
	objs.Push(ind)
	return CreateFuncCall(StringSpan("[]"),objs)
}

RemovedUnref := class extend BoxExeObj
{
	Down := BoxExeObj^
	this := !(BoxExeObj^ obj) -> void
	{
		Down = obj
		ObjType = Down.GetType()
	}
	IsMem := virtual !() -> bool
	{
		return Down.IsMem()
	}
	PrintPointPre := virtual !(LLVMWriteContext^ ctx) -> void
	{
		Down.PrintPointPre(ctx)
	}
	PrintPointUse := virtual !(LLVMWriteContext^ ctx) -> void
	{
		Down.PrintPointUse(ctx)
	}
	PrintPre := virtual !(LLVMWriteContext^ ctx) -> void
	{
		Down.PrintPre(ctx)
	}
	PrintUse := virtual !(LLVMWriteContext^ ctx) -> void
	{
		Down.PrintUse(ctx)
	}
}
