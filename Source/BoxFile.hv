BoxCodeSpace := class
{
	Files := List.{BoxFile^}

	Templates := AVLMap.{Str,List.{BoxFuncTemplate^}}
	Functions := AVLMap.{Str,List.{BoxFunc^}} //only for builtin functions
	Globals := AVLMap.{Str,List.{BoxUnit^}}

	ExchangeTableFuncs :=  HybridQueue.{BoxUnit^,10}
	ExchangeTableTemplates := HybridQueue.{BoxUnit^,10}

	Types := HashMap.{Str,BoxUnit^}

	Modules := List.{ModuleInterface^}

	AddTemplate := !(Str name, BoxFuncTemplate^ newTempl) -> void
	{
		Templates[name].Push(newTempl)
		if name == "->{}"
			ExchangeTableTemplates.Push(newTempl)
	}
	AddFunction := !(Str name, BoxFunc^ newFnc) -> void
	{
		Functions[name].Push(newFnc)
		if name == "->{}"
			ExchangeTableFuncs.Push(newFnc)
	}
}


BoxFile := class extend BoxUnit
{
	fileId := int
	file := File^
	fileData := Blob^
	fileSize := int
	fileName := Str

	loaded := THatch

	FileClasses := List.{BoxClassBody^}
	FileClassTemplates := List.{BoxClassTemplateBody^}
	Functions := List.{BoxFuncTemplateBody^}

	Typedefs := List.{Tuple.{TypedefTemplateVar^,u32}}

	ClassAppends := AVLMap.{Str,Tuple.{Token^,u32}}

	fileTokens := Token^
	tokensChanged := bool

	ParsedTokens := AVLSet.{Token^}

	this := !(File^ inFile) -> void
	{
		fileId = GetNewId()
		file = inFile
		fileData = file.GetBlob()
		fileSize = file.Size()
		fileName = file.GetName()
	}
	GetName := !() -> StringSpan
	{
		result = fileName
	}

	LoadFiles := !() -> void
	{
		fileTokens = this.LoadFile(file,fileData,false)
	}
	LoadFile := !(File^ newFile,Blob^ fileValue, bool forceLoad) -> Token^
	{
		resultTokens := Token^

		blb := Blob^
		if not forceLoad
			blb = TryGetCacheOfFile(newFile)
		if blb != null
		{
			if blb.Size() == 0
				return void
			s := StreamReadBlob(blb.GetPointer(),blb.Size())
			resultTokens = LoadCachedTokens(s&,this&)
		}
		if resultTokens == null
		{
			tokens := GetObjectsFromMemory(this&,fileValue.GetPointer()->{char^},fileValue.Size())

			if tokens == null
				return void

			tokensChanged = true

			resultTokens = new Token

			resultTokens.Down = tokens
			itr := tokens
			while itr != null
			{
				itr.Up = resultTokens
				itr = itr.Right
			}

			SyntaxCompress(resultTokens,LexHVFileRoot)
		}
		return resultTokens
	}
	ParseClasses := !(ReloadFileOldData^ oldData = null) -> void
	{
		classes := ParseClasses(fileTokens)

		for iter : classes
		{
			stVal := iter.Down.Right
			name := StringSpan
			if stVal.Left is TokenString
			{
				name = StringSpan(stVal.Left->{TokenString^}.Value.Str())
			}else if stVal.Left is TokenIndent
			{
				name = stVal.Left->{TokenIndent^}.Value
			}else{
				assert(false)
			}
			d := PClassParser(stVal.Right)

			if oldData != null
			{
				if not d.IsTemplate() 
				{
					foundClass := BoxClassBody^

					for it : oldData.FileClasses
					{
						if it.Name == name
						{
							foundClass = it
							break
						}
					}

					if foundClass != null
					{
						dHsh := d.ComputeHash(fileData)
						if foundClass.hash != dHsh
						{
							//TODO extends tokens
							foundClass.Body = d.bodyToken
							foundClass.hash = dHsh

							oldData.ctx.ReloadClasses.PushUniq(foundClass)
						}

						oldData.UsedFileClasses.Insert(foundClass)
						FileClasses.Push(foundClass)
						continue
					}

				}else{
					foundTemplate := BoxClassTemplateBody^

					for it : oldData.FileClassTemplates
					{
						if it.ItName == name
						{
							//TODO reload body
							foundTemplate = it
							break
						}
					}

					if foundTemplate != null
					{
						//TODO check change of hash
						oldData.UsedFileClassTemplates.Insert(foundTemplate)
						FileClassTemplates.Push(foundTemplate)
						continue
					}
				}
			}

			assert(d.IsFound())

			AddClass(name,d&)

			ParsedTokens.Insert(iter)
		}
	}
	AddClass := !(StringSpan name, PClassParser^ d) -> void
	{
		cls := d.CreateObject()

		if cls is in BoxClassBody
		{
			cls2 := cls->{BoxClassBody^}
			cls2.SetName(name)
			clsVar := new TypeVar(name,cls2.ItType)
			CurrentCodeSpace.Types[name] = clsVar
			FileClasses.Push(cls2)
			cls2.ClassFile = this&
			cls2.hash = d.ComputeHash(fileData)
		} else if cls is in BoxClassTemplateBody
		{
			cls3 := cls->{BoxClassTemplateBody^}
			cls3.SetName(name)
			templateVar := new TemplateTypeVar(name,cls3)
			CurrentCodeSpace.Types[name] = templateVar
			FileClassTemplates.Push(cls3)
		}else{
			assert(false)
		}
		
	}
	ParseClasses := !(Token^ tokens) -> HybridQueue.{Token^,20}
	{
		if tokens == null
			return void
		LoadSpace()

		iter := tokens.Down
		while iter != null
		{
			if iter.Down?.Right?.GetValue() == ":="
			{}else{
				iter = iter.Right
				continue
			}
			stVal := iter.Down.Right

			p := PClassParser(stVal.Right)

			if not p.IsFound()
			{
				iter = iter.Right
				continue
			}
			
			result.Push(iter)

			iter = iter.Right
		}
	}
	ParseAppendClasses := !(ReloadFileOldData^ oldData = null) -> void
	{
		lst := ParseAppend(fileTokens)

		for iter : lst
		{
			name := iter.Down.Right->{TokenIndent^}.Value

			cls := intGetClass2(name.GetString().Str())

			if cls == null
			{
				CurrentWork?.SetErrorMessage(iter.MakeError("class not found"))
				return void
			}else{

				bodyToken := iter.Down.Right.Right
				assert(cls is in BoxClassBody)

				hsh := u32
				if RunMode
					hsh = ComputeBracketsHash(bodyToken.Line.File.fileData,null,bodyToken)

				if oldData?.ClassAppends.Contain(name)
				{
					oldAppend := ref oldData.ClassAppends[name]

					cls->{BoxClassBody^}.Appends.DeleteIf(@1.1 == oldAppend.0)

					//TODO case when we have multiple AppendClass of same class
					if oldAppend.1 != hsh
					{
						oldData.ctx.ReloadClasses.PushUniq(cls->{BoxClassBody^})
					}
				}

				ClassAppends[name] = !{bodyToken,hsh}

				cls->{BoxClassBody^}.Appends.Emplace(this&,bodyToken,hsh)
				ParsedTokens.Insert(iter)
			}
		}
	}
	ParseAppend := !(Token^ toks) -> List.{Token^}
	{
		if toks == null
			return void

		LoadSpace()
		iter := toks.Down
		while iter != null
		{
			if iter.Down?.GetValue() == "AppendClass"
			{} else{
				iter = iter.Right
				continue
			}
			if iter.Down.Right is not TokenIndent
			{
				CurrentWork?.SetErrorMessage(iter.MakeError("i dont know how you got there"))
				return void
			}
			result.Push(iter)
			iter = iter.Right
		}
	}
	ParseTypedefs := !(ReloadFileOldData^ oldData = null) -> void
	{
		if fileTokens == null
			return void

		LoadSpace()
		iter := fileTokens.Down
		while iter != null
		{
			if iter.Down?.Right?.Right?.GetValue() == "type"
			{
				if oldData != null
				{
					hsh := ComputeHash(iter)
					foundTypedef := TypedefTemplateVar^
					for it : oldData.Typedefs
					{
						if it.1 == hsh
						{
							foundTypedef = it.0
							break
						}
					}

					if foundTypedef != null
					{
						Typedefs.Emplace(foundTypedef,hsh)
						oldData.UsedTypedefs.Insert(foundTypedef)

						iter = iter.Right
						continue
					}
					
				}
				res := TryParseTypedefTemplate(iter)

				if res != null
				{
					assert(res is TypedefTemplateVar)
					asTemplate := res->{TypedefTemplateVar^}
					CurrentCodeSpace.Types[asTemplate.Name] = asTemplate
					ParsedTokens.Insert(iter)
				}
			}
			iter = iter.Right
		}
	}
	ParseFunctions := !(ReloadFileOldData^ oldData = null) -> void
	{
		res := ParseFunctions(fileTokens)

		for iter : res
		{
			stVal := iter.Down.Right

			c := PFunctionParser(stVal.Right)

			if oldData != null
			{
				hsh := c.ComputeHeaderHash()

				foundFunc := BoxFuncTemplateBody^
				for it : oldData.Functions
				{
					if it.GetHeaderHash() == hsh
					{
						foundFunc = it
						break
					}
				}

				if foundFunc != null
				{
					if foundFunc.GetFullHash() != c.ComputeHash()
					{
						HotloadStream << "Function "<< foundFunc.Name << " changed its content\n"
						foundFunc.ReloadFunctions(oldData.ctx,c&,fileData)
					}

					Functions.Push(foundFunc)
					oldData.UsedFunctions.Insert(foundFunc)
					continue
				}
			}

			isSuffix := false
			name := StringSpan
			if stVal.Left is TokenString
			{
				name = StringSpan(stVal.Left->{TokenString^}.Value.Str())
				isSuffix = true
			}else if stVal.Left is TokenIndent
			{
				name = stVal.Left->{TokenIndent^}.Value
			}else{
				assert(false)
			}

			CreateFunc(name,isSuffix,c&,iter)
		}
	}
	CreateFunc := !(Str newName,bool isSuffix,PFunctionParser^ newFunc,Token^ iter) -> void
	{
		fnc := newFunc.CreateObject()
		assert(fnc != null)
		assert(fnc is in BoxFuncTemplate)
		if fnc is in BoxFuncTemplateBody
		{
			fnc->{BoxFuncTemplateBody^}.headerHash = newFunc.ComputeHeaderHash()
			fnc->{BoxFuncTemplateBody^}.hash = newFunc.ComputeHash()
		}
		res := new TemplateFuncVar(newName,isSuffix,fnc->{BoxFuncTemplate^})

		ParsedTokens.Insert(iter?)
		res.MemObj.SetName(res.Name)
		CurrentCodeSpace.AddTemplate(res.Name,fnc->{BoxFuncTemplate^})

		Functions.Push(fnc->{BoxFuncTemplateBody^})
	}

	ParseFunctions := !(Token^ checkTokens) ->	HybridQueue.{Token^,20}
	{
		if checkTokens == null
			return void

		LoadSpace()
		iter := checkTokens.Down
		while iter != null
		{
			if iter.Down?.Right?.GetValue() == ":="
			{}else{
				iter = iter.Right
				continue
			}
			stVal := iter.Down.Right

			if stVal.Right == null
			{
				iter = iter.Right
				continue
			}

			c := PFunctionParser(stVal.Right)
			if not c.IsFound()
			{
				iter = iter.Right
				continue
			}
			result.Push(iter)

			iter = iter.Right
		}
	}

	LoadSpace := !() -> void
	{
		CurrentFile = this&
		CurrentScope = this&
		foundSpace := false
		for spc : CodeSpaces
		{
			for fil : spc.Files
			{
				if fil == this&
				{
					CurrentCodeSpace = spc&
					foundSpace = true
					break
				}
			}
			if foundSpace
				break
		}
		assert(foundSpace)

	}

	AddWork := !() -> void
	{
		fileName = file.GetName()
		if fileTokens == null
			return void

		iter := fileTokens.Down
		while iter != null
		{
			if ParsedTokens.Contain(iter)
			{
				iter = iter.Right
				continue
			}
			WorkBag.AddWork(new CWorkBaseFile(this&,iter))
			iter = iter.Right
		}
		
	}
	Parse := !() -> void
	{
		fileName = file.GetName()

		LoadSpace()

		defer loaded.Emit()

	}
	PrintCode := virtual !(LLVMWriteContext^ ctx) -> void
	{
		if DebugMode //later
		{
			f := ctx.writeStream
			pth := file.GetPath()
			if fsIsExist(pth.Str()) //TODO to something better
			{
				pth2 := fsGetAbsolutePath(pth)
				if not pth2.IsSet()
					pth2 = pth
				p := pth2.GetOr("")
				f^ << "!" << fileId  << " = !DIFile(filename: \"" 
				f^ << p.Str() << "\", directory: \""
				f^ <<  "/" <<"\")\n"
			}else{
				f^ << "!" << fileId  << " = !DIFile(filename: \"" 
				f^ << file.GetName() << "\", directory: \""
				f^ <<  "/" <<"\")\n"
			}
		}
	}
}
TryParseVarInFile := !(Token^ obj) -> BoxUnit^
{
	if obj == null or obj.Down == null
		return null

	iter := obj.Down

	if iter.Right == null
		return null
	if iter.Right?.GetValue() != ":="
		return null

	name := StringSpan
	if iter is TokenIndent
	{
		name = iter->{TokenIndent^}.Value
	}else if iter is TokenString
	{
		name = StringSpan(iter->{TokenString^}.Value.Str())
	}

	varToken := iter.Right.Right

	if varToken == null
		return null

	if varToken.Down?.GetValue() == "enum"
	{
		en := TryParseEnum(varToken)
		assert(en != null)
		return new TypeVar(name,en.ItType)
	}
	
	if varToken.GetValue() == "thread_local"
	{
		return null
	}
	
	if varToken.GetValue() == "task_local"
	{
		return new TaskLocalVarDelayed(name,varToken.Right)
	}

	return null
}

CWorkBaseFile := class extend CWorkUnit
{
	itFile := BoxFile^
	itToken := Token^
	itState := CWorkState
	itError := Str

	this := !(BoxFile^ inpFile, Token^ inpToken) -> void
	{
		itFile = inpFile
		itToken = inpToken
		itState = "Created"
	}
	GetErrorMessage := virtual !() -> Str
	{
		return itError
	}
	
	DoWork := virtual !() -> CWorkState 
	{
		if itState == "Complete" or itState == "Failed"
			return itState

		itFile.LoadSpace()
		CurrentScope = itFile

		if itToken.Down?.Right?.Right?.GetValue() == "@"// and itToken.Down.Right.Right.Right?.GetValue() == "{}"
		{
			//TODO must be token, not str
			name := itToken.Down->{TokenIndent^}.Value
			newVarTemplate := new GlobalVarTemplate(name,itToken.Down.Right.Right.Right.Right,itToken.Down.Right.Right.Right,itToken.Down.Right.Right)
			CurrentCodeSpace.Globals[name].Push(newVarTemplate)
			return "Complete"
		}

		vr := TryParseVarInFile(itToken)

		if vr == null
		{
			if itToken.Down?.Right?.GetValue() == ":=" and itToken.Down is TokenIndent
			{
				isRef := false
				itr2 := itToken.Down.Right.Right
				if itr2.GetValue() == "ref"
				{
					itr2 = itr2.Right
					isRef = true
				}
				vr = new GlobalVar2(itToken.Down->{TokenIndent^}.Value,itr2,isRef)
				GlobalVars2.Push(vr->{GlobalVar2^})
			}
		}

		if vr != null
		{
			if vr is TypeVar or vr is TemplateTypeVar
			{
				if vr is TypeVar
				{
					CurrentCodeSpace.Types[vr->{TypeVar^}.Name] = vr
				}else{
					//CurrentCodeSpace.Globals[vr->{TypeVar^}.Name].Push(vr)
					CurrentCodeSpace.Types[vr->{TemplateTypeVar^}.Name] = vr
				}
			}else if vr is in GlobalVar2
			{
				glb := vr->{GlobalVar2^}

				itr2 := itToken.Down
				while itr2 != null
				{
					if itr2.Right == null and itr2.GetValue() == "{}"
					{
						glb.BodyToken = itr2
					}
					itr2 = itr2.Right
				}
				CurrentCodeSpace.Globals[glb.ItName].Push(vr)
			}else if vr is in TypedefTemplateVar
			{
				CurrentCodeSpace.Types[vr->{TypedefTemplateVar^}.Name] = vr
			}else if vr is in NamedVar
			{
				v := vr->{NamedVar^}
				CurrentCodeSpace.Globals[v.Name].Push(vr)
			}else {
			}

			vr.Work()
		}else{
			cmdRes := TryGetCommand(itToken)
			if cmdRes == null
			{
				itError = itToken.MakeError("Unknown object")
				return "Failed"
			}
		}

	}
	IsDone := virtual !() -> bool {
		return false
	}
}
