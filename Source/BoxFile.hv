BoxCodeSpace := class
{
	Files := List.{BoxFile^}

	Templates := AVLMap.{StringSpan,List.{BoxFuncTemplate^}}
	Functions := AVLMap.{StringSpan,List.{BoxFunc^}}
	Globals := AVLMap.{StringSpan,List.{BoxUnit^}}

	Modules := List.{ModuleInterface^}
}


BoxFile := class extend BoxUnit
{
	fileId := int
	file := vRepoFile^
	fileMap := FileView^
	fileSize := int
	fileName := StringSpan

	loaded := THatch

	objects := List.{BoxUnit^}

	AllClasses := List.{BoxClass^}

	this := !(vRepoFile^ inFile) -> void
	{
		fileId = GetNewId()
		file = inFile
		fileMap = file.GetMap()
		fileSize = file.Size()
	}
	GetName := !() -> StringSpan
	{
		result = fileName
	}

	Parse := !() -> void
	{
		fileName = GetConstString(file.GetName().Str())

		CurrentFile = this&
		foundSpace := false
		for spc : CodeSpaces
		{
			for fil : spc.Files
			{
				if fil == this&
				{
					CurrentCodeSpace = spc&
					foundSpace = true
					break
				}
			}
			if foundSpace
				break
		}
		assert(foundSpace)
		
		defer loaded.Emit()

		tokens := GetObjectsFromMemory(this&,fileMap.Get()->{char^},fileSize)

		if tokens == null
			return void

		tempToken := Token
		tempToken.Down = tokens
		itr := tokens
		while itr != null
		{
			itr.Up = tempToken&
			itr = itr.Right
		}

		SyntaxCompress(tempToken&,LexHVFileRoot)

		CurrentScope = this&
		iter := tempToken.Down

		while iter != null
		{
			vr := TryParseVarInFile(iter)	

			if vr == null
			{
				if iter.Down?.Right?.GetValue() == ":=" and iter.Down is TokenIndent
				{
					vr = new GlobalVarDelayed(iter.Down->{TokenIndent^}.Value,iter.Down.Right.Right)
				}
			}

			if vr != null
			{
				if vr is TypeVar or vr is TemplateTypeVar
				{
					if vr is TypeVar
					{
						TypesDatabase[vr->{TypeVar^}.Name] = vr->{TypeVar^}
					}else{
						CurrentCodeSpace.Globals[vr->{TypeVar^}.Name].Push(vr)
						//TypesDatabase[vr->{TemplateTypeVar^}.Name] = vr->{TemplateTypeVar^}
					}
				}else if vr is in GlobalVar
				{
					glb := vr->{GlobalVar^}
					CurrentCodeSpace.Globals[glb.Name].Push(vr)

				}else if vr is in NamedVar
				{
					v := vr->{NamedVar^}
					CurrentCodeSpace.Globals[v.Name].Push(vr)
				}else {
				}

				objects.Push(vr)
				vr.Work()
			}else{
				if iter.Down?.GetValue() == "AppendClass"
				{
					CheckAppendHolder(iter)
				}else{
					iter.Print(0)
					iter.EmitError("Unknown object")
				}
			}
			iter = iter.Right
		}
	}
	PrintCode := virtual !(Stream^ f) -> void
	{
		if DebugMode //later
		{
			pth := file.GetPath()
			if fsIsExist(pth.Str()) //TODO to something better
			{
				pth2 := pth//.FullPath() //TODO hm
				f^ << "!" << fileId  << " = !DIFile(filename: \"" 
				f^ << pth2.Str() << "\", directory: \""
				f^ <<  "/" <<"\")\n"
			}else{
				f^ << "!" << fileId  << " = !DIFile(filename: \"" 
				f^ << file.GetName() << "\", directory: \""
				f^ <<  "/" <<"\")\n"
			}
		}
	}
}
TryParseVarInFile := !(Token^ obj) -> BoxUnit^
{
	if obj == null or obj.Down == null
		return null

	iter := obj.Down

	if iter.Right == null
		return null
	if iter.Right?.GetValue() != ":="
		return null

	if iter.Right?.Right.GetValue() == "type"
	{
		return TryParseTypedefTemplate(obj)
	}

	name := StringSpan
	isSuffix := bool
	if iter is TokenIndent
	{
		name = iter->{TokenIndent^}.Value
	}else if iter is TokenString
	{
		name = iter->{TokenString^}.Value
		isSuffix = true
	}

	varToken := iter.Right.Right

	if varToken == null
		return null
	
	if varToken?.GetValue() == "thread_local"
	{
		return null
	}
	
	if varToken?.GetValue() == "task_local"
	{
		return new TaskLocalVarDelayed(name,varToken.Right)
	}
	
	fnc := TryParseFunction(varToken)

	if fnc != null
	{
		if fnc is in BoxFuncTemplate
		{
			return new TemplateFuncVar(name,isSuffix,fnc->{BoxFuncTemplate^})
		}
		return new FuncVar(name,isSuffix,fnc->{BoxFunc^})
	}

	cls := TryParseClass(varToken)
	if cls != null
	{
		if cls is in BoxClass
		{
			cls2 := cls->{BoxClass^}
			cls2.SetName(name)
			return new TypeVar(name,cls2.ItType)
		}
		assert( cls is in BoxClassTemplate)
		cls3 := cls->{BoxClassTemplate^}
		cls3.SetName(name)
		return new TemplateTypeVar(name,cls3)
	}

	return null
}
