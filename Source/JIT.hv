
RunJITMode := !(TEchoStream^ f,BoxFuncBody^ mainFunc) -> void
{
	
	//mainFunc.Execute()

	try{
		//llvmLib := Library("libLLVM-*.so","libLLVM.dll","LLVM-C.dll")
		llvmLib := GetLibrary("libLLVM-15.0.7.so")

		LLVM_NATIVE_TARGETINFO := LLVMInitializeX86TargetInfo
		LLVM_NATIVE_TARGET := LLVMInitializeX86Target
		LLVM_NATIVE_TARGETMC := LLVMInitializeX86TargetMC
		LLVMInitializeX86AsmPrinter := LLVMInitializeX86AsmPrinter

		ctx := LLVMContextCreate()
		lines := f.GetString()
		buf := LLVMCreateMemoryBufferWithMemoryRange(lines.Str(),lines.Size(),"FileData",0)

			//tF := TFile("dump.ll","w")
			//tF << lines
			//tF.Close()

		msg := char^
		module := void^
		res := LLVMParseIRInContext(ctx,buf,module&,msg&)
		if msg != null and msg != "" and DebugMode
		{
			printf("error %s\n",msg)
			//tF := TFile("dump.ll","w")
			//tF.Write(lines,fil.Size())
			//tF.Close()
			return void
		}
		//mainFunc := intGetFunc("main")
		assert(mainFunc != null and mainFunc is BoxFuncBody)
		fName := mainFunc->{BoxFuncBody^}.OutputName.GetString()


		LLVMVerifyModule(module,0,msg&)
		if msg != null and msg != ""
		{
			printf("error %s\n",msg)

		//	tF := TFile("dump.ll","w")
		//	tF.Write(lines,fil.Size())
		//	tF.Close()
			return void
		}


		LLVMLinkInMCJIT()
		//LLVMInitializeNativeTarget()
		LLVM_NATIVE_TARGETINFO()
		LLVM_NATIVE_TARGET()
		LLVM_NATIVE_TARGETMC()
		LLVMInitializeX86AsmPrinter()

		//LLVMCreateMCJITCompilerForModule := llvmLib.Get("LLVMCreateMCJITCompilerForModule")->{!(void^^,void^,void^,u64,char^^)^->int}
		eng := void^
		res = LLVMCreateMCJITCompilerForModule(eng&,module,null,0,msg&)
		if msg != null and msg != ""
			printf("error %s\n",msg)

		for sp : CodeSpaces
		{
			for cModule : sp.Modules
			{
				if cModule is not CLib
					continue
				clib := cModule->{CLib^}

				if clib.itFuncs.Size() == 0
					continue

				libNamesStr := HybridQueue.{String^,10}
				libNames := HybridQueue.{char^,10}

				for dll : clib.dlls
				{
					newName := dll.GetString()
					libNamesStr.Push(newName)
					libNames.Push(newName.Str())
				}
				lib := GetLibrary(libNames&)

				assert(lib != null)

				for fnc,funcName : clib.itFuncs
				{
					if funcName == clib.initFuncName
						continue
					libObject := lib.Get(funcName)

					printf("JIT searching %s\n",funcName)
					
					if libObject == null
						continue
					assert(fnc is GlobalVar)
					itName := fnc->{GlobalVar^}.GetOutputName()
					ptrToVar := LLVMGetGlobalValueAddress(eng,itName.Str())->{void^^}
					assert(ptrToVar != null)
					ptrToVar^ = libObject
				}
			}
		}

		//test := LLVMGetGlobalValueAddress(eng,"V659")->{void^^}
		//test^ = printf

		fPoint := LLVMGetFunctionAddress(eng,fName.Str())->{!(void^)^->int}
		fPoint(null)

	}catch(e)
	{
		printf("error %s\n","hmm")
	}
	return void
}

