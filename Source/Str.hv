
GTypeStringP := Type^
GTypeStr := Type^

CreateStrType := !() -> void
{
	GTypeStrBase := intGetClass2("String")
	assert(GTypeStrBase != null)
	GTypeStringP = GTypeStrBase.ItType.GetPoint()

	GTypeStr = new TypeStr(GTypeStrBase.ItType)
	TypesDatabase[StringSpan("Str")] = GetConstType(GTypeStr)
}

TypeStr := class extend TypePointLike
{
	this := !(Type^ nBase) -> void
	{
		Base = nBase
		ItHash = typeHashIterator
		typeHashIterator += 1
		if DebugMode
		{
			MetaId = GetNewId()
			GDebugTypePrintMeta.Push(this&)
		}
	}
	IsComplexType := virtual !() -> bool
	{
		return true
	}
}



