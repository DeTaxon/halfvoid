
GTypeStringP := Type^
GTypeStrBase := Type^
GTypeStr := Type^

CreateStrType := !() -> void
{
	GTypeStrBaseClass := intGetClass2("String")
	assert(GTypeStrBaseClass != null)
	GTypeStrBase = GTypeStrBaseClass.ItType
	GTypeStringP = GTypeStrBase.GetPoint()

	GTypeStr = new TypeStr(GTypeStrBase)
	CodeSpaces[-1].Types[StringSpan("Str")] = GTypeStr

	ExchangeList.Push(new ExchangeStrToStringPointerClass)
}

TypeStr := class extend TypePointLike
{
	this := !(Type^ nBase) -> void
	{
		Base = nBase
		ItHash = typeHashIterator
		typeHashIterator += 1
		if DebugMode
		{
			MetaId = GetNewId()
			GDebugTypePrintMeta.Push(this&)
		}
	}
	IsComplexType := virtual !() -> bool
	{
		return false
	}
	IsComplexReturn := virtual !() -> bool
	{
		return true
	}
}

ExchangeStrToStringPointerClass := class extend ExchangeUnit
{
	GetExchangeScore := virtual !(BoxExeObj^ obj,Type^ newType,bool expectResultRef) -> int
	{
		frm := obj.GetType()
		if frm is TypeStr and newType is in TypePoint
		{
			if frm.Base is TypeClass and newType.Base is TypeClass
			{
				fgh := TypeFight(frm.Base,newType.Base)
				if fgh == newType.Base
					return 1000
			}
		}
		return CmpNoExchange
	}
	CreateExchange := virtual !(BoxExeObj^ obj,Type^ expType, bool expectResultRef) -> BoxExeObj^
	{
		if obj.IsMem()
			return new PtrRefExchange(obj,expType)
		return new PtrExchange(obj,expType)
	}
}

