ProjectSettingsType := class extends TGCObject
{
	itFile := File^

	SettingSets := List.{SettingsSet^}

	this := !() -> void
	{
	}


	CollectSettings := !() -> SettingsSet^
	{
		if SettingSets.Size() != 0
			return SettingSets[0]
		return null
	}

	LoadSettings := !(File^ fil) -> bool
	{
		itFile = fil

		if fil.Size() == 0
			return true

		fileData := itFile.GetBlob()

		js := new Json

		if not js.ParseString(fileData.GetPointer(),fileData.Size())
			return false

		compilerSets := js^["CompilerSettingsList"]
		if compilerSets != null
		{
			for node : compilerSets^
			{
				newNode := new SettingsSet
				newNode.ParseJson(node)

				SettingSets.Push(newNode)
			}
		}

		return true
	}
	SaveSettings := !() -> void
	{
		
	}
}

SettingsUsedFolders := class extends TGCObject
{
	Level := int
	FolderPath := Str

	"this" := !(int val, Str setSt) -> void
	{
		Level = val
		FolderPath = setSt
	}
	"=" := default
}

SettingsSet := class extends TGCObject
{
	Name := Str

	KeyVals := AVLMap.{Str,Str}

	InheritedSets := List.{Str}

	UsedFiles := List.{Str}
	UsedFolders := List.{SettingsUsedFolders}

	VulkanProtocolFile := Str?

	CacheFilePath := Str?
	BytecodeFilePath := Str?
	OutputFilePath := Str?

	ClangFlags := Str?

	ParseJson := !(JsonNode^ node) -> void
	{
		Name = node^["Name"]?.GetStr()

		for usedFolder : node^["Folders"]
		{
			UsedFolders.Emplace(usedFolder^["Level"]?.GetStr().ToInt(),usedFolder^["FolderPath"]?.GetStr())
		}
		for usedFile : node^["Files"]
		{
			UsedFiles.Push(usedFile.GetStr())
		}

		BytecodeFilePath = node^["BytecodeFilePath"]?.GetStr()
		OutputFilePath = node^["OutputFilePath"]?.GetStr()

		VulkanProtocolFile = node^["VulkanProtocolFile"]?.GetStr()
	}
}
