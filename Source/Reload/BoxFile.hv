AppendClass BoxFile
{
	ReloadFile := !(HotloadContext^ ctx,File^ newFile) -> void
	{
		fileData = newFile.GetBlob()

		fileTokens = LoadFile(newFile,fileData,true)

		ParsedTokens.Destroy()

		oldData := ReloadFileOldData
		oldData.ctx = ctx

		oldData.Functions.Push(Functions[^])
		Functions.Destroy()

		oldData.FileClasses.Push(FileClasses[^])
		FileClasses.Destroy()

		oldData.FileClassTemplates.Push(FileClassTemplates[^])
		FileClassTemplates.Destroy()

		for it,ind : FileEnums
			oldData.Enums[ind] = it
		FileEnums.Destroy()


		oldData.Typedefs.Push(Typedefs[^])
		Typedefs.Destroy()

		for it,ind : ClassAppends
		{
			oldData.ClassAppends[ind] = it
		}
		ClassAppends.Destroy()

		//TODO deleted functions,classtemplates,typedefs
		ParseClasses(oldData&)
		ParseTypedefs(oldData&)
		ParseAppendClasses(oldData&)
		ParseFunctions(oldData&)
		ReloadGlobals(fileTokens,oldData&)
	}
	ReloadAppends := !(HotloadContext^ ctx, File^ newFile, Blob^ thisData,Token^ toks,AVLSet.{BoxClassBody^} changedClasses) -> void
	{
		cleanedClasses := AVLSet.{void^}

		lst := ParseAppend(toks)

		for iter : lst
		{
			name := iter.Down.Right->{TokenIndent^}.Value

			cls := intGetClass2(name.GetString().Str())

			if cls == null
			{
				CurrentWork?.SetErrorMessage(iter.MakeError("class not found"))
				return void
			}else{
				assert(cls is in BoxClassBody)
				cls2 := cls->{BoxClassBody^}
				if cls2 not in cleanedClasses
				{
					cls2.Appends.DeleteIf(@1.0 == this&)
					cleanedClasses.Insert(cls2)
				}
				appendBody := iter.Down.Right.Right
				cls2->{BoxClassBody^}.Appends.Emplace(this&,appendBody,ComputeBracketsHash(thisData,null,appendBody))
				ParsedTokens.Insert(iter)
				changedClasses.Insert(cls2)
			}
		}
	}

	ReloadFunctions := !(HotloadContext^ ctx, File^ newFile, Blob^ thisData, Token^ toks) -> void
	{
		
		fncs := ParseFunctions(toks)

		newHashs := AVLMap.{Token^,u32}
		newFuncNames := List.{Tuple.{String^,Token^}}

		for iter : fncs
		{
			stVal := iter.Down.Right

			c := PFunctionParser(stVal.Right)
			crc := c.ComputeHash()
			newHashs[iter] = crc

			name := String^
			if stVal.Left is TokenString
			{
				name = stVal.Left->{TokenString^}.Value->AsString
			}else if stVal.Left is TokenIndent
			{
				name = stVal.Left->{TokenIndent^}.Value.GetString()
			}else{
				assert(false)
			}

			newFuncNames.Emplace(name,iter)
		}

		foundFunctions := AVLSet.{Token^}

		for c : Functions
		{
			if c is not in BoxFuncTemplateBody
				continue
			thisFunc := c->{BoxFuncTemplateBody^}
			
			foundFunc := Token^
			for it : newFuncNames
			{
				if it.0^ != thisFunc.Name
					continue
				foundFunc = it.1
				break
			}

			if foundFunc != null
			{
				foundFunctions.Insert(foundFunc)
			}

			if thisFunc.hash in newHashs.Values
				continue

			if foundFunc != null
			{
				//TODO check header types
				d := PFunctionParser(foundFunc.Down.Right.Right)
				thisFunc.ReloadFunctions(ctx,d&,thisData)
			} else {
				DeleteFunction(thisFunc)
			}
		}
		for it : newFuncNames
		{
			if foundFunctions.Contain(it.1)
				continue

			d := PFunctionParser(it.1.Down.Right.Right)
			CreateFunc(it.0,false,d&,null)
		}
		
	}
	ReloadGlobals := !(Token^ root,ReloadFileOldData^ old) -> void
	{
		//TODO global variables themself
		//YODO typedefs here?

		itr := root.Down

		while itr != null
		{
			if itr.Down?.Right?.GetValue() == ":=" and itr.Down.Right.Right != null
			{
				name := Str

				if itr.Down is TokenIndent 
				{
					name = itr.Down->{TokenIndent^}.Value
				}else if itr.Down is TokenString 
				{
					name = itr.Down->{TokenString^}.Value
				}else
				{
					assert(false)
				}

				tstObj := itr.Down.Right.Right

				if tstObj.Down?.GetValue() == "enum"
				{
					newEnum := BoxEnum^
					typeVar := TypeVar^

					if old?.Enums.Contain(name)
					{
						newEnum = old.Enums[name].0
						typeVar = old.Enums[name].1

						newEnum.ReloadEnum(old.ctx,tstObj.Down)
					}

					if newEnum == null
					{
						newEnum = new BoxEnum(tstObj.Down)
						typeVar = new TypeVar(name,newEnum.ItType)
					}
					ThisCodeSpace?.Types[name] = typeVar
				}
			}
			itr = itr.Right
		}

	}
	DeleteFunction := !(BoxFuncTemplate^ delFunc) -> void
	{
		Functions.DeleteIf(@1 == delFunc)
		CodeSpaces[^].Templates[^].DeleteIf(@1 == delFunc)
	}
}

ReloadFileOldData := class extend TGCObject
{
	ctx := HotloadContext^

	Functions := List.{BoxFuncTemplateBody^}
	UsedFunctions := AVLSet.{BoxFuncTemplateBody^}

	FileClasses := List.{BoxClassBody^}
	UsedFileClasses := AVLSet.{BoxClassBody^}

	FileClassTemplates := List.{BoxClassTemplateBody^}
	UsedFileClassTemplates := AVLSet.{BoxClassTemplateBody^}

	ClassAppends := AVLMap.{Str,Tuple.{Token^,u32}}

	Enums := AVLMap.{Str,Tuple.{BoxEnum^,TypeVar^}}

	Typedefs := List.{Tuple.{TypedefTemplateVar^,u32}}
	UsedTypedefs := AVLSet.{TypedefTemplateVar^}
	
}
