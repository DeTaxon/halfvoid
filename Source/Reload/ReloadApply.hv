
ReloadApply := !(HotloadContext^ hotload) -> void
{
	while hotload.ReloadFunctions.Size() != 0 or hotload.ReloadClasses.Size() != 0
	{
		if hotload.ReloadClasses.Size() != 0
		{
			newClass := hotload.ReloadClasses.Pop()
			newClass.ReloadClass(hotload)
		}else{
			newFunc := hotload.ReloadFunctions.Pop()

			HotloadStream << "Reloading function " << newFunc.GetGoodName() << "\n"
			newFunc.ReloadFunction(hotload,null)
		}
	}


	while hotload.ChangedVirtualTables.Size() != 0
	{
		cls := hotload.ChangedVirtualTables.Pop()
		DB_VTableUsage.Key.Get(cls,x ==> {
			if x is in BoxFuncBody
			{
				x->{BoxFuncBody^}.ReloadFunction(hotload,null)
			}
		})
		DB_VTableUsage.Key.RemoveAll(cls)
	}

	hotload.FailedToCompile[^].Recompile()
	hotload.FailedToCompile.Destroy()
}
