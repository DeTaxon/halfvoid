HotloadContext := class
{
	ChangedFunctions := List.{BoxFuncBody^}
	ChangedVirtualFunctions := List.{BoxFuncBody^}
	ChangedVirtualTables := List.{BoxClassBody^} // <- base class, not vtable itself

	ReloadFunctions := List.{BoxFuncBody^}
	ReloadClasses := List.{BoxClassBody^}

	FailedToCompile := List.{BoxFuncBody^}

	OutdatedFunctions := List.{MCFunction^}

	fileDatas := AVLMap.{BoxFile^,Blob^}

	AddFunction := !(BoxFunc^ x) -> void
	{
		if x is not in BoxFuncBody
			return void
		ReloadFunctions.PushUniq(x->{BoxFuncBody^})
	}
	AddClass := !(BoxClass^ x) -> void
	{
		if x is not in BoxClassBody
			return void
		ReloadClasses.PushUniq(x->{BoxClassBody^})
	}
	HaveWork := !() -> bool
	{
		if ReloadFunctions.Size() != 0
			return true
		if ReloadClasses.Size() != 0
			return true
		return false
	}

	Reset := !() -> void
	{
		ChangedFunctions.Destroy()
		ChangedVirtualFunctions.Destroy()

		fileDatas[^].IncRef()
		fileDatas.Destroy()
	}
	
	GetFileData := !(BoxFile^ fil) -> Blob^
	{
		return fileDatas[fil]?

		result = fil.file.GetBlob()
		fileDatas[fil] = result
	}
}
