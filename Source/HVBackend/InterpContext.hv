
MCInterpContext := class
{
	funcs := AVLMap.{BoxFuncBody^,MCFunction^} 

	loadedDlls := AVLMap.{CLib^,Library^}
	declarePtrs := AVLMap.{void^,void^}

	globalVariables := AVLMap.{GlobalVar2^,void^}

	//VTableFunctions := HVTable2.{BuildInVirtualFunctionCall^,void^}
	
	functionPointers := HVTable2.{MCFunction^,void^}
	
	vtableFunctions := HVTable2.{BoxFuncBody^,void^}


	GetGlobalVarMem := !(GlobalVar2^ vr) -> void^
	{

		if vr.itName == "HV"
		{
			InitRunContext()
			return HV&
		}

		return globalVariables[vr]?

		vr.NotifyUseAndWait()

		varSize := vr.GetType().GetSize()
		result = calloc(varSize,1)
		globalVariables[vr] = result

		classVar := BoxClass^
		VirtualTables.Value.Get(vr, (x) ==> { classVar = x})

		if classVar != null
		{
			if classVar.ItName == "BlobOnVector"
			{
				free(result)
				result = BlobOnVector->VTable
				globalVariables[vr] = result
				return void
			}
			if classVar.ItName == "File"
			{
				free(result)
				result = File->VTable
				globalVariables[vr] = result
				return void
			}
			if classVar.ItName == "StringSpan"
			{
				free(result)
				result = StringSpan->VTable
				globalVariables[vr] = result
				return void
			}
			if classVar.ItName == "String"
			{
				free(result)
				result = String->VTable
				globalVariables[vr] = result
				return void
			}
			if classVar.ItName == "XML"
			{
				free(result)
				result = XML->VTable
				globalVariables[vr] = result
				return void
			}

			vTable := classVar.VTableType
			fldsCount := vTable.GetFieldsCount()

			for i : fldsCount
			{
				val := ref classVar.VTable[i]

				pth := vTable.GetFieldByIndexRaw(i)
				memPtr := result->{u8^}[pth.MemOffset]&

				if val is VTableFunc
				{
					asFnc := val->{VTableFunc^}
					fnc := asFnc.Value->{BoxFuncBody^}
					if fnc is ResistFunc
					{
						fnc = fnc->{ResistFunc^}.base->{BoxFuncBody^}
					}
					assert(fnc is in BoxFuncBody)
					mc := GetMCFunc(fnc)
					fncPointer := GetFunctionPointer(mc)
					memPtr->{void^^}^ = fncPointer

					//memPtr->{void^^}^ = asFnc.Value
					vtableFunctions.Add(asFnc.Value->{BoxFuncBody^},fncPointer)
				}
			}
		}else if vr.value != null
		{
			WriteGlobToMem(vr.value,result)
		}

		for space : CodeSpaces //TODO too bad, cycle in cycle in cycle
		{
			for module : space.Modules
			{
				if module is not CLib
					continue

				cLib := module->{CLib^}

				for it, ind : cLib.itFuncs
				{
					if it == vr
					{
						lib := GetClibDll(cLib,ind)
						fncPtr := lib.Get(ind)
						result->{void^^}^ = fncPtr
					}
				}
			}
		}


	}
	WriteGlobToMem := !(BoxExeConstObj^ obj,void^ mem)-> void
	{
		tp := obj.GetType()

		if obj is BoxArrayConst
		{
			arr := obj->{BoxArrayConst^}
			elemSize := tp.Base.GetSize()

			for it,i : arr.dwns
			{
				WriteGlobToMem(it,mem->{u8^}[i*elemSize]&)
			}

		}else if obj is BoxExeInt{
			mem->{s32^}^ = obj->{BoxExeInt^}.Value
		}else if obj is BoxExeString
		{
			mem->{char^^}^ = obj->{BoxExeString^}.Value.Str()
		} else if obj is ClassConstValue {
			cnst := obj->{ClassConstValue^}
			cls := cnst.ItType->{TypeClass^}.ToClass

			for it,i : cnst.Value
			{
				pth := cls.GetFieldByIndexRaw(i)
				WriteGlobToMem(it,mem->{u8^}[pth.MemOffset]&)
			}
		} else if obj is ClassVTablePtrConst {
			mem->{void^^}^ = GetGlobalVarMem(obj->{ClassVTablePtrConst^}.itClass.VTableValue)
		} else if obj is ZeroClassConst {
			memset(mem,0,obj->{ZeroClassConst^}.GetType().GetSize())
		}else{
			printf("Unknown const %s\n",obj.UnitName)
			assert(false)
		}
	}
	GetGlobalVarFromMem := !(void^ val) -> GlobalVar2^
	{
		for it, ind : globalVariables
		{
			if it == val
				return ind
		}
		return null
	}

	GetFunctionPointer := !(MCFunction^ fnc) -> void^
	{
		funcPointer := void^
		functionPointers.Key.Get(fnc, (x) ==> { funcPointer = x})
		if funcPointer != null
			return funcPointer

		argsCount := fnc.BaseFunction.GetType()->{TypeFunc^}.Params.Size()
		newClosure := calloc((HV_closure_func_data->TypeSize + void^->TypeSize*argsCount),1)->{HV_closure_func_data^}

		closure := ffi_closure_alloc(128,newClosure.func_pointer&) //TODO unconst
		PopulateCIF(fnc,newClosure.ffi_cif[0]&,newClosure.closure_types[0]&)

		res := ffi_prep_closure_loc(closure,newClosure.ffi_cif[0]&,HV_closure_func,newClosure,newClosure.func_pointer)

		newClosure.interpCntx = this&
		newClosure.interpFunc = fnc

		funcPointer = newClosure.func_pointer
		functionPointers.Add(fnc,funcPointer)
		return funcPointer
	}

	PopulateCIF := !(MCFunction^ fnc, void^ resCIF,void^^ types) -> void
	{
		resultType := void^
		if fnc.ResultIndex != 0
		{
			resultType = ThisToCif(fnc.Objects[fnc.ResultIndex].GetType())
		}else{
			resultType = ffi_type_void
		}
		hv := fnc.BaseFunction
		fType := hv.GetType()->{TypeFunc^}

		typesSize := 0

		for i : fnc.InputsIndxCount
		{
			j := i + fnc.InputsIndxStart
			types[typesSize] = ThisToCif(fnc.Objects[j].GetType())
			typesSize += 1
		}
		ffi_prep_cif(resCIF,2, typesSize,resultType,types[0]&)
		
	}
	ThisToCif := !(Type^ itType) -> void^
	{
		if itType == GTypeChar.GetPoint()
		{
			return ffi_type_pointer
		}else if itType is in  TypePoint{
			return ffi_type_pointer
		}else if itType is in  TypeArrayView{
			return ffi_type_pointer
		}else if itType == GTypeDouble{
			return ffi_type_double
		}else if itType == GTypeInt{
			return ffi_type_sint32
		}else if itType == GTypeU64{
			return ffi_type_uint64
		}else if itType == GTypeS64{
			return ffi_type_sint64
		}else if itType == GTypeBool{
			return ffi_type_sint8
		}else if itType == GTypeU8{
			return ffi_type_uint8
		}else if itType == GTypeVec2f{
			return ffi_type_pointer
		}else if itType == GTypeVec3f{
			return ffi_type_pointer
		}else if itType == GTypeVec4f{
			return ffi_type_pointer
		}else{
			printf("unknown type %s\n",itType.GetBADStr().Str())
			assert(false)
		}
	}

	GetFuncByPointer := !(void^ ptr) -> MCFunction^
	{
		res := MCFunction^
		functionPointers.Value.Get(ptr,(x) ==> { res = x })
		return res
	}

	GetMCFunc := !(BoxFuncBody^ itm) -> MCFunction^
	{

		somePointer := static 0 //TODO maybe not global
		TLock(somePointer&)
		defer TUnlock(somePointer&)

		return funcs[itm]?

		assert(itm is in BoxFuncBody)

		itm.ParseBody()
		itm.WaitReadyState()

		buildCtx := MCBuildContext
		buildCtx.Init()
		itm.CreateMCFunction(buildCtx&)
		result = buildCtx.CreateMCFunction()
		result.BaseFunction = itm

		funcs[itm] = result
	}

	GetClibDll := !(CLib^ cLib, StringSpan funcName) -> Library^
	{
		return loadedDlls[cLib]?

		useLib := Library^
		for it : cLib.dlls
		{
			useLib = GetLibrary(it)
			if useLib != null
				break
		}
		if useLib == null
		{
			printf("could not load library for function %s\n",funcName.GetString().Str())
			exit(0)
		}
		loadedDlls[cLib] = useLib
		return  useLib
	}
 	DeclareToPtr := !(BoxFuncDeclare^ dclr) -> void^
	{
		return declarePtrs[dclr]?

		if dclr.GetName() == "tanf" //TODO remove
			return hvr_tanf

		for space : CodeSpaces
		{
			for module : space.Modules
			{
				if module is not CLib
					continue

				cLib := module->{CLib^}
				if not cLib.IsMyFunc(dclr)
					continue
				useLib := GetClibDll(cLib,dclr.GetName())

				fnc := useLib.Get(dclr.GetName())
				if fnc == null
				{
					continue
				}
				declarePtrs[dclr] = fnc
				return fnc
			}
		}
		assert(false)
		printf("could not load function declare\n")
		exit(0)
	}
}

HV_closure_func := !(void^ cif,void^ ret,void^^ args,HV_closure_func_data^ data) -> void
{
	mc := data.interpFunc
	hv := mc.BaseFunction
	fType := hv.GetType()->{TypeFunc^}

	step2 := void^[120]
	thisArgs := HybridQueue.{void^,120}
	//printf("closure %i\n",data.interpFunc.InputsIndxCount)
	for i : data.interpFunc.InputsIndxCount
	{
		step2[i] = args[i]
		//thisArgs.Push(step2[i]&)
		thisArgs.Push(args[i])
		//printf("clsr %p\n",args[i])
	}
	MCInterpFunction(data.interpCntx,data.interpFunc,thisArgs,ret)
}

hvr_tanf := !(float inp) -> float
{
	return tanf(inp)
}

HV_closure_func_data := class
{
	func_pointer := void^
	ffi_cif := u8[128]
	interpCntx := MCInterpContext^
	interpFunc := MCFunction^

	closure_types := void^[1] // must be last!
}
