
MCInterpContext := class
{
	funcs := AVLMap.{BoxFuncBody^,MCFunction^} 

	loadedDlls := AVLMap.{CLib^,Library^}
	declarePtrs := AVLMap.{void^,void^}

	globalVariables := AVLMap.{GlobalVar2^,void^}

	//VTableFunctions := HVTable2.{BuildInVirtualFunctionCall^,void^}


	GetGlobalVarMem := !(GlobalVar2^ vr) -> void^
	{
		return globalVariables[vr]?

		vr.NotifyUseAndWait()

		varSize := vr.GetType().GetSize()
		result = calloc(varSize,1)
		globalVariables[vr] = result

		classVar := BoxClass^
		VirtualTables.Value.Get(vr, (x) ==> { classVar = x})

		if classVar != null
		{
			vTable := classVar.VTableType
			fldsCount := vTable.GetFieldsCount()

			for i : fldsCount
			{
				val := ref classVar.VTable[i]

				pth := vTable.GetFieldByIndexRaw(i)
				memPtr := result->{u8^}[pth.MemOffset]&

				if val is VTableFunc
				{
					asFnc := val->{VTableFunc^}
					memPtr->{void^^}^ = asFnc.Value
				}
			}
		}
	}
	GetGlobalVarFromMem := !(void^ val) -> GlobalVar2^
	{
		for it, ind : globalVariables
		{
			if it == val
				return ind
		}
		return null
	}

	GetMCFunc := !(BoxFuncBody^ itm) -> MCFunction^
	{
		return funcs[itm]?

		itm.ParseBody()
		itm.WaitReadyState()

		buildCtx := MCBuildContext
		buildCtx.Init()
		itm.CreateMCFunction(buildCtx&)
		result = buildCtx.CreateMCFunction()

		funcs[itm] = result
	}

	DeclareToPtr := !(BoxFuncDeclare^ dclr) -> void^
	{
		return declarePtrs[dclr]?

		for space : CodeSpaces
		{
			for module : space.Modules
			{
				if module is not CLib
					continue

				cLib := module->{CLib^}
				if not cLib.IsMyFunc(dclr)
					continue

				if not loadedDlls.Contain(cLib)
				{
					useLib := Library^
					for it : cLib.dlls
					{
						useLib = GetLibrary(it)
						if useLib != null
							break
					}
					if useLib == null
					{
						printf("could not load library for function %s\n",dclr.GetName())
						exit(0)
					}
					loadedDlls[cLib] = useLib
				}
				fnc := loadedDlls[cLib].Get(dclr.GetName())
				if fnc == null
				{
					printf("could not load function %s\n",dclr.GetName())
					exit(0)
				}
				declarePtrs[dclr] = fnc
				return fnc
			}
		}
		assert(false)
		printf("could not load function declare, HOW?\n")
		exit(0)
	}
}

