InitRunContext := !() -> void
{
	initedRun := static false
	HV = new HVContextImplementation
}

HVContextImplementation := class extend HV_Context
{
	GetType := virtual !(StringView typeName) -> void^ 
	{
		spn := typeName.AsStringSpan()
		indnt := TokenIndent(spn)
		asType := ParseType(indnt&)
		if asType == null
			return null
		return GetConstType(asType)
	}
	GetTypePointer := virtual !(void^ baseType) -> void^ 
	{
		typ := baseType->{ConstType^}.Value
		return GetConstType(typ.GetPoint())
	}
	GetFuncType := virtual !(void^[] types,bool[] isReference, void^ resultType,bool resultReference,bool isVariadicArguments) -> void^ 
	{
		typesThis := HybridQueue.{Type^,16}
		typesThis.Push(types[^]->{ConstType^}.Value)
		rType := resultType->{ConstType^}.Value
		fType := GetFuncType(typesThis,isReference,rType,resultReference,isVariadicArguments)
		return GetConstType(fType)
	}
	CreateClass := virtual !() -> HV_Class^ 
	{
		newClassBase := new HVClassImpl
		newClass := new hvr_Class()

		AllClasses.Push(newClass)

		newClassBase.baseClass = newClass
		return newClassBase
	}
	CreateFunction := virtual !(Str funcText) -> void^
	{
		tokens := GetObjectsFromMemory(GetAnyFile(),funcText.Str(),funcText.Size())

		resultTokens := new Token

		resultTokens.Down = tokens
		itr := tokens
		while itr != null
		{
			itr.Up = resultTokens
			itr = itr.Right
		}

		SyntaxCompress(resultTokens,LexHVFileRoot)
		c := PFunctionParser(resultTokens.Down)
		if not c.IsFound()
			return null

		return c.CreateObject()
	}



	Create_int32 := virtual !(int value) -> void^ 
	{
		return GetExeInt(value)
	}

	EmitError := virtual !(Str errorMessage) -> void
	{
		CurrentWork?.SetErrorMessage(errorMessage)
	}

}
HV_FunctionTemplateImp := class extend HV_FunctionTemplate
{
	GetFunction := virtual !() -> HV_Function^ {}
}
