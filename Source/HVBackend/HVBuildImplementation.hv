InitRunContext := !() -> void
{
	initedRun := static false
	HV = new HVContextImplementation
}

HVContextImplementation := class extend HV_Context
{
	GetType := virtual !(StringView typeName) -> HV_Object^ 
	{
		spn := typeName.AsStringSpan()
		indnt := TokenIndent(spn)
		asType := ParseType(indnt&)
		if asType == null
			return null
		return GetConstType(asType)
	}
	GetTypePointer := virtual !(HV_Object^ baseType) -> HV_Object^
	{
		typ := baseType->{ConstType^}.Value
		return GetConstType(typ.GetPoint())
	}
	GetTypeBase := virtual !(HV_Object^ baseType) -> HV_Object^
	{
		typ := baseType->{ConstType^}.Value
		if typ.Base == null
			return null
		return GetConstType(typ.Base)
	}
	GetFuncType := virtual !(HV_Object^[] types,bool[] isReference, HV_Object^ resultType,bool resultReference,bool isVariadicArguments) -> HV_Object^ 
	{
		typesThis := HybridQueue.{Type^,16}
		typesThis.Push(types[^]->{ConstType^}.Value)
		rType := resultType->{ConstType^}.Value
		fType := GetFuncType(typesThis,isReference,rType,resultReference,isVariadicArguments)
		return GetConstType(fType)
	}
	CreateClass := virtual !() -> HV_Class^ 
	{
		newClassBase := new HVClassImpl
		newClass := new hvr_Class()

		AllClasses.Push(newClass)

		newClassBase.baseClass = newClass
		return newClassBase
	}
	CreateFunction := virtual !(Str funcText) -> HV_Object^
	{
		return StrToFunctionTemplate(funcText)
	}

	Create_int32 := virtual !(int value) -> HV_Object^
	{
		return GetExeInt(value)
	}

	EmitError := virtual !(Str errorMessage) -> void
	{
		CurrentWork?.SetErrorMessage(errorMessage)
	}

}
HV_FunctionTemplateImp := class extend HV_FunctionTemplate
{
	GetFunction := virtual !() -> HV_Function^ {}
}
