//MC = Machine Code

MCObject := class
{
	UnitName := poison virtual #ThisClass()->TypeName

	IsConstant := virtual false
	Value := u64
	Value2 := u64

	"this" := !() -> void {

	}

	"=" := !(MCObject setValue) -> void
	{
		this->VTable = setValue->VTable
		Value = setValue.Value
		Value2 = setValue.Value2
	}
	PrintObject := virtual !() -> void { printf("unknown object") }
	GetType := virtual !() -> Type^ { return GTypeVoid}

	GetObjectTypeName := virtual !() -> HVB_VariableObjectType { return "Error" }
}


MCVariable := class extend MCObject
{
	PrintObject := virtual !() -> void { printf("Variable with type %s", GetType().GetBADStr().Str()) }
	GetValueType := !() -> ref Type^ { return Value&->{Type^^}^}
	GetType := virtual !() -> Type^ { return GetValueType()}
}
MCConstValue := class extends MCVariable //same as variable, but assigned only once
{
	IsConstant := virtual true

	PrintObject := virtual !() -> void { printf("Const value with type %s", GetType().GetBADStr().Str()) }
}
MCGlobalVariable := class extend MCObject
{
	PrintObject := virtual !() -> void { printf("Global variable with type %s", GetType().GetBADStr().Str()) }
	GetValueObject := !() -> ref GlobalVar2^ { return Value&->{GlobalVar2^^}^ }
	GetType := virtual !() -> Type^ { return GetValueObject().GetType() }
}
MCReference := class extend MCObject
{
	PrintObject := virtual !() -> void { printf("Variable reference with type %s", GetType().GetBADStr().Str()) }
	GetValueType := !() -> ref Type^ { return Value&->{Type^^}^}
	GetType := virtual !() -> Type^ { return GetValueType()}
}
MCConstVoid := class extend MCObject
{
	IsConstant := virtual true
	
	PrintObject := virtual !() -> void { printf("void object") }
	GetType := virtual !() -> Type^ { return GTypeVoid}
}
MCConstInteger := class extend MCObject
{

	IsConstant := virtual true
	GetValue := !() -> ref int { return Value&->{int^}^}

	PrintObject := virtual !() -> void { printf("Integer32 %i",GetValue()) }
	GetType := virtual !() -> Type^ { return GTypeInt }
}
MCConstBool := class extend MCObject
{

	IsConstant := virtual true
	GetValue := !() -> ref bool { return Value&->{bool^}^}

	PrintObject := virtual !() -> void { printf("Bool %i",GetValue()) }
	GetType := virtual !() -> Type^ { return GTypeBool }
}
MCConstS64 := class extend MCObject
{

	IsConstant := virtual true
	GetValue := !() -> ref s64 { return Value&->{s64^}^}

	PrintObject := virtual !() -> void { printf("Integer64 %li",GetValue()) }
	GetType := virtual !() -> Type^ { return GTypeS64 }
}
MCConstDouble := class extend MCObject
{

	IsConstant := virtual true
	GetValue := !() -> ref double { return Value&->{double^}^}

	PrintObject := virtual !() -> void { printf("Double %f",GetValue()) }
	GetType := virtual !() -> Type^ { return GTypeDouble }
}
MCConstFunction := class extend MCObject
{
	IsConstant := virtual true

	GetValue := !() -> ref BoxFunc^ { return Value&->{BoxFunc^^}^}

	PrintObject := virtual !() -> void { printf("Function %s",GetValue().GetName()) }
	GetType := virtual !() -> Type^ { return GetValue().GetType() }
}
MCConstString :=  class extend MCObject
{
	IsConstant := virtual true

	GetValue := !() -> ref String^ { return Value&->{String^^}^}

	PrintObject := virtual !() -> void { printf("String \"%s\"",GetValue().Str()) }
	GetType := virtual !() -> Type^ { return GTypeChar.GetPoint() }
}
MCConstPointer := class extend MCObject
{
	IsConstant := virtual true

	GetValue := !() -> ref void^ { return Value&->{void^^}^}

	PrintObject := virtual !() -> void { printf("Pointer \"%p\"",GetValue()) }
	GetType := virtual !() -> Type^ { return GTypeVoidP }
}
MCConstBlob := class extend MCObject
{
	IsConstant := virtual true

	GetValue := !() -> ref void^ { return Value&->{void^^}^}
	GetSize := !() -> ref u64 { return Value2&->{u64^}^}

	PrintObject := virtual !() -> void { printf("Blob \"%p\" %i",GetValue(),GetSize()) }
	GetType := virtual !() -> Type^ { return GTypeVoidP }
}
MCConstPointerTyped := class extend MCObject
{
	IsConstant := virtual true

	GetValue := !() -> ref void^ { return Value&->{void^^}^}

	PrintObject := virtual !() -> void { printf("Pointer \"%p\"",GetValue()) }
	GetType := virtual !() -> Type^ { return Value2&->{Type^^}^ }

	SetType := virtual !(Type^ newType) -> Type^ { Value2&->{Type^^}^ = newType }
}

MCLabel := class extend MCObject
{
	PrintObject := virtual !() -> void { printf("Label") }
}

MCFunction := class
{
	BaseFunction := BoxFuncBody^

	ResultIndex := int
	InputsIndxStart := int
	InputsIndxCount := int

	Objects := MCObject[]
	Lines := MCLine[]

	//optimization info
	StackFrameSize := int
	StackOffsets := int[] // Also contains lable positions

	CreateBaseFunc := !() -> MCFunction^
	{
		result = new MCFunction
		result.BaseFunction = BaseFunction

		result.ResultIndex = ResultIndex
		result.InputsIndxStart = InputsIndxStart
		result.InputsIndxCount = InputsIndxCount
	}
	
	Print := !() -> void
	{
		printf("-------- Objects\n")
		for it,i : Objects
		{
			printf("%10i: ",i)
			it.PrintObject()
			printf("\n")
		}
		printf("-------- Assembly\n")

		for it, i : Lines
		{
			printf("%7i %20s: %6i %6i %6i %6i %6i\n",i,it.opcode.ToCStr(),it.var1,it.var2,it.var3,it.var4,it.var5)
		}
	}

	ComputeStackFrame := !() -> void
	{
		StackFrameSize = 0
		//useStackSize := 0
		//for it,i : Objects
		//{
		//	typ := Type^
		//	if it& is MCVariable
		//		typ = it&->{MCVariable^}.GetType()
		//	if it& is MCReference
		//		typ = GTypeVoidP
		//	if typ != null
		//	{
		//		al := typ.GetAlign()
		//		if al != 0
		//		{
		//			useStackSize = ((useStackSize + al - 1) div al) * al
		//		}
		//		useStackSize += typ.GetSize()
		//	}
		//}
		//useStackSize = (useStackSize + 15) and_b 0xFFFFF0
		//StackFrameSize = useStackSize

		objOffsets := List.{int}
		offset := int
		for it,i : Objects
		{
			typ := Type^
			if it& is MCVariable or it& is MCConstValue
				typ = it&->{MCVariable^}.GetType()
			if it& is MCReference
				typ = GTypeVoidP

			if typ != null
			{
				al := typ.GetAlign()
				if al != 0
				{
					offset = ((offset + al - 1) div al) * al
				}

				objOffsets.Push(offset)

				offset += typ.GetSize()
			}else{
				objOffsets.Push(0)
			}
		}
		StackFrameSize = (offset + 15) and_b 0xFFFFF0
		StackOffsets = objOffsets.ToVector()

		if Objects.Size() != 0
		{
			for it,i : Lines
			{
				if it.opcode == "label"
				{
					StackOffsets[it.var1] = i
				}
			}
		}

	}
}

