//MC = Machine Code

MCObject := class
{
	IsConstant := virtual false
	Value := u64

	"=" := !(MCObject setValue) -> void
	{
		this->VTable = setValue->VTable
		Value = setValue.Value
	}
	PrintObject := virtual !() -> void { printf("unknown object") }
	GetType := virtual !() -> Type^ { return GTypeVoid}
}


MCVariable := class extend MCObject
{

	PrintObject := virtual !() -> void { printf("Variable with type %s", GetType().GetBADStr().Str()) }
	GetValueType := !() -> ref Type^ { return Value&->{Type^^}^}
	GetType := virtual !() -> Type^ { return GetValueType()}
}
MCConstVoid := class extend MCObject
{
	IsConstant := virtual true
	
	PrintObject := virtual !() -> void { printf("void object") }
	GetType := virtual !() -> Type^ { return GTypeVoid}
}
MCConstInteger := class extend MCObject
{

	IsConstant := virtual true
	GetValue := !() -> ref int { return Value&->{int^}^}

	PrintObject := virtual !() -> void { printf("Integer %i",GetValue()) }
	GetType := virtual !() -> Type^ { return GTypeInt }
}
MCConstS64 := class extend MCObject
{

	IsConstant := virtual true
	GetValue := !() -> ref s64 { return Value&->{s64^}^}

	PrintObject := virtual !() -> void { printf("Integer %li",GetValue()) }
	GetType := virtual !() -> Type^ { return GTypeS64 }
}
MCConstDouble := class extend MCObject
{

	GetValue := !() -> ref double { return Value&->{double^}^}

	PrintObject := virtual !() -> void { printf("Double %f",GetValue()) }
	GetType := virtual !() -> Type^ { return GTypeDouble }
}
MCConstFunction := class extend MCObject
{
	IsConstant := virtual true

	GetValue := !() -> ref BoxFunc^ { return Value&->{BoxFunc^^}^}

	PrintObject := virtual !() -> void { printf("Function %s",GetValue().GetName()) }
}
MCConstString :=  class extend MCObject
{
	IsConstant := virtual true

	GetValue := !() -> ref String^ { return Value&->{String^^}^}

	PrintObject := virtual !() -> void { printf("String \"%s\"",GetValue().Str()) }
	GetType := virtual !() -> Type^ { return GTypeChar.GetPoint() }
}

MCLabel := class
{
	CodePosition := s32 // i just need class to exist
}

MCFunction := class //extend TGCObject
{
	BaseFunction := BoxFuncBody^

	Objects := MCObject[]
	Labels := MCLabel[]
	Lines := MCLine[]

	Print := !() -> void
	{
		printf("-------- Objects\n")
		for it,i : Objects
		{
			printf("%10i: ",i)
			it.PrintObject()
			printf("\n")
		}
		printf("-------- Assembly\n")
		for it, i : Lines
		{
			printf("%16s: %6i %6i %6i %6i %6i\n",it.opcode.ToCStr(),it.var1,it.var2,it.var3,it.var4,it.var5)
		}
	}
}

MCLine := class
{
	opcode := MCBaseOpcodes
	var1 := u16
	var2 := u16
	var3 := u16
	var4 := u16
	var5 := u16

	"=" := default

	this := !(MCBaseOpcodes code,u16 v1 = 0, u16 v2 = 0, u16 v3 = 0, u16 v4 = 0, u16 v5 = 0) -> void
	{
		opcode = code
		var1 = v1
		var2 = v2
		var3 = v3
		var4 = v4
		var5 = v5
	}
}
