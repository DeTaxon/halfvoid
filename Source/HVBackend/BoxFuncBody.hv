AppendClass BoxFuncBody
{
	CreateMCFunction := virtual !(MCBuildContext^ ctx) -> void
	{
		resType := GetType()->{TypeFunc^}.ResultType
		if resType != GTypeVoid
		{
			assert(ResultVar != null)
			varId := ctx.AddLocalVar(ResultVar)
			assert(varId == 1)
			ctx.InputsIndxStart = 2
		}else{
			ctx.InputsIndxStart = 1
		}
		ctx.InputsIndxCount = Params.Size()
		for it,i : Params
		{
			ctx.AddLocalVar(it)
		}
		for it,i : LocalVars
		{
			ctx.AddLocalVar(it)
		}
		for it,i : LocalVarsDeferChecks
		{
			ctx.AddLocalVar(it)
		}

		ResultVar?.WriteMC(ctx)
		Params[^].WriteMC(ctx)
		body.WriteMC(ctx)

		ExitLabel.WriteGoMC(ctx)
		ctx.WriteExitPathsMC()
		ExitLabel.WriteMC(ctx)
	}
}

AppendClass FuncLocalDebugInfoValue
{
	WriteMC := virtual !(MCBuildContext^ ctx) -> WriteMCResult
	{
	}
}
AppendClass FuncLocalCallIfTrue
{
	WriteDeferMC := virtual !(MCBuildContext^ ctx) -> WriteMCResult
	{
		//trueLabel := ctx.GetLabel(TrueBranch&) 
		//falseLabel := ctx.GetLabel(FalseBranch&)
	
		assert(ctx.objects->VTable != null)

		trueLabel := ctx.CreateLabel() 
		falseLabel := ctx.CreateLabel()

		varVal := GetVar.WriteMC(ctx).CreatedId

		HVB_ins_jump_if_bool(ctx,trueLabel,varVal)
		HVB_ins_jump(ctx,falseLabel)

		HVB_ins_label(ctx,trueLabel)

		DownCall.WriteMC(ctx)
		DownCall2?.WriteMC(ctx)
		storeFalse.WriteMC(ctx)
		HVB_ins_jump(ctx,falseLabel)

		HVB_ins_label(ctx,falseLabel)
	}
}
