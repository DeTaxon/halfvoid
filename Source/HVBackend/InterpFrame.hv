
MCInterpFuncFrame := class extend TGCObject
{
	func := MCFunction^

	localVarBlob := Blob^
	localVarTable := AVLMap.{int,void^}


	GetObjectPtr := !(int index) -> void^
	{
		obj := ref func.Objects[index]
		if obj& is MCReference
		{
			assert(localVarTable.Contain(index))
			assert(localVarTable[index] != null)
			return localVarTable[index]->{void^^}^
		}
		return localVarTable[index]?

		if obj& is MCConstString
		{
			return obj&->{MCConstString^}.GetValue().charPtr&
		}
		if obj&.IsConstant
		{
			return obj.Value&
		}
		
		assert(false)
	}
	GetReferencePtr := !(int index) -> void^
	{
		obj := ref func.Objects[index]
		if obj& is MCReference
		{
			return localVarTable[index]
		}
		assert(false)
	}

	GetStringPtr := !(u16 index) -> char^
	{
		obj := ref func.Objects[index]

		if obj& is MCConstString
		{
			return obj&->{MCConstString^}.GetValue()
		}else if obj& is MCVariable
		{
			return localVarTable[index]->{char^^}^
		}else{
			assert(false)
		}
	}
	GetInt := !(u16 index) -> int
	{
		obj := ref func.Objects[index]

		if obj& is MCConstInteger
		{
			return obj&->{MCConstInteger^}.GetValue()
		}else{
			return GetObjectPtr(index)->{int^}^
		}
	}
	GetS64 := !(u16 index) -> s64
	{
		obj := ref func.Objects[index]

		if obj& is MCConstS64
		{
			return obj&->{MCConstS64^}.GetValue()
		}else{
			return GetObjectPtr(index)->{s64^}^
		}
	}
	GetDouble := !(u16 index) -> double
	{
		obj := ref func.Objects[index]

		if obj& is MCConstDouble
		{
			return obj&->{MCConstDouble^}.GetValue()
		}else{
			return GetObjectPtr(index)->{double^}^
		}
	}

	CallFuncPtr := !(TypeFunc^ fType,void^ fPointer,void^ resultValue,int[] indexes,int resultIndex) -> void
	{
		fType = NormalizeFuncType(fType)
		varsCount := fType.Params.Size()
		assert(varsCount <= 40) //TODO Unconst

		values := void^[40]
		valuesPtr := void^[40]
		valuesTypes := void^[40]

		resultType := ffi_type_pointer->{void^}

		for it,i : indexes
		{
			itType := func.Objects[it]&.GetType()
			if itType == GTypeChar.GetPoint()
			{
				values[i] = GetStringPtr(it)
				valuesPtr[i] = values[i]&
				valuesTypes[i] = ffi_type_pointer
			}else if itType is in  TypePoint
			{
				values[i] = GetObjectPtr(it)->{void^^}^
				valuesPtr[i] = values[i]&
				valuesTypes[i] = ffi_type_pointer
			}else if itType == GTypeDouble{
				values[i]&->{double^}^ = GetDouble(it)
				valuesPtr[i] = values[i]&
				valuesTypes[i] = ffi_type_double
			}else if itType == GTypeInt{
				values[i]&->{int^}^ = GetInt(it)
				valuesPtr[i] = values[i]&
				valuesTypes[i] = ffi_type_sint32
			}else if itType == GTypeU64{
				values[i]&->{s64^}^ = GetS64(it)
				valuesPtr[i] = values[i]&
				valuesTypes[i] = ffi_type_uint64
			}else if itType == GTypeS64{
				values[i]&->{s64^}^ = GetS64(it)
				valuesPtr[i] = values[i]&
				valuesTypes[i] = ffi_type_sint64
			}else if itType == GTypeBool{
				valuesPtr[i] = GetObjectPtr(it)
				valuesTypes[i] = ffi_type_sint8
			}else if itType == GTypeU8{
				valuesPtr[i] = GetObjectPtr(it)
				valuesTypes[i] = ffi_type_uint8
			}else{
				printf("unknown type %s\n",itType.GetBADStr().Str())
				assert(false)
			}
		}
		someCif := u8[256] //TODO get type size

		if fType.IsVargs
		{
			ffi_prep_cif_var(someCif[0]&,2, varsCount,indexes.Size(),resultType,valuesTypes[0]&)
		}else{
			ffi_prep_cif(someCif[0]&,2, varsCount,resultType,valuesTypes[0]&)
		}
		ffi_call(someCif[0]&,fPointer,resultValue,valuesPtr[0]&)
	}
}
