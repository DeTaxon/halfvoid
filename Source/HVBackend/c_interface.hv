
HVB_ins_noop := !(MCBuildContext^ ctx) -> void
{
	ctx.lines.Push(MCLine("noop"))
}

HVB_ins_const_int32 := !(MCBuildContext^ ctx, s32 value) -> int
{
	return ctx.AddInteger(value)
}
HVB_ins_clean := !(MCBuildContext^ ctx, s32 value) -> void
{
	ctx.lines.Push(MCLine("clean",value))
}

HVB_ins_label := !(MCBuildContext^ ctx,s32 labelId) -> void
{
	ctx.lines.Push(MCLine("label",labelId))
}
HVB_ins_jump_if_bool := !(MCBuildContext^ ctx,s32 labelId, s32 cmpTest) -> void
{
	ctx.lines.Push(MCLine("jmp_if_bool",labelId,cmpTest))
}
HVB_ins_jump := !(MCBuildContext^ ctx,s32 labelId) -> void
{
	ctx.lines.Push(MCLine("jmp",labelId))
}

HVB_ins_cmp_new := !(MCBuildContext^ ctx , s32 obj1, char^ cmpOper, s32 obj2) -> int
{
	cmpRes := ctx.CreateVar(GTypeBool) 
	HVB_ins_cmp(ctx,cmpRes,obj1,cmpOper,obj2)
	return cmpRes
}

HVB_ins_cmp := !(MCBuildContext^ ctx , s32 res , s32 obj1, char^ cmpOper, s32 obj2) -> bool
{
	cond := MCJumpIfConditions //TODO string to enum convertion
	switch cmpOper
	{
	case "<" cond = "<"
	case "<=" cond = "<="
	case ">" cond = ">"
	case ">=" cond = ">="
	case "==" cond = "=="
	case "!=" cond = "!="
	case void 
		return false
	}
	ctx.lines.Push(MCLine("cmp", res,cond,obj1,obj2))
	return true
}

HVB_ins_move := !(MCBuildContext^ ctx, s32 resultId, s32 source) -> void
{
	ctx.lines.Push(MCLine("mov",resultId,source))
}
HVB_ins_cast := !(MCBuildContext^ ctx, s32 resultId, s32 source) -> void
{
	ctx.lines.Push(MCLine("cast",resultId,source))
}

HVB_ins_load_element := !(MCBuildContext^ ctx,s32 resultId, s32 objectId, s32 objectIndex) -> void
{
	ctx.lines.Push(MCLine("load_element",resultId,objectId,objectIndex))
}
HVB_ins_set_reference := !(MCBuildContext^ ctx,s32 resultId, s32 objectId) -> void
{
	ctx.lines.Push(MCLine("set_reference",resultId,objectId))
}
HVB_ins_get_pointer := !(MCBuildContext^ ctx,s32 resultId, s32 objectId) -> void
{
	ctx.lines.Push(MCLine("get_pointer",resultId,objectId))
}

HVB_ins_and := !(MCBuildContext^ ctx, s32 resId, s32 opr1, s32 opr2) -> void
{
	ctx.lines.Push(MCLine("and",resId,opr1,opr2))
}
HVB_ins_or := !(MCBuildContext^ ctx, s32 resId, s32 opr1, s32 opr2) -> void
{
	ctx.lines.Push(MCLine("or",resId,opr1,opr2))
}
HVB_ins_xor := !(MCBuildContext^ ctx, s32 resId, s32 opr1, s32 opr2) -> void
{
	ctx.lines.Push(MCLine("xor",resId,opr1,opr2))
}
HVB_ins_sshr := !(MCBuildContext^ ctx, s32 resId, s32 opr1, s32 opr2) -> void
{
	ctx.lines.Push(MCLine("sshr",resId,opr1,opr2))
}
HVB_ins_ushr := !(MCBuildContext^ ctx, s32 resId, s32 opr1, s32 opr2) -> void
{
	ctx.lines.Push(MCLine("ushr",resId,opr1,opr2))
}
HVB_ins_shl := !(MCBuildContext^ ctx, s32 resId, s32 opr1, s32 opr2) -> void
{
	ctx.lines.Push(MCLine("shl",resId,opr1,opr2))
}
HVB_ins_not := !(MCBuildContext^ ctx, s32 resId, s32 opr1) -> void
{
	ctx.lines.Push(MCLine("not",resId,opr1))
}
HVB_ins_add := !(MCBuildContext^ ctx, s32 resId, s32 opr1, s32 opr2) -> void
{
	ctx.lines.Push(MCLine("add",resId,opr1,opr2))
}
HVB_ins_sub := !(MCBuildContext^ ctx, s32 resId, s32 opr1, s32 opr2) -> void
{
	ctx.lines.Push(MCLine("sub",resId,opr1,opr2))
}
HVB_ins_mul := !(MCBuildContext^ ctx, s32 resId, s32 opr1, s32 opr2) -> void
{
	ctx.lines.Push(MCLine("mul",resId,opr1,opr2))
}
HVB_ins_div := !(MCBuildContext^ ctx, s32 resId, s32 opr1, s32 opr2) -> void
{
	ctx.lines.Push(MCLine("div",resId,opr1,opr2))
}
HVB_ins_mod := !(MCBuildContext^ ctx, s32 resId, s32 opr1, s32 opr2) -> void
{
	ctx.lines.Push(MCLine("mod",resId,opr1,opr2))
}
HVB_ins_max := !(MCBuildContext^ ctx, s32 resId, s32 opr1,s32 opr2) -> void
{
	ctx.lines.Push(MCLine("max",resId,opr1,opr2))
}
HVB_ins_min := !(MCBuildContext^ ctx, s32 resId, s32 opr1,s32 opr2) -> void
{
	ctx.lines.Push(MCLine("min",resId,opr1,opr2))
}
HVB_ins_cos := !(MCBuildContext^ ctx, s32 resId, s32 opr1) -> void
{
	ctx.lines.Push(MCLine("cos",resId,opr1))
}
HVB_ins_sin := !(MCBuildContext^ ctx, s32 resId, s32 opr1) -> void
{
	ctx.lines.Push(MCLine("sin",resId,opr1))
}

HVB_ins_memset := !(MCBuildContext^ ctx, s32 opr1, s32 opr2 , s32 opr3) -> void
{
	ctx.lines.Push(MCLine("memset",opr1,opr2,opr3))
}
