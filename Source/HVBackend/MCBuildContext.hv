MCBuildContext := class extend TGCObject
{
	codes := List.{MCLine}
	objects := List.{MCObject}
	lines := List.{MCLine}

	VarsToObject := AVLMap.{LocalVar^,int}

	InputsIndxStart := int
	InputsIndxCount := int

	Init := !() -> void
	{
		newObj := MCConstVoid
		objects.Push(newObj)
	}

	CreateLabel := !() -> int
	{
		result = objects.Size()
		setVal := MCLabel
		objects.Push(setVal)
	}

	CreateVar := !(Type^ varType) -> int
	{
		result = objects.Size()
		setVal := MCVariable
		setVal.GetValueType() = varType
		objects.Push(setVal)
	}
	AddLocalVar := !(LocalVar^ vr) -> int
	{
		result = objects.Size()
		VarsToObject[vr] = result
		if vr.isReference
		{
			setVal := MCReference
			setVal.GetValueType() = vr.GetBaseType()
			objects.Push(setVal)
		}else{
			setVal := MCVariable
			setVal.GetValueType() = vr.GetBaseType()
			objects.Push(setVal)
		}
	}
	GetLocalVar := !(LocalVar^ vr) -> int
	{
		assert(VarsToObject.Contain(vr))
		return VarsToObject[vr]
	}
	CreateReference := !(Type^ varType) -> int
	{
		result = objects.Size()
		setVal := MCReference
		setVal.GetValueType() = varType
		objects.Push(setVal)
	}

	AddFuncConst := !(BoxFunc^ obj) -> int
	{
		for it, i : objects 
		{
			if it& is not MCConstFunction
				continue
			asFunc := it&->{MCConstFunction^}
			if obj == asFunc.GetValue()
				return i
		}

		setVal := MCConstFunction
		setVal.GetValue() = obj
		result = objects.Size()
		objects.Push(setVal)
	}
	AddString := !(String^ value) -> int
	{
		setVal := MCConstString
		setVal.GetValue() = value
		result = objects.Size()
		objects.Push(setVal)
	}
	AddInteger := !(int value) -> int
	{
		for it,i : objects
		{
			if it& is MCConstInteger
			{
				if it&->{MCConstInteger^}.GetValue() == value
					return i
			}
		}
		setVal := MCConstInteger
		setVal.GetValue() = value
		result = objects.Size()
		objects.Push(setVal)
	}
	AddS64 := !(s64 value) -> int
	{
		setVal := MCConstS64
		setVal.GetValue() = value
		result = objects.Size()
		objects.Push(setVal)
	}
	AddDouble := !(double value) -> int
	{
		setVal := MCConstDouble
		setVal.GetValue() = value
		result = objects.Size()
		objects.Push(setVal)
	}
	CreateMCFunction := !() -> MCFunction^
	{
		result = new MCFunction

		result.Objects = objects.ToVector()
		result.Lines = lines.ToVector()
		result.InputsIndxStart = this.InputsIndxStart
		result.InputsIndxCount = this.InputsIndxCount
	}
}
