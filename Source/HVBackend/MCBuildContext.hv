MCBuildContext := class
{
	objects := List.{MCObject}
	lines := List.{MCLine}

	VarsToObject := AVLMap.{LocalVar^,int}
	GlobalVars := AVLMap.{GlobalVar2^,int}

	exitNodes := ContextExitNode
	DeferObjects := HybridStack.{BoxExeObj^,20}

	BaseFunction := void^//BoxFuncBody^

	ResultIndex := int
	InputsIndxStart := int
	InputsIndxCount := int
	IsVArgs := bool

	labels := AVLMap.{BoxLabel^,int}

	this := !(MCFunction^ fnc, bool copyObjects, bool copyLines) -> void
	{
		BaseFunction = fnc.BaseFunction

		ResultIndex = fnc.ResultIndex
		IsVArgs = fnc.IsVArgs
		InputsIndxStart = fnc.InputsIndxStart
		InputsIndxCount = fnc.InputsIndxCount

		if copyObjects {
			objects.Push(fnc.Objects[^])
		}
		if copyLines {
			lines.Push(fnc.Lines[^])
		}
	}

	Init := !() -> void
	{
		newObj := MCConstVoid
		objects.Push(newObj)
	}

	CreateLabel := !() -> int
	{
		result = objects.Size()
		setVal := MCLabel
		objects.Push(setVal)
	}
	GetLabel := !(BoxLabel^ lbl) -> int
	{
		return labels[lbl]?

		result = objects.Size()
		setVal := MCLabel
		objects.Push(setVal)
		labels[lbl] = result
	}

	CreateVar := !(Type^ varType) -> int
	{
		result = objects.Size()
		setVal := MCVariable
		setVal.GetValueType() = varType
		objects.Push(setVal)
	}
	GetGlobalVar := virtual !(GlobalVar2^ vr) -> int
	{
		return GlobalVars[vr]?

		result = objects.Size()
		GlobalVars[vr] = result
		setVal := MCGlobalVariable
		setVal.GetValueObject() = vr
		objects.Push(setVal)
	}
	AddLocalVar := !(LocalVar^ vr) -> int
	{
		return VarsToObject[vr]?

		result = objects.Size()
		VarsToObject[vr] = result
		setVal := MCVariable
		setVal.GetValueType() = vr.GetBaseType()
		objects.Push(setVal)
	}
	GetLocalVar := !(LocalVar^ vr) -> int
	{
		assert(VarsToObject.Contain(vr))
		return VarsToObject[vr]
	}
	CreateReference := !(Type^ varType) -> int
	{
		result = objects.Size()
		setVal := MCReference
		setVal.GetValueType() = varType
		objects.Push(setVal)
	}

	AddFuncConst := !(BoxFunc^ obj) -> int
	{
		for it, i : objects 
		{
			if it& is not MCConstFunction
				continue
			asFunc := it&->{MCConstFunction^}
			if obj == asFunc.GetValue()
				return i
		}

		setVal := MCConstFunction
		setVal.GetValue() = obj
		result = objects.Size()
		objects.Push(setVal)
	}
	AddString := !(String^ value) -> int
	{
		setVal := MCConstString
		setVal.GetValue() = value
		result = objects.Size()
		objects.Push(setVal)
	}
	AddInteger := !(int value) -> int
	{
		for it,i : objects
		{
			if it& is MCConstInteger
			{
				if it&->{MCConstInteger^}.GetValue() == value
					return i
			}
		}
		setVal := MCConstInteger
		setVal.GetValue() = value
		result = objects.Size()
		objects.Push(setVal)
	}
	AddBool := !(bool value) -> int
	{
		for it,i : objects
		{
			if it& is MCConstBool
			{
				if it&->{MCConstBool^}.GetValue() == value
					return i
			}
		}
		setVal := MCConstBool
		setVal.GetValue() = value
		result = objects.Size()
		objects.Push(setVal)
	}
	AddPointer := !(void^ value) -> int
	{
		for it,i : objects
		{
			if it& is MCConstPointer
			{
				if it&->{MCConstPointer^}.GetValue() == value
					return i
			}
		}
		setVal := MCConstPointer
		setVal.GetValue() = value
		result = objects.Size()
		objects.Push(setVal)
	}
	AddBlob := !(void^ value,u64 bSize) -> int
	{
		setVal := MCConstBlob
		setVal.GetSize() = bSize
		setVal.GetValue() = value
		result = objects.Size()
		objects.Push(setVal)
	}
	AddS64 := !(s64 value) -> int
	{
		setVal := MCConstS64
		setVal.GetValue() = value
		result = objects.Size()
		objects.Push(setVal)
	}
	AddInteger := !(s64 value, Type^ intType) -> int
	{
		switch intType.GetSize()
		{
			case 4
				return AddInteger(value)
			case 8
				return AddS64(value)
			case void
				assert(false)
		}
	}
	AddDouble := !(double value) -> int
	{
		setVal := MCConstDouble
		setVal.GetValue() = value
		result = objects.Size()
		objects.Push(setVal)
	}
	CreateMCFunction := !(bool computeStack = true) -> MCFunction^
	{
		result = new MCFunction

		result.Objects = objects.ToVector()
		result.Lines = lines.ToVector()

		result.BaseFunction = BaseFunction
		result.ResultIndex = this.ResultIndex
		result.InputsIndxStart = this.InputsIndxStart
		result.InputsIndxCount = this.InputsIndxCount
		result.IsVArgs = this.IsVArgs

		if computeStack
			result.ComputeStackFrame() //TODO remove it from here, it is called in ebery optiimzation
	}
	WriteExitPathsMC := !() -> void
	{
		exitNodes.WriteExitsMC(this&)
	}
}

AppendClass ContextExitNode
{
	WriteExitsMC := virtual !(MCBuildContext^ ctx) -> WriteMCResult
	{
		switch subNodes.Size()
		{
			case 1
				for it,ind : subNodes
				{
					it.WriteExitsMC(ctx)
					ind.WriteDeferMC(ctx)
				}
				if exitLabel != null
				{
					exitLabel.WriteGoMC(ctx)
					exitLabel.WriteMC(ctx)
				}
			case 0
				//meh
				if exitLabel != null
					exitLabel.WriteMC(ctx)
			case void
				{
					lbl := GetLabel()
					for it,ind : subNodes
					{
						it.WriteExitsMC(ctx)
						ind.WriteDeferMC(ctx)
						lbl.WriteGoMC(ctx)
					}
					lbl.WriteMC(ctx)
				}
		}
	}
}
