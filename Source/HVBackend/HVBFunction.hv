
HVBFunction := class extend HVB_Function
{
	baseFunc := MCFunction^

	this := !(MCFunction^ fnc) -> void
	{
		baseFunc = fnc
	}
	
	GetVariablesCount := virtual !() -> int { return baseFunc.Objects.Size() }
	GetVariablesPointer := virtual !() -> MCObject^ { return baseFunc.Objects.GetPointer() }
	GetVariableType := virtual !(int index) -> HV_Object^ { return baseFunc.Objects[index].GetType() }

	GetCodeLinesCount := virtual !() -> int { return baseFunc.Lines.Size() }
	GetCodeLinesPointer := virtual !() -> MCLine^ { return baseFunc.Lines.GetPointer() }
	GetLine := virtual !(int index) -> ref MCLine { return baseFunc.Lines[index] }

	GetFunctionType := virtual !() -> HVBFunctionType
	{
		result.InputTypes.Resize(baseFunc.InputsIndxCount)
		result.InputTypes[^i] = baseFunc.Objects[baseFunc.InputsIndxStart + i].GetType()

		result.InputIsRefs.Resize(baseFunc.InputsIndxCount)
		result.InputIsRefs[^i] = baseFunc.Objects[baseFunc.InputsIndxStart + i] is MCReference

		result.ReturnType = baseFunc.Objects[baseFunc.ResultIndex].GetType()
		result.ReturnIsRef = baseFunc.Objects[baseFunc.ResultIndex] is MCReference
	}
	Print := virtual !() -> void { baseFunc.Print() }
}
