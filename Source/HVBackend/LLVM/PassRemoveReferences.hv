
PassRemoveReferences := !(MCFunction^ fnc) ->MCFunction^
{
	@once RetConstFuncTableInit()

	fnc = passRemoveReferencesReplaceLoadElement(fnc)
	return passRemoveReferencesRemoveReferences(fnc)
}
passRemoveReferencesReplaceLoadElement := !(MCFunction^ fnc) ->MCFunction^
{
	grd := MakeGreedyPass(fnc,2,2)

	cPtr := grd.cPtr
	c := ref grd.cmdsSize
	oPtr := grd.oPtr

	for line : fnc.Lines
	{
		if line.opcode == "load_element"
		{
			objTp := oPtr[line.var2].GetType()

			if objTp is in TypeClass 
			{
				cnstObj := grd.PushConstVar(objTp.GetPoint())
				cPtr[c++] = MCLine("get_pointer",cnstObj,line.var2)
				cPtr[c++] = MCLine("get_field_ptr",line.var1,cnstObj,line.var3)

			}else if objTp is in TypePoint or objTp == GTypeStr
			{
				cPtr[c++] = MCLine("get_array_elem_ptr",line.var1,line.var2,line.var3)
			}else{
				printf("RemoveRef,unknown type %s\n",objTp.GetBADStr().Str())
				assert(false)
			}
		}else{
			cPtr[c++] = line
		}
	}

	return grd.GenerateFunc()
}
passRemoveReferencesRemoveReferences := !(MCFunction^ fnc) ->MCFunction^
{
	@once RetConstFuncTableInit()
	tbl := ref RetConstFuncTable

	grd := MakeGreedyPass(fnc,2,4)

	cPtr := grd.cPtr
	c := ref grd.cmdsSize
	oPtr := grd.oPtr
	o := ref grd.objsSize

	vars := AVLMap.{int,int}

	getVar := (int id) ==> int
	{
		return vars[id]?

		tp := fnc.Objects[id].GetType()
		tp = tp.GetPoint()

		result = o
		obj := MCVariable
		obj.GetValueType() = NormalizeType(tp)
		oPtr[o++] = obj

		vars[id] = result
	}

	for lin : fnc.Lines
	{
		line := lin

		isRetObj := tbl.Contain(line.opcode) or line.opcode == "mov"

		if line.opcode == "mov" and oPtr[line.var1] is MCReference
		{
			line.opcode = "store"
			line.var1 = getVar(line.var1)
		}


		if line.opcode == "get_pointer" and oPtr[line.var2] is MCReference
		{
			cPtr[c++] = MCLine("cast",line.var1,getVar(line.var2))
		}else{

			inIndx := 0
			if isRetObj
				inIndx = 1

			for i : inIndx..4
			{
				if line.opcode == "cmp" and i == 2
					continue
				v := line.var1&[i]
				if oPtr[v] is MCReference
				{
					v2 := grd.PushConstVar(oPtr[v].GetType())
					v3 := grd.PushConstVar(oPtr[v].GetType())
					cPtr[c++] = MCLine("load",v2,getVar(v))
					line.var1&[i] = v2
				}
			}

			cPtr[c++] = line

		}
		if line.opcode == "get_field_ptr" or line.opcode == "get_array_elem_ptr"
		{
			v2 := grd.PushConstVar(oPtr[line.var1].GetType().GetPoint())
			retPtr := getVar(line.var1)
			cPtr[c-1].var1 = v2
			cPtr[c++] = MCLine("mov",retPtr,v2)
		}else if isRetObj
		{
			v := line.var1
			if v > 0 and v < o and oPtr[v] is MCReference
			{
				v2 := grd.PushConstVar(oPtr[v].GetType())
				retPtr := getVar(v)
				cPtr[c-1].var1 = v2
				cPtr[c++] = MCLine("store",retPtr,v2)
			}
		}
		
	}

	return grd.GenerateFunc()

}
