
PassRemoveReferences := !(MCFunction^ fnc) ->MCFunction^
{
	@once RetConstFuncTableInit()

	fnc2 := passRemoveReferencesReplaceLoadElement(fnc)

	tbl := ref RetConstFuncTable

	newObjs := List.{MCObject}
	newCmds := List.{MCLine}

	newCmds.Push(fnc.Lines[^])
	newObjs.Push(fnc.Objects[^])

	newFunc := fnc.CreateBaseFunc()

	makeConst := (Type^ tp) ==> int
	{
		result = newObjs.Size()
		newObjs.Emplace()
		obj := ref newObjs.Back()
		obj->SetType(MCConstValue)
		obj&->{MCConstValue^}.GetValueType() = NormalizeType(tp)
	}

	vars := AVLMap.{int,int}

	getVar := (int id) ==> int
	{
		return vars[id]?

		tp := fnc.Objects[id].GetType()
		tp = tp.GetPoint()

		result = newObjs.Size()
		newObjs.Emplace()
		obj := ref newObjs.Back()
		obj->SetType(MCVariable)
		obj&->{MCVariable^}.GetValueType() = NormalizeType(tp)

		vars[id] = result
	}


	for it , i : newObjs
	{
		if it is not MCReference
			continue
		
		needCheck := false
		for ln : newCmds
		{
			for j : 5
				needCheck = needCheck or (ln.var1&[j] == i)
			if needCheck
				break
		}
		if not needCheck
			continue

		cnstId := newObjs.Size()
		newObjs.Emplace()

		newVar := ref newObjs.Back()&->{MCVariable^}^
		newVar->SetType(MCVariable)

		newVar.GetValueType() = it.GetType().GetPoint()

		iter := newCmds."for"()
		while iter.HaveValue()
		{
			op := ref iter()

			varUsed := false

			for j : 5
				varUsed = varUsed or (op.var1&[j] == i)

			if not varUsed
			{
				iter.Inc()
				continue
			}

			if (op.opcode == "load_element" 
				or op.opcode == "get_field_ptr" 
				or op.opcode == "llvm_getelementptr" 
				or op.opcode == "llvm_getelementptr0") 
					and op.var1 == i
			{
				tp := it.GetType()
				tp = tp.GetPoint()

				cnst := makeConst(tp)
				vr := getVar(op.var1)

				ln := MCLine("store",vr,cnst)
				newCmds.InsertAfter(iter,ln)

				if op.opcode == "load_element"
					op.opcode = "llvm_getelementptr"
				op.var1 = cnst

				iter.Inc()
				continue
			}else{

				if (op.opcode == "load_element" or op.opcode == "llvm_getelementptr") and op.var2 == i {
					tp := fnc.Objects[op.var2].GetType()
					cnst := makeConst(tp.GetPoint())
					vr := getVar(op.var2)
					newCmds.InsertBefore(iter,MCLine("load",cnst,vr))

					//printf("hm %p\n",fnc.Objects[op.var2].GetType() is in TypeClass,tp is in TypeClass)

					if tp is in TypeClass
					{
						op.opcode = "get_field_ptr"
						op.var2 = cnst
					}else{
						cnst2 := makeConst(tp)
						newCmds.InsertBefore(iter,MCLine("load",cnst2,cnst))
						op.opcode = "llvm_getelementptr"
						op.var2 = cnst2
					}
				}

				if tbl.Contain(op.opcode) and op.var1 == i {
					tp := fnc.Objects[op.var1].GetType()

					cnstVal := makeConst(tp)
					cnstSet := makeConst(tp.GetPoint())
					vr := getVar(op.var1)

					op.var1 = cnstVal

					newCmds.InsertAfter(iter,MCLine("store",cnstSet,cnstVal))
					newCmds.InsertAfter(iter,MCLine("mov",cnstSet,vr))
				}
				if op.opcode == "get_pointer" and op.var2 == i {
					cnst := makeConst(fnc.Objects[op.var2].GetType().GetPoint())
					newCmds.InsertBefore(iter,MCLine("load",cnst,getVar(op.var2)))
					op.opcode = "cast"
					op.var2 = cnst
				}else if op.opcode == "mov" and op.var1 == i {

					ob1 := ref fnc.Objects[op.var1]
					ob2 := ref fnc.Objects[op.var2]

					if IsVarType(ob2)
					{
						tp := ob1.GetType()

						cnstVal := makeConst(tp)
						cnstSet := makeConst(tp.GetPoint())
						vr := getVar(op.var1)

						newCmds.InsertBefore(iter,MCLine("mov",cnstSet,vr))
						op.opcode = "store"
						op.var1 = cnstSet

					}else{
						if not ob2.IsConstant and ob2 is not MCReference{
							printf("LLVM: failed to remove reference from mov at %s %i, %i %i\n",fnc.BaseFunction.GetName(),0,op.var1,op.var2)
							printf("mov type %s %s\n",ob1.UnitName,ob2.UnitName)
							assert(false)
						}
						tp := fnc.Objects[op.var1].GetType()

						cnstVal := makeConst(tp)
						cnstSet := makeConst(tp.GetPoint())
						vr := getVar(op.var1)

						newCmds.InsertBefore(iter,MCLine("mov",cnstSet,vr))
						op.opcode = "store"
						op.var1 = cnstSet
					}

				}else{
					for j : 5
					{
						if op.var1&[j] != i
							continue
						if op.opcode == "cmp" and j == 2 //TODO to table , + jmp_if_op
							continue
						tp := fnc.Objects[op.var1&[j]].GetType()

						cnst2 := makeConst(tp.GetPoint())
						cnst := makeConst(tp)
						vr := getVar(op.var1&[j])
						newCmds.InsertBefore(iter,MCLine("load",cnst2,vr))
						newCmds.InsertBefore(iter,MCLine("load",cnst,cnst2))
						op.var1&[j] = cnst
					}

				}
				iter.Inc()
			}

		}
	}

	newFunc.Objects = newObjs.ToVector()
	newFunc.Lines = newCmds.ToVector()

	return newFunc
}
passRemoveReferencesReplaceLoadElement := !(MCFunction^ fnc) ->MCFunction^
{
	grd := MakeGreedyPass(fnc,2,2)

	cPtr := grd.cPtr
	c := ref grd.cmdsSize
	oPtr := grd.oPtr

	for line : fnc.Lines
	{
		if line.opcode == "load_element"
		{
			objTp := oPtr[line.var2].GetType()

			if objTp is in TypeClass 
			{
				cnstObj := grd.PushConstVar(objTp.GetPoint())
				cPtr[c++] = MCLine("get_pointer",cnstObj,line.var2)
				cPtr[c++] = MCLine("get_field_ptr",line.var1,cnstObj,line.var2)

			}else if objTp is in TypePoint or objTp == GTypeStr
			{
				cPtr[c++] = MCLine("get_array_ptr",line.var1,line.var2,line.var3)
			}else{
				printf("RemoveRef,unknown type %s\n",objTp.GetBADStr().Str())
				assert(false)
			}
		}else{
			cPtr[c++] = line
		}
	}
}
passRemoveReferencesRemoveReferences := !(MCFunction^ fnc) ->MCFunction^
{

}
