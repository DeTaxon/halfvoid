
LLVMPrintTextModule := !(HVModule module, LLVMWriteContext^ ctx) -> void
{
	LLVMWriteBodyFunction(module.Functions[^],ctx)
}


LLVMWriteBodyFunction := !(MCFunction^ fnc,LLVMWriteContext^ ctx) -> void
{
	out := ref ctx.writeStream^

	base := fnc.BaseFunction

	needPrint := base->{BoxFuncBody^}.OutputName == "main_145"
	//needPrint = true
	//needPrint = false

	if needPrint fnc.Print()
	fnc = PassRemoveSpaceship(fnc)
	fnc = PassSimplifyVectors(fnc)
	fnc = PassRemoveVoidParams(fnc)
	fnc = PassRemoveReferences(fnc)
	//fnc = PassNormalizeTypes(fnc)
	fnc = PassForceReturnConstValues(fnc)
	if needPrint fnc.Print()
	if needPrint fnc.Print()
	fnc = PassForceReturnConstValues(fnc)
	if needPrint fnc.Print()
	fnc = PassCreateConstValues(fnc)
	if needPrint fnc.Print()
	fnc = PassAddingCastForPtrMove(fnc)
	if needPrint fnc.Print()

	fType2 := NormalizeFuncType(base.GetType()->{TypeFunc^})
	rTyp := fType2.ResultType

	currentDbgFileId := int
	currentDbgBlockId := int

	currentFile := Str
	currentLine := int

	dbgIsSet := false
	currentDbgId := int

	dbgList := AVLMap.{int,Tuple.{int,int}}
	dbgFiles := AVLMap.{Str,int}
	dbgBlocks := AVLMap.{int,int}


	fncId := GetNewId()

	haveDebugInfo := DebugMode

	if base.bdy?.Line?.File != null {
		ln := base.bdy.Line
		currentDbgFileName := Str 
		currentDbgFileName = "DummyFile"
		currentDbgFileName = ln.File?.file?.GetPath()
		
		currentFile = currentDbgFileName

		currentDbgFileId = GetNewId() 
		dbgFiles[currentDbgFileName] = currentDbgFileId

		blockId := GetNewId()

		dbgBlocks[blockId] = currentDbgFileId
		currentDbgBlockId = blockId

		dbgIsSet = true

		itId := GetNewId()

		dbgList[itId] = !{currentDbgBlockId,ln.Line}

		currentDbgId = itId
	}

	printDebugEnd := () ==> {
		if dbgIsSet and haveDebugInfo
			out << ", !dbg !" << currentDbgId
		out << "\n"
	}

	
	nc := false
	out << "define "
	rTyp.PrintType(ctx)
	if fType2.ResultRef
		out << "*"
	out << " @" << base.OutputName << "("
	for i : fnc.InputsIndxCount
	{
		if i != 0
			out << ","
		inx := fnc.InputsIndxStart + i
		fnc.Objects[inx].GetType().PrintType(ctx)
		out << " %Inp" << i
		nc = true
	}
	if fType2.IsVargs
	{
		if nc
			out << ","
		out << "..."
	}
	out << ")"
	if base.AttrId.IsSet()
		out << " #" << base.AttrId.Get()
	if haveDebugInfo
	{
		out << " !dbg !" << fncId
	}
	out << "\n"
	out << "{\n"

	for var, i : fnc.Objects
	{
		if var is not MCVariable
			continue
		tp := var.GetType()

		out << "	%Var" << i << " = alloca "
		tp.PrintType(ctx)
		out << "\n"
	}
	for i : fnc.InputsIndxCount
	{
		inx := fnc.InputsIndxStart + i

		tp := fnc.Objects[inx].GetType()
		out << "	store "
		tp.PrintType(ctx)
		out << " %Inp" << i << " , "
		tp.PrintType(ctx)
		out << "* %Var" << inx
		printDebugEnd()
	}

	tmpLabelIter := 0

	indx := 0

	makeLoc := () ==> Str {
		ech := TEchoStream
		ech << " at " << currentFile << ":" << currentLine << " bytecode " << indx << " full name " << base.OutputName
		return ech.GetStr()
	}

	while indx < fnc.Lines.Size()
	{
		op := ref fnc.Lines[indx]

		if op.opcode == "call_start"
		{
			indx += 1

			fObj := fnc.Objects[op.var2]


			fncType := TypeFunc^

			fncB := BoxFunc^

			if fObj is MCConstFunction
			{
				fncB = fObj&->{MCConstFunction^}.GetValue()
				fncType = fObj&->{MCConstFunction^}.GetValue().GetType()->{TypeFunc^}
			}else if fObj is MCConstValue{
				fncType = fObj.GetType().Base->{TypeFunc^}

				assert(fncType != null and fncType is TypeFunc)
			}else{
				assert(false)
			}

			callType := NormalizeFuncType(fncType)

			out << "	" 
			if op.var1 != 0
			{
				assert(fnc.Objects[op.var1] is MCConstValue)
				LLVMPrintObjValue(ctx,fnc.Objects[op.var1],op.var1)
				out << " = "
			}
			out << "call "
			if callType.IsVargs
				callType.PrintType(ctx)
			else {
				callType.ResultType.PrintType(ctx)
				if callType.ResultRef
					out << "*"
			}

			out << " "

			if fncB != null {
				fncB.PrintName(ctx)
			}else{
				LLVMPrintObjValue(ctx,fnc.Objects[op.var2],op.var2)
			}

			out << "("

			needComma := false
			while fnc.Lines[indx].opcode != "call_end"
			{
				ln := ref fnc.Lines[indx]
				ob := ref fnc.Objects[ln.var1]
				if needComma
					out << ","
				ob.GetType().PrintType(ctx)
				out << " %Var" << fnc.Lines[indx].var1
				needComma = true
				indx += 1
			}
			out << ")"
			printDebugEnd()
			indx += 1

		}else if op.opcode == "asm_start"
		{
			indx += 1

			asmObj := fnc.Objects[op.var2]

			assert(asmObj is MCConstString)

			resType := GTypeVoid
			if op.var1 != 0 {
				out << "	%Var" << op.var1 " = "
				resType = fnc.Objects[op.var1].GetType()
			}else{
				out << "	"
			}

			out << "call "
			resType.PrintType(ctx)
			out << " asm sideeffect\""

			out << asmObj&->{MCConstString^}.GetValue()
			out << "\" , \""

			needComma := false

			while fnc.Lines[indx].opcode == "clob_str"
			{
				ln := ref fnc.Lines[indx]
				ob := ref fnc.Objects[ln.var1]
				if needComma
					out << ","
				needComma = true
				out << ob&->{MCConstString^}.GetValue()
				indx += 1
			}
			for it : !["~{dirflag}","~{fpsr}","~{flags}"]
			{
				if needComma
					out << ","
				needComma = true
				out << it
			}
			out << "\""
			out << "("

			needComma = false

			while fnc.Lines[indx].opcode == "load_var"
			{
				ln := ref fnc.Lines[indx]
				ob := ref fnc.Objects[ln.var1]
				if needComma
					out << ","
				ob.GetType().PrintType(ctx)
				out << " %Var" << fnc.Lines[indx].var1
				needComma = true
				indx += 1
			}
			out << ")"
			printDebugEnd()
			indx += 1

		}else if op.opcode == "switch_start"
		{
			indx += 1

			obj := fnc.Objects[op.var1]
			tp := obj.GetType()

			tmpLbl := GetNewId()

			out << "	switch "
			tp.PrintType(ctx)
			out << " "
			LLVMPrintObjValue(ctx,obj,op.var1)
			out << " , label %Tmp" << tmpLbl << " ["

			while fnc.Lines[indx].opcode != "switch_end"
			{
				ln := ref fnc.Lines[indx]
				ob := ref fnc.Objects[ln.var1]
				tp.PrintType(ctx)
				out << " "
				LLVMPrintObjValue(ctx,ob,ln.var1)
				out << " , label %Label" << ln.var2 << "\n"

				indx += 1
			}
			out << "]"
			printDebugEnd()
			out << "Tmp" << tmpLbl << ":\n"
			indx += 1

		}else
		{
			switch op.opcode
			{
			case "clean"
				ob1 := ref fnc.Objects[op.var1]
				//assert(ob1 is MCVariable)
				out << "	store "
				ob1.GetType().PrintType(ctx)
				out << " zeroinitializer , "
				ob1.GetType().PrintType(ctx)
				out << "* %Var" << op.var1
				printDebugEnd()
			case "debug_set_file"
				currentDbgFileName := fnc.Objects[op.var1]&->{MCConstString^}.GetValue().Str()

				currentFile = currentDbgFileName

				if not dbgFiles.Contain(currentDbgFileName) {
					dbgFiles[currentDbgFileName] = GetNewId()
				}
				currentDbgFileId = dbgFiles[currentDbgFileName]

				blockId := GetNewId()

				dbgBlocks[blockId] = currentDbgFileId
				currentDbgBlockId = blockId
			case "debug_set_line"
				dbgIsSet = true

				ln := fnc.Objects[op.var1]&->{MCConstInteger^}.GetValue()
				currentLine = ln

				itId := GetNewId()

				dbgList[itId] = !{currentDbgBlockId,ln}

				currentDbgId = itId
				
			case "jmp"
				out << "	br label %Label" << op.var1 << "\n"
			case "jmp_if_bool"
				t := tmpLabelIter
				tmpLabelIter += 1
				out << "	br i1 "
				LLVMPrintObjValue(ctx,fnc.Objects[op.var2],op.var2)
				out << ",label %Label" << op.var1 << " , label %TmpLabel" << t << "\n"
				out << "TmpLabel" << t << ":\n"
			case "label"
				out << "	br label %Label" << op.var1 << "\n"
				out << "Label" << op.var1 << ":\n"
			case "cast"

				ob1 := ref fnc.Objects[op.var1]
				ob2 := ref fnc.Objects[op.var2]
				resType := ob1.GetType()
				inpType := ob2.GetType()
				if IsIntLikeType(resType) and IsIntLikeType(inpType)
				{
					out <<	"	%Var" << op.var1 << " = "
					
					if resType.GetSize() == inpType.GetSize() {
						out << "bitcast "
					}else{
						if resType.GetSize() > inpType.GetSize() {
							if IsUInt(inpType) {
								out << "zext"
							}else{
								out << "sext"
							}
						}else{
							out << "trunc"
						}
						out << " "
					}
					ob2.GetType().PrintType(ctx)
					out << " "
					LLVMPrintObjValue(ctx,ob2,op.var2)
					out << " to "
					ob1.GetType().PrintType(ctx)
					printDebugEnd()
				}else if IsFloat(resType) and IsFloat(inpType) {
					out << "	%Var" << op.var1 << " = "
					if inpType.GetSize() > resType.GetSize()
					{
						out << "fptrunc"
					}else{
						out << "fpext"
					}
					out << " "
					ob2.GetType().PrintType(ctx)
					out << " "
					LLVMPrintObjValue(ctx,ob2,op.var2)
					out << " to "
					ob1.GetType().PrintType(ctx)
					printDebugEnd()
				}else if IsFloat(resType) and IsInt(inpType) {
					out << "	%Var" << op.var1 << " = "
					if IsUInt(inpType)
					{
						out << "uitofp"
					}else{
						out << "sitofp"
					}
					out << " "
					ob2.GetType().PrintType(ctx)
					out << " "
					LLVMPrintObjValue(ctx,ob2,op.var2)
					out << " to "
					ob1.GetType().PrintType(ctx)
					printDebugEnd()
				}else if IsInt(resType) and IsFloat(inpType) {
					out << "	%Var" << op.var1 << " = "
					if IsUInt(resType)
					{
						out << "fptoui"
					}else{
						out << "fptosi"
					}
					out << " "
					ob2.GetType().PrintType(ctx)
					out << " "
					LLVMPrintObjValue(ctx,ob2,op.var2)
					out << " to "
					ob1.GetType().PrintType(ctx)
					printDebugEnd()
				}else if IsPointLikeType(resType) and IsPointLikeType(inpType) {
					out << "	%Var" << op.var1 << " = bitcast "
					ob2.GetType().PrintType(ctx)
					out << " "
					LLVMPrintObjValue(ctx,ob2,op.var2)
					out << " to "
					ob1.GetType().PrintType(ctx)
					printDebugEnd()
				}else if IsPointLikeType(resType) and inpType == GTypeSizeT {
					out << "	%Var" << op.var1 << " = inttoptr "
					ob2.GetType().PrintType(ctx)
					out << " "
					LLVMPrintObjValue(ctx,ob2,op.var2)
					out << " to "
					ob1.GetType().PrintType(ctx)
					printDebugEnd()
				}else if resType == GTypeSizeT and IsPointLikeType(inpType) {
					out << "	%Var" << op.var1 << " = ptrtoint "
					ob2.GetType().PrintType(ctx)
					out << " "
					LLVMPrintObjValue(ctx,ob2,op.var2)
					out << " to "
					ob1.GetType().PrintType(ctx)
					printDebugEnd()
				}else {
					//printf("LLVM: unknown cast at %s\n",makeLoc())
					//printf("types are %s and %s\n",ob1.GetType().GetBADStr().Str(),ob2.GetType().GetBADStr().Str())
					assert(false)
				}
			case "load_element"
				v1 := op.var2
				v2 := op.var3
				res := ref fnc.Objects[op.var1]
				ob1 := ref fnc.Objects[v1]
				ob2 := ref fnc.Objects[v2]

				assert(res is MCConstValue)

				if ob1 is MCVariable or ob1 is MCConstValue
				{
					out << "	%Var" << op.var1 << " = getelementptr "
					ob1.GetType().PrintType(ctx)
					out << " , "
					ob1.GetType().GetPoint().PrintType(ctx)
					out << " "
					LLVMPrintObjValue(ctx,ob1,v1)
					out << " , "
					ob2.GetType().PrintType(ctx)
					out << " "
					LLVMPrintObjValue(ctx,ob2,v2)
					printDebugEnd()

				}else {
					printf("LLVM: unknown load_element at %i\n",indx)
					assert(false)
				}
				
			case "cmp"
				v1 := op.var2
				v2 := op.var4
				ob1 := ref fnc.Objects[v1]
				ob2 := ref fnc.Objects[v2]

				out << "	%Var" << op.var1 << " = "

				if IsFloat(ob1.GetType()) {
					out << "fcmp "
					switch op.V3Cond()
					{
					case "<" out << "ult"
					case "<=" out << "ule"
					case ">" out << "ugt"
					case ">=" out << "uge"
					case "==" out << "ueq"
					case "!=" out << "une"
					}
				}else{
					out << "icmp "

					if IsUInt(ob1.GetType()) {
						switch op.V3Cond()
						{
						case "<" out << "ult"
						case "<=" out << "ule"
						case ">" out << "ugt"
						case ">=" out << "uge"
						case "==" out << "eq"
						case "!=" out << "ne"
						}
					}else{
						switch op.V3Cond()
						{
						case "<" out << "slt"
						case "<=" out << "sle"
						case ">" out << "sgt"
						case ">=" out << "sge"
						case "==" out << "eq"
						case "!=" out << "ne"
						}
					}
				}
				out << " "
				ob1.GetType().PrintType(ctx)
				out << " "
				LLVMPrintObjValue(ctx,ob1,v1)
				out << " , "
				LLVMPrintObjValue(ctx,ob2,v2)
				printDebugEnd()

			case "get_pointer"
				ob1 := ref fnc.Objects[op.var1]
				ob2 := ref fnc.Objects[op.var2]
				if ob1 is MCConstValue and (ob2 is MCVariable or ob2 is MCGlobalVariable)
				{
					out << "	%Var" << op.var1 << " = bitcast "
					ob2.GetType().PrintType(ctx)
					out << "* "
					LLVMPrintObjValue(ctx,ob2,op.var2)
					out << " to "
					ob1.GetType().PrintType(ctx)
					printDebugEnd()
				}else if ob1 is MCConstValue and ob2 is MCConstFunction{
					out << "	%Var" << op.var1 << " = bitcast "
					ob2.GetType().PrintType(ctx)
					out << "* "
					ob2&->{MCConstFunction^}.GetValue().PrintName(ctx)
					out << " to "
					ob1.GetType().PrintType(ctx)
					printDebugEnd()
				}else{
					printf("LLVM: unknown get at %s\n",makeLoc())
					assert(false)
				}

			case in !["and","or","xor"]
				ob1 := ref fnc.Objects[op.var1]
				ob2 := ref fnc.Objects[op.var2]
				ob3 := ref fnc.Objects[op.var3]

				out << "	%Var" << op.var1 << " = "
				out << op.opcode.ToCStr() << " "
				ob1.GetType().PrintType(ctx)
				out << " "
				LLVMPrintObjValue(ctx,ob2,op.var2)
				out << " , "
				LLVMPrintObjValue(ctx,ob3,op.var3)
				printDebugEnd()
			case in !["shl","sshr","ushr"]
				ob1 := ref fnc.Objects[op.var1]
				ob2 := ref fnc.Objects[op.var2]
				ob3 := ref fnc.Objects[op.var3]

				out << "	%Var" << op.var1 << " = "
				switch op.opcode
				{
				case "shl"
					out << "shl"
				case "sshr"
					out << "ashr"
				case "ushr"
					out << "lshr"
				}
				out << " "
				ob1.GetType().PrintType(ctx)
				out << " "
				LLVMPrintObjValue(ctx,ob2,op.var2)
				out << " , "
				LLVMPrintObjValue(ctx,ob3,op.var3)
				printDebugEnd()
			case "not"
				ob1 := ref fnc.Objects[op.var1]
				ob2 := ref fnc.Objects[op.var2]

				if ob1.GetType() == GTypeBool {
					out << "	%Var" << op.var1 << " = xor i1 1 ,"
					LLVMPrintObjValue(ctx,ob2,op.var2)
					printDebugEnd()

				}else {
					printf("LLVM: unknown type for opcode <not>\n")
					assert(false)
				}
			case in !["add","sub","mul","div","mod"]
				ob2 := ref fnc.Objects[op.var2]
				ob3 := ref fnc.Objects[op.var3]

				out << "	%Var" << op.var1 << " = "

				operType := ob2.GetType()
				if operType is TypeVector
					operType = operType.Base

				switch op.opcode
				{
				case "add"
					if IsInt(operType) out << "add" else out << "fadd"
				case "sub"
					if IsInt(operType) out << "sub" else out << "fsub"
				case "mul"
					if IsInt(operType) out << "mul" else out << "fmul"
				case "div"
					if IsInt(operType) {
						if IsUInt(operType)
							out << "udiv"
						else
							out << "sdiv"
					}else out << "fdiv"
				case "mod"
					if IsInt(operType) {
						if IsUInt(operType)
							out << "urem"
						else
							out << "srem"
					}else assert(false)
				}
				out << " "
				ob2.GetType().PrintType(ctx)
				out << " "
				LLVMPrintObjValue(ctx,ob2,op.var2)
				out << " , "
				LLVMPrintObjValue(ctx,ob3,op.var3)
				printDebugEnd()
			case in !["atomic_add","atomic_sub","atomic_xchg"]
				ob2 := ref fnc.Objects[op.var2]
				ob3 := ref fnc.Objects[op.var3]

				out << "	%Var" << op.var1 << " = atomicrmw " 
				switch op.opcode
				{
				case "atomic_add"
					out << "add"
				case "atomic_sub"
					out << "sub"
				case "atomic_xchg"
					out << "xchg"
				}
				out << " "
				ob2.GetType().PrintType(ctx)
				out << " "
				LLVMPrintObjValue(ctx,ob2,op.var2)
				out << " , "
				ob3.GetType().PrintType(ctx)
				out << " "
				LLVMPrintObjValue(ctx,ob3,op.var3)
				out << " acquire"				
				printDebugEnd()
			case in !["sqrt","cos","sin"]
				ob1 := ref fnc.Objects[op.var2]
				tp := ob1.GetType()

				assert(IsFloat(tp))

				out << "	%Var" << op.var1 << " =  call "
				tp.PrintType(ctx)
				out << " @llvm."
				out << op.opcode.ToCStr() << ".f" << (tp.GetSize()*8) << "("
				tp.PrintType(ctx)
				out << " "
				LLVMPrintObjValue(ctx,ob1,op.var2)
				out << ")"
				printDebugEnd()
				
			case "mov"
				op1 := ref fnc.Objects[op.var1]
				op2 := ref fnc.Objects[op.var2]

				if IsObjectVariable(op1) and op2.IsConstant
				{
					out << "	store "
					op2.GetType().PrintType(ctx)
					out << " "
					LLVMPrintObjValue(ctx,op2,op.var2)
					out << " ,"
					op1.GetType().PrintType(ctx)
					out << "* "
					LLVMPrintObjValue(ctx,op1,op.var1)
					printDebugEnd()
				}else if op1 is MCVariable and op2 is MCConstValue {
					out << "	store "
					op2.GetType().PrintType(ctx)
					out << " %Var" << op.var2 << " ,"
					op1&->{MCVariable^}.GetType().PrintType(ctx)
					out << "* %Var" << op.var1
					printDebugEnd()
				}else if op1 is MCConstValue and IsObjectVariable(op2) {
					out << "	%Var" << op.var1 << " = load "
					op2.GetType().PrintType(ctx)
					out << ","
					op2.GetType().PrintType(ctx)
					out << "* "
					LLVMPrintObjValue(ctx,op2,op.var2)
					printDebugEnd()
				}else{
					printf("LLVM: unknown move type at %s\n",makeLoc())
					assert(false)
				}
			case in !["max","min"]
				ob1 := ref fnc.Objects[op.var1]
				ob2 := ref fnc.Objects[op.var2]
				ob3 := ref fnc.Objects[op.var3]

				tmpId := GetNewId()

				out << "	%Tmp" << tmpId << " = "

				if IsInt(ob2.GetType()) {
					out << "icmp sgt"
				}else if IsFloat(ob2.GetType()) {
					out << "fcmp ugt"
				}else {
					assert(false)
				}

				out << " "
				ob2.GetType().PrintType(ctx)
				out << " "
				LLVMPrintObjValue(ctx,ob2,op.var2)
				out << " , "
				LLVMPrintObjValue(ctx,ob3,op.var3)
				printDebugEnd()

				out << "	%Var" << op.var1 << " = select i1 %Tmp" << tmpId
				out << " ,"
				if op.opcode == "max"
				{
					ob2.GetType().PrintType(ctx)
					out << " "
					LLVMPrintObjValue(ctx,ob2,op.var2)
					out << " , "
					ob2.GetType().PrintType(ctx)
					out << " "
					LLVMPrintObjValue(ctx,ob3,op.var3)
				}else{
					ob2.GetType().PrintType(ctx)
					out << " "
					LLVMPrintObjValue(ctx,ob3,op.var3)
					out << " , "
					ob2.GetType().PrintType(ctx)
					out << " "
					LLVMPrintObjValue(ctx,ob2,op.var2)
				}
				printDebugEnd()
				
			case "memset"
				ob1 := ref fnc.Objects[op.var1]
				ob2 := ref fnc.Objects[op.var2]
				ob3 := ref fnc.Objects[op.var3]
				out << "	call void @llvm.memset.inline.p0.p0i8.i32(i8* "
				LLVMPrintObjValue(ctx,ob1,op.var1)
				out << ",i8 "
				LLVMPrintObjValue(ctx,ob2,op.var2)
				out << ",i32 "
				LLVMPrintObjValue(ctx,ob3,op.var3)
				out << ",i1 0)"
				printDebugEnd()
			case "store"
				ob1 := ref fnc.Objects[op.var1]
				ob2 := ref fnc.Objects[op.var2]

				out << "	store "
				ob2.GetType().PrintType(ctx)
				out << " "
				LLVMPrintObjValue(ctx,ob2,op.var2)
				out << " , "
				ob1.GetType().PrintType(ctx)
				if ob1 is MCVariable
					out << "*"
				out << " "
				LLVMPrintObjValue(ctx,ob1,op.var1)
				printDebugEnd()
			case "load"
				ob1 := ref fnc.Objects[op.var1]
				ob2 := ref fnc.Objects[op.var2]

				assert(ob1 is MCConstValue)

				out << "	%Var" << op.var1 << " = load "

				ob1.GetType().PrintType(ctx)
				out << " , "
				ob2.GetType().PrintType(ctx)
				if ob2 is MCVariable
					out << "*"
				out << " "
				LLVMPrintObjValue(ctx,ob2,op.var2)
				printDebugEnd()
			case "vec_scalar_mul"
				ob2 := ref fnc.Objects[op.var2]
				ob3 := ref fnc.Objects[op.var3]

				tp := ob2.GetType()->{TypeVector^}
				siz := tp.vecElementCount

				out << "	%Temp" << op.var1 << " = fmul "
				tp.PrintType(ctx)
				out << " "
				LLVMPrintObjValue(ctx,ob2,op.var2)
				out << " , "
				LLVMPrintObjValue(ctx,ob3,op.var3)
				printDebugEnd()

				out << "	%Var" << op.var1 << " =  call float @llvm.vector.reduce.fadd.f32.v" //TODO type
				out << siz << "f32(float -0.0,<" << siz << " x float> %Temp" << op.var1 << ")"

				printDebugEnd()
			case in !["llvm_getelementptr","llvm_getelementptr0"]
				v1 := op.var2
				v2 := op.var3
				res := ref fnc.Objects[op.var1]
				ob1 := ref fnc.Objects[v1]
				ob2 := ref fnc.Objects[v2]

				assert(res is MCConstValue)

				if ob1 is MCVariable or ob1.IsConstant
				{
					bType := ob1.GetType()

					if bType == GTypeVoidP 
					{
						bType = GTypeU8
					}else{
						bType = bType.Base
					}
					out << "	%Var" << op.var1 << " = getelementptr "
					bType.PrintType(ctx)
					out << " , "
					ob1.GetType().PrintType(ctx)
					out << " "
					LLVMPrintObjValue(ctx,ob1,v1)

					if op.opcode == "llvm_getelementptr0"
						out << ", i32 0 , "
					else 
						out << " , "

					ob2.GetType().PrintType(ctx)
					out << " "
					LLVMPrintObjValue(ctx,ob2,v2)
					printDebugEnd()

				}else {
					printf("LLVM: unknown llvm_getelementptr at %s %i\n",fnc.BaseFunction.GetName(),indx)
					ob1 := ref fnc.Objects[op.var1]
					ob2 := ref fnc.Objects[op.var2]
					ob3 := ref fnc.Objects[op.var3]
					printf("%s %s %s %s %s %s\n",ob1.UnitName,ob1.GetType().GetBADStr().Str(),ob2.UnitName,ob2.GetType().GetBADStr().Str(),ob3.UnitName,ob3.GetType().GetBADStr().Str())
					assert(false)
				}
			case "va_start"
				out << "	call void @llvm.va_start(i8* "
				LLVMPrintObjValue(ctx,fnc.Objects[op.var1],op.var1)
				out << ")"
				printDebugEnd()

			case "va_arg"
				out << "	%Var" << op.var1 << " = va_arg i8* "
				LLVMPrintObjValue(ctx,fnc.Objects[op.var2],op.var2)
				out << " , "
				fnc.Objects[op.var1].GetType().PrintType(ctx)
				printDebugEnd()
				
			case "va_end"
				out << "	call void @llvm.va_end(i8* "
				LLVMPrintObjValue(ctx,fnc.Objects[op.var1],op.var1)
				out << ")"
				printDebugEnd()
			case "assert"
				ob1 := ref fnc.Objects[op.var1]
				tmpId := GetNewId()

				out << "	br i1 "
				LLVMPrintObjValue(ctx,ob1,op.var1)
				out << ", label %End" << tmpId << ", label %Failed" << tmpId
				printDebugEnd()
				out << "Failed" << tmpId << ":\n"
				out << "	call void @llvm.debugtrap()"
				printDebugEnd()
				out << "	br label %End" << tmpId
				printDebugEnd()
				out << "End" << tmpId << ":\n"
			case void
				printf("LLVM: unknown opcode %s at %s %i\n",op.opcode.ToCStr(),base.GetName(),indx)
				assert(false)
			}
			indx += 1
		}
	}


	if rTyp == GTypeVoid {
		out << "	ret void"
		printDebugEnd()
	}else {
		out << "	%ResultValue = load "
		rTyp.PrintType(ctx)
		if fType2.ResultRef
			out << "*"
		out << " , "
		rTyp.PrintType(ctx)
		if fType2.ResultRef
			out << "*"
		out << "* "
		LLVMPrintObjValue(ctx,fnc.Objects[fnc.ResultIndex],fnc.ResultIndex)
		printDebugEnd()

		out << "	ret "
		rTyp.PrintType(ctx)
		if fType2.ResultRef
			out << "*"
		out << " %ResultValue"
		printDebugEnd()
	}

	out << "}\n"

	if DebugMode
	{
		flId := base.bdy.Line.File.fileId

		out << "!" << fncId << " = distinct !DISubprogram(name:\""
		base.PrintName(ctx)
		out << "\","
		out << "linkageName:\""
		base.PrintName(ctx)
		out << "\","
		out << "scope: !" << flId << " , file: !" << flId 
		out << ",type: !" << base.GetType().MetaId
		if base.bdy.Line != null
		{
			out << ", line:" << base.bdy.Line.Line
			out << ", scopeLine:" << base.bdy.Line.Line
		}
		out << ", unit: !" << cuId
		out << ", flags: DIFlagPrototyped"
		out << ", spFlags: DISPFlagDefinition"
		//if tmplId != -1
		//	f << ", templateParams:!"<<tmplId
		out << ")\n"

		for fileId, pth : dbgFiles
		{
			out << "!" << fileId  << " = !DIFile(filename: \"" 
			out << pth << "\", directory: \""
			out <<  "/" <<"\")\n"
		}
		for it, ind : dbgBlocks
		{
			out << "!" << ind << " = !DILexicalBlock(scope: !" 
			out << fncId << ", file: !" << flId
			out << ")\n"
		}
		for it, ind : dbgList
		{
			out << "!" << ind  << " = !DILocation(line:" << it.1 << ",column:1, scope:!" << it.0 << ")\n"
		}
	}
}

LLVMPrintObjValue := !(LLVMWriteContext^ ctx,MCObject obj, int id) -> void
{
	out := ref ctx.writeStream^

	switch obj is
	{
	case MCVariable
			out << "%Var" << id
	case MCGlobalVariable
			obj.GetValueObject().PrintOutputName(ctx)
	case MCConstValue
			out << "%Var" << id
	case MCConstString
			st := GetExeString(obj.GetValue())
			st.PrintUse(ctx)
	case MCConstInteger
			out << obj.GetValue()
	case MCConstS64
			out << obj.GetValue()
	case MCConstDouble
			out << obj.GetValue()
	case MCConstBool
			out << (obj.GetValue() ?: "1" : "0")
	case MCConstPointer
			ptr := obj.GetValue()
			if ptr == null
			{
				out << "null"
			}else{
				r := char[40]
				sprintf(r[0]&,"%p",obj.GetValue())
				out << r[0]&
			}
	case MCConstBlob
	
			baseBlob := BoxRawData^
			stPtr := obj.GetValue()
			for it : blobDatas
			{
				if it.ItBlob.GetPointer() == stPtr
				{
					baseBlob = it
					break
				}
			}
			if baseBlob == null 
			{
				for it : EmbeddedObjects[^]
				{
					if it.rawData.ItBlob.GetPointer() == stPtr
					{
						baseBlob = it.rawData
						break
					}
				}
			}
			assert(baseBlob != null)
			baseBlob.PrintUse(ctx)
	case MCConstPointerTyped
			ptr := obj.GetValue()
			if ptr == null
			{
				out << "null"
			}else{
				r := char[40]
				sprintf(r[0]&,"%p",obj.GetValue())
				out << r[0]&
			}
	case void
		//printf("unknown object to print %s\n",obj.UnitName)
		//assert(false)
	}
}

IsPointLikeType := !(Type^ ptr) -> bool
{
	if ptr == GTypeStr
		return true
	if ptr is in TypePoint
		return true
	if ptr is in TypeArrayView
		return true
	return false
}

IsIntLikeType := !(Type^ ptr) -> bool
{
	if IsInt(ptr)
		return true
	return ptr is TypeEnum
}
