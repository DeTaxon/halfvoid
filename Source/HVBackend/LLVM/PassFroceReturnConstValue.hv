
PassForceReturnConstValues := !(MCFunction^ fnc) ->MCFunction^
{
	@once RetConstFuncTableInit()

	tbl := ref RetConstFuncTable

	usages := Vector.{int}

	usages.Resize(fnc.Objects.Size())

	usages[fnc.ResultIndex] = 999
	for i : fnc.InputsIndxCount
		usages[fnc.InputsIndxStart + i] = 999

	for it : fnc.Lines
	{
		if it.opcode == "mov" and fnc.Objects[it.var1] is MCGlobalVariable
			usages[it.var1] += 2
		if it.opcode == "get_pointer" and IsObjectVariable(fnc.Objects[it.var2])
			usages[it.var2] += 2
		if not tbl.Contain(it.opcode)
			continue
		usages[it.var1] += 1
	}

	newObjs := List.{MCObject}
	newCmds := List.{MCLine}

	newObjs.Push(fnc.Objects[^])

	indx := 0
	while indx < fnc.Lines.Size()
	{
		it := ref fnc.Lines[indx]

		if tbl.Contain(it.opcode)
		{
			if usages[it.var1] == 1 and IsObjectVariable(fnc.Objects[it.var1])
			{
				newObjs[it.var1]->SetType(MCConstValue)
				newCmds.Push(it)
				indx += 1
			}else if usages[it.var1] >= 2 and IsObjectVariable(fnc.Objects[it.var1]) {
				cnstId := newObjs.Size()
				newObjs.Push(fnc.Objects[it.var1])
				newObjs[-1]->SetType(MCConstValue)

				newCmds.Push(it)
				newCmds[-1].var1 = cnstId

				if it.opcode == "call_start"
				{
					while fnc.Lines[indx] != "call_end"
					{
						newCmds.Push(fnc.Lines[indx])
						indx += 1
					}
					newCmds.Push(fnc.Lines[indx])
					indx += 1
				}
				newCmds.Push(MCLine("mov",it.var1,cnstId))
				indx += 1
			}else{
				newCmds.Push(it)
				indx += 1
			}
		}else{
			newCmds.Push(it)
			indx += 1
		}
	}

	newFunc := fnc.CreateBaseFunc() 

	newFunc.Objects = newObjs.ToVector()
	newFunc.Lines = newCmds.ToVector()

	return newFunc
}

IsObjectVariable := !(MCObject obj) -> bool
{
	if obj is MCVariable
		return true
	if obj is MCGlobalVariable
		return true
	return false
}

RetConstFuncTable := AVLSet.{MCBaseOpcodes}

RetConstFuncTableInit := !() -> void
{
	tbl := ref RetConstFuncTable

	tbl.Insert("cast")

	tbl.Insert("call_start")

	tbl.Insert("cmp")

	tbl.Insert("get_pointer")
	
	tbl.Insert("and")
	tbl.Insert("or")
	tbl.Insert("xor")
	tbl.Insert("not")

	tbl.Insert("add")
	tbl.Insert("sub")
	tbl.Insert("mul")
	tbl.Insert("div")
	tbl.Insert("mod")

	tbl.Insert("max")
	tbl.Insert("min")

	tbl.Insert("llvm_getelementptr")
	tbl.Insert("llvm_getelementptr0")

}
