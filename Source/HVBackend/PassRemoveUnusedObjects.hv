
PassRemoveUnusedObjects := !(MCFunction^ fnc) -> MCFunction^
{
	grd := MakeGreedyPass(fnc,1,1,false)

	objsCount := fnc.Objects.Size()

	isUsed := Vector.{bool}
	isUsed.Resize(objsCount)

	defer isUsed.Destroy()

	isUsed[0] = true
	isUsed[fnc.ResultIndex] = true

	for i : fnc.InputsIndxCount
		isUsed[fnc.InputsIndxStart + i] = true

	cPtr := grd.cPtr
	c := ref grd.cmdsSize
	oPtr := grd.oPtr
	o := ref grd.objsSize

	icPtr := fnc.Lines.GetPointer()
	ioPtr := fnc.Objects.GetPointer()
	assert(icPtr != null and ioPtr != null)

	for i : fnc.Lines.Size()
	{
		line := icPtr[i]
		for k : 5
		{
			if not IsOpcodeUsesVar(line.opcode,k)
				continue
			isUsed[line.var1&[k]] = true
		}
	}

	newIds := Vector.{int}
	newIds.Resize(objsCount)

	defer newIds.Destroy()

	idIter := 0
	for i : objsCount
	{
		if isUsed[i]
		{
			oPtr[o++] = ioPtr[i]
			newIds[i] = idIter
			idIter += 1
		}
	}

	for i : fnc.Lines.Size()
	{
		line := icPtr[i]

		for k : 5
		{
			if not IsOpcodeUsesVar(line.opcode,k)
				continue
			line.var1&[k] = newIds[line.var1&[k]]
		}

		cPtr[c++] = line
	}
	return grd.GenerateFunc()
}
