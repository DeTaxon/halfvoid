AppendClass BoxAnd
{	
	WriteMC := virtual !(MCBuildContext^ ctx) -> WriteMCResult
	{
		continueLabel := ctx.CreateLabel()
		endLabel := ctx.CreateLabel()
		resValue := ctx.CreateVar(GTypeBool)

		result.CreatedId = resValue

		res1 := LeftCall.WriteMC(ctx).CreatedId
		HVB_ins_move(ctx,resValue,res1)

		HVB_ins_jump_if_bool(ctx,continueLabel,res1)
		HVB_ins_jump(ctx,endLabel)

		HVB_ins_label(ctx, continueLabel)
		res2 := RightCall.WriteMC(ctx).CreatedId
		HVB_ins_move(ctx,resValue,res2)
		HVB_ins_jump(ctx,endLabel)

		HVB_ins_label(ctx,endLabel)
	}
}
AppendClass BoxOr
{	
	WriteMC := virtual !(MCBuildContext^ ctx) -> WriteMCResult
	{
		continueLabel := ctx.CreateLabel()
		endLabel := ctx.CreateLabel()
		resValue := ctx.CreateVar(GTypeBool)

		result.CreatedId = resValue

		res1 := LeftCall.WriteMC(ctx).CreatedId
		HVB_ins_move(ctx,resValue,res1)

		HVB_ins_jump_if_bool(ctx,endLabel,res1)
		HVB_ins_jump(ctx,continueLabel)

		HVB_ins_label(ctx, continueLabel)
		res2 := RightCall.WriteMC(ctx).CreatedId
		HVB_ins_move(ctx,resValue,res2)
		HVB_ins_jump(ctx,endLabel)

		HVB_ins_label(ctx,endLabel)
	}
}

AppendClass DeferBlock
{

	StartBlockMC := !(MCBuildContext^ ctx) -> int
	{
		DefStackSize = ctx.DeferObjects.Size()
	}
	EndBlockMC := !(MCBuildContext^ ctx) -> void
	{
		while DefStackSize < ctx.DeferObjects.Size()
		{
			ob := ctx.DeferObjects.Pop()
			ob.WriteDeferMC(ctx)
		}
	}
}
