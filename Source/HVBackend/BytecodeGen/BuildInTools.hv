AppendClass BuiltInMemsetInlineInt
{
	IsMCInlined := virtual true
	WriteFuncCallMC := virtual !(MCBuildContext^ ctx,BoxExeObj^[] indexes) -> WriteMCResult
	{
		//TODO memleak
		cl := CreateFuncCall(StringSpan("memset"),![indexes[0],indexes[1],indexes[2]])
		assert(cl != null)
		return cl.WriteMC(ctx)
	}
}
AppendClass BuiltInDegreeSuffix
{
	IsMCInlined := virtual true
	WriteFuncCallMC := virtual !(MCBuildContext^ ctx,BoxExeObj^[] indexes) -> WriteMCResult
	{
		resType := ObjType->{TypeFunc^}.ResultType

		dwn := indexes[0].WriteMC(ctx).CreatedId

		mulVar := ctx.AddDouble(0.017453292519943295)

		res := ctx.CreateVar(resType)
		HVB_ins_mul(ctx,res,mulVar,dwn)

		result.CreatedId = res
	}
}

AppendClass BuiltInLLVMProxy
{

	IsMCInlined := virtual true
	WriteFuncCallMC := virtual !(MCBuildContext^ ctx,BoxExeObj^[] indexes) -> WriteMCResult
	{
		dwn := indexes[0].WriteMC(ctx).CreatedId
		switch funcName
		{
		case "@llvm.va_start"
			HVB_ins_va_start(ctx,dwn)
		case "@llvm.va_end"
			HVB_ins_va_end(ctx,dwn)
		}
	}
}
AppendClass BuiltInVaArg
{

	IsMCInlined := virtual true
	WriteFuncCallMC := virtual !(MCBuildContext^ ctx,BoxExeObj^[] indexes) -> WriteMCResult
	{
		dwn := indexes[0].WriteMC(ctx).CreatedId
		newVar := ctx.CreateVar(TargetType)
		HVB_ins_va_arg(ctx,newVar,dwn)
		result.CreatedId = newVar
	}
}
