
AppendClass LocalVar
{
	WriteMC := virtual !(MCBuildContext^ ctx) -> WriteMCResult
	{
		createVar[^].WriteMC(ctx)
		extraWork[^].WriteMC(ctx)
	}
}

AppendClass FuncLocalVarCleanup
{
	WriteMC := virtual !(MCBuildContext^ ctx) -> WriteMCResult
	{
		size := baseType.GetSize()

		if baseType is in TypeStandard or baseType is in TypePoint
		{
			obj := ctx.GetLocalVar(baseVar)
			HVB_ins_clean(ctx,obj)
		}else{
			obj := getVal.WriteMC(ctx).CreatedId
			zero := HVB_ins_const_int32(ctx,0)
			typeSize := HVB_ins_const_int32(ctx,baseType.GetSize())
			HVB_ins_memset(ctx,obj,zero,typeSize)
		}


		if deferCall != null
			ctx.DeferObjects.PushFront(deferCall)
	}
}
AppendClass FuncLocalVarAccess
{
	WriteMC := virtual !(MCBuildContext^ ctx) -> WriteMCResult
	{
		if baseVar.isReference
		{
			//varId := ctx.GetLocalVar(baseVar)
			//newId := ctx.CreateReference(baseVar.GetType())
			//zero := HVB_ins_const_int32(ctx,0)
			//HVB_ins_load_element(ctx,newId,varId,zero)
			//result.CreatedId = newId
			result.CreatedId = ctx.GetLocalVar(baseVar)
		}else{
			result.CreatedId = ctx.GetLocalVar(baseVar)
		}
	}
}
AppendClass GetFuncInputVar
{
	WriteMC := virtual !(MCBuildContext^ ctx) -> WriteMCResult
	{
		result.CreatedId = ctx.GetLocalVar(baseVar)
	}
}
AppendClass LocalVarProxy
{
	WriteMC := virtual !(MCBuildContext^ ctx) -> WriteMCResult
	{
		result = Down.WriteMC(ctx)
	}
}
AppendClass FuncLocalDebugInfoDeclare
{
	WriteMC := virtual !(MCBuildContext^ ctx) -> WriteMCResult
	{
	}
}

AppendClass GetLocalVarVoid 
{
	WriteMC := virtual !(MCBuildContext^ ctx) -> WriteMCResult
	{
	}
}
