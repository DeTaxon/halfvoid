AppendClass BuiltInIntEqAndOper
{
	IsMCInlined := virtual true
	WriteFuncCallMC := virtual !(MCBuildContext^ ctx,BoxExeObj^[] indexes) -> WriteMCResult
	{
		var1 := indexes[0].WriteMC(ctx)
		var2 := indexes[1].WriteMC(ctx)
		switch llvm
		{
		case "fadd"
			ctx.lines.Push(MCLine("add",var1.CreatedId,var1.CreatedId,var2.CreatedId))
		case "add"
			ctx.lines.Push(MCLine("add",var1.CreatedId,var1.CreatedId,var2.CreatedId))
		case "fsub"
			ctx.lines.Push(MCLine("sub",var1.CreatedId,var1.CreatedId,var2.CreatedId))
		case "sub"
			ctx.lines.Push(MCLine("sub",var1.CreatedId,var1.CreatedId,var2.CreatedId))
		case "fmul"
			ctx.lines.Push(MCLine("mul",var1.CreatedId,var1.CreatedId,var2.CreatedId))
		case "mul"
			ctx.lines.Push(MCLine("mul",var1.CreatedId,var1.CreatedId,var2.CreatedId))
		case void
			assert(false)
		}
	}
}
AppendClass BuiltInIntBase
{
	IsMCInlined := virtual true
	WriteFuncCallMC := virtual !(MCBuildContext^ ctx,BoxExeObj^[] indexes) -> WriteMCResult
	{
		var1 := indexes[0].WriteMC(ctx)
		var2 := indexes[1].WriteMC(ctx)

		resInd := ctx.CreateVar(GetType()->{TypeFunc^}.ResultType)
		result.CreatedId = resInd

		switch llvm
		{
		case "icmp eq"
			ctx.lines.Push(MCLine("cmp",resInd,var1.CreatedId,"==",var2.CreatedId))
		case "icmp ne"
			ctx.lines.Push(MCLine("cmp",resInd,var1.CreatedId,"!=",var2.CreatedId))
		case "icmp ult"
			ctx.lines.Push(MCLine("cmp",resInd,var1.CreatedId,"<",var2.CreatedId))
		case "icmp slt"
			ctx.lines.Push(MCLine("cmp",resInd,var1.CreatedId,"<",var2.CreatedId))
		case "icmp ule"
			ctx.lines.Push(MCLine("cmp",resInd,var1.CreatedId,"<=",var2.CreatedId))
		case "icmp sle"
			ctx.lines.Push(MCLine("cmp",resInd,var1.CreatedId,"<=",var2.CreatedId))
		case "icmp uge"
			ctx.lines.Push(MCLine("cmp",resInd,var1.CreatedId,">=",var2.CreatedId))
		case "icmp sge"
			ctx.lines.Push(MCLine("cmp",resInd,var1.CreatedId,">=",var2.CreatedId))
		case "icmp ugt"
			ctx.lines.Push(MCLine("cmp",resInd,var1.CreatedId,">",var2.CreatedId))
		case "icmp sgt"
			ctx.lines.Push(MCLine("cmp",resInd,var1.CreatedId,">",var2.CreatedId))

		case "fcmp ueq"
			ctx.lines.Push(MCLine("cmp",resInd,var1.CreatedId,"==",var2.CreatedId))
		case "fcmp une"
			ctx.lines.Push(MCLine("cmp",resInd,var1.CreatedId,"!=",var2.CreatedId))
		case "fcmp ugt"
			ctx.lines.Push(MCLine("cmp",resInd,var1.CreatedId,">",var2.CreatedId))
		case "fcmp uge"
			ctx.lines.Push(MCLine("cmp",resInd,var1.CreatedId,">=",var2.CreatedId))
		case "fcmp ult"
			ctx.lines.Push(MCLine("cmp",resInd,var1.CreatedId,"<",var2.CreatedId))
		case "fcmp ule"
			ctx.lines.Push(MCLine("cmp",resInd,var1.CreatedId,"<=",var2.CreatedId))

		case "add"
			HVB_ins_add(ctx,resInd,var1.CreatedId,var2.CreatedId)
		case "fadd"
			HVB_ins_add(ctx,resInd,var1.CreatedId,var2.CreatedId)
		case "sub"
			HVB_ins_sub(ctx,resInd,var1.CreatedId,var2.CreatedId)
		case "fsub"
			HVB_ins_sub(ctx,resInd,var1.CreatedId,var2.CreatedId)
		case "mul"
			HVB_ins_mul(ctx,resInd,var1.CreatedId,var2.CreatedId)
		case "fmul"
			HVB_ins_mul(ctx,resInd,var1.CreatedId,var2.CreatedId)
		case "udiv"
			HVB_ins_div(ctx,resInd,var1.CreatedId,var2.CreatedId)
		case "sdiv"
			HVB_ins_div(ctx,resInd,var1.CreatedId,var2.CreatedId)
		case "fdiv"
			HVB_ins_div(ctx,resInd,var1.CreatedId,var2.CreatedId)
		case "and"
			HVB_ins_and(ctx,resInd,var1.CreatedId,var2.CreatedId)
		case "or"
			HVB_ins_or(ctx,resInd,var1.CreatedId,var2.CreatedId)
		case "xor"
			HVB_ins_xor(ctx,resInd,var1.CreatedId,var2.CreatedId)
		case "shl"
			HVB_ins_shl(ctx,resInd,var1.CreatedId,var2.CreatedId)
		case "ashr"
			HVB_ins_sshr(ctx,resInd,var1.CreatedId,var2.CreatedId)
		case "lshr"
			HVB_ins_ushr(ctx,resInd,var1.CreatedId,var2.CreatedId)
		case "srem"
			HVB_ins_mod(ctx,resInd,var1.CreatedId,var2.CreatedId)
		case "urem"
			HVB_ins_mod(ctx,resInd,var1.CreatedId,var2.CreatedId)
		case void
			assert(false)
		}
	}
}
AppendClass BuiltInIntDecInc
{
	IsMCInlined := virtual true
	WriteFuncCallMC := virtual !(MCBuildContext^ ctx,BoxExeObj^[] indexes) -> WriteMCResult
	{
		tp := GetType()->{TypeFunc^}.ResultType
		obj := indexes[0].WriteMC(ctx).CreatedId

		oldValue := ctx.CreateVar(tp)
		HVB_ins_move(ctx,oldValue,obj)

		one := HVB_ins_const_int32(ctx,1)

		if tp != GTypeInt
		{
			newOne := ctx.CreateVar(tp)
			HVB_ins_cast(ctx,newOne,one)
			one = newOne
		}



		switch llvm
		{
		case "add"
			HVB_ins_add(ctx,obj,obj,one)
		case "sub"
			HVB_ins_sub(ctx,obj,obj,one)
		case void
			assert(false)

		}
		result.CreatedId = oldValue
	}
}
AppendClass BuiltInIntMinus
{
	IsMCInlined := virtual true
	WriteFuncCallMC := virtual !(MCBuildContext^ ctx,BoxExeObj^[] indexes) -> WriteMCResult
	{
		resType := ObjType->{TypeFunc^}.ResultType

		dwn := indexes[0].WriteMC(ctx).CreatedId

		res := ctx.CreateVar(resType)
		constId := int

		switch cnstVal
		{
		case "0"
			constId = ctx.CreateVar(resType)
			HVB_ins_clean(ctx,constId)
		case "0.0"
			constId = ctx.CreateVar(resType)
			HVB_ins_clean(ctx,constId)
		case "-1"
			constId = ctx.AddInteger(-1,resType)
		case void
			assert(false)
		}

		switch llvm
		{
		case "fsub"
			HVB_ins_sub(ctx,res,constId,dwn)
		case "sub"
			HVB_ins_sub(ctx,res,constId,dwn)
		case "xor"
			HVB_ins_xor(ctx,res,constId,dwn)
		case void
			assert(false)
		}

		result.CreatedId = res
	}
}

AppendClass BuiltInPrimeStore
{
	IsMCInlined := virtual true
	WriteFuncCallMC := virtual !(MCBuildContext^ ctx,BoxExeObj^[] indexes) -> WriteMCResult
	{
		var1 := indexes[0].WriteMC(ctx)
		var2 := indexes[1].WriteMC(ctx)
		HVB_ins_move(ctx,var1.CreatedId,var2.CreatedId)
	}
}
AppendClass BuiltInFloatSpaceship
{
	IsMCInlined := virtual true
	WriteFuncCallMC := virtual !(MCBuildContext^ ctx,BoxExeObj^[] indexes) -> WriteMCResult
	{
		v1 := indexes[0].WriteMC(ctx).CreatedId
		v2 := indexes[1].WriteMC(ctx).CreatedId

		result.CreatedId = HVB_ins_cmp_new(ctx,v1,"<=>",v2)
	}
}
AppendClass BuiltinSpaceShipUnsigned
{
	IsMCInlined := virtual true
	WriteFuncCallMC := virtual !(MCBuildContext^ ctx,BoxExeObj^[] indexes) -> WriteMCResult
	{
		res := ctx.CreateVar(GTypeInt)
		cmpVal := ctx.CreateVar(GTypeBool)

		v1 := indexes[0].WriteMC(ctx).CreatedId
		v2 := indexes[1].WriteMC(ctx).CreatedId

		zero := ctx.AddInteger(0)
		one := ctx.AddInteger(1)
		notOne := ctx.AddInteger(-1)

		endLabel := ctx.CreateLabel()

		HVB_ins_cmp(ctx,cmpVal,v1,"==",v2)
		HVB_ins_move(ctx,res,zero)
		HVB_ins_jump_if_bool(ctx,endLabel,cmpVal)

		HVB_ins_cmp(ctx,cmpVal,v1,">",v2)
		HVB_ins_move(ctx,res,one)
		HVB_ins_jump_if_bool(ctx,endLabel,cmpVal)

		HVB_ins_move(ctx,res,notOne)

		HVB_ins_label(ctx,endLabel)
		result.CreatedId = res
	}
}
AppendClass BuiltInFloatCosSin
{
	IsMCInlined := virtual true
	WriteFuncCallMC := virtual !(MCBuildContext^ ctx,BoxExeObj^[] indexes) -> WriteMCResult
	{
		resType := ObjType->{TypeFunc^}.ResultType

		resVar := ctx.CreateVar(resType)
		dwn := indexes[0].WriteMC(ctx).CreatedId

		if fncName == "cos"
		{
			HVB_ins_cos(ctx,resVar,dwn)
		}else{
			HVB_ins_sin(ctx,resVar,dwn)
		}

		result.CreatedId = resVar
	}
}
AppendClass BuiltInFloatSqrt
{
	IsMCInlined := virtual true
	WriteFuncCallMC := virtual !(MCBuildContext^ ctx,BoxExeObj^[] indexes) -> WriteMCResult
	{
		resType := ObjType->{TypeFunc^}.ResultType

		resVar := ctx.CreateVar(resType)
		dwn := indexes[0].WriteMC(ctx).CreatedId

		HVB_ins_sqrt(ctx,resVar,dwn)

		result.CreatedId = resVar
	}
}

AppendClass BuiltInInterlockOper
{
	IsMCInlined := virtual true
	WriteFuncCallMC := virtual !(MCBuildContext^ ctx,BoxExeObj^[] indexes) -> WriteMCResult
	{
		var1 := indexes[0].WriteMC(ctx)
		var2 := indexes[1].WriteMC(ctx)

		rType := GetType()->{TypeFunc^}.ResultType

		resInd := ctx.CreateVar(rType)
		tmpId := ctx.CreateVar(rType.GetPoint())

		HVB_ins_get_pointer(ctx,tmpId,var1.CreatedId)

		result.CreatedId = resInd

		switch llvm
		{
		case "add"
			ctx.lines.Push(MCLine("atomic_add",resInd,tmpId,var2.CreatedId))
		case "sub"
			ctx.lines.Push(MCLine("atomic_sub",resInd,tmpId,var2.CreatedId))
		case "xchg"
			ctx.lines.Push(MCLine("atomic_xchg",resInd,tmpId,var2.CreatedId))
		}
	}
}
