AppendClass BoxFuncCall
{
	WriteMC := virtual !(MCBuildContext^ ctx) -> WriteMCResult
	{
		if callObj?.IsMCInlined
		{
			result = callObj.WriteFuncCallMC(ctx,downs)
		}else{
			WritePreCallMC(ctx)

			fncId := GetFuncIdMC(ctx)

			thisIndexes := HybridQueue.{int,16}

			fType := GetFuncTypeMC()->{TypeFunc^}

			isComplex := fType.ResultType.IsComplexReturn() and not fType.ResultRef

			if ResultVar != null
			{
				ctx.AddLocalVar(ResultVar)
				ResultVar.WriteMC(ctx)
			}

			for it,indx : downs
			{
				subObj := it.WriteMC(ctx)
				fInd := indx

				if isComplex
				{
					if fInd == 0
					{
						varId := ResultVar.CreateVarCall().WriteMC(ctx).CreatedId //ctx.GetLocalVar(ResultVar)
						varId2 := ctx.CreateVar(it.GetType().GetPoint())
						HVB_ins_get_pointer(ctx,varId2,varId)
						thisIndexes.Push(varId2)
						continue
					}else{
						fInd -= 1
					}
				}

				isRef := false
				if fInd < fType.Params.Size()
					isRef = fType.Params[fInd].IsRef
				if isRef
				{
					varId := ctx.CreateVar(it.GetType().GetPoint())
					HVB_ins_get_pointer(ctx,varId,subObj.CreatedId)
					thisIndexes.Push(varId)
				}else{
					varId := ctx.CreateVar(it.GetType())
					HVB_ins_move(ctx,varId,subObj.CreatedId)
					thisIndexes.Push(varId)
				}
			}

			//returnByInput := false
			setResultId := 0
			resultId := 0

			if fType.ResultType != GTypeVoid //TODO ref
			{
				if fType.ResultType.IsComplexReturn() and not fType.ResultRef
				{
					resultId = ResultVar.CreateVarCall().WriteMC(ctx).CreatedId
				}else{
					if fType.ResultRef
					{
						resultId = ctx.CreateVar(fType.ResultType.GetPoint())
					}else{
						resultId = ctx.CreateVar(fType.ResultType)
					}
					setResultId = resultId
				}
			}

			ctx.lines.Push(MCLine("call_start",setResultId,fncId))
			for it, i  : thisIndexes
			{
				ctx.lines.Push(MCLine("load_var",it))
			}
			ctx.lines.Push(MCLine("call_end"))

			if fType.ResultRef
			{
				subRes := ctx.CreateReference(fType.ResultType)
				zero := HVB_ins_const_int32(ctx,0)
				HVB_ins_load_element(ctx,subRes,resultId,zero)
				result.CreatedId = subRes
			}else{
				result.CreatedId = resultId
			}
		}
	}

	WritePreCallMC := virtual !(MCBuildContext^ ctx) -> void
	{

	}
	GetFuncIdMC := virtual !(MCBuildContext^ ctx) -> int
	{
		return ctx.AddFuncConst(callObj)
	}
	GetFuncTypeMC := virtual !() -> TypeFunc^
	{
		return callObj.GetType()->{TypeFunc^}
	}
}
AppendClass BoxFuncPointerCall
{
	//WriteMC := virtual !(MCBuildContext^ ctx) -> WriteMCResult
	//{
	//	assert(false)
	//}
	WritePreCallMC := virtual !(MCBuildContext^ ctx) -> void
	{
		PreVars[^].WriteMC(ctx)
		PreCalls[^].WriteMC(ctx)
	}
	GetFuncIdMC := virtual !(MCBuildContext^ ctx) -> int
	{
		return ItPtrFunc.WriteMC(ctx).CreatedId
	}
	GetFuncTypeMC := virtual !() -> TypeFunc^
	{
		result = ItPtrFunc.GetType().Base->{TypeFunc^}
		assert(result is TypeFunc)
	}
}

AppendClass BoxFunc
{
	IsMCInlined := virtual false
	WriteFuncCallMC := virtual !(MCBuildContext^ ctx,BoxExeObj^[] indexes) -> WriteMCResult
	{
		assert(false)
	}
}
