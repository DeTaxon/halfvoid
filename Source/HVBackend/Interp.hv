
MCInterpFunction2 := !(MCInterpContext^ iCntx,MCFunction^ interpFunc, void^[] inputs = null,void^ resultPtr = null) -> void
{
	fType := interpFunc.BaseFunction.GetType()->{TypeFunc^}

	isComplex := fType.ResultType.IsComplexReturn() and not fType.ResultRef

	if isComplex and resultPtr != null
	{
		vars2 := HybridQueue.{void^,120}
		vars2.Push(resultPtr)
		if inputs != null
		{
			for it : inputs
			{
				vars2.Push(it)
			}
		}
		MCInterpFunction(iCntx,interpFunc,vars2,null)
	}else{
		MCInterpFunction(iCntx,interpFunc,inputs,resultPtr)
	}

}

MCInterpFunction := !(MCInterpContext^ iCntx,MCFunction^ interpFunc, void^[] inputs = null,void^ resultPtr = null) -> void
{
	thisFrame := MCInterpFuncFrame
	
	retIndex := 0
	if resultPtr != null
	{
		retIndex = 1
		thisFrame.localVarTable[1] = resultPtr
	}
	inptsIndexes := HybridQueue.{int,10}
	if inputs != null
	{
		for it,i : inputs
		{
			c := i + 5
			inptsIndexes.Push(c)
			thisFrame.localVarTable[c] = it
		}
	}
	MCInterpFunction(iCntx,interpFunc,thisFrame&,inptsIndexes,retIndex)
}

MCInterpFunction := !(MCInterpContext^ iCntx,MCFunction^ interpFunc, MCInterpFuncFrame^ callerFrame = null, int[] callerIndx = null,int returnIndex = 0) -> void
{
	//interpFunc.Print()
	//exit(0)
	//
	cs := 0
	thisFrame := MCInterpFuncFrame
	thisFrame.func = interpFunc
	thisFrame.iCntx = iCntx

	if interpFunc.Lines.Size() == 0
		return void

	opPtr := interpFunc.Lines.GetPointer()
	assert(opPtr != null)

	useStackSize := 0
	for it,i : interpFunc.Objects
	{
		typ := Type^
		if it& is MCVariable
			typ = it&->{MCVariable^}.GetType()
		if it& is MCReference
			typ = GTypeVoidP
		if typ != null
		{
			al := typ.GetAlign()
			if al != 0
			{
				useStackSize = ((useStackSize + al - 1) div al) * al
			}
			useStackSize += typ.GetSize()
		}
	}
	useStackSize = (useStackSize + 15) and_b 0xFFFFF0
	thisFrame.localVarBlob = MakeBlob(useStackSize)
	//memset(thisFrame.localVarBlob.GetPointer(),0,useStackSize)
	offset := int
	inpPos := 0
	for it,i : interpFunc.Objects
	{
		typ := Type^
		if it& is MCVariable
			typ = it&->{MCVariable^}.GetType()
		if it& is MCReference
			typ = GTypeVoidP

		if i != 0 and i == interpFunc.ResultIndex and callerFrame != null and returnIndex != 0
		{
			thisFrame.localVarTable[i] = callerFrame.localVarTable[returnIndex]
			continue
		}
		if callerIndx != null and i in Range(interpFunc.InputsIndxStart,interpFunc.InputsIndxStart + callerIndx.Size() - 1)
		{
			thisFrame.localVarTable[i] = callerFrame.localVarTable[callerIndx[inpPos]]
			inpPos += 1
			continue
		}
		if typ != null
		{
			al := typ.GetAlign()
			if al != 0
			{
				offset = ((offset + al - 1) div al) * al
			}
			if it& is MCVariable
			{
				thisFrame.localVarTable[i] = thisFrame.localVarBlob.GetPointer()->{u8^}[offset]&
			}
			if it& is MCReference
			{
				thisFrame.localVarTable[i] = thisFrame.localVarBlob.GetPointer()->{u8^}[offset]&
			}

			offset += typ.GetSize()
		}
	}
	
	labelsPos := Tuple.{u16,int}[]
	
	{
		labelsList := List.{Tuple.{u16,int}}
		for it,i : interpFunc.Lines
		{
			if it.opcode == "label"
			{
				labelsList.Emplace(it.var1,i)
			}
		}
		labelsPos = labelsList.ToVector()
	}
	getLabel := (u16 val) ==> [labelsPos&]{
		for it : labelsPos
		{
			if it.0 == val
				return it.1
		}
		printf("lost label %i\n",val)
		//interpFunc.Print()
		//for it : labelsPos
		//{
		//	printf("labels %i %i\n",it.0,it.1)
		//}
		assert(false)
	}

	opsCount := interpFunc.Lines.Size()
	while cs < opsCount
	{
		//printf("line %i\n",cs)
		thisLine := ref opPtr[cs]
		switch opPtr[cs].opcode
		{
		case "noop"
			cs += 1
		case "call_start"
			fncObj := ref interpFunc.Objects[opPtr[cs].var2]
			returnIndexCall := opPtr[cs].var1
			cs += 1


			indxs := HybridQueue.{int,8}
			while opPtr[cs].opcode != "call_end"
			{
				if opPtr[cs].opcode == "load_var"
				{
					indxs.Push(opPtr[cs].var1)
				}else{
					assert(false)
				}
				cs += 1
			}
			cs += 1

			resultPtr := thisFrame.GetObjectPtr(thisLine.var1)

			if fncObj& is MCConstFunction
			{
				fncHV := fncObj&->{MCConstFunction^}.GetValue()

				if fncHV is ResistFunc
				{
					fncHV = fncHV->{ResistFunc^}.base
				}

				if fncHV is in BuildInVirtualCall
				{
					vTableIndx := 0
					fType := fncHV->{BuildInVirtualCall^}.wrappedFunc.GetType()->{TypeFunc^}

					if fType.ResultType.IsComplexReturn() and not fType.ResultRef
						vTableIndx = 1
			
					v1 := thisFrame.GetObjectPtr(indxs[vTableIndx])
					vTable := v1->{void^^^}^^

					virtualFunc := fncHV->{BuildInVirtualCall^}.wrappedFunc

					if virtualFunc is ResistFunc
					{
						virtualFunc = virtualFunc->{ResistFunc^}.base
					}

					vTblCls := virtualFunc->{BoxFuncBody^}.Params[0].GetType()->{TypeClass^}
					cls := vTblCls.ToClass.VTableType
					//globVar := iCntx.GetGlobalVarFromMem(vTable)
					//assert(globVar != null)
					//cls := globVar.GetType()->{TypeClass^}.ToClass
					memField := cls.GetFieldByIndex(fncHV->{BuildInVirtualCall^}.funcIndex)
					memOffset := memField.MemOffset

					memObj := vTable->{u8^}[memOffset]&->{BoxUnit^^}^

					fPtr := iCntx.GetFuncByPointer(memObj)
					
					if iCntx.vtableFunctions.Value.ContainSome(memObj)
					{
						mx := iCntx.vtableFunctions.Value.GetOne(memObj)

						if mx is ResistFunc
						{
							mx = mx->{ResistFunc^}.base->{BoxFuncBody^}
						}

						assert(mx is in BoxFuncBody)

						fncAsMC := iCntx.GetMCFunc(mx)
						assert(fncAsMC != null)

						MCInterpFunction(iCntx,fncAsMC,thisFrame&,indxs,returnIndexCall)
					}else{
						fncType := memField.GetType()->{TypeFunc^}.ResultType.Base
						thisFrame.CallFuncPtr(fncType->{TypeFunc^},memObj,resultPtr,indxs,0)
					}

				}else if fncHV is BoxFuncDeclare {
					fncType := fncHV.GetType()->{TypeFunc^}
					thisFrame.CallFuncPtr(fncType,iCntx.DeclareToPtr(fncHV->{BoxFuncDeclare^}),resultPtr,indxs,0)
				}else if fncHV is in BoxFuncBody{
					bdy := fncHV->{BoxFuncBody^}
					fncPtr := void^

					//TODO unify
					if bdy.Name == "TLock"
					{
						fncPtr = TLock
					}
					if bdy.Name == "TUnlock"
					{
						fncPtr = TUnlock
					}
					if bdy.Name == "TUnlock"
					{
						fncPtr = TUnlock
					}
					if bdy.Name == "FSGetFile"
					{
						fncPtr = FSGetFile
					}
					if bdy.Name == "TSleep"
					{
						fncPtr = TSleep
					}
					if bdy.Name == "TSpawnTask"
					{
						fncPtr = TSpawnTask
					}
					if bdy.Name == "taskWorkCallBegin"
					{
						fncPtr = taskWorkCallBegin
					}
					if bdy.Name == "taskWorkCallEnd"
					{
						fncPtr = taskWorkCallEnd
					}
					if fncPtr == null
						fncPtr = CheckFuncExchange(bdy.Name)
					if fncPtr != null
					{
						thisFrame.CallFuncPtr(bdy.GetType()->{TypeFunc^},fncPtr,resultPtr,indxs,0)
					}else{
						fncAsMC := iCntx.GetMCFunc(fncHV->{BoxFuncBody^})
						MCInterpFunction(iCntx,fncAsMC,thisFrame&,indxs,returnIndexCall)
					}
				}else{
					printf("failed to call, unknown class %s\n",fncHV.UnitName)
					assert(false)
				}
			} else if  fncObj& is MCVariable or fncObj& is MCReference{
				functionPointer := thisFrame.GetObjectPtr(thisLine.var2)->{void^^}^
				assert(functionPointer != null) //TODO emit error
				fncVal := iCntx.GetFuncByPointer(functionPointer)
				if fncVal != null
				{
					MCInterpFunction(iCntx,fncVal,thisFrame&,indxs,returnIndexCall)
				}else{
					fType := fncObj.GetType().Base->{TypeFunc^}
					thisFrame.CallFuncPtr(fType,functionPointer,resultPtr,indxs,0)
				}
			} else if fncObj& is MCGlobalVariable
			{
				glbVar := fncObj&->{MCGlobalVariable^}.GetValueObject()
				memObj := iCntx.GetGlobalVarMem(glbVar)
				assert(memObj != null)
				fncVal := iCntx.GetFuncByPointer(memObj->{void^^}^)
				if fncVal != null
				{
					MCInterpFunction(iCntx,fncVal,thisFrame&,indxs,returnIndexCall)
				}else{
					thisFrame.CallFuncPtr(glbVar.GetType().Base->{TypeFunc^},memObj->{void^^}^,resultPtr,indxs,0)
				}

			}else{
				fncObj.PrintObject()
				assert(false)
			}

		case "clean"
			obj := interpFunc.Objects[opPtr[cs].var1]
			clnVar := thisFrame.GetObjectPtr(opPtr[cs].var1)
			assert(clnVar != null)

			memset(clnVar,0,obj.GetType().GetSize())
			cs += 1
		case "and"
			objTyp := interpFunc.Objects[thisLine.var2].GetType()

			ptrRes := thisFrame.GetObjectPtr(opPtr[cs].var1)
			ptr1 := thisFrame.GetObjectPtr(opPtr[cs].var2)
			ptr2 := thisFrame.GetObjectPtr(opPtr[cs].var3)

			switch objTyp.GetSize()
			{
				case 1 ptrRes->{s8^}^ = ptr1->{s8^}^ and_b ptr2->{s8^}^
				case 2 ptrRes->{s16^}^ = ptr1->{s16^}^ and_b ptr2->{s16^}^
				case 4 ptrRes->{s32^}^ = ptr1->{s32^}^ and_b ptr2->{s32^}^
				case 8 ptrRes->{s64^}^ = ptr1->{s64^}^ and_b ptr2->{s64^}^
			}
			cs += 1
		case "or"
			objTyp := interpFunc.Objects[thisLine.var2].GetType()

			ptrRes := thisFrame.GetObjectPtr(opPtr[cs].var1)
			ptr1 := thisFrame.GetObjectPtr(opPtr[cs].var2)
			ptr2 := thisFrame.GetObjectPtr(opPtr[cs].var3)

			switch objTyp.GetSize()
			{
				case 1 ptrRes->{s8^}^ = ptr1->{s8^}^ or_b ptr2->{s8^}^
				case 2 ptrRes->{s16^}^ = ptr1->{s16^}^ or_b ptr2->{s16^}^
				case 4 ptrRes->{s32^}^ = ptr1->{s32^}^ or_b ptr2->{s32^}^
				case 8 ptrRes->{s64^}^ = ptr1->{s64^}^ or_b ptr2->{s64^}^
			}

			cs += 1
		case "xor"
			objTyp := interpFunc.Objects[thisLine.var2].GetType()

			ptrRes := thisFrame.GetObjectPtr(opPtr[cs].var1)
			ptr1 := thisFrame.GetObjectPtr(opPtr[cs].var2)
			ptr2 := thisFrame.GetObjectPtr(opPtr[cs].var3)

			switch objTyp.GetSize()
			{
				case 1 ptrRes->{s8^}^ = ptr1->{s8^}^ xor_b ptr2->{s8^}^
				case 2 ptrRes->{s16^}^ = ptr1->{s16^}^ xor_b ptr2->{s16^}^
				case 4 ptrRes->{s32^}^ = ptr1->{s32^}^ xor_b ptr2->{s32^}^
				case 8 ptrRes->{s64^}^ = ptr1->{s64^}^ xor_b ptr2->{s64^}^
			}

			cs += 1
		case "sshr"
			objTyp := interpFunc.Objects[thisLine.var2].GetType()

			ptrRes := thisFrame.GetObjectPtr(opPtr[cs].var1)
			ptr1 := thisFrame.GetObjectPtr(opPtr[cs].var2)
			ptr2 := thisFrame.GetObjectPtr(opPtr[cs].var3)

			switch objTyp.GetSize()
			{
				case 1 ptrRes->{s8^}^ = ptr1->{s8^}^ shr ptr2->{s8^}^
				case 2 ptrRes->{s16^}^ = ptr1->{s16^}^ shr ptr2->{s16^}^
				case 4 ptrRes->{s32^}^ = ptr1->{s32^}^ shr ptr2->{s32^}^
				case 8 ptrRes->{s64^}^ = ptr1->{s64^}^ shr ptr2->{s64^}^
			}

			cs += 1
		case "ushr"
			objTyp := interpFunc.Objects[thisLine.var2].GetType()

			ptrRes := thisFrame.GetObjectPtr(opPtr[cs].var1)
			ptr1 := thisFrame.GetObjectPtr(opPtr[cs].var2)
			ptr2 := thisFrame.GetObjectPtr(opPtr[cs].var3)

			switch objTyp.GetSize()
			{
				case 1 ptrRes->{s8^}^ = ptr1->{u8^}^ shr ptr2->{u8^}^
				case 2 ptrRes->{s16^}^ = ptr1->{u16^}^ shr ptr2->{u16^}^
				case 4 ptrRes->{s32^}^ = ptr1->{u32^}^ shr ptr2->{u32^}^
				case 8 ptrRes->{s64^}^ = ptr1->{u64^}^ shr ptr2->{u64^}^
			}

			cs += 1
		case "shl"
			objTyp := interpFunc.Objects[thisLine.var2].GetType()

			ptrRes := thisFrame.GetObjectPtr(opPtr[cs].var1)
			ptr1 := thisFrame.GetObjectPtr(opPtr[cs].var2)
			ptr2 := thisFrame.GetObjectPtr(opPtr[cs].var3)

			switch objTyp.GetSize()
			{
				case 1 ptrRes->{s8^}^ = ptr1->{s8^}^ shl ptr2->{s8^}^
				case 2 ptrRes->{s16^}^ = ptr1->{s16^}^ shl ptr2->{s16^}^
				case 4 ptrRes->{s32^}^ = ptr1->{s32^}^ shl ptr2->{s32^}^
				case 8 ptrRes->{s64^}^ = ptr1->{s64^}^ shl ptr2->{s64^}^
			}

			cs += 1
		case "not"
			objTyp := interpFunc.Objects[thisLine.var1].GetType()

			ptr1 := thisFrame.GetObjectPtr(opPtr[cs].var1)
			ptr2 := thisFrame.GetObjectPtr(opPtr[cs].var2)

			if objTyp == GTypeBool
			{
				ptr1->{bool^}^ = ptr2->{u8^}^ == 0
			}else{
				assert(false)
			}
			cs += 1
		case "add"
			objTyp := interpFunc.Objects[thisLine.var2].GetType()

			ptrRes := thisFrame.GetObjectPtr(opPtr[cs].var1)
			ptr1 := thisFrame.GetObjectPtr(opPtr[cs].var2)
			ptr2 := thisFrame.GetObjectPtr(opPtr[cs].var3)

			if IsInt(objTyp)
			{
				switch objTyp.GetSize()
				{
					case 1 ptrRes->{s8^}^ = ptr1->{s8^}^ + ptr2->{s8^}^
					case 2 ptrRes->{s16^}^ = ptr1->{s16^}^ + ptr2->{s16^}^
					case 4 ptrRes->{s32^}^ = ptr1->{s32^}^ + ptr2->{s32^}^
					case 8 ptrRes->{s64^}^ = ptr1->{s64^}^ + ptr2->{s64^}^
				}
			}else if IsFloat(objTyp)
			{
				switch objTyp.GetSize()
				{
					case 4 ptrRes->{float^}^ = ptr1->{float^}^ + ptr2->{float^}^
					case 8 ptrRes->{double^}^ = ptr1->{double^}^ + ptr2->{double^}^
				}
			}else if IsVecType(objTyp){
				switch objTyp
				{
					case GTypeVec2f ptrRes->{vec2f^}^ = ptr1->{vec2f^}^ + ptr2->{vec2f^}^
					case GTypeVec3f ptrRes->{vec3f^}^ = ptr1->{vec3f^}^ + ptr2->{vec3f^}^
					case GTypeVec4f ptrRes->{vec4f^}^ = ptr1->{vec4f^}^ + ptr2->{vec4f^}^
				}
			}else{
				printf("some add %s\n",objTyp.GetBADStr().Str())
				assert(false)
			}
			cs += 1
		case "sub"
			objTyp := interpFunc.Objects[thisLine.var2].GetType()

			ptrRes := thisFrame.GetObjectPtr(opPtr[cs].var1)
			ptr1 := thisFrame.GetObjectPtr(opPtr[cs].var2)
			ptr2 := thisFrame.GetObjectPtr(opPtr[cs].var3)

			if IsInt(objTyp)
			{
				switch objTyp.GetSize()
				{
					case 1 ptrRes->{s8^}^ = ptr1->{s8^}^ - (ptr2->{s8^}^)
					case 2 ptrRes->{s16^}^ = ptr1->{s16^}^ - (ptr2->{s16^}^)
					case 4 ptrRes->{s32^}^ = ptr1->{s32^}^ - (ptr2->{s32^}^)
					case 8 ptrRes->{s64^}^ = ptr1->{s64^}^ - (ptr2->{s64^}^)
				}
			}else if IsFloat(objTyp)
			{
				switch objTyp.GetSize()
				{
					case 4 ptrRes->{float^}^ = ptr1->{float^}^ - (ptr2->{float^}^)
					case 8 ptrRes->{double^}^ = ptr1->{double^}^ - (ptr2->{double^}^)
				}
			}else if objTyp == GTypeVec2f {
				ptrRes->{vec2f^}^ = ptr1->{vec2f^}^ - (ptr2->{vec2f^}^)
			}else if objTyp == GTypeVec3f {
				ptrRes->{vec3f^}^ = ptr1->{vec3f^}^ - (ptr2->{vec3f^}^)
			}else if objTyp == GTypeVec4f {
				ptrRes->{vec4f^}^ = ptr1->{vec4f^}^ - (ptr2->{vec4f^}^)
			}else{
				//interpFunc.Print()
				//printf("line %i\n",cs)
				printf("failed to sub, unknown type %s\n",objTyp.GetBADStr().Str())
				exit(0)
			}
			cs += 1
		case "mul"
			objTyp := interpFunc.Objects[thisLine.var2].GetType()

			ptrRes := thisFrame.GetObjectPtr(opPtr[cs].var1)
			ptr1 := thisFrame.GetObjectPtr(opPtr[cs].var2)
			ptr2 := thisFrame.GetObjectPtr(opPtr[cs].var3)

			if IsInt(objTyp)
			{
				switch objTyp.GetSize()
				{
					case 1 ptrRes->{s8^}^ = ptr1->{s8^}^ * (ptr2->{s8^}^)
					case 2 ptrRes->{s16^}^ = ptr1->{s16^}^ * (ptr2->{s16^}^)
					case 4 ptrRes->{s32^}^ = ptr1->{s32^}^ * (ptr2->{s32^}^)
					case 8 ptrRes->{s64^}^ = ptr1->{s64^}^ * (ptr2->{s64^}^)
				}
			}else if IsFloat(objTyp)
			{
				switch objTyp.GetSize()
				{
					case 4 ptrRes->{float^}^ = ptr1->{float^}^ * ptr2->{float^}^
					case 8 ptrRes->{double^}^ = ptr1->{double^}^ * ptr2->{double^}^
				}
			}else if objTyp == GTypeQuantf {
				ptrRes->{quantf^}^ = ptr1->{quantf^}^ * (ptr2->{quantf^}^)
			}else if objTyp == GTypeVec4f {
				ptrRes->{vec4f^}^ = ptr1->{vec4f^}^ * (ptr2->{vec4f^}^)
			}else{
				printf("failed to mul, unknown type %s\n",objTyp.GetBADStr().Str())
				assert(false)
			}
			cs += 1
		case "div"
			objTyp := interpFunc.Objects[thisLine.var2].GetType()

			ptrRes := thisFrame.GetObjectPtr(opPtr[cs].var1)
			ptr1 := thisFrame.GetObjectPtr(opPtr[cs].var2)
			ptr2 := thisFrame.GetObjectPtr(opPtr[cs].var3)

			if IsInt(objTyp)
			{
				if IsUInt(objTyp)
				{
					switch objTyp.GetSize()
					{
						case 1 ptrRes->{u8^}^ = ptr1->{u8^}^ div (ptr2->{u8^}^)
						case 2 ptrRes->{u16^}^ = ptr1->{u16^}^ div (ptr2->{u16^}^)
						case 4 ptrRes->{u32^}^ = ptr1->{u32^}^ div (ptr2->{u32^}^)
						case 8 ptrRes->{u64^}^ = ptr1->{u64^}^ div (ptr2->{u64^}^)
					}
				}else{
					switch objTyp.GetSize()
					{
						case 1 ptrRes->{s8^}^ = ptr1->{s8^}^ div (ptr2->{s8^}^)
						case 2 ptrRes->{s16^}^ = ptr1->{s16^}^ div (ptr2->{s16^}^)
						case 4 ptrRes->{s32^}^ = ptr1->{s32^}^ div (ptr2->{s32^}^)
						case 8 ptrRes->{s64^}^ = ptr1->{s64^}^ div (ptr2->{s64^}^)
					}
				}
			}else if IsFloat(objTyp)
			{
				switch objTyp.GetSize()
				{
					case 4 ptrRes->{float^}^ = ptr1->{float^}^ / ptr2->{float^}^
					case 8 ptrRes->{double^}^ = ptr1->{double^}^ / ptr2->{double^}^
				}
			}else if objTyp == GTypeVec4f {
				ptrRes := thisFrame.GetObjectPtr(opPtr[cs].var1)
				ptr1 := thisFrame.GetObjectPtr(opPtr[cs].var2)
				ptr2 := thisFrame.GetObjectPtr(opPtr[cs].var3)
				for i : 4
					ptrRes->{float^}[i] = ptr1->{float^}[i] / ptr2->{float^}[i]
			}else{
				assert(false)
			}
			cs += 1
		case "mod"
			objTyp := interpFunc.Objects[thisLine.var2].GetType()

			ptrRes := thisFrame.GetObjectPtr(opPtr[cs].var1)
			ptr1 := thisFrame.GetObjectPtr(opPtr[cs].var2)
			ptr2 := thisFrame.GetObjectPtr(opPtr[cs].var3)

			if IsInt(objTyp)
			{
				bigInt := s64
				switch objTyp.GetSize()
				{
					case 1 ptrRes->{s8^}^ = ptr1->{s8^}^ mod (ptr2->{s8^}^)
					case 2 ptrRes->{s16^}^ = ptr1->{s16^}^ mod (ptr2->{s16^}^)
					case 4 ptrRes->{s32^}^ = ptr1->{s32^}^ mod (ptr2->{s32^}^)
					case 8 ptrRes->{s64^}^ = ptr1->{s64^}^ mod (ptr2->{s64^}^)
				}
			}else{
				assert(false)
			}
			cs += 1
		case "cmp"
			objTyp := interpFunc.Objects[thisLine.var3].GetType()
			ptr1 := thisFrame.GetObjectPtr(opPtr[cs].var3)
			ptr2 := thisFrame.GetObjectPtr(opPtr[cs].var4)
			resBool := thisFrame.GetObjectPtr(thisLine.var1)->{bool^}

			if IsInt(objTyp) or objTyp is in TypePoint or IsFloat(objTyp) or objTyp is in TypeArrayView or objTyp is TypeEnum
			{
				spc := s64

				if IsInt(objTyp) or objTyp is TypeEnum
				{
					switch objTyp.GetSize()
					{
						case 1 spc = ptr1->{s8^}^ - (ptr2->{s8^}^)
						case 2 spc = ptr1->{s16^}^ - (ptr2->{s16^}^)
						case 4 spc = ptr1->{s32^}^ - (ptr2->{s32^}^)
						case 8 spc = ptr1->{s64^}^ - (ptr2->{s64^}^)
					}
				}else if objTyp is in TypePoint or objTyp is in TypeArrayView
				{
					spc = ptr1->{size_t^^}^ <=> ptr2->{size_t^^}^
				}else if IsFloat(objTyp)
				{
					spcFloat := 0.0
					switch objTyp.GetSize()
					{
						case 4 spcFloat = ptr1->{float^}^ - (ptr2->{float^}^)
						case 8 spcFloat = ptr1->{double^}^ - (ptr2->{double^}^)
					}
					if spcFloat > 0
						spc = 1
					if spcFloat < 0
						spc = -1
				}else{
					assert(false)
				}

				switch thisLine.V2Cond()
				{
					case "==" resBool^ = (spc == 0)
					case "!=" resBool^ = (spc != 0)
					case "<=" resBool^ = (spc <= 0)
					case "<" resBool^ = (spc < 0)
					case ">=" resBool^ = (spc >= 0)
					case ">" resBool^ = (spc > 0)
					case "<=>" resBool->{int^}^ = spc
					case void
						assert(false)
				}
			}else{
				printf("failed to cmp, unknown type %s\n",objTyp.GetBADStr().Str())
				assert(false)
			}
			cs += 1
		case "label"
			cs += 1
		case "jmp"
			cs = getLabel(thisLine.var1)
		case "jmp_if_bool"
			boolVar := thisFrame.GetObjectPtr(thisLine.var2)->{u8^}
			if boolVar^ != 0
			{
				cs = getLabel(thisLine.var1)
			}else{
				cs += 1
			}
		case "mov"
			v1 := thisFrame.GetObjectPtr(thisLine.var1)
			v2 := thisFrame.GetObjectPtr(thisLine.var2)
			typeSize := interpFunc.Objects[thisLine.var1].GetType().GetSize()
			memcpy(v1,v2,typeSize)
			cs += 1
		case "cast"
			v1 := thisFrame.GetObjectPtr(thisLine.var1)
			v2 := thisFrame.GetObjectPtr(thisLine.var2)
			toType := interpFunc.Objects[thisLine.var1].GetType()
			fromType := interpFunc.Objects[thisLine.var2].GetType()
			typeSize := toType.GetSize()

			if IsInt(toType) and IsInt(fromType)
			{
				oldType := interpFunc.Objects[thisLine.var2].GetType()
				if typeSize > oldType.GetSize() and not IsUInt(toType)
				{
					memset(v1,0,typeSize)
					memcpy(v1,v2,min(typeSize,oldType.GetSize()) )
				}else{
					memset(v1,0,typeSize)
					memcpy(v1,v2,min(typeSize,oldType.GetSize()) )
				}
			}else if toType is in TypePoint or toType is in TypeArrayView
			{
				//memset(v1,0,typeSize)
				memcpy(v1,v2,typeSize)
			}else if IsFloat(toType) and IsInt(fromType)
			{
				val := s64
				memcpy(val&,v2,fromType.GetSize())
				if not IsUInt(fromType)
				{
					shift := (8 - fromType.GetSize()) * 8
					val = val shl shift
					val = val shr shift
				}
				switch toType
				{
				case GTypeFloat v1->{float^}^ = val
				case GTypeDouble v1->{double^}^ = val
				case void
					assert(false)
				}
			}else if IsFloat(toType) and IsFloat(fromType)
			{
				bigFloat := double
				switch fromType.GetSize()
				{
					case 4 bigFloat = v2->{float^}^
					case 8 bigFloat = v2->{double^}^
				}
				switch toType.GetSize()
				{
					case 4 v1->{float^}^ = bigFloat
					case 8 v1->{double^}^ = bigFloat
				}
			}else if IsInt(toType) and IsFloat(fromType)
			{
				bigFloat := double
				switch fromType.GetSize()
				{
					case 4 bigFloat = v2->{float^}^
					case 8 bigFloat = v2->{double^}^
				}
				switch toType.GetSize()
				{
					case 1 v1->{s8^}^ = bigFloat
					case 2 v1->{s16^}^ = bigFloat
					case 4 v1->{s32^}^ = bigFloat
					case 8 v1->{s64^}^ = bigFloat
				}

			} else
			{
				printf("can not cast type %s to %s\n",fromType.GetBADStr().Str(),toType.GetBADStr().Str())
				assert(false)
			}
			//TODO float to int , and back
			//signed types sign extension
			cs += 1
		case "load_element"
			varType := interpFunc.Objects[thisLine.var2].GetType()
			indType := interpFunc.Objects[thisLine.var3].GetType()

			assert(indType == GTypeInt)

			v2 := thisFrame.GetObjectPtr(thisLine.var2)
			v3 := thisFrame.GetObjectPtr(thisLine.var3)


			if varType is in TypePoint
			{
				objSet := ref interpFunc.Objects[thisLine.var1]
				assert(objSet& is MCReference)
				setPtr := thisFrame.GetReferencePtr(thisLine.var1)
				setPtr->{void^^}^ = v2->{u8^^}^[v3->{int^}^ * varType.Base.GetSize()]&
			}else if varType is in TypeClass{
				asClass := varType->{TypeClass^}.ToClass
				fld := asClass.GetFieldByIndexRaw(v3->{int^}^)

				objSet := ref interpFunc.Objects[thisLine.var1]
				assert(objSet& is MCReference)
				setPtr := thisFrame.GetReferencePtr(thisLine.var1)
				setPtr->{u8^^}^ = v2->{u8^}[fld.MemOffset]&
			}else if IsVecType(varType) or varType == GTypeQuantf {
				assert(varType.Base != null)
				elementSize := varType.Base.GetSize()
				elementNum := v3->{s32^}^
				setPtr := thisFrame.GetReferencePtr(thisLine.var1)
				setPtr->{u8^^}^ = v2->{u8^}[elementSize*elementNum]&
			}else{
				printf("No load_element for %s\n",varType.GetBADStr().Str())
				assert(false)
			}

			cs += 1
		case "set_reference"
			v1 := thisFrame.GetReferencePtr(thisLine.var1)
			v2 := thisFrame.GetObjectPtr(thisLine.var2)
			v1->{void^^}^ = v2
			cs += 1
		case "get_pointer"
			res := thisFrame.GetObjectPtr(thisLine.var1)

			obj := ref interpFunc.Objects[thisLine.var2]
			if obj& is MCReference
			{
				res->{void^^}^ = thisFrame.localVarTable[thisLine.var2]->{void^^}^
			}else if obj& is MCVariable{
				res->{void^^}^ = thisFrame.localVarTable[thisLine.var2]
			}else if obj& is MCGlobalVariable {
				res->{void^^}^ = iCntx.GetGlobalVarMem(obj&->{MCGlobalVariable^}.GetValueObject())
			}else if obj& is MCConstInteger{
				res->{void^^}^ = obj&->{MCConstInteger^}.GetValue()&
			}else if obj& is MCConstFunction{
				frFunc := obj&->{MCConstFunction^}.GetValue()
				assert(frFunc is BoxFuncBody) //TODO to error?
				mcFunc := iCntx.GetMCFunc(frFunc->{BoxFuncBody^})
				assert(mcFunc != null)
				mcFuncPtr := iCntx.GetFunctionPointer(mcFunc)
				res->{void^^}^ = mcFuncPtr
			}else{
				assert(false)
			}
			cs += 1
		case "max"
			objTyp := interpFunc.Objects[thisLine.var2].GetType()

			ptrRes := thisFrame.GetObjectPtr(opPtr[cs].var1)
			ptr1 := thisFrame.GetObjectPtr(opPtr[cs].var2)
			ptr2 := thisFrame.GetObjectPtr(opPtr[cs].var3)

			if IsInt(objTyp)
			{
				switch objTyp.GetSize()
				{
					case 1 ptrRes->{s8^}^ = max(ptr1->{s8^}^,ptr2->{s8^}^)
					case 2 ptrRes->{s16^}^ =max(ptr1->{s16^}^ ,ptr2->{s16^}^)
					case 4 ptrRes->{s32^}^ =max(ptr1->{s32^}^ ,ptr2->{s32^}^)
					case 8 ptrRes->{s64^}^ =max(ptr1->{s64^}^ ,ptr2->{s64^}^)
				}
			}else if IsFloat(objTyp)
			{
				switch objTyp.GetSize()
				{
					case 4 ptrRes->{float^}^  = max(ptr1->{float^}^  ,ptr2->{float^}^)
					case 8 ptrRes->{double^}^ = max(ptr1->{double^}^ ,ptr2->{double^}^)
				}
			}else{
				assert(false)
			}
			cs += 1
		case "min"
			objTyp := interpFunc.Objects[thisLine.var2].GetType()

			ptrRes := thisFrame.GetObjectPtr(opPtr[cs].var1)
			ptr1 := thisFrame.GetObjectPtr(opPtr[cs].var2)
			ptr2 := thisFrame.GetObjectPtr(opPtr[cs].var3)

			if IsInt(objTyp)
			{
				switch objTyp.GetSize()
				{
					case 1 ptrRes->{s8^}^ = min(ptr1->{s8^}^,ptr2->{s8^}^)
					case 2 ptrRes->{s16^}^ =min(ptr1->{s16^}^ ,ptr2->{s16^}^)
					case 4 ptrRes->{s32^}^ =min(ptr1->{s32^}^ ,ptr2->{s32^}^)
					case 8 ptrRes->{s64^}^ =min(ptr1->{s64^}^ ,ptr2->{s64^}^)
				}
			}else if IsFloat(objTyp)
			{
				switch objTyp.GetSize()
				{
					case 4 ptrRes->{float^}^  = min(ptr1->{float^}^  ,ptr2->{float^}^)
					case 8 ptrRes->{double^}^ = min(ptr1->{double^}^ ,ptr2->{double^}^)
				}
			}else{
				assert(false)
			}
			cs += 1
		case "sqrt"
			objTyp := interpFunc.Objects[thisLine.var2].GetType()

			ptrRes := thisFrame.GetObjectPtr(opPtr[cs].var1)
			ptr1 := thisFrame.GetObjectPtr(opPtr[cs].var2)

			if IsFloat(objTyp)
			{
				switch objTyp.GetSize()
				{
					case 4 ptrRes->{float^}^ = sqrtf(ptr1->{float^}^)
					case 8 ptrRes->{double^}^ = sqrtf(ptr1->{double^}^) //TODO switch to base sqrt
				}
			}else{
				assert(false)
			}
			cs += 1
			
		case "cos"
			objTyp := interpFunc.Objects[thisLine.var2].GetType()

			ptrRes := thisFrame.GetObjectPtr(opPtr[cs].var1)
			ptr1 := thisFrame.GetObjectPtr(opPtr[cs].var2)

			if IsFloat(objTyp)
			{
				switch objTyp.GetSize()
				{
					case 4 ptrRes->{float^}^ = cos(ptr1->{float^}^)
					case 8 ptrRes->{double^}^ = cos(ptr1->{double^}^)
				}
			}else{
				assert(false)
			}
			cs += 1
		case "sin"
			objTyp := interpFunc.Objects[thisLine.var2].GetType()

			ptrRes := thisFrame.GetObjectPtr(opPtr[cs].var1)
			ptr1 := thisFrame.GetObjectPtr(opPtr[cs].var2)

			if IsFloat(objTyp)
			{
				switch objTyp.GetSize()
				{
					case 4 ptrRes->{float^}^ = sin(ptr1->{float^}^)
					case 8 ptrRes->{double^}^ = sin(ptr1->{double^}^)
				}
			}else{
				assert(false)
			}
			cs += 1
		case "vec_build"
			objTyp := interpFunc.Objects[thisLine.var1].GetType()
			ptrRes := thisFrame.GetObjectPtr(opPtr[cs].var1)

			if objTyp == GTypeVec2f
			{
				ptr1 := thisFrame.GetObjectPtr(opPtr[cs].var2)
				ptr2 := thisFrame.GetObjectPtr(opPtr[cs].var3)
				
				ptrRes->{float^}[0] = ptr1->{float^}^
				ptrRes->{float^}[1] = ptr2->{float^}^

			}else if objTyp == GTypeVec4f {
				ptr1 := thisFrame.GetObjectPtr(opPtr[cs].var2)
				ptr2 := thisFrame.GetObjectPtr(opPtr[cs].var3)
				ptr3 := thisFrame.GetObjectPtr(opPtr[cs].var4)
				ptr4 := thisFrame.GetObjectPtr(opPtr[cs].var5)
				
				ptrRes->{float^}[0] = ptr1->{float^}^
				ptrRes->{float^}[1] = ptr2->{float^}^
				ptrRes->{float^}[2] = ptr3->{float^}^
				ptrRes->{float^}[3] = ptr4->{float^}^
			}else{
				printf("unknown vector build on %s\n",objTyp.GetBADStr().Str())
				exit(0)
			}

			cs += 1
		case "vec_scalar_mul"
			objTyp := interpFunc.Objects[thisLine.var2].GetType()
			ptrRes := thisFrame.GetObjectPtr(opPtr[cs].var1)

			ptr1 := thisFrame.GetObjectPtr(opPtr[cs].var2)
			ptr2 := thisFrame.GetObjectPtr(opPtr[cs].var3)

			if objTyp == GTypeVec3f {
				ptrRes->{float^}^ = ptr1->{vec3f^}^ <+> ptr2->{vec3f^}^
			}else if objTyp == GTypeVec4f {
				ptrRes->{float^}^ = ptr1->{vec4f^}^ <+> ptr2->{vec4f^}^
			}else if objTyp == GTypeVec2f {
				ptrRes->{float^}^ = ptr1->{vec2f^}^ <+> ptr2->{vec2f^}^
			}else if objTyp == GTypeQuantf {
				ptrRes->{float^}^ = ptr1->{quantf^}^ <+> ptr2->{quantf^}^
			}else{
				printf("unknown vec_scalar_mul on %s\n",objTyp.GetBADStr().Str())
				exit(0)
			}
			cs += 1
		case "vec_shuffle_begin"
			objTyp := interpFunc.Objects[thisLine.var2].GetType()
			vecDest := thisFrame.GetObjectPtr(opPtr[cs].var1)
			vecSource := thisFrame.GetObjectPtr(opPtr[cs].var2)

			//TODO non float base, maybe double

			cs += 1

			ind := 0

			while opPtr[cs].opcode != "vec_shuffle_end"
			{
				if opPtr[cs].opcode == "vec_shuffle_zero"
				{
					vecDest->{float^}[ind] = 0.0
				}else{
					thisInd := thisFrame.GetObjectPtr(opPtr[cs].var1)->{int^}^
					vecDest->{float^}[ind] = vecSource->{float^}[thisInd]
				}
				ind += 1
				cs += 1
			}

			cs += 1
			
			
		case "memset"
			sizeType := interpFunc.Objects[thisLine.var3].GetType()

			ptr1 := thisFrame.GetObjectPtr(opPtr[cs].var1)
			ptr2 := thisFrame.GetObjectPtr(opPtr[cs].var2)
			ptr3 := thisFrame.GetObjectPtr(opPtr[cs].var3)

			assert(sizeType == GTypeInt)
			switch sizeType.GetSize()
			{
				case 4 memset(ptr1->{void^^}^,ptr2->{int^}^,ptr3->{int^}^)
				case 8 memset(ptr1->{void^^}^,ptr2->{int^}^,ptr3->{u64^}^)
			}
			cs += 1
		case void
			printf("unknown opcode %s at %i\n",interpFunc.Lines[cs].opcode.ToCStr(),cs)
			cs += 1
		}
	}
}
