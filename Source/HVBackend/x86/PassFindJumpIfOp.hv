
PassOptimizeJumpX86 := !(MCFunction^ fnc) ->MCFunction^
{
	ctx := MakeGreedyPass(fnc,4,6)
	cPtr := ctx.cPtr
	c := ref ctx.cmdsSize
	oPtr := ctx.oPtr
	o := ref ctx.objsSize

	iPtr := fnc.Lines.GetPointer()
	iSize := fnc.Lines.Size()

	usedTimes := Vector.{int}(fnc.Objects.Size())

	for j : iSize
	{
		line := iPtr[j]
		for k : 5
		{
			obj := line.var1&[k]
			usedTimes[obj] += 1
		}
	}

	i := 0
	while i < (iSize - 1)
	{
		line := iPtr[i]
		next := iPtr[i+1]

		if line.opcode == "cmp" and next.opcode == "jmp_if_bool" 
			and line.var1 == next.var2 and usedTimes[line.var1] == 2 and IsRAXCastType(oPtr[line.var1].GetType())
		{
			cPtr[c++] = MCLine("jmp_if_op",next.var1,line.var2,line.var3,line.var4)
			i += 2
		}else{
			cPtr[c++] = line
			i += 1
		}
	}
	cPtr[c] = iPtr[iSize - 1]
	c += 1

	return ctx.GenerateFunc()
}
