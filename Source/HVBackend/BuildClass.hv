
hvr_Class := class extend BoxClassPoison
{
	newFieldCB := !(Str)&->HV_Object^

	this := !() -> void
	{
		Name = "ModuleClass" //todo
		ItId = GetNewId()
		ItType = new TypeClass(this&)

		ItAlign = 1 //TODO pointer size
		ItSize = 0
	}
	GetNewFieldType := virtual !(Str val) -> Type^
	{
		if newFieldCB != null
			return newFieldCB?(val)?->{Type^}
		return null
	}
	//TODOTODO
	//GetField := virtual !(Str val) -> FieldPath^
	//{
	//	for it : FieldsPath
	//	{
	//		if it.Field.Name == val
	//		{
	//			return it
	//		}
	//	}

	//	newFieldType := GetNewFieldType(val)

	//	if newFieldType == null
	//		return null

	//	newField := new FieldParam(val,newFieldType)
	//	Fields.Push(newField)

	//	fPath := new FieldPath(ItType,newField.Value)
	//	fPath.Field = newField
	//	fPath.Index = FieldsPath.Size()

	//	FieldsPath.Push(fPath)

	//	fieldAlign := newFieldType.GetAlign()
	//	ItAlign = max(ItAlign,fieldAlign)

	//	unalign := ItSize mod fieldAlign
	//	if unalign != 0
	//	{
	//		ItSize += fieldAlign - unalign
	//	}

	//	ItSize += newFieldType.GetSize() //todo variable size object?
	//	RecalculateSize()
	//	//printf("hm %i\n",ItSize)

	//	for it : fieldIterators
	//	{
	//		it.ItemCreated(FieldsPath.Size() - 1)
	//	}

	//	return fPath 
	//}

}

HVClassImpl := class extend HV_Class
{
	baseClass := BoxClass^

	AddField := virtual !(Str fieldName,HV_Object^ fieldType) -> void
	{
		if fieldType == null
			return void
		obj := fieldType->{Type^}
		baseClass.AddExtraField(fieldName,obj)
	}
	AddCallback_GetFieldFailed := virtual !(!(Str)&->HV_Object^ cb ) -> void
	{
		if baseClass is not hvr_Class
			return void
		cls := baseClass->{hvr_Class^}
		cls.newFieldCB = null
		cls.newFieldCB = cb?.Capture()
	}
	GetType := virtual !() -> HV_Object^ 
	{
		return baseClass.ItType
	}
	AddMethod := virtual !(Str funcName,HV_Object^ fncObj) -> void
	{
		if fncObj == null
			return void
		if fncObj->{BoxUnit^} is not in BoxFuncTemplate
			return void
		tmpl := fncObj->{BoxFuncTemplateBody^} //TODO, check if body
		tmpl.ParentScope = baseClass
		baseClass.DefaultSpace.MethodTemplates[funcName].Push(fncObj->{BoxFuncTemplate^})
	}
	AddMethodStr := virtual !(Str funcName,Str fncText) -> void
	{
		oldScope := CurrentScope
		defer CurrentScope = oldScope
		CurrentScope = baseClass

		fnc := StrToFunctionTemplate(fncText)
		if fnc == null
			return void
		baseClass.DefaultSpace.MethodTemplates[funcName].Push(fnc)
	}
	HaveVirtualTable := virtual !() -> bool
	{
		return baseClass.VTable.Size() != 0
	}
	GetName := virtual !() -> Str
	{
		return baseClass?.Name
		return "Invalid class"
	}
}
