AppendClass BuiltInIntEqAndOper
{
	IsMCInlined := virtual true
	WriteFuncCallMC := virtual !(MCBuildContext^ ctx,BoxExeObj^[] indexes) -> WriteMCResult
	{
		var1 := indexes[0].WriteMC(ctx)
		var2 := indexes[1].WriteMC(ctx)
		switch llvm
		{
		case "add"
			ctx.lines.Push(MCLine("add",var1.CreatedId,var1.CreatedId,var2.CreatedId))
		case "sub"
			ctx.lines.Push(MCLine("sub",var1.CreatedId,var1.CreatedId,var2.CreatedId))
		case "mul"
			ctx.lines.Push(MCLine("mul",var1.CreatedId,var1.CreatedId,var2.CreatedId))
		case void
			assert(false) //TODO float
		}
	}
}
AppendClass BuiltInIntBase
{
	IsMCInlined := virtual true
	WriteFuncCallMC := virtual !(MCBuildContext^ ctx,BoxExeObj^[] indexes) -> WriteMCResult
	{
		var1 := indexes[0].WriteMC(ctx)
		var2 := indexes[1].WriteMC(ctx)

		resInd := ctx.CreateVar(GetType()->{TypeFunc^}.ResultType)
		result.CreatedId = resInd

		switch llvm
		{
		case "icmp eq"
			ctx.lines.Push(MCLine("cmp",resInd,"==",var1.CreatedId,var2.CreatedId))
		case "icmp ne"
			ctx.lines.Push(MCLine("cmp",resInd,"!=",var1.CreatedId,var2.CreatedId))
		case "icmp slt"
			ctx.lines.Push(MCLine("cmp",resInd,"<",var1.CreatedId,var2.CreatedId))
		case "icmp sle"
			ctx.lines.Push(MCLine("cmp",resInd,"<=",var1.CreatedId,var2.CreatedId))
		case "icmp sge"
			ctx.lines.Push(MCLine("cmp",resInd,">=",var1.CreatedId,var2.CreatedId))
		case "icmp sgt"
			ctx.lines.Push(MCLine("cmp",resInd,">",var1.CreatedId,var2.CreatedId))
		case "add"
			HVB_ins_add(ctx,resInd,var1.CreatedId,var2.CreatedId)
		case "sub"
			HVB_ins_sub(ctx,resInd,var1.CreatedId,var2.CreatedId)
		case "mul"
			HVB_ins_mul(ctx,resInd,var1.CreatedId,var2.CreatedId)
		case "sdiv"
			HVB_ins_div(ctx,resInd,var1.CreatedId,var2.CreatedId)
		case "srem"
			HVB_ins_mod(ctx,resInd,var1.CreatedId,var2.CreatedId)
		case void
			assert(false) //TODO float, other cmp
		}
	}
}
AppendClass BuiltInPrimeStore
{
	IsMCInlined := virtual true
	WriteFuncCallMC := virtual !(MCBuildContext^ ctx,BoxExeObj^[] indexes) -> WriteMCResult
	{
		var1 := indexes[0].WriteMC(ctx)
		var2 := indexes[1].WriteMC(ctx)
		HVB_ins_move(ctx,var1.CreatedId,var2.CreatedId)
	}
}
