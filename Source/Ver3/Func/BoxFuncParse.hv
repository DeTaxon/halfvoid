
ParseFuncDataR := !(Object^ item) -> Object^
{
	iter := item.Down

	if iter == null return null

	IsStatic := false
	IsVirtual := false


	RetT := Object^
	RetT = null
	RetRef := false
	itsSelfRet := false

	constsI := null->{Object^}

	itLine := item.Line

	stopSearch := false
	while true
	{
		switch iter.GetValue()
		{
			case "virtual" IsVirtual = true
			case "static" IsStatic = true
			case void stopSearch = true
		}
		if stopSearch
			break
		iter = iter.Right
	}


	if iter.GetValue() != "!" return null


	ClassPtr := GetUpClass(item)
	ClassType := Type^()
	if ClassPtr != null
	{
		ClassType = ClassPtr.ClassType
	}

	iter = iter.Right
	
	if iter.GetValue() != "()" return null

	SyntaxCompress(iter,LexHVInputVars)

	ParamsObj := iter
	iter = iter.Right

	if iter.GetValue() == "."
	{
		constsI = iter.Right
		iter = constsI.Right
	}

	if iter.GetValue() == "->"
	{
		iter = iter.Right
		if iter.GetValue() == "ref"
		{
			RetRef = true
			iter = iter.Right
		}
		RetT = iter
		iter = iter.Right
	}
	if iter.GetValue() == "self_return"
	{
		iter = iter.Right
		itsSelfRet = true
		if ClassType == null
			return null
	}


	iterForName := iter.Up
	isPoison := false
	FName := ""
	IsSuf := false

	while iterForName != null
	{
		if iterForName.GetValue() == "i:=1"
		{
			dynCa := iterForName->{ObjParam^}
			IsSuf = dynCa.IsStrName
			FName = dynCa.MyStr
			isPoison = dynCa.IsPoison

			IsVirtual = IsVirtual or dynCa.IsVirtual

			if FName == "![]" IsSuf = false
			if FName == "this" IsSuf = false
			if FName == "[]" IsSuf = false

			if IsOper(FName) IsSuf = false

			break
		}else	iterForName = iterForName.Up
	}
	if constsI != null	SyntaxCompress(constsI,PriorityData)
	if iter.GetValue() == "declare"
	{
		return new BoxFuncDeclare(ParamsObj,RetT,FName)
	}

	if isPoison
	{
		asCl := GetUpClass(iterForName)
		if asCl != null
		{
			asCl.ItPoisons[FName] = item.Clone() //TODO looking bad
		}
	}
	if iter.GetValue() == "{}"
	{
		if constsI?.Down == null or IsTemplate(ParamsObj)
		{
			preRes := new BoxTemplate(ParamsObj,RetT,constsI,RetRef,FName,iter,IsSuf,ClassType,IsVirtual,itsSelfRet,item)
			preRes.IsSelfReturn = itsSelfRet
			preRes.Line = itLine


			deferPart := BoxTemplate^
			if iter.Right != null //TODO: less hardcode, !() {} e () {} , not just that
			{
				assert(iter.Right.GetValue() == "defer_tail")

				deferName := "DeferTail "sbt + FName
				deferPart = new BoxTemplate(iter.Right.Right
					,new ObjIndent("void") // TODO: fix autoget return type
					,null,false,deferName.Str()
					,iter.Right.Right.Right,false
					,ClassType,false,false,item)

				preRes.deferTail = deferPart
			}
		

			return preRes
		}

		preRet := new BoxFuncBody(ParamsObj,RetT,constsI,RetRef,FName,iter,IsSuf,ClassType,IsVirtual,itsSelfRet,item,null)
		preRet.IsSelfReturn = itsSelfRet
		preRet.Line = itLine


		deferPart := BoxFuncBody^
		if iter.Right != null //TODO: less hardcode, !() {} e () {} , not just that
		{
			assert(iter.Right.GetValue() == "defer_tail")

			deferName := "DeferTail "sbt + FName
			deferPart = new BoxFuncBody(iter.Right.Right
				,new ObjIndent("void") // TODO: fix autoget return type
				,null,false,deferName.Str()
				,iter.Right.Right.Right,false
				,ClassType,false,false,item,preRet)
			deferPart.Line = itLine //TODO: not that line?

		}
		if deferPart != null
			deferPart.Up = preRet
		preRet.deferTail = deferPart

		return preRet
		
	}
	return null
}
