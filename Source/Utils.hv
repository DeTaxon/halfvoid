
ConstStringsSpans := AVLMap.{StringSpan,StringSpan}
ConstStrings := AVLMap.{char^,StringSpan}

GetConstStringSpan := !(StringSpan val) -> ref StringSpan
{
	return ConstStringsSpans[val]?

	stCpy := malloc(val.Size() + 1)->{char^}
	if val.Size() != 0
		memcpy(stCpy,val.NonNullStr(),val.Size())
	stCpy[val.Size()] = 0
	spn := StringSpan(stCpy->{char^},val.Size()) 
	res := ref ConstStringsSpans[spn]
	res = spn
	return res
}
GetConstString := !(char^ val) -> ref StringSpan
{
	return GetConstStringSpan(StringSpan(val))
}


PackedExeObj := class extend BoxExeObj
{
	preCalls := List.{BoxExeObj^}
	mainCall := BoxExeObj^	
	postCalls := List.{BoxExeObj^}

	GetType := virtual !() -> Type^
	{
		return mainCall.GetType()
	}
	IsMem := virtual !() -> bool
	{
		return mainCall.IsMem()
	}
	PrintDefaultUse := virtual !(LLVMWriteContext^ ctx) -> void
	{
		if IsMem()
		{
			PrintPointPre(ctx)
		}else{
			PrintPre(ctx)
		}
	}
	PrintPointPre := virtual !(LLVMWriteContext^ ctx) -> void
	{
		preCalls[^].PrintDefaultUse(ctx)
		mainCall.PrintPointPre(ctx)
		postCalls[^].PrintDefaultUse(ctx)
	}
	PrintPointUse := virtual !(LLVMWriteContext^ ctx) -> void
	{
		mainCall.PrintPointUse(ctx)
	}
	PrintPre := virtual !(LLVMWriteContext^ ctx) -> void
	{
		preCalls[^].PrintDefaultUse(ctx)
		mainCall.PrintPre(ctx)
		postCalls[^].PrintDefaultUse(ctx)
	}
	PrintUse := virtual !(LLVMWriteContext^ ctx) -> void
	{
		mainCall.PrintUse(ctx)
	}

}
BlankObjectExe := class extend BoxExeObj
{
	IsRefObj := bool
	this := !(Type^ tp,bool isRef) -> void
	{
		ObjType = tp
		IsRefObj = isRef
	}
	IsMem := virtual !() -> bool
	{
		return IsRefObj
	}
}

IsGCPtr := !(Type^ typ) -> bool
{
	if typ is TypeArrayView
		return true
	if typ is TypeStr
		return true
	if typ is in TypePoint and typ.IsComplexReturn()
		return true
	return false
}
IsGCClass := !(Type^ typ) -> bool
{
	if typ is in TypeClass and TypeFight(typ,GCType) == GCType
		return true
	return false
}

IsGCType := !(Type^ tp) -> bool
{
	return tp is in TypeClass and TypeFight(tp,GCType) == GCType
}

ComputeBracketsHash := !(Blob^ fileData,Token^ startLine, Token^ brackets) -> u32
{
	if startLine == null
		startLine = brackets

	if fileData.Size() == 0
		return 0
	if brackets == null
		return 0
	if brackets is not TokenSkobSymbol
		return 0
	asSkob := brackets->{TokenSkobSymbol^}

	if asSkob.EndLine == null or startLine.Line == null
		return 0

	startLine := startLine.Line.Line
	endLine := asSkob.EndLine.Line

	arr := fileData.GetPointer()
	startLineIndex := 0
	i := 0
	curLine := 1
	blbSize := fileData.Size()
	while i < blbSize and curLine != startLine
	{
		if arr[i] == '\n'
			curLine += 1
		i += 1
	}
	startLineIndex = i
	while i < blbSize and curLine != endLine
	{
		if arr[i] == '\n'
			curLine += 1
		i += 1
	}
	while i < blbSize and arr[i] != '\n'
	{
		i += 1
	}
	if i < blbSize
		i += 1
	funcCode := StringSpan(arr[startLineIndex]&,i - startLineIndex)

	crc := Crc32()
	crc.Feed(funcCode.NonNullStr(),funcCode.Size())
	return crc.Get()
}



stackHolder := class extend TGCObject
{
	stackAtStart := int
	Destroy := virtual !() -> void
	{
		while UnitStack.Size() > stackAtStart
		{
			UnitStack.Pop()
		}
	}
}

StackCheckpoint := !() -> stackHolder
{
	result.stackAtStart = UnitStack.Size()
}

ToLocalVar := !(BoxExeObj^ itm) -> LocalVar^
{
	return ToLocalVar(itm,StringSpan(""))
}
ToLocalVar := !(BoxExeObj^ itm,StringSpan varName) -> LocalVar^
{
	valueType := itm.GetType()
	if itm.IsMem()
	{
		objRes := new LocalVar(varName,valueType,true,true)

		objs := ![objRes.proxy&,new UnrefFuncCall(itm)]

		setFunc := GPointStoreTemplate.GetFunc(objs,![])
		setCall := setFunc.CreateCall(objs)
		assert(setCall != null)
		objRes.extraWork.Push(setCall)
		assert(CurrentFunc != null)
		CurrentFunc.AddLocalVar(objRes)

		return objRes
	}else{
		mainVar := new LocalVar(varName,itm.GetType(),true,false)
		setVar := CreateFuncCall(StringSpan("="),![mainVar.proxy&,itm])
		assert(setVar != null)
		mainVar.extraWork.Push(setVar)
		CurrentFunc.AddLocalVar(mainVar)
		return mainVar
	}
}


ConstMapToList := !(AVLMap.{Str,BoxUnit^} cMap, List.{BoxUnit^} cList) -> void
{
	for it,ind : cMap
	{
		if it is in Type
		{
			cList.Push(new TypeVar(GetConstString(ind.AsStringSpan()),it->{Type^}))
		}else{
			cList.Push(new ConstVar(GetConstString(ind.AsStringSpan()),it->{BoxExeConstObj^}))
		}
	}
}


StrToFunctionTemplate := !(Str funcText) -> BoxFuncTemplate^
{
	tokens := GetObjectsFromMemory(GetAnyFile(),funcText.Str(),funcText.Size())

	resultTokens := new Token

	resultTokens.Down = tokens
	itr := tokens
	while itr != null
	{
		itr.Up = resultTokens
		itr = itr.Right
	}

	SyntaxCompress(resultTokens,LexHVFileRoot)
	c := PFunctionParser(resultTokens.Down)
	if not c.IsFound()
		return null

	return c.CreateObject()->{BoxFuncTemplate^}
}
