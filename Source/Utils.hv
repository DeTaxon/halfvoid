
ConstStringsSpans := AVLMap.{StringSpan,StringSpan}
ConstStrings := AVLMap.{char^,StringSpan}

GetConstStringSpan := !(StringSpan val) -> ref StringSpan
{
	return ConstStringsSpans[val]?

	stCpy := malloc(val.Size() + 1)->{char^}
	if val.Size() != 0
		memcpy(stCpy,val.NonNullStr(),val.Size())
	stCpy[val.Size()] = 0
	spn := StringSpan(stCpy->{char^},val.Size()) 
	res := ref ConstStringsSpans[spn]
	res = spn
	return res
}
GetConstString := !(char^ val) -> ref StringSpan
{
	return GetConstStringSpan(StringSpan(val))
}


PackedExeObj := class extend BoxExeObj
{
	preCalls := List.{BoxExeObj^}
	mainCall := BoxExeObj^	
	postCalls := List.{BoxExeObj^}

	GetType := virtual !() -> Type^
	{
		return mainCall.GetType()
	}
	IsMem := virtual !() -> bool
	{
		return mainCall.IsMem()
	}
	PrintDefaultUse := virtual !(LLVMWriteContext^ ctx) -> void
	{
		if IsMem()
		{
			PrintPointPre(ctx)
		}else{
			PrintPre(ctx)
		}
	}
	PrintPointPre := virtual !(LLVMWriteContext^ ctx) -> void
	{
		preCalls[^].PrintDefaultUse(ctx)
		mainCall.PrintPointPre(ctx)
		postCalls[^].PrintDefaultUse(ctx)
	}
	PrintPointUse := virtual !(LLVMWriteContext^ ctx) -> void
	{
		mainCall.PrintPointUse(ctx)
	}
	PrintPre := virtual !(LLVMWriteContext^ ctx) -> void
	{
		preCalls[^].PrintDefaultUse(ctx)
		mainCall.PrintPre(ctx)
		postCalls[^].PrintDefaultUse(ctx)
	}
	PrintUse := virtual !(LLVMWriteContext^ ctx) -> void
	{
		mainCall.PrintUse(ctx)
	}

}
BlankObjectExe := class extend BoxExeObj
{
	IsRefObj := bool
	this := !(Type^ tp,bool isRef) -> void
	{
		ObjType = tp
		IsRefObj = isRef
	}
	IsMem := virtual !() -> bool
	{
		return IsRefObj
	}
}

IsGCPtr := !(Type^ typ) -> bool
{
	if typ is TypeArrayView
		return true
	if typ is in TypePoint and typ.IsComplexReturn()
		return true
	return false
}
IsGCClass := !(Type^ typ) -> bool
{
	if typ is in TypeClass and TypeFight(typ,GCType) == GCType
		return true
	return false
}

IsGCType := !(Type^ tp) -> bool
{
	return tp is in TypeClass and TypeFight(tp,GCType) == GCType
}



stackHolder := class extend TGCObject
{
	stackAtStart := int
	Destroy := virtual !() -> void
	{
		while UnitStack.Size() > stackAtStart
		{
			UnitStack.Pop()
		}
	}
}

StackCheckpoint := !() -> stackHolder
{
	result.stackAtStart = UnitStack.Size()
}
