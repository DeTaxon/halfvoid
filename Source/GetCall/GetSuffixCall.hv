TryGetSuffixCall := !(Token^ itm) -> BoxExeObj^
{
	if itm.Down?.Right? is TokenSuffix
	{
	}else{
		return null
	}

	downVal := TryGetExeCall(itm.Down)
	if downVal == null
		return null

	suffixName := itm.Down.Right->{TokenSuffix^}.Value

	if suffixName == "reg" and downVal is BoxExeString and not DisableScary//todo make it possible to create Blobs in library
	{
		
		regBlob := BoxRawData^
		regBlobSize := int


		stName := downVal->{BoxExeString^}.Value

		if not RegexpBlobs.Contain(stName)
		{
			regBlob = CacheBlobByStringReg(stName, x ==> Blob^ {
				lx := LexBuilder
				lx.ApplyReg(stName.Str())
				machine :=  lx.GenerateMachine()
				return machine.CreateBlobRegexp()
			})
			
			blobDatas.Push(regBlob)
			RegexpBlobs[stName] = !{regBlob,regBlobSize}
		}else{
			regBlob = RegexpBlobs[stName].0
			regBlobSize = RegexpBlobs[stName].1
		}


		objs := CheckExeDownList
		objs.Push(regBlob)
		objs.Push(GetExeInt(regBlobSize))
		cnsts := List.{BoxExeConstObj^}
		res := CreateFuncCall(StringSpan("internalRegexpRetrive"),objs,cnsts)
		assert(res != null)
		return res
	}

	stt := TEchoStream
	stt << "suffix " << suffixName

	st := GetConstString(stt.GetStr())
	objs := CheckExeDownList
	objs.Push(downVal)
	resFunc := CreateFuncCall(st,objs)
	if resFunc == null
	{
		CurrentWork?.SetErrorMessage(itm.MakeError("suffix call not found"))
		return null
	}
	return resFunc
}

RegexpBlobs := AVLMap.{String^,Tuple.{BoxRawData^,int}}
