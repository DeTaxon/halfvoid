
TryCheckMethodCall := !(Token^ itm) -> BoxExeObj^
{
	if itm == null return null

	iter := itm.Down
	if iter == null return null

	iter = iter.Right
	if iter == null or iter.GetValue() != "." return null

	iter = iter.Right
	if iter == null return null

	iter = iter.Right

	if iter == null or iter.GetValue() != "()" return null
	iter = iter.Right

	consts := List.{BoxExeConstObj^}
	constsToken := Token^
	if iter?.GetValue() == "." and iter.Right?.GetValue() == "{}"
	{
		constsToken = iter.Right
		iter = iter.Right.Right
	}
	if iter != null return null

	vr := TryGetExeCall(itm.Down)

	if vr == null return null

	Objs := CheckExeDownList
	CheckFuncCallBrackets(itm.Down.Right.Right.Right,Objs)

	if constsToken != null
	{
		SyntaxCompress(constsToken,LexHVInputVars)
		CheckFuncCallConsts(constsToken,consts)
	}

	gotName := false
	methodName := StringSpan

	if itm.Down.Right.Right is TokenIndent
	{
		gotName = true
		methodName = itm.Down.Right.Right->{TokenIndent^}.Value
	}else if itm.Down.Right.Right is TokenString
	{
		gotName = true
		methodName = itm.Down.Right.Right->{TokenString^}.Value
	}

	if gotName
	{
		fnc := innerTryGetMethodCall(methodName,vr,Objs,consts)
		if fnc != null
			return fnc
	}

	if itm.Down.Right.Right is TokenIndent
	{
		nm := itm.Down.Right.Right->{TokenIndent^}
		objs2 := CheckExeDownList
		objs2.Push(vr)
		objs2.Push(Objs[^])

		newFnc := CreateFuncCall(nm.Value,objs2,consts)
		return newFnc?
	}
	
	ptrCall := innerTryGetFieldCall(vr,itm.Down.Right.Right)
	if ptrCall != null
	{
		return innerTryGetPtrCall(ptrCall,Objs)?
	}

	itm.EmitError("Method not found")
	assert(false)
}

innerTryGetMethodCall := !(StringSpan name,BoxExeObj^ vr, CheckExeDownList sObjs,List.{BoxExeConstObj^} consts) -> BoxExeObj^
{

	vrObj := vr
	space := FieldSpace^
	if vr is FieldSpaceHolder
	{
		hldr := vr->{FieldSpaceHolder^}
		vrObj = hldr.GetObject()
		space = hldr.GetFieldSpace()
	}

	Objs := CheckExeDownList
	Objs.Push(vrObj)
	Objs.Push(sObjs[^])

	clsType := vrObj.GetType()

	if clsType is  TypeArrayView
	{
		clsType = clsType->{TypeArrayView^}.viewClassType
		Objs[0] = new PtrExchange(vrObj,clsType.GetPoint()) //TODO mem use?
	}

	if clsType is in TypePoint
	{
		clsType = clsType.Base
	}
	
	if clsType is TypeClass
	{
		cls := clsType->{TypeClass^}.ToClass //todo GetClass
		callItem := BoxUnit^
		if space != null
		{
			cls.GetMethodsInFields(name,space, x ==> {
				callItem = GetBestFunc(x,Objs,consts)
			})
		}else{
			cls.GetMethods(name, x ==> {
				callItem = GetBestFunc(x,Objs,consts)
			})
		}
		if callItem != null
		{
			if callItem is in BoxFunc
			{
				return callItem->{BoxFunc^}.CreateCall(Objs)
			}
			if callItem is in BoxFuncTemplate
			{
				return callItem->{BoxFuncTemplate^}.CreateFuncCall(Objs,consts)
			}
			assert(false)
		}
		return null
	}
}

