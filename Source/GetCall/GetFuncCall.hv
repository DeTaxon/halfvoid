
TryCheckRegularFuncCall := !(Token^ itm) -> BoxExeObj^
{
	if itm == null or itm.Down == null or itm.Down.Right == null
		return null
	if itm.Down?.Right.GetValue() != "()"
		return null
	brc := itm.Down.Right
	constsToken := brc.Right
	if constsToken != null
	{
		if constsToken.GetValue() != "."
			return null
		constsToken = constsToken.Right
		if constsToken == null or constsToken.GetValue() != "{}"
			return null
		if constsToken.Right != null
			return null
	}

	if itm.Down is TokenIndent and itm.Down->{TokenIndent^}.Value[0] == '#'
	{
		return TryGetCommand(itm)
	}


	Objs := CheckExeDownList
	defer Objs.Destroy()
	CheckFuncCallBrackets(brc,Objs)

	consts := List.{BoxExeConstObj^}
	if constsToken != null
	{
		SyntaxCompress(constsToken,LexHVInputVars)
		CheckFuncCallConsts(constsToken,consts)
	}


	cnstrCall := ParseType(itm.Down)
	if cnstrCall != null
	{
		c := CreateVar(cnstrCall,false)
		cCall := c.CreateCall()

		constrObj := innerTryGetMethodCall(StringSpan("this"),cCall,Objs,consts)
		if constrObj != null
			return new ConstructorCallWrapper(c,constrObj)

		objs22 := CheckExeDownList
		objs22.Push(cCall)
		objs22.Push(Objs[^])
		check2 := CreateFuncCall(StringSpan(". this"),objs22)
		if check2 != null
			return new ConstructorCallWrapper(c,check2)
		itm.EmitError("Constructor not found")
	}
	
	if itm.Down is TokenIndent
	{
		asInd := itm.Down->{TokenIndent^}

		if asInd.Value == "super"
		{
			itClass := CurrentFunc.GetBaseClass()
			if itClass == null
				itm.EmitError("super must be called in method")

			if itClass.Parents.Size() == 0
				itm.EmitError("Class does not have parents")

			thisIndex := TokenIndent
			thisIndex.Value = StringSpan("this")

			newObjs := CheckExeDownList
			newObjs.Push(TryGetExeCall(thisIndex&)) //todo prevent if someone make "this := x" ?

			for it : Objs
				newObjs.Push(it)
	
			itClass.AwaitTypeState()

			itSpace := FieldSpace^

			for itList : itClass.DefaultSpace.Methods
			{
				for it : itList
				{
					if it == CurrentFunc
					{
						itSpace = itClass.DefaultSpace&
					}
				}
			}
			if itSpace == null
			{
				for itList : itClass.DefaultSpace.VirtualCleanMethods
				{
					for it : itList
					{
						it it == CurrentFunc
						{
							itSpace = itClass.DefaultSpace&
							break
						}
					}
				}
			}
			if itSpace == null
			{
				for spc : itClass.FieldSpaces
				{
					for itList : spc.Methods
					{
						for it : itList
						{
							it it == CurrentFunc
							{
								itSpace = spc&
								break
							}
						}
						if itSpace != null
							break
					}
					if itSpace != null
						break
				}
			}
			assert(itSpace != null)

			itSpace = itSpace.baseSpace

			if itSpace == null
				itm.EmitError("super function can not be called")

			fncs := HybridQueue.{BoxUnit^,10}		
			while true
			{
				itSpace.itClass.AwaitTypeState()

				if itSpace.Methods.Contain(CurrentFunc.Name)
				{
					for it : itSpace.Methods[CurrentFunc.Name]
					{
						fncs.Push(it)
					}
				}
				if itSpace.VirtualCleanMethods.Contain(CurrentFunc.Name)
				{
					for it : itSpace.VirtualCleanMethods[CurrentFunc.Name]
					{
						fncs.Push(it)
					}
				}
				resFunc := GetBestFunc(fncs,newObjs,consts,false)
				if resFunc != null and resFunc is in BoxFunc
					return resFunc->{BoxFunc^}.CreateCall(newObjs)

				if itSpace.baseSpace == null
					itm.EmitError("super function not found")
				itSpace = itSpace.baseSpace
			}

		}

		for ob : UnitStack
		{
			if ob is ClassUnroll
			{
				unroll := ob->{ClassUnroll^}
				cls := unroll.BaseClass

				extraObjs := CheckExeDownList
				dummyThis := DummyThis(cls.ItType)

				extraObjs.Push(dummyThis&)
				extraObjs.Push(Objs[^])

				callItem := BoxUnit^
				cls.GetMethods(asInd.Value,fncs ==> {
					callItem = GetBestFunc(fncs,extraObjs,consts,false)
				})
				if callItem != null
				{
					tkn1 := TokenIndent(StringSpan("this")) //TODO
					tkn1.Line = itm.Line
					vr := TryGetExeCall(tkn1&)

					extraObjs[0] = vr

					return makeFuncCall(callItem,extraObjs,consts)
				}
			}

			if ob is in BoxFuncBody and asInd.Value != "this"
			{
				fnc := ob->{BoxFuncBody^}
				if fnc.Attrs.IsMethod
				{
					baseType := fnc.Params[0].GetVarType()
					assert(baseType is TypeClass)
					cls := baseType->{TypeClass^}.ToClass


					extraObjs := CheckExeDownList
					dummyThis := DummyThis(baseType)

					extraObjs.Push(dummyThis&)
					extraObjs.Push(Objs[^])

					callItem := BoxUnit^
					cls.GetMethods(asInd.Value,fncs ==> {
						callItem = GetBestFunc(fncs,extraObjs,consts,false)
					})
					if callItem != null
					{
						tkn1 := TokenIndent(StringSpan("this"))
						tkn1.Line = itm.Line
						vr := TryGetExeCall(tkn1&)

						extraObjs[0] = vr

						if callItem is in BoxFuncTemplate //TODO: i nedd some function for callItem to Use transformation
						{
							return callItem->{BoxFuncTemplate^}.CreateFuncCall(extraObjs,consts)
						} else if callItem is in BoxFunc
						{
							return callItem->{BoxFunc^}.CreateCall(extraObjs)
						}else{
							assert(false)
						}

					}
				}
			}
		}

		resFunc := BoxExeObj^
		resFunc = CreateFuncCall(asInd.Value,Objs,consts)
		if resFunc != null
			return resFunc
	}
	dwnItem := TryGetExeCall(itm.Down)
	if dwnItem != null
	{
		if dwnItem is in BoxFunc
		{
			fnc := dwnItem->{BoxFunc^}
			if fnc.GetType()->{TypeFunc^}.Params.Size() == 0 and Objs.Size() == 0
				return fnc.CreateCall(Objs)
		}
		return innerTryGetPtrCall(dwnItem,Objs)?
		return innerTryGetSkobCall(dwnItem,Objs,consts)?
	}
	itm.Print(0)
	itm.EmitError("Can not parse function call")
	assert(false)
}

innerTryGetPtrCall := !(BoxExeObj^ dwnItem, CheckExeDownList Objs) -> BoxExeObj^
{
	dType := dwnItem.GetType()
	if dType is in TypePoint and dType.Base is TypeFunc
	{
		fType := dType.Base->{TypeFunc^}
		if CmpFuncPriority(fType,Objs,0) != CmpNoExchange
		{
			return new BoxFuncPointerCall(dwnItem,Objs)
		}
	}
	return null
}
innerTryGetSkobCall := !(BoxExeObj^ dwnItem, CheckExeDownList Objs,List.{BoxExeConstObj^} consts) -> BoxExeObj^
{
	dType := dwnItem.GetType()
	cls := BoxClass^
	if dType is TypeClass
	{
		cls = dType->{TypeClass^}.ToClass
	}else{
		if dType is in TypePoint and dType.Base is TypeClass
		{
			cls = dType.Base->{TypeClass^}.ToClass
		}
	}
	if cls != null
	{
		Objs2 := CheckExeDownList
		Objs2.Push(dwnItem)
		Objs2.Push(Objs[^])
		resFunc := BoxFunc^
		cls.GetMethods(StringSpan("()"), x ==> {
			resFunc = GetBestFunc(x,Objs2,consts)->{BoxFunc^}
		})
		if resFunc != null
		{
			assert(resFunc is in BoxFunc) //TODO: template
			return resFunc.CreateCall(Objs2)
		}
	}
	return null
}

ConstructorCallWrapper := class extend BoxExeObj
{
	itVar := ParamFunc^
	itCall := BoxExeObj^
	varCall := BoxExeObj^
	ExtraWork := List.{BoxExeObj^}
	extraId := int
	this := !(ParamFunc^ vr, BoxExeObj^ bj) -> void
	{
		extraId = GetNewId()
		itVar = vr
		itCall = bj
		varCall = vr.CreateCall()
		ObjType = vr.GetVarType()

		if ObjType is TypeClass
		{
			ModifyStackAllocatedVar(vr,ExtraWork)
		}
	}
	IsMem := virtual !() -> bool
	{
		return true
	}

	PrintPointPre := virtual !(Stream^ f) -> void
	{
		itCall.PrintDefaultUse(f)
		varCall.PrintPointPre(f)
		ExtraWork[^].PrintDefaultUse(f)
	}
	PrintPointUse := virtual !(Stream^ f) -> void
	{
		varCall.PrintPointUse(f)
	}
	PrintPre := virtual !(Stream^ f) -> void
	{
		assert(not (ObjType is in TypeClass))
		PrintUnrefObj(f,extraId,this&)
	}
	PrintUse := virtual !(Stream^ f) -> void
	{
		assert(not (ObjType is in TypeClass))
		f^ << "%TUnref" << extraId
	}
}
