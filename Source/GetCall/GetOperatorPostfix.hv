TryGetPostfixOperator := !(Token^ itm) -> BoxExeObj^
{
	if itm == null return null
	if itm.Down == null return null
	if itm.Down.Right == null return null
	if itm.Down.Right.Right != null return null

	oper := itm.Down.Right.GetValue()

	if oper == "?"
	{
		dwn := itm.Down
		if dwn.Down?.Right?.GetValue() == "[]" and dwn.Down.Right.Right == null
		{
			cl := TryGetExeCall(dwn.Down)
			assert(cl != null)

			objs := CheckExeDownList
			objs.Push(cl)
			CheckFuncCallBrackets(dwn.Down.Right,objs)

			cnsts := List.{BoxExeConstObj^}

			cl2 := CreateFuncCallOperator(StringSpan("[]?"),objs,cnsts)
			if cl2 == null
			{
				cl2 = CreateFuncCallOperator(StringSpan("[]"),objs,cnsts)
				if cl2 == null
				{
					dwn.EmitError("Could not create function call []? or []\n")
				}
			}
			if cl2.IsMem()
			{
				cl2 = new UnrefFuncCall(cl2)
				cl2 = new BoxQuestionPointer(cl2)
				cl2 = new PtrToRefFuncCall(cl2)
			}
			if cl2.GetType() is in TypePoint
			{
				cl2 = new BoxQuestionPointer(cl2)
			}
			return cl2
		}

		cl := TryGetExeCall(itm.Down)
		assert(cl != null)

		if not (cl.GetType() is in TypePoint)
		{
			itm.Down.Right.EmitError("Left of ? operator must be pointer")
		}

		return new BoxQuestionPointer(cl)
	}
	if oper == "[]"
	{
		Objs := CheckExeDownList
		
		dObj := TryGetExeCall(itm.Down)
		if dObj? is BoxArrayHolder
		{
			dObj = dObj->{BoxArrayHolder^}.CreateDefaultUse()
		}
		if dObj == null
			return null
		Objs.Push(dObj)
		SyntaxCompress(itm.Down.Right,PriorityData)
		CheckFuncCallBrackets(itm.Down.Right,Objs)

		cnsts := List.{BoxExeConstObj^}
		return CreateFuncCallOperator(StringSpan("[]"),Objs,cnsts)

	}
	if oper == "--" or oper == "++"
	{
		Objs2 := CheckExeDownList
		dObj := TryGetExeCall(itm.Down)
		if dObj == null
			return null
		Objs2.Push(dObj)

		return CreateFuncCall(oper,Objs2)
	}
	return null
}
