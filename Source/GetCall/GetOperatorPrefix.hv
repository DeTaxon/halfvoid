TryGetPrefixOperator := !(Token^ itm) -> BoxExeObj^
{
	if itm.Down == null
		return null

	if itm.Down.GetValue() == "return" or itm.Down.GetValue() == "yield"
	{
		isYield := false
		if itm.Down.GetValue() == "yield"
			isYield = true

		resultCalls := new List.{BoxExeObj^}

		preRes := ReturnHalfState^

		if itm.Down.Right is TokenIndent and itm.Down.Right->{TokenIndent^}.Value == "void" //TODO void AND multiple vars?
		{
			resultCalls = null
		}else{
			dwnRes := TryGetExeCall(itm.Down.Right)
			if dwnRes == null
			{
				CurrentWork?.SetErrorMessage(itm.Down.Right.MakeError("could not get result to return"))
				return null
			}
			resultCalls.Push(dwnRes)
		}
		iter := itm.Down.Right.Right

		while iter?.GetValue() == ","
		{
			iter = iter.Right

			dwnRes := TryGetExeCall(iter)
			if dwnRes == null
			{
				MakeErrorMsg(iter,"could not get result to return")
				return null
			}
			resultCalls.Push(dwnRes)

			iter = iter.Right
		}
		preRes = new ReturnHalfState(itm.Down.Right,resultCalls,isYield)


		if CurrentReturns.IsAutoResult
		{
			CurrentReturns.Returns.Push(preRes)
			return preRes
		}

		preRes.ResolveStep()
		return preRes.GetReturnObj()
	}
	if itm.Down.GetValue() == "defer"
	{
		deferedCall := TryGetExeCall(itm.Down.Right)
		return new BoxDefer(deferedCall)

		//lmbdPre := CreateHeadlessLambda(itm.Down.Right)->{BoxLambdaHolder^}
		//assert(lmbdPre is BoxLambdaHolder)
		////assert(lmbdPre.IsOneFunc())
		//lmbd := lmbdPre.CreateOneFuncLambda()
		//assert(lmbdPre.cleanType != null)

		//assert(lmbdPre.cleanType is in TypeClass)
		//
		//arr := List.{BoxExeConstObj^}
		//arr.Push(lmbdPre.cleanType)
		//newType := GCDeferLambda.GetClass(arr).ItType
		//return innerTrySetType(lmbd,newType)
	}

	if itm.Down is TokenSymbol
	{
		bigName := TEchoStream
		bigName << ". " << itm.Down.GetValue()
		bigNameSpan := GetConstString(bigName.GetStr())
		if itm.Down.Right == null
			return null
		if itm.Down.Right.Right != null
			return null
		dObj := TryGetExeCall(itm.Down.Right)
		if dObj == null
			return null

		objs5 := CheckExeDownList
		objs5.Push(dObj)
		return CreateFuncCall(bigNameSpan,objs5)
	}
	if itm.Down.GetValue() == "()" and itm.Down.Right == null
	{
		SyntaxCompress(itm.Down,PriorityData)
		return TryGetExeCall(itm.Down.Down)
	}
	return null
}

TryGetBracketsCall := !(Token^ itm) -> BoxExeObj^
{
	if itm.Down?.GetValue() == "()" and itm.Down.Right == null
	{
		SyntaxCompress(itm.Down,PriorityData)
		return TryGetExeCall(itm.Down.Down)
	}
	return null
}
