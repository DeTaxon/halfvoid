TryGetNewDeleteOperator := !(Token^ itm) -> BoxExeObj^
{
	if itm.Down == null
		return null

	if itm.Down.GetValue() == "new"
	{
		tp := ParseType(itm.Down.Right)
		if tp == null
		{
			CurrentWork?.SetErrorMessage(itm.MakeError("Unknown type"))
			return null
		}
		cnsts := List.{BoxExeConstObj^}
		cnsts.Push(tp)
		objs := CheckExeDownList
		fnc := TemplateInternalNewOne.GetFunc(objs,cnsts)
		assert(fnc != null)
		resCall := fnc.CreateCall(objs)

		if itm.Down.Right.Right?.GetValue() == "()"
		{
			objs.Push(resCall)
			iObjs := FuncInputObjects
			if not CheckFuncCallBrackets(itm.Down.Right.Right,iObjs&)
				return null

			objs.Push(iObjs.Objs[^])

			if tp is TypeClass
			{
				cls := tp->{TypeClass^}.ToClass
				callFunc := BoxUnit^
				zeroConsts := List.{BoxExeConstObj^}
				cls.GetMethods("this",x ==> {
					callFunc = GetBestFunc(x,objs,zeroConsts)
				})
				if callFunc == null
				{
					CurrentWork?.SetErrorMessage(itm.MakeError("Constructor not found"))
					return null
				}
				assert(callFunc is in BoxFunc)

				resVar := ToLocalVar(resCall)

				objs[0] = resVar.CreateVarCall()
				constrCall := callFunc->{BoxFunc^}.CreateCall(objs,iObjs&)
				resVar.extraWork.Push(constrCall)

				assert(constrCall != null)

				resCall = new ConstructorCallWrapper(resVar,resVar.CreateVarCall())
			}else{
				assert(false)
			}
		}
		return resCall
	}
	if itm.Down.GetValue() == "delete"
	{
		dwn := TryGetExeCall(itm.Down.Right)
		if dwn == null
			return null

		objs := CheckExeDownList
		objs.Push(dwn)
		cnsts := List.{BoxExeConstObj^}
		//fnc := TemplateInternalDelete.GetFunc(objs,cnsts)
		return FunctionInternalDelete.CreateCall(objs)
	}
}
