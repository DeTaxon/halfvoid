TryGetArrayCall := !(Token^ itm) -> BoxExeObj^
{
	if itm?.Down?.GetValue() == "!" and itm.Down.Right?.GetValue() == "[]"
	{
		//continue
	}else{
		return null
	}

	SyntaxCompress(itm.Down.Right,PriorityData)

	objs := CheckExeDownList
	allConsts := true
	allType := Type^

	itr := itm.Down.Right.Down
	while itr != null
	{
		if itr.GetValue() != ","
		{
			o := TryGetExeCall(itr)
			if o == null
				itr.EmitError("could not get array element\n")
			if not (o is in BoxExeConstObj)
				allConsts = false
			if allType == null
			{
				allType = o.GetType()
			}else{
				allType = TypeFight(allType,o.GetType())
				if allType == null
					itr.EmitError("all elements of array must be same type\n")
			}
			objs.Push(o)
		}
		itr = itr.Right
	}

	res := new BoxArrayHolder(allType,allConsts,itm)
	res.vals.Push(objs[^])
	return res

	cnsts := List.{BoxExeConstObj^}
	cnsts.Push(GetConstType(allType.GetArray(objs.Size())))
	resCall := CreateFuncCall(StringSpan("![]"),objs,cnsts)
	cnsts.Destroy()

	if resCall == null
		itm.EmitError("could not create array, function ![] not found")
	return resCall
}

BoxArrayConst := class extend BoxExeConstObj
{
	dwns := List.{BoxExeConstObj^} //todo Vector is better

	this := !(Type^ tp) -> void
	{
		ObjType = tp
	}
	PrintConst := virtual !(LLVMWriteContext^ ctx) -> void
	{
		elType := dwns[0].GetType()
		f := ctx.writeStream

		f^ << "["
		for it,i : dwns
		{
			if i != 0
				f^ << ","
			elType.PrintType(ctx)
			f^ << " "
			it.PrintConst(ctx)
		}
		f^ << "]"
	}

}

BoxArrayHolder := class extend BoxExeObj
{
	vals := CheckExeDownList
	defaultType := Type^
	isAllConsts := bool
	globalVar := GlobalVar2^
	debugToken := Token^

	this := !(Type^ elType,bool isC,Token^ debToken) -> void
	{
		ObjType = GTypeNone
		defaultType = elType
		isAllConsts = isC
		debugToken = debToken
	}
	GetDefaultType := !() -> Type^
	{
		return defaultType
	}
	GetArrayType := !() -> Type^
	{
		assert(defaultType != null)
		assert(vals.Size() != 0)
		return defaultType.GetArray(vals.Size())
	}
	IsConst := !() -> bool
	{
		return isAllConsts
	}
	GetArraySize := !() -> int
	{
		return vals.Size()
	}
	CreateViewArray := !(Type^ tp) -> BoxExeObj^
	{
		bs := GetViewBaseType(tp)

		if vals.Size() == 0
		{
			objs := CheckExeDownList
			cnsts := List.{BoxExeConstObj^}
			cnsts.Push(GetConstType(bs))
			resFunc := ArrayViewCreateEmptyArray.GetFunc(objs,cnsts)
			cnsts.Destroy()
			return resFunc.CreateCall()
		}
		if TypeFight(defaultType,bs) != bs
		{
			return null
		}
		return createUse(bs)
	}
	CreateDefaultUse := !() -> BoxExeObj^
	{
		return createUse(defaultType)
	}
	createUse := !(Type^ bs) -> BoxExeObj^
	{	
		if vals.Size() == 0
			return null
		if isAllConsts and bs == defaultType
		{
			if globalVar == null
			{
				globalVar = CreateGlobalVar(StringSpan("anon"),bs.GetArray(vals.Size()),false)
				globalVar.value = GetAsConst()
			}
			return globalVar.proxy&
		}

		cnsts := List.{BoxExeConstObj^}
		cnsts.Push(GetConstType(bs.GetArray(vals.Size())))
		resCall := CreateFuncCall(StringSpan("![]"),vals,cnsts)

		if resCall == null
			debugToken.EmitError("could not create array, function ![] not found")
		return resCall
	}
	GetAsConst := virtual !() -> BoxArrayConst^
	{
		if vals.Size() == 0
			return null

		arrType := GetArrayType()
		cnst := new BoxArrayConst(arrType)
		cnst.dwns.Push(vals[^]->{BoxExeConstObj^})
		return cnst
	}

}
IsViewType := !(Type^ tp) -> bool
{
	if not (tp is in TypePoint)
		return false
	if not (tp.Base is in TypeClass)
		return false
	cls := tp.Base->{TypeClass^}.ToClass

	InternalsHatch.Await()
	if cls.TemplateParent != ArrayViewTemplate
		return false
	return true
}

GetViewBaseType := !(Type^ tp) -> Type^
{
	if not (tp is in TypePoint)
		return null
	if not (tp.Base is in TypeClass)
		return null
	cls := tp.Base->{TypeClass^}.ToClass

	InternalsHatch.Await()
	if cls.TemplateParent != ArrayViewTemplate
		return null
	return cls.Constants?.Constants[0]->{ConstType^}.Value
	return null
}
