TryGetAndOrCall := !(Token^ itm) -> BoxExeObj^
{
	oper := itm.Down.Right.GetValue()

	qc := QCatch^
	stackSize := UnitStack.Size()

	if oper == "or"
	{
		qc = new QCatch
		UnitStack.PushFront(qc)
	}
	cl1 := TryGetExeCall(itm.Down)
	if cl1 == null
		return null

	while stackSize < UnitStack.Size()
		UnitStack.Pop()

	cl2 := TryGetExeCall(itm.Down.Right.Right)
	if cl2 == null
		return null

	if oper == "or"
		return new BoxOr(cl1,cl2,qc)
	return new BoxAnd(cl1,cl2)
}


BoxAndOr := class extend BoxExeObj
{
	LeftCall := BoxExeObj^
	RightCall := BoxExeObj^

	resId := int
	TruePath := BoxLabel^
	NextPath := BoxLabel^
	FalsePath := BoxLabel^
	EndLabel := BoxLabel^

	CommonInit := !(BoxExeObj^ cl1,BoxExeObj^ cl2) -> void
	{
		LeftCall = cl1
		RightCall = cl2

		ObjType = GTypeBool
		resId = GetNewId()

		TruePath = new BoxLabel()
		FalsePath = new BoxLabel()
		if NextPath == null
			NextPath = new BoxLabel()
		EndLabel = new BoxLabel()
	}

	IsMem := virtual !() -> bool { return false }

	PrintUse := virtual !(Stream^ f) -> void
	{
		f^ << "%T" << resId
	}
	PrintStep1 := virtual !(Stream^ f) -> void
	{
		LeftCall.PrintPre(f)

	}
	PrintStep3 := virtual !(Stream^ f) -> void
	{
		NextPath.PrintLabelCreate(f)
		RightCall.PrintPre(f)

		PrintBranch(f,RightCall,TruePath,FalsePath)

		TruePath.PrintLabelCreate(f)
		EndLabel.PrintGo(f)
		FalsePath.PrintLabelCreate(f)
		EndLabel.PrintGo(f)

		EndLabel.PrintLabelCreate(f)
		f^ << "%T" << resId << " = phi i1 [1,"
		TruePath.PrintLabel(f)
		f^ << "], [0,"
		FalsePath.PrintLabel(f)
		f^ << "]"
		if DebugMode 
			f^ << ", !dbg !" << GDebugLineCallId
		f^ << "\n"
	}
}
BoxAnd := class extend BoxAndOr
{
	this := !(BoxExeObj^ cl1,BoxExeObj^ cl2) -> void
	{
		CommonInit(cl1,cl2)
	}
	PrintPre := virtual !(Stream^ f) -> void
	{
		PrintStep1(f)
		PrintBranch(f,LeftCall,NextPath,FalsePath)
		PrintStep3(f)
	}
}
BoxOr := class extend BoxAndOr
{
	this := !(BoxExeObj^ cl1,BoxExeObj^ cl2,QCatch^ qc) -> void
	{
		if qc != null
			NextPath = qc.ItLabel
		CommonInit(cl1,cl2)
	}
	PrintPre := virtual !(Stream^ f) -> void
	{
		PrintStep1(f)
		PrintBranch(f,LeftCall,TruePath,NextPath)
		PrintStep3(f)
	}
}
PrintBranch := !(Stream^ f, BoxExeObj^ cmp, BoxLabel^ onTrue, BoxLabel^ onFalse) -> void
{
	f^ << "br i1 "
	cmp.PrintUse(f)
	f^ << ", label "
	onTrue.PrintLabel(f)
	f^ << ", label "
	onFalse.PrintLabel(f)
	if DebugMode
		f^ << ", !dbg !" << GDebugLineCallId
	f^ << "\n"
}
