TryGetDecoratorCall := !(Token^ itm) -> BoxExeObj^
{
	if itm.Down == null
	    return null
	if not (itm.Down is TokenTemplateType)
	    return null
	if itm.Down.Right == null
	    return null
	
	dn := itm.Down->{TokenTemplateType^}.Value

	{
		numCheck := dn[1..0]
		if numCheck.Size() != 0
		{
			isNum := true
			for i : numCheck.Size()
			{
				if numCheck[i] in '0'..'9'
				{

				}else{
					isNum = false
					break
				}
			}
			if isNum
			{
				return null
			}
		}
	}
	
	k := 0
	buff := char[256]
	memcpy(buff[0]&,dn.NonNullStr(),dn.Size())
	k = dn.Size()
	buff[k] = ' '
	k += 1
	memcpy(buff[k]&,"call",4)
	k += 4
	resCall := StringSpan(buff[0]&,k)
	resCall = GetConstString(resCall)
	
	lmbd := CreateHeadlessLambda(itm.Down.Right)
	assert(lmbd != null)
	assert(lmbd is BoxLambdaHolder)
	lmbd = lmbd->{BoxLambdaHolder^}.CreateOneFuncLambda()
	
	assert(lmbd != null)
	objs := CheckExeDownList
	objs.Push(lmbd)
	
	cnsts := List.{BoxExeConstObj^}
	return CreateFuncCall(resCall,objs,cnsts)
}
