FuncGCLocalParam := class extend ParamFunc
{
	pType := Type^
	varId := int
	gcIndex := int

	CreatedVarCalls := List.{ParamLoadObj^}

	this := !(Type^ tp,int gcInd) -> void
	{
		parentFunc = CurrentFunc
		gcIndex = gcInd
		pType = tp
		varId = GetNewId()
		SetType(GetFuncType(0,null,null,pType,true,false))
	}
	IsMem := virtual !() -> bool
	{
		return true
	}
	PrintCode := virtual !(LLVMWriteContext^ ctx) -> void
	{
	}
	PrintFuncCall := virtual !(LLVMWriteContext^ ctx,int resId,int debId,ExeDownList lst) -> void
	{
	}
	NotifyCaptureUse := virtual !() -> void
	{
		parentFunc.gcArrayPtr.NotifyCaptureUse()
	}

	populated := bool
	CreateCall := virtual !(CheckExeDownList objs) -> BoxExeObj^
	{
		assert(objs.Size() == 0)
		assert(not populated)

		res := new ParamLoadObj(this&)
		CreatedVarCalls.Push(res)
		return res 
	}

	PopulateCalls := virtual !() -> void
	{
		populated = true
		for it : CreatedVarCalls
		{
			getVar := parentFunc.gcArrayPtr.CreateCall()
			objs := CheckExeDownList
			objs.Push(getVar)
			objs.Push(GetExeInt(gcIndex))
			step1 := new UnrefFuncCall(CreateFuncCall(StringSpan("[]"),objs))
			assert(step1 != null)
			objs.Destroy()
			step2 := GetExchange2(step1,pType.GetPoint(),false)
			it.CallObj = new PtrToRefFuncCall(step2)
		}
	}
}
FuncGCLocalParamInYield := class extend FuncGCLocalParam
{
	PrintCode := virtual !(LLVMWriteContext^ ctx) -> void
	{
	}
}
