TryParseVar := !(Token^ obj) -> BoxUnit^
{
	if obj == null or obj.Down == null
		return null

	iter := obj.Down

	if iter.Right == null
		return null
	if iter.Right?.GetValue() != ":="
		return null

	name := StringSpan
	isSuffix := bool
	if iter is TokenIndent
	{
		name = iter->{TokenIndent^}.Value
	}else if iter is TokenString
	{
		name = StringSpan(iter->{TokenString^}.Value.Str())
		isSuffix = true
	}

	varToken := iter.Right.Right

	if varToken == null
		return null
	
	if varToken?.GetValue() == "thread_local" or varToken?.GetValue() == "task_local"
	{
		varToken.EmitError("task/thread local must be at the root of file")
	}

	if varToken?.GetValue() == "static"
	{
		buf := char[30]
		sprintf(buf[0]&,"hidden%i",GetNewId())
		newName := GetConstString(buf[0]&)

		vrTable := new GlobalVar2(newName,varToken.Right,false)
		GlobalVars2.Push(vrTable)
		CodeSpaces[-1].Globals[newName].Push(vrTable) //todo Optimize, codespace can have spetial place for unque names

		res := new GlobalNameAlias2 //TODO memory leak
		res.Name = name
		res.Value = vrTable
		return res
	}

	if varToken?.GetValue() == "field"
	{
		varToken = varToken.Right
		
		if CurrentScope is in BoxFuncBody
		{
			fnc := CurrentScope->{BoxFuncBody^}

			if not fnc.Attrs.IsMethod
				varToken.EmitError("Function must be a method")
			
			cls := BoxClass^

			if fnc.ParentScope is in BoxClass
			{
				cls := fnc.ParentScope->{BoxClass^}

				tp := ParseType(varToken)
				assert(tp != null)


				buf := char[30]
				sprintf(buf[0]&,"hidden%i",GetNewId())
				newName := GetConstString(buf[0]&)&

				cls.AddExtraField(newName^,tp)

				mv := new MacroVar(name,() ==> [newName] {
					top := TokenData
					ths := TokenIndent
					dot := TokenSymbol
					fieldName := TokenIndent

					top.Down = ths&
					ths.Right = dot&
					dot.Right = fieldName&

					ths.Value = StringSpan("this")
					dot.Value = StringSpan(".")
					fieldName.Value = newName^

					return TryGetExeCall(top&)
				})
				return mv
			}else{
				varToken.EmitError("Compiler error, could not get class")
			}
		}else{
			varToken.EmitError("Field variable must be inside method")
		}
	}

	
	makeLocalVar := (Type^ newType) ==> BoxUnit^
	{
		if newType == GTypeVoid
		{
			resVoid := new FuncLocalVoidParam()
			return new MemVar(name,resVoid)
		}else{
			assert(CurrentScope is in BoxFunc) 
			newVar := new LocalVar(name,newType,true,false)
			CurrentFunc.AddLocalVar(newVar)
			return newVar
		}
	}

	varType := ParseType(varToken)

	if varType != null
	{
		return makeLocalVar(varType)
	}
	
	refVar := bool
	if varToken.GetValue() == "ref"
	{
		refVar = true
		varToken = varToken.Right
	}
	exeObj := TryGetExeCall(varToken)
	if exeObj != null
	{
		if exeObj is ConstType
		{
			return makeLocalVar(exeObj->{ConstType^}.Value)
		}
		if CurrentScope is in BoxFunc
		{
			if exeObj is BoxArrayHolder
			{
				exeObj = exeObj->{BoxArrayHolder^}.CreateDefaultUse()
			}
			if exeObj is ConstructorCallWrapper
			{
				ObjAsCnstr := exeObj->{ConstructorCallWrapper^}
				return new AliasVar(name,ObjAsCnstr.itVar)
			}

			if exeObj is BoxLambdaHolder
			{
				hldr := exeObj->{BoxLambdaHolder^}
				if not hldr.IsOneFunc()
					varToken.EmitError("lambda function can not be template for variable") //todo better explanation
				exeObj = hldr.CreateOneFuncLambda()
			}

			vr := ParamFunc^
			mVar := MemVar^

			if exeObj is in BoxFuncCall
			{
				fc := exeObj->{BoxFuncCall^}
				if fc.ResultVar != null
				{
					fc.ResultVar.itName = name
					return new AliasVarOhNo(name,exeObj,fc.ResultVar) //TODO maybe i can just return fc.ResultVar
				}
				
			}
			if refVar and not exeObj.IsMem()
			{
				varToken.EmitError("can not make reference")
			}

			if vr == null
			{
				isGC := IsGCPtr(exeObj.GetType())

				if exeObj.GetType() == GTypeVoid
				{
					vr = new FuncLocalVoidParam()
					mVar = new MemVar(name,vr)
					mVar.Inits.Push(exeObj)
				}else{
					locVar := new LocalVar(name,exeObj.GetType(),true,refVar)
					objs2 := CheckExeDownList
					objs2.Push(locVar.proxy&)
					if refVar
					{
						objs2.Push(new UnrefFuncCall(exeObj))
					}else{
						objs2.Push(exeObj)
					}
					setCall := innerTryGetInfixCall(StringSpan("="),objs2,varToken)
					if setCall == null
						return null
					locVar.extraWork.Push(setCall)
					CurrentFunc.AddLocalVar(locVar)
					return locVar
				}
			}else{
				mVar = new MemVarBorrowed(name,vr)
				mVar.Inits.Push(exeObj)
			}
			return mVar
		}else{
			assert(false)
		}
	}
	
	return null
}

TypeVar := class extend BoxUnit
{
	Name := StringSpan
	Value := Type^

	this := !(StringSpan name, Type^ val) -> void
	{
		Name = name
		Value = val
	}
}
TemplateTypeVar := class extend BoxUnit
{
	Name := StringSpan
	Value := BoxClassTemplate^

	this := !(StringSpan name, BoxClassTemplate^ val) -> void
	{
		Name = name
		Value = val
	}
}
TypeVariadicVar := class extend BoxExeConstObj
{
	Name := StringSpan
	Values := Type^[]

	this := !(StringSpan name, Type^[] vals) -> void
	{
		Name = name
		Values = vals.ToVector()
		ObjType := GTypeNone
	}
}

ConstVar := class extend BoxUnit
{
	Name := StringSpan
	Value := BoxExeConstObj^

	this := !(StringSpan vName, BoxExeConstObj^ clFunc) -> void
	{
		Name = vName
		Value = clFunc
	}
}
NamedVar := class extend BoxUnit
{
	Name := StringSpan
}
GlobalNameAlias2 := class extend NamedVar
{
	Value := GlobalVar2^
}
MemVar := class extend NamedVar
{
	debId := int
	Value := ParamFunc^
	Inits := List.{BoxExeObj^}

	debugGetValue := BoxExeObj^

	this := !(StringSpan vName, ParamFunc^ clFunc) -> void
	{
		Name = vName
		Value = clFunc
		debId = GetNewId()
		assert(clFunc != null)
		if DebugMode
			debugGetValue = clFunc.CreateCall()
	}
	GetVarType := !() -> Type^
	{
		return Value.GetType()->{TypeFunc^}.ResultType
	}
	PrintCode := virtual !(LLVMWriteContext^ ctx) -> void
	{
		assert(Value != null)
		Value.PrintCode(ctx)
		pDebugCode(ctx)
		doInits(ctx)
	}
	NotifyCaptureUse := virtual !() -> void
	{
		assert(Value != null)
		Value.NotifyCaptureUse()
	}
	PrintDebugMeta := virtual !(LLVMWriteContext^ ctx) -> void
	{
		//Value.PrintDebugMeta(f)
		pDebugMeta(ctx)
	}
	pDebugCode := !(LLVMWriteContext^ ctx) -> void
	{
		f := ctx.writeStream
		if not (Value.IsDebuggable())
			return void
		if debugGetValue == null
			return void

		if Value.IsValue()
		{
			// not suppose to happen
			debugGetValue.PrintPre(ctx)
		}else{
			debugGetValue.PrintPointPre(ctx)
		}
		
		tp := Value.GetVarType()

		f^ << "call void @llvm.dbg."
		if Value.IsValue()
		{
			f^ << "value"
		}else{
			f^ << "declare"
		}
		f^ << "(metadata "
		inType := tp
		inType = NormalizeType(inType)
		inType.PrintType(ctx)
		if not Value.IsValue()
			f^ << "*"
		// if Value.IsRef()
		// 	f^ << "*"
		f^ << " " 
		if Value.IsValue()
		{
			debugGetValue.PrintUse(ctx)
		}else{
			debugGetValue.PrintPointUse(ctx)
		}
		f^ << " , metadata !" << debId << " , metadata !DIExpression()) , !dbg !" << GDebugLineCallId << "\n"
	}
	doInits := !(LLVMWriteContext^ ctx) -> void
	{
		Inits[^].PrintDefaultUse(ctx)
	}
	pDebugMeta := !(LLVMWriteContext^ ctx) -> void
	{
		f := ctx.writeStream

		if not DebugMode
			return void
		Inits[^].PrintDebugMeta(ctx)
	}
}
MemVarRef := class extend MemVar
{
	this := !(StringSpan vName, ParamFunc^ clFunc) -> void
	{
		Name = vName
		Value = clFunc
		debId = GetNewId()
	}

	PrintDebugMeta := virtual !(LLVMWriteContext^ ctx) -> void
	{
	}
}

MemVarBorrowed := class extend MemVar
{
	this := !(StringSpan vName, ParamFunc^ clFunc) -> void
	{
		this."MemVar.this"(vName,clFunc)
	}
	PrintCode := virtual !(LLVMWriteContext^ ctx) -> void
	{
		pDebugCode(ctx)
		doInits(ctx)
	}
	PrintDebugMeta := virtual !(LLVMWriteContext^ ctx) -> void
	{
		pDebugMeta(ctx)
	}
}
MemVarBorrowedRef := class extend MemVarBorrowed
{
	this := !(StringSpan vName, ParamFunc^ clFunc) -> void
	{
		this."MemVar.this"(vName,clFunc)
	}
}

FuncVar := class extend BoxUnit
{
	Name := StringSpan
	Value := BoxUnit^
	IsSuffix := bool

	MemObj := BoxFunc^

	this := !(StringSpan nm, bool isSuf,BoxFunc^ obj) -> void
	{
		Name = nm
		IsSuffix = isSuf
		MemObj = obj
	}
	PrintCode := virtual !(LLVMWriteContext^ ctx) -> void
	{
		assert(MemObj != null)
		MemObj.PrintCode(ctx)
	}
	PrintDebugMeta := virtual !(LLVMWriteContext^ ctx) -> void
	{
		MemObj.PrintDebugMeta(ctx)
	}

	Work := virtual !() -> void
	{
		MemObj.SetName(Name)
		MemObj.Work()
	}
}

TemplateFuncVar := class extend BoxUnit
{
	Name := StringSpan
	Value := BoxUnit^
	IsSuffix := bool

	MemObj := BoxFuncTemplate^

	this := !(StringSpan nm, bool isSuf,BoxFuncTemplate^ obj) -> void
	{
		Name = nm
		IsSuffix = isSuf
		MemObj = obj
	}
	PrintCode := virtual !(LLVMWriteContext^ ctx) -> void
	{
		assert(MemObj != null)
		MemObj.PrintCode(ctx)
	}
	PrintDebugMeta := virtual !(LLVMWriteContext^ ctx) -> void
	{
		MemObj.PrintDebugMeta(ctx)
	}

	Work := virtual !() -> void
	{
		MemObj.SetName(Name)
		MemObj.Work()
	}
}
