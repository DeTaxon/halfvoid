LocalVar := class extend BoxUnit
{
	itName := StringSpan
	isMemory := bool
	isReference := bool

	createVar := HybridQueue.{BoxExeObj^,2}
	extraWork := HybridQueue.{BoxExeObj^,4}

	this := !(StringSpan inName,Type^ varType,bool isMem,bool isRef) -> void
	{
		itName = inName

		isMemory = isMem
		isReference = isRef

		proxy.ObjType = varType
		proxy.baseVar = this&

		if isRef
			proxy.ObjType = varType.GetPoint()
	}

	PrintCode := virtual !(LLVMWriteContext^ ctx) -> void
	{
		createVar[^].PrintDefaultUse(ctx)
		extraWork[^].PrintDefaultUse(ctx)
	}


	GetBaseType := virtual !() -> Type^
	{
		return proxy.ObjType
	}
	GetType := virtual !() -> Type^
	{
		if isReference
			return proxy.ObjType.Base
		return proxy.ObjType
	}
	CreateVarCall := !() -> BoxExeObj^
	{
		if isReference
		{
			return new PtrToRef(proxy&)
		}else{
			return proxy&
		}
	}

	SetCall := !(BoxExeObj^ toCall) -> void
	{
		proxy.Down = toCall
	}

	proxy := LocalVarProxy
}


LocalVarProxy := class extend BoxExeObj
{
	baseVar := LocalVar^
	Down := BoxExeObj^
	BaseDown := BoxExeObj^

	NotifyMemUse := virtual !() -> void
	{
		baseVar.NotifyMemUse()
	}
	IsMem := virtual !() -> bool
	{
		return baseVar.isMemory
	}
	PrintPointPre := virtual !(LLVMWriteContext^ ctx) -> void
	{
		Down.PrintPointPre(ctx)
	}
	PrintPointUse := virtual !(LLVMWriteContext^ ctx) -> void
	{
		Down.PrintPointUse(ctx)
	}
	PrintPre := virtual !(LLVMWriteContext^ ctx) -> void
	{
		Down.PrintPre(ctx)
	}
	PrintUse := virtual !(LLVMWriteContext^ ctx) -> void
	{
		Down.PrintUse(ctx)
	}
}
