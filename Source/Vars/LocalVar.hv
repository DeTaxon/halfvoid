LocalVar := class extend BoxExeObj
{
	itName := Str
	isMemory := bool
	isReference := bool

	isSetCreated := bool //created by operator :=, and right side is not type,  x := 2 + 2

	AutoCastedFrom := LocalVar^

	createVar := HybridQueue.{BoxExeObj^,2}
	extraWork := HybridQueue.{BoxExeObj^,4}

	this := !(Str inName,Type^ varType,bool isMem,bool isRef) -> void
	{
		itName = inName

		isMemory = isMem
		isReference = isRef

		proxy = new LocalVarProxy(this&,varType)
		proxyOut = new LocalVarProxyOut(this&,varType)

		if isRef
			proxy.ObjType = varType.GetPoint()
		ObjType = proxy.ObjType

		if isRef {
			proxyOut.Down = new PtrToRef(proxy)
		}else{
			proxyOut.Down = proxy
		}
	}

	PrintCode := virtual !(LLVMWriteContext^ ctx) -> void
	{
		createVar[^].PrintDefaultUse(ctx)
		extraWork[^].PrintDefaultUse(ctx)
	}
	PrintDefaultUse := virtual !(LLVMWriteContext^ ctx) -> void
	{
		PrintCode(ctx)
	}


	GetBaseType := virtual !() -> Type^
	{
		return proxy.ObjType
	}
	GetType := virtual !() -> Type^
	{
		if isReference
			return proxy.ObjType.Base
		return proxy.ObjType
	}
	CreateVarBaseCall := !() -> BoxExeObj^
	{
		assert(proxy != null)
		return proxy
	}
	CreateVarCall := !() -> BoxExeObj^
	{
		assert(proxyOut != null)
		return proxyOut
	}

	SetCall := !(BoxExeObj^ toCall) -> void
	{
		proxy.Down = toCall
	}

	proxy := LocalVarProxy^
	proxyOut := LocalVarProxyOut^


	SetNewType := !(Type^ newType) -> void
	{
		assert(isSetCreated)
		assert(GetType() is in TypePoint)
		assert(not isReference)

		ObjType = newType

		oldProxy := proxy
		oldProxyOut := proxyOut

		proxy = new LocalVarProxy(this&,newType)
		proxyOut = new LocalVarProxyOut(this&,newType)
		proxyOut.Down = proxy

		s1 := new UnrefFuncCall(proxy)
		s2 := new PtrExchange(s1,newType.GetPoint())
		s3 := new PtrToRef(s2)
		oldProxy.Down = s3
	}
}


LocalVarProxy := class extend BoxExeObj
{
	baseVar := LocalVar^
	Down := BoxExeObj^

	this := !(LocalVar^ vr, Type^ objType) -> void
	{
		baseVar = vr
		ObjType = objType
	}

	NotifyMemUse := virtual !() -> void
	{
		baseVar.NotifyMemUse()
	}
	IsMem := virtual !() -> bool
	{
		return baseVar.isMemory
	}
	PrintPointPre := virtual !(LLVMWriteContext^ ctx) -> void
	{
		Down.PrintPointPre(ctx)
	}
	PrintPointUse := virtual !(LLVMWriteContext^ ctx) -> void
	{
		Down.PrintPointUse(ctx)
	}
	PrintPre := virtual !(LLVMWriteContext^ ctx) -> void
	{
		Down.PrintPre(ctx)
	}
	PrintUse := virtual !(LLVMWriteContext^ ctx) -> void
	{
		Down.PrintUse(ctx)
	}
}

LocalVarProxyOut := class extend LocalVarProxy
{
	NotifyMemUse := virtual !() -> void
	{
		if baseVar.isReference
			return void
		baseVar.NotifyMemUse()
	}
	IsMem := virtual !() -> bool
	{
		if baseVar.isReference
			return true
		return baseVar.isMemory
	}
}
