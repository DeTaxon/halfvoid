GlobalVar := class extend BoxUnit 
{
	Name := StringSpan
	ItType := Type^
	Value := GlobalVarFunc^
	MemValue := BoxExeConstObj^

	this := !(StringSpan name,Type^ tp) -> void
	{
		Init(name,tp,false)
	}
	this := !(StringSpan name,Type^ tp,bool isThreadLocal) -> void
	{
		Init(name,tp,isThreadLocal)
	}

	Init := !(StringSpan name,Type^ tp,bool isThreadLocal) -> void
	{
		Name = name
		Value = new GlobalVarFunc(name,tp)

		if isThreadLocal
			Value->SetType(ThreadLocalVarFunc)
	}
	PrintCode := virtual !(LLVMWriteContext^ ctx) -> void
	{
		Value.PrintCodeConst(ctx,MemValue)
	}
	AwaitType := virtual !() -> void
	{
	}
	IsThreadLocal := !() -> bool
	{
		AwaitType()
		return Value is ThreadLocalVarFunc
	}
	GetOutputName := !() -> String^
	{
		buf := char[255]
		sprintf(buf[0]&,"V%i",Value.varId)
		return new String(buf[0]&)
	}
}

GlobalVars := List.{GlobalVar^}
CreateGlobalVar := !(StringSpan name, Type^ tp, bool isThreadLocal) -> GlobalVar^
{
	mName := GetFuncMangle(name)
	newVar := new GlobalVar(mName,tp,isThreadLocal)
	GlobalVars.Push(newVar)
	return newVar
}

GlobalVarFunc := class extend ParamFunc
{
	varName := StringSpan
	pType := Type^
	varId := int
	this := !(StringSpan name,Type^ tp) -> void
	{
		varName = name
		pType = tp
		varId = GetNewId()
		SetType(GetFuncType(0,null,null,pType,true,false))
	}
	IsMem := virtual !() -> bool
	{
		return true
	}
	PrintThreadLocal := virtual !(LLVMWriteContext^ ctx) -> void
	{

	}
	PrintCodeConst := virtual !(LLVMWriteContext^ ctx,BoxExeConstObj^ cnst) -> void
	{
		f := ctx.writeStream

		f^ << "@V" << varId << " = "
		PrintThreadLocal(ctx)
		f^ << " global "
		pType.PrintType(ctx)
		if cnst != null
		{
			f^ << " "
			cnst.PrintConst(ctx)
		}else{
			f^ << " zeroinitializer"
		}
		f^ << "\n"

	}
	PrintOutputName := virtual !(LLVMWriteContext^ ctx) -> void
	{
		ctx.writeStream^ << "@V" << varId 
	}
	PrintResultObj := virtual !(LLVMWriteContext^ ctx, int resId, int debId) -> void
	{
		ctx.writeStream^ << "@V" << varId 
	}
	PrintDebugMeta := virtual !(LLVMWriteContext^ ctx) -> void
	{
		//f^ << "!" << varId << " = !DILocalVariable(name: \"" << varName << "\" , scope:!" << GDebugScopeId << " , file:!" << GDebugFileId
		////if it.6 != 0
		////{
		////	f^ << ", arg: " << it.6
		////	f^ << ", flags: DIFlagArtificial"
		////}
		//f^ << ", line: " << 0 << ", type:!" << pType.MetaId
		//f^ << ")\n"
	}
	PrintFuncCall := virtual !(LLVMWriteContext^ ctx,int resId,int debId,ExeDownList lst) -> void
	{
	}
}

ThreadLocalVarFunc := class extend GlobalVarFunc
{
	PrintThreadLocal := virtual !(LLVMWriteContext^ ctx) -> void
	{
		ctx.writeStream^ << "thread_local"
	}
}
