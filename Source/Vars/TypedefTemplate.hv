TryParseTypedefTemplate := !(Token^ obj) -> BoxUnit^
{
	iter := obj.Down

	if not (iter is TokenIndent)
		return null

	res := new TypedefTemplateVar
	res.Name = iter->{TokenIndent^}.Value

	resConst := new TypedefTemplateConst
	tpIndent := iter.Right.Right 

	if tpIndent.GetValue() != "type"
		return null

	typeToken := tpIndent.Right
	if tpIndent.Right.GetValue() == "."
	{
		itrCnst := tpIndent.Right.Right.Down

		while itrCnst != null
		{
			if itrCnst.GetValue() != ","
			{
				resConst.ItConsts.Push(itrCnst)
			}
			itrCnst = itrCnst.Right
		}
		typeToken = typeToken.Right.Right
	}

	resConst.TypeToken = typeToken
	res.Value = resConst

	return res
}

TypedefTemplateVar := class extend NamedVar
{
	Value := TypedefTemplateConst^
}

TypedefTemplateConst := class extend BoxExeConstObj
{
	ItConsts := HybridQueue.{Token^,5}
	TypeToken := Token^
	GetType := !(List.{BoxExeConstObj^} cnsts) -> Type^
	{
		if cnsts.Size() != ItConsts.Size()
			return null
		if cnsts.Size() == 0
		{
			return ParseType(TypeToken)
		}

		resCnsts := AVLMap.{StringSpan,BoxUnit^}
		for i : cnsts.Size()
		{
			CheckTemplateConst(cnsts[i],ItConsts[i],resCnsts)
		}
		resType :=  CheckTemplateType(null,TypeToken,resCnsts)
		resCnsts.Destroy()
		return resType
	}

}
