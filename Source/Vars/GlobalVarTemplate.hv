
GlobalVarTemplate := class extend BoxExeObj
{
	constTree := Token^
	typeTree := Token^
	BodyToken := Token^

	VarName := Str

	VarNames := List.{StringSpan}

	vars := List.{Tuple.{BoxExeConstObj^[],GlobalVar2^}}

	this := !(Str name,Token^ inTypeTree,Token^ constToken,Token^ base) -> void
	{
		typeTree = inTypeTree
		constTree = constToken
		VarName = name

		iter := base
		while iter != null
		{
			if iter.GetValue() == "{}" and iter.Right == null
			{
				BodyToken = iter
			}
			iter = iter.Right
		}
	}
	GetGlobalVar := !(BoxExeConstObj^[] consts) -> GlobalVar2^
	{
		for it : vars
		{
			if IsEqConstants(consts,it.0)
				return it.1
		}

		resConsts := AVLMap.{Str,BoxUnit^}

		typ := GetVarType(consts,resConsts)
		if typ == null
			return null
		
		globVar := CreateGlobalVar(VarName,typ,false)

		ConstMapToList(resConsts,globVar.ConstVars)

		globVar.BodyToken = BodyToken
		globVar.BodyInit()

		vars.Emplace(consts.ToVector(),globVar)

		return globVar
	}
	GetVarType := !(BoxExeConstObj^[] consts,AVLMap.{Str,BoxUnit^} resConsts) -> Type^
	{

		cycleLimit := 0

		while cycleLimit < 1
		{
			cycleLimit += 1

			itr := constTree.Down
			i := 0
			while itr != null
			{
				if itr.GetValue() != ","
				{
					assert(itr is TokenTemplateType)
					CheckTemplateConst(consts[i],itr,resConsts)
					i += 1
				}
				itr = itr.Right
			}

			typ := CheckTemplateType(null,typeTree,resConsts)
			if typ != null
				return typ
		}
		return null
	}
}
