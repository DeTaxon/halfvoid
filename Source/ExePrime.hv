TryExePrime := !(Token^ itm) -> BoxExeObj^
{
	if itm is TokenString
	{
		tkn := itm->{TokenString^}
		return GetExeString(tkn.Value.GetString())
	}
	if itm is TokenInt
	{
		val := itm->{TokenInt^}.Parsed
		return GetExeInt(val)
	}
	if itm is TokenDouble
	{	
		return new BoxExeDouble(itm->{TokenDouble^}.Parsed)
	}
}

GlobalInts := AVLMap.{int,BoxExeInt^}
GetExeInt := !(int val) -> BoxExeInt^
{
	if GlobalInts.Contain(val)
		return GlobalInts[val]
	newObj := new BoxExeInt(val)
	GlobalInts[val] = newObj
	return newObj
}

GlobalStrings := AVLMap.{String^,BoxExeString^}
strIdIterator := 1
GetExeString := !(StringView^ str) -> BoxExeString^
{
	str2 := str.GetString()

	if GlobalStrings.Contain(str2)
		return GlobalStrings[str2]
	newVal := new BoxExeString(str2)
	GlobalStrings[str2] = newVal
	return newVal
}


GBoolTrue := BoxExeBool^
GBoolFalse := BoxExeBool^
BoxExeBool := class extend BoxExeConstObj
{
	Value := bool
	this := !(bool nVal) -> void
	{
		Value = nVal
		ObjType = GTypeBool
	}
	PrintUse := virtual !(LLVMWriteContext^ ctx) -> void
	{
		f := ctx.writeStream
		if Value 
		{
			f^ << "1"
		}else{
			f^ << "0"
		}
	}

	PrintConst := virtual !(LLVMWriteContext^ ctx) -> void
	{
		f := ctx.writeStream
		if Value
		{
			f^ << "1"
		}else{
			f^ << "0"
		}
	}
	PrintDebug := virtual !(Stream ctx) -> void {
		if Value
		{
			ctx << "true"
		}else{
			ctx << "false"
		}
		
	}
}

BoxExeInt := class extend BoxExeConstObj
{
	Value := int
	this := !(int nVal) -> void
	{
		Value = nVal
		ObjType = GTypeInt
	}
	PrintUse := virtual !(LLVMWriteContext^ ctx) -> void
	{
		ctx.writeStream^ << Value
	}
	PrintConst := virtual !(LLVMWriteContext^ ctx) -> void
	{
		ctx.writeStream^ << Value
	}
	PrintDebug := virtual !(Stream ctx) -> void {
		ctx << Value
	}
}
BoxExeS64 := class extend BoxExeConstObj
{
	Value := s64
	this := !(s64 nVal) -> void
	{
		Value = nVal
		ObjType = GTypeS64
	}
	PrintUse := virtual !(LLVMWriteContext^ ctx) -> void
	{
		ctx.writeStream^ << Value
	}
	PrintConst := virtual !(LLVMWriteContext^ ctx) -> void
	{
		ctx.writeStream^ << Value
	}
	PrintDebug := virtual !(Stream ctx) -> void {
		ctx << Value
	}
}
BoxExeDouble := class extend BoxExeConstObj
{
	Value := double
	this := !(double v) -> void
	{
		Value = v
		ObjType = GTypeDouble
	}
	PrintUse := virtual !(LLVMWriteContext^ ctx) -> void
	{
		ctx.writeStream^ << Value
	}
	PrintConst := virtual !(LLVMWriteContext^ ctx) -> void
	{
		ctx.writeStream^ << Value
	}
	PrintDebug := virtual !(Stream ctx) -> {
		ctx << Value
	}
}

BoxExeString := class extend BoxExeConstObj
{
	strId := int
	Value := String^
	this := !(String^ dat) -> void
	{
		strId = strIdIterator
		strIdIterator += 1
		Value = dat
		ObjType = GTypeChar.GetPoint()
	}
	PrintCode := virtual !(LLVMWriteContext^ ctx) -> void
	{
		f := ctx.writeStream
		f^ << "@Str" << strId << " = private constant [" << Value.Size() +  1 << " x i8] c\""
		k := 0
		SomeBuf := char[2]
		SomeBuf[1] = 0
		while k != Value.Size()
		{
			SomeBuf[0] = Value^[k]
			if Value^[k] == "\n"[0]
			{
				f^ << "\\0A"
			}else
			{
				if Value^[k] == "\""[0]
				{
					f^ << "\\22"
				}else
				{
					if Value^[k] == "\\"[0]
					{
						f^ << "\\5C"
					}else{
						f^ << SomeBuf
					}
				}
			}
			k += 1
		}
		f^ << "\\00\"\n"
	}
	PrintUse := virtual !(LLVMWriteContext^ ctx) -> void
	{
		PrintConst(ctx)
	}
	PrintConst := virtual !(LLVMWriteContext^ ctx) -> void
	{
		f := ctx.writeStream
		stSize := Value.Size() + 1

		f^ << "getelementptr inbounds ([" << stSize << " x i8] , [" << stSize << " x i8]* @Str" << strId << ", i32 0, i32 0)"
	}
	PrintDebug := virtual !(Stream ctx) -> void {
		ctx << Value^
	}

}
