TryCheckGetParam := !(Token^ itm) -> BoxExeObj^
{
	if itm == null return null
	if itm is TokenIndent 
	{
	}else{
		return null
	}
	res := innerTryGetParam(itm)

	if res == null
	{
		if CurrentFuncWork != null
		{
			asItm := itm->{TokenIndent^}

			c := TEchoStream
			c << "Could not get param " << asItm.Value
			c2 := c.GetString()
			c2.IncRef()
			errCode := itm.MakeError(c2.Str()) //todo better explanation

			CurrentFuncWork.SetErrorMessage(errCode)
		}

		return null
	}
	return res
}

innerTryGetParam := !(Token^ itm) -> BoxExeObj^
{
	if itm == null return null
	if itm is TokenIndent 
	{
	}else{
		return null
	}

	asItm := itm->{TokenIndent^}

	metFuncs := HybridQueue.{BoxFuncBody^,4}
	lastLambdaHolder := LambdaObject^

	for parObject : UnitStack
	{
		par := parObject
		if par is AliasVar and par->{AliasVar^}.itName == asItm.Value
		{
			par2 := par->{AliasVar^}.itValue
			if par2 is in BoxFuncTemplate
			{
				tmpl := par2->{BoxFuncTemplate^}
				if tmpl.IsOneFunc()
				{
					par2 = tmpl.GetOneFunc()
				}
			}
			if par2 is in BoxFunc
			{
				c := new FuncPointerParam(par2->{BoxFunc^})
				return c.CreateCall()
			}
		}

		if par is LambdaObject
		{
			lastLambdaHolder = par->{LambdaObject^}

			capVars := ref lastLambdaHolder.lambdaFunc.CapturedVars2

			for it : capVars
			{
				if it.itName == asItm.Value
					return it.CreateVarCall()
			}
		}
		if par is ConstVar
		{
			cv := par->{ConstVar^}
			
			if cv.Name == asItm.Value
				return cv.Value
		}
		if par is BorrowedCallVar 
		{
			av := par->{BorrowedCallVar^}
			if av.itName == asItm.Value
				return GetParamCaptureVar(av.itVar.CreateVarCall(),asItm.Value,par,metFuncs)
		}
		if par is AliasVar
		{
			av := par->{AliasVar^}
			if av.itName == asItm.Value
			{
				assert(av.itValue is in LocalVar)
				return av.itValue->{LocalVar^}.CreateVarCall()
			}
		}
		if par is in LocalVar
		{
			lv := par->{LocalVar^}

			if lv.itName == asItm.Value
				return GetParamCaptureVar(lv.CreateVarCall(),asItm.Value,par,metFuncs)
		}
		if par is TypeVariadicVar
		{
			lv := par->{TypeVariadicVar^}
			if lv.Name == asItm.Value
				return lv
		}
		if par is in NamedVar
		{
			mv := par->{NamedVar^}
			if mv.Name == asItm.Value
			{
				if par is in MemVarRef
				{
					assert(false)
				}else if par is in MemVar
				{
					mv2 := mv->{MemVar^}
					return GetParamCaptureVar(CallFromSomeVar(mv2),asItm.Value,par,metFuncs)
				}else if par is MacroVar {
					macro := par->{MacroVar^}
					return macro.CreateCall()
				}else if par is GlobalNameAlias2 {
					al := par->{GlobalNameAlias2^}
					al.Value.NotifyUseAndWait()
					return al.Value.proxy&
				}else{
					assert(false)
				}
			}
		}

		if par is ClassUnroll and asItm.Value != "this"
		{
			unroll := par->{ClassUnroll^}
			cls := unroll.BaseClass
			obj := unroll.MethodObj

			fld := cls.GetField(asItm.Value)

			if metFuncs.Size() != 0
			{
				assert(false)
			}

			if fld != null
			{
				itms := CheckExeDownList
				itms.Push(unroll.MethodObj.CreateCall())
				return fld.CreateCall(itms)
			}
		}
		
		if par is in BoxFuncBody
		{
			fnc := par->{BoxFuncBody^}

			metFuncs.Push(fnc)

			if fnc.VariadicName == asItm.Value
			{
				return new MetaVargsParam(fnc)
			}
			
			if fnc.Attrs.IsMethod and asItm.Value != "this"
			{
				tkn1 := TokenIndent(StringSpan("this"))
				parGetCall := TryCheckGetParam(tkn1&)

				if parGetCall == null
					return null

				clsType := parGetCall.GetType()
				assert(clsType is TypeClass)
				cls := clsType->{TypeClass^}.ToClass

				fld := cls.GetField(asItm.Value)
				if fld != null
				{
					return fld.CreateCall(![parGetCall])
				}

				mt := cls.GetFieldInVTable(asItm.Value)
				if mt != null
				{
					return mt.CreateCall(![parGetCall])
				}
			}
		}
	}
	callItem := BoxUnit^
	GetItemGlobal(asItm.Value, x ==> {
		for it : x
		{
			if it is in GlobalVar2
			{
				gVar := it->{GlobalVar2^}
				gVar.NotifyUseAndWait()
				callItem = gVar
				return true
			}
			if it is TaskLocalVar or it is TaskLocalVarDelayed
			{
				callItem = it
				return true
			}
			if it is in BoxFunc
			{
				callItem = new FuncPointerParam(it->{BoxFunc^})
				return true
			}
			if it is in BoxFuncTemplate
			{
				asTmpl := it->{BoxFuncTemplate^}
				if asTmpl.IsOneFunc()
				{
					callItem = new FuncPointerParam(asTmpl.GetOneFunc())
					return true
				}
			}
			if it is in BoxExeConstObj
			{
				callItem = it
				return true
			}
			if it is GlobalVarTemplate
			{
				callItem = it
				return true
			}
		}
		return false
	})
	if callItem != null
	{
		if callItem is in GlobalVar2
		{
			return callItem->{GlobalVar2^}.CreateCall()
		}
		if callItem is TaskLocalVar
		{
			return callItem->{TaskLocalVar^}.CreateCall()
		}
		if callItem is TaskLocalVarDelayed
		{
			return callItem->{TaskLocalVarDelayed^}.CreateCall()
		}
		if callItem is in BoxFunc
		{
			return callItem->{BoxFunc^}.CreateCall()
		}
		if callItem is in BoxExeConstObj
		{
			return callItem->{BoxExeConstObj^}
		}
		if callItem is GlobalVarTemplate
		{
			return callItem->{BoxExeObj^}
		}
	}

	asType := ParseType(itm)
	if asType != null
		return asType

	return GetItemUser(asItm.Value)? 

	return null
}

CallFromSomeVar := !(NamedVar^ vr) -> BoxExeObj^
{
	if vr is MemVarBorrowedRef
	{
		return new PtrToRefAuto(vr->{MemVar^}.Value.CreateCall())
	}
	if vr is MemVarRef
	{
		return new PtrToRefAuto(vr->{MemVar^}.Value.CreateCall())
	}
	if vr is in MemVar
	{
		return vr->{MemVar^}.Value.CreateCall()
	}
	assert(false)
	return null
}
GetParamCaptureVar := !(BoxExeObj^ preRes,Str varName,BoxUnit^ par,HybridQueue.{BoxFuncBody^,4} fncs) -> BoxExeObj^
{
	if fncs.Size() == 0
		return preRes

	metLambdas := HybridStack.{LambdaObject^,16} //todo input metLambdas not funcs

	for it : UnitStack
	{
		if it == par
			break
		if it is LambdaObject
			metLambdas.PushFront(it->{LambdaObject^})
	}

	capCall := preRes

	isRef := true

	if IsGCPtr(capCall.GetType())
		isRef = false

	while metLambdas.Size() != 0
	{
		lambd := metLambdas.Pop()
		locVar := lambd.CaptureObject(varName,capCall,isRef)
		capCall = locVar.CreateVarCall()
	}
	return capCall
}
