
"in" := !(char^[] strs, char^ value) -> bool
{
	for it : strs
	{
		if strcmp(it,value) == 0
			return true
	}
	return false
}

StrSize := !(char^ a) -> int
{
	Si := 0
	while a[Si] != 0 Si += 1
	return Si
}
ToInt := !(char^ inp) -> int
{
	return strtol(inp,null,0)
}

ToFloat := !(char^ inp) -> float
{
	return strtod(inp,null)
}

StrCopy := !(char^ a) -> char^
{
	Si := StrSize(a)
	Pre := malloc(Si+1)->{char^}
	memcpy(Pre->{void^},a,Si)
	Pre[Si] = 0

	return Pre
}

SubStrContain := !(StringView whr, char^ subStr) -> bool
{
	sbSize := strlen(subStr)
	if sbSize > whr.Size()
		return false

	trgt := whr.NonNullStr()
	sb := subStr

	i := 0
	leftSize := whr.Size() - sbSize

	while leftSize >= 0
	{
		if strncmp(trgt[i]&,sb,sbSize) == 0
			return true
		i += 1
		leftSize -= 1
	}

	return false
}
