
CodeFiles := List.{BoxFile^}
CodeSpaces := AVLMap.{int,BoxCodeSpace}

PriorityData := PriorityBagOld^
LexHVFileRoot := PriorityBagOld^
LexHVInputVars := PriorityBagOld^

loadLex2 := !(vRepoFile^ pri,PriorityBagOld^^ res) -> void 
{
	fileMap := pri.GetMap()
	fileMap.IncRef() //TODO unref
	pri.IncRef()
	res^ = new PriorityBagOld(fileMap.Get(),fileMap.Size())
}

GArchBitSize := 64
GArchLLVMTypeSizeT := "i64"

GVoidObj := BoxExeObj^

GDebugTypePrintMeta := List.{Type^}

GFuncsInProgress := List.{BoxFunc^}
GClassesInProgress := List.{BoxClass^}

AllClasses := List.{BoxClass^}
AllFunctions := List.{BoxFunc^}

targetLinux := false
targetWindows := false

DisableScary := false

UseTracy := false

JITMode := bool

RunMode := bool
RunModeFuncName := char^

OutputFile := char^
main := !(char^[] args) -> int
{
	
	funcTypes = calloc(HybridQueue.{TypeFunc^,10}[9973]->TypeSize,1)->{HybridQueue.{TypeFunc^,10}[9973]^}
	for i : 9973
	{
		internalHVInitClass(funcTypes^[i])
	}

	TracyZone("MainFunc")

	CodeSpaces.IncRef()

	files := new List.{char^}

	targetLinux = true
	targetWindows = false

	osHVFile := ".hv.posix"
	osCLIBFile := ".clib.posix"

	if #OS() == "Windows"
	{
		targetLinux = false
		targetWindows = true
		osHVFile = ".hv.win32"
		osCLIBFile = ".clib.win32"
	}

	i := 1
	while i < args.Size()
	{
		switch args[i]
		{
			case "-jit"
				JITMode = true
			case "-cache"
				i += 1
				OpenCacheFile(args[i]) //TODO args check
			case "-run"
				i += 1
				RunModeFuncName = args[i]
				RunMode = true
			case "-tracy"
				UseTracy = true
			case "-scary"
				DisableScary = true
			case "-emulate-tls"
				EmulateTLS = true
			case "-linux"
				targetLinux = true
				targetWindows = false
				osHVFile = ".hv.posix"
				osCLIBFile = ".clib.posix"
			case "-win32"
				targetLinux = false
				targetWindows = true
				osHVFile = ".hv.win32"
				osCLIBFile = ".clib.win32"
			case "-g"
				DebugMode = true
			case "-o"
				OutputFile = args[i+1]
				i += 1
			case void
				if StringSpan(args[i][0..2]) == "-C"
				{
					num := StrToInt(args[i][2..0])
					FSReadFolder(StringSpan(args[i+1]),true,zFil ==> {
						zFil.IncRef()//TODO memory
						nm := zFil.GetName()
						if nm.End == ".hv" or nm.End == osHVFile
						{
							fObj := new BoxFile(zFil)
							CodeFiles.Push(fObj)
							CodeSpaces[num].Files.Push(fObj)
						}else if nm.End == ".clib" or nm.End == osCLIBFile
						{
							spc := CodeSpaces[num]&
							spc.Modules.Push(new CLib(zFil))
						}
					})
					i += 1
				}else if args[i] == "--vk" {
					i += 1
					CodeSpaces[-1].Modules.Push(new ModuleVulkan(args[i]))
				}else{
					file := FSGetFile(args[i])
					fileBox := new BoxFile(file)
					CodeFiles.Push(fileBox)
					CodeSpaces[2000].Files.Push(fileBox)
				}
		}
		i += 1
	}

	GetFuncMangle(StringSpan("main"))

	loadLex2(#File("Priority2.pr",true),PriorityData&)
	loadLex2(#File("LexHVFileRoot2.pr",true),LexHVFileRoot&)
	loadLex2(#File("LexHVInputVars2.pr",true),LexHVInputVars&)
	
	HVOperators.Insert(PriorityData.Opers[^])
	
	mac := #File("Mach.m",true)
	macMap := mac.GetMap()
	LoadLexMachine(macMap.Get(),mac.Size()) 

	CreateStandardTypes()
	TypeDatabaseInitDefaults()

	GBoolTrue = new BoxExeBool(true)
	GBoolFalse = new BoxExeBool(false)
	GObjNone = new BoxExeNone()
	GObjNull = new BoxExeNull()
	GObjVoid = new BoxExeVoid()
	GVoidObj = new GetLocalVarVoid()
	CreateBuiltins()
	ExchangeInit()
	TupleInit()
	PreInitTaskLocal()
	cuId = GetNewId()

	TupleInitBuiltin()
	GCObjectInit()
	ArrayViewInit()

	CodeFiles[^].LoadFiles()
	CodeFiles[^].ParseClasses()
	CodeFiles[^].ParseTypedefs()
	CodeFiles[^].ParseAppendClasses()

	for spc : CodeSpaces
	{
		spc.Modules[^].Work()

		GDebugFileId = spc.Files[^].fileId //todo, remove it, is is for debug id
	}

	for fil : CodeFiles
	{
		fil.Parse()
	}

	InitInternals()
	InitTaskLocal()
	InitLambda()
	RecheckAppends()
	GParsedAllFiles.Emit()

	mainFuncName := "internalHVEntryPoint"
	if JITMode
		mainFuncName = "main"

	mainFunc := intGetFunc(mainFuncName)
	assert(mainFunc != null)
	assert(mainFunc is BoxFuncBody)
	mainFunc.ParseBody()
	mainFunc.WaitReadyState()
	mainFunc.ForceOutputName(StringSpan("main"))

	while GClassesInProgress.Size() != 0
	{
		GClassesInProgress[0].AwaitReadyState()
		GClassesInProgress.Pop()
	}

	while GFuncsInProgress.Size() != 0
	{
		GFuncsInProgress[0].WaitReadyState()
		GFuncsInProgress.Pop()
	}

	for it : CodeSpaces
	{
		for libs : it.Modules
			libs.CreateInitPart()
	}

	WaitForParsingObjects()

	TLSStep()

	WaitForParsingObjects()

	printf("good to go\n")

	if RunMode
	{
		toRun := intGetFunc(RunModeFuncName)
		if toRun == null
		{
			printf("RunMode function not found\n")
			return -1
		}
		toRun.ParseBody()
		toRun.WaitReadyState()
		CompileAndRunCode(toRun->{BoxFuncBody^})
		return 0
	}

	if JITMode
	{
		assert(false)
		//byteCode := new TEchoStream
		//WriteCodeToStream(byteCode)
		//RunJITMode(byteCode,mainFunc->{BoxFuncBody^})
	}else{
		outFile := new TFile(OutputFile,"wb")

		ctx := LLVMWriteContext
		ctx.writeStream = outFile

		WriteCodeToStream(ctx&)
		printf("done\n")
		outFile.Close()
	}

	FinilizeCache()

	return 0
}

WaitForParsingObjects := !() -> void
{
	while GClassesInProgress.Size() != 0
	{
		GClassesInProgress[0].AwaitReadyState()
		GClassesInProgress.Pop()
	}

	while GFuncsInProgress.Size() != 0
	{
		GFuncsInProgress[0].WaitReadyState()
		GFuncsInProgress.Pop()
	}
}

WriteCodeToStream := !(LLVMWriteContext^ ctx) -> void
{
	PrintDeclares(ctx)
	if DebugMode
		PrintDebugMeta(ctx)

	AllClasses[^].PrintAsType(ctx)
	for spc : CodeSpaces
	{
		for fil : spc.Files
		{
			GDebugFileId = fil.fileId
			fil.AllClasses[^].PrintAsType(ctx)
		}
	}

	GDebugFileId = DummyFile.fileId
	DummyFile.AllClasses[^].PrintAsType(ctx)

	GlobalVars2[^].PrintCodeVar(ctx)
	for spc : CodeSpaces
	{
		spc.Globals[^][^].PrintCode(ctx)
		for fil : spc.Files
		{
			fil.PrintCode(ctx)
		}
	}
	DummyFile?.PrintCode(ctx)

	for st : GlobalStrings
	{
		st.PrintCode(ctx)
	}
	PrintEmbeddedFiles(ctx)
	for spc : CodeSpaces
	{
		for lb : spc.Modules
		{	
			lb.PrintCode(ctx)
		}
		for fil : spc.Files
		{
			GDebugFileId = fil.fileId
		}
	}
	AllFunctions[^].PrintCode(ctx)

	while GDebugTypePrintMeta.Size() != 0
	{
		GDebugTypePrintMeta[0].PrintMeta(ctx)
		GDebugTypePrintMeta.Pop()
	}
}

PrintDeclares := !(LLVMWriteContext^ ctx) -> void
{
	PrintBuildInMinMax(ctx)
	f := ctx.writeStream

	f^ << "declare float     @llvm.pow.f32(float  %Val, float %Power)\n"
	f^ << "declare double    @llvm.pow.f64(double %Val, double %Power)\n"
	f^ << "declare float     @llvm.cos.f32(float  %Val)\n"
	f^ << "declare float     @llvm.sin.f32(float  %Val)\n"
	f^ << "declare double    @llvm.cos.f64(double %Val)\n"
	f^ << "declare double    @llvm.sin.f64(double %Val)\n"
	f^ << "declare i32 @llvm.eh.sjlj.setjmp(i8* %abc) #1\n"
	f^ << "declare void @llvm.eh.sjlj.longjmp(i8* %abc) #3\n"
	f^ << "declare i32 @setjmp(i8* %abc) #1\n"
	f^ << "declare void @longjmp(i8* %abc,i32 %ty) #3\n"
	f^ << "declare i8* @llvm.eh.sjlj.lsda() #0\n"
	f^ << "declare void @llvm.debugtrap() #0\n"
	f^ << "declare i8* @llvm.frameaddress.p0i8(i32 %asd) #2\n"
	f^ << "declare i8* @llvm.stacksave() #1\n"
	f^ << "declare i8* @llvm.stackrestore(i8* %abc) #0\n"
	f^ << "declare float @llvm.vector.reduce.fadd.f32.v4f32(float %acc, <4 x float> %a)\n"
	f^ << "declare float @llvm.vector.reduce.fadd.f32.v3f32(float %acc, <3 x float> %a)\n"
	f^ << "declare float @llvm.vector.reduce.fadd.f32.v2f32(float %acc, <2 x float> %a)\n"
	f^ << "declare float @llvm.vector.reduce.v2.fadd.f32.v4f32(float %start_value, <4 x float> %a)\n"
	f^ << "declare float @llvm.vector.reduce.v2.fadd.f32.v3f32(float %start_value, <3 x float> %a)\n"
	f^ << "declare float @llvm.vector.reduce.v2.fadd.f32.v2f32(float %start_value, <2 x float> %a)\n"
	f^ << "attributes #0 = { nounwind \"target-cpu\"=\"x86-64\"  }\n"
	f^ << "attributes #1 = { nounwind }\n"
	f^ << "attributes #2 = { nounwind readnone}\n"
	f^ << "attributes #3 = { nounwind noreturn}\n"
	f^ << "%OpaqType = type {i1}\n"
	f^ << "%Vec4f = type <4 x float>\n"
	f^ << "%Vec3f = type <3 x float>\n"
	f^ << "%Vec2f = type <2 x float>\n"

	f^ << "declare void @llvm.va_start(i8* %a)\n"
	f^ << "declare void @llvm.va_end(i8* %a)\n"
	f^ << "declare void @llvm.va_copy(i8* %a,i8* %b)\n"

	f^ << "declare void @llvm.memset.p0i8.i64(i8* %dest, i8 %val,i64 %len, i1 %isvolatile)\n"
	f^ << "declare void @llvm.memset.inline.p0.p0i8.i32(i8* %ptr,i8 %val,i32 %len,i1 %isVolatile) #3\n"

	f^ << "declare void @llvm.x86.wrgsbase.64(i64)\n"
	f^ << "declare i64 @llvm.x86.rdgsbase.64()\n"
	
}

cuId := int
PrintDebugMeta := !(LLVMWriteContext^ ctx) -> void
{
	fil := ctx.writeStream

	globVar := GetNewId()

	fileId := 0

	for spc : CodeSpaces
	{
		for fil : spc.Files
		{
			fileId = fil.fileId
		}
		if fileId != 0
			break
	}


	fil^ << "!llvm.dbg.cu = !{!"<< cuId <<"}\n"
	fil^ << "!" << cuId << "= distinct !DICompileUnit(producer: \"max\", isOptimized: false, runtimeVersion: 0,emissionKind: FullDebug, enums: !{},globals: !"<< globVar <<", language: DW_LANG_C99,file: !"<< fileId <<")\n"

	nm := GetNewId()
	fil^ << "!" << nm << " = !{!\"Taxon's stupid compiler\"}\n" 
	fil^ << "!llvm.ident = !{!" << nm <<"}\n"
	fil^ << "declare void @llvm.dbg.declare(metadata, metadata, metadata)\n"
	fil^ << "declare void @llvm.dbg.value(metadata, metadata, metadata)\n"
	fil^ << "declare void @llvm.dbg.addr(metadata, metadata, metadata)\n"

	dwrdV := GetNewId() fil^ << "!" << dwrdV << " = !{i32 2, !\"Dwarf Version\", i32 4}\n"
	DbgInf := GetNewId() fil^ << "!" << DbgInf << " = !{i32 2, !\"Debug Info Version\",i32 3}\n"
	WchSize := GetNewId() fil^ << "!" << WchSize << " = !{i32 1, !\"wchar_size\",i32 4}\n"
	PicLevel := GetNewId() fil^ << "!" << PicLevel << " = !{i32 7, !\"PIC Level\", i32 2}\n"
	PieLevel := GetNewId() fil^ << "!" << PieLevel << " = !{i32 7, !\"PIE Level\", i32 2}\n"
	fil^ << "!llvm.module.flags = !{!" << dwrdV << ",!" << DbgInf << ",!" << WchSize << ",!" << PicLevel << ",!" << PieLevel << "}\n"

	fil^ << "!" << globVar << " = !{"
	fil^ << "}\n"


	//if DebugPretty.Size() != 0
	//{
	//	fattyPrint := (char^ pStr) ==> {
	//		miniBuff := char[1024]
	//		c := 0
	//		i := 0
	//		while pStr[i] != 0
	//		{
	//			if pStr[i] in "\"\n"
	//			{
	//				switch pStr[i]
	//				{
	//					case '\"'
	//						miniBuff[c++] = '\\'
	//						miniBuff[c++] = '5'
	//						miniBuff[c++] = 'C'
	//						miniBuff[c++] = '\\'
	//						miniBuff[c++] = '2'
	//						miniBuff[c++] = '2'
	//					case '\n'
	//						miniBuff[c++] = '\\'
	//						miniBuff[c++] = '5'
	//						miniBuff[c++] = 'C'
	//				}
	//				if pStr[i] == '\n' and pStr[i+1] == 0
	//				{
	//					c -= 3
	//				}
	//			}else{
	//				miniBuff[c++] = pStr[i]
	//			}
	//			i += 1
	//		}
	//		miniBuff[c] = 0
	//		fil << miniBuff[0]&
	//	}
	//	fil << "module asm \".pushsection \\22.debug_gdb_scripts\\22, \\22MS\\22, @progbits,1\"\n"
	//	fil << "module asm \".byte 4\"\n"
	//	for DebugPretty
	//	{
	//		fil << "module asm \".asciz \\22"
	//		fattyPrint(it)
	//		fil << "\\5Cn\\22\"\n"
	//	}
	//	fil << "module asm \".byte 0\"\n"
	//	fil << "module asm \".popsection\"\n"
	//}
}
