
CodeFiles := List.{BoxFile^}
CodeSpaces := AVLMap.{int,BoxCodeSpace}

PriorityData := PriorityBagOld^
LexHVFileRoot := PriorityBagOld^
LexHVInputVars := PriorityBagOld^

loadLex2 := !(File^ pri,PriorityBagOld^^ res) -> void 
{
	fileMap := pri.GetMap()
	fileMap.IncRef()
	pri.IncRef()
	res^ = new PriorityBagOld(fileMap.Get(),fileMap.Size())
}

GArchBitSize := 64
GArchLLVMTypeSizeT := "i64"

GVoidObj := BoxExeObj^

GDebugTypePrintMeta := List.{Type^}

AllClasses := List.{BoxClass^}
AllFunctions := AVLSet.{BoxFunc^}

targetLinux := false
targetWindows := false

DisableScary := false

GVInitInterpreted := true

RunMode := bool
RunModeFuncName := char^

GInterpCntx := MCInterpContext
GHotloadCntx := HotloadContext

WorkBag := CompilerWork

NonStopBuild := false

ProjectSettings := ProjectSettingsType^
CompileSettings := SettingsSet^

mainFuncName := "internalHVEntryPoint"

OutputFile := Str
main := !(char^[] args) -> int
{
	GCompileThread = CurrentThread 
	HotloadStream& = new VoidStream
	GInterpCntx.InterpMode = true

	AddCustomTaskPoll()

	funcTypes = calloc(HybridQueue.{TypeFunc^,10}[9973]->TypeSize,1)->{HybridQueue.{TypeFunc^,10}[9973]^}
	for i : 9973
	{
		internalHVInitClass(funcTypes^[i])
	}

	TracyZone("MainFunc")

	CodeSpaces.IncRef()

	files := new List.{char^}

	targetLinux = true
	targetWindows = false

	osHVFile := ".hv.posix"
	osCLIBFile := ".clib.posix"

	if #OS() == "Windows"
	{
		targetLinux = false
		targetWindows = true
		osHVFile = ".hv.win32"
		osCLIBFile = ".clib.win32"
	}


	AddCompilerVars := List.{Str}

	if args.Size() == 1
	{
		projData := FSGetFile("HVProject.json")
		if projData == null
		{
			printf("no input data, suggest to create empty HVProject.json file for zero input usage\n")
			return 0
		}
		ProjectSettings := new ProjectSettingsType

		if not ProjectSettings.LoadSettings(projData)
		{
			printf("corrupted project file\n")
			return 0
		}

		CompileSettings = ProjectSettings.CollectSettings()

		if CompileSettings != null
		{
			OutputFile = CompileSettings.BytecodeFilePath?
			for it : CompileSettings.UsedFiles
			{
				file := FSGetFile(it)
				if file == null
				{
					printf("file not found %s\n",it)
				}
				fileBox := new BoxFile(file)
				CodeFiles.Push(fileBox)
				CodeSpaces[2000].Files.Push(fileBox)
			}
			for it : CompileSettings.UsedFolders
			{
				num := it.Level
				FSReadFolder(StringSpan(it.FolderPath),true,zObj ==> {
					if zObj is not in File
						return void

					zFil := zObj->{File^}
					nm := zFil.GetName()
					if nm.End == ".hv" or nm.End == osHVFile
					{
						fObj := new BoxFile(zFil)
						CodeFiles.Push(fObj)
						CodeSpaces[num].Files.Push(fObj)
					}else if nm.End == ".clib" or nm.End == osCLIBFile
					{
						spc := CodeSpaces[num]&
						spc.Modules.Push(new CLib(zFil,spc))
					}
				})
			}
			NonStopBuild = true
		}
	}

	i := 1
	while i < args.Size()
	{
		switch args[i]
		{
			case "-cache"
				i += 1
				OpenCacheFile(args[i])
			case "-O"
				OptimizeMode = true
			case "-run"
				i += 1
				RunModeFuncName = args[i]
				RunMode = true
			case "-var"
				i += 1
				AddCompilerVars.Push(args[i])
			case "-nonstop"
				NonStopBuild = true
			case "-no-scary"
				DisableScary = true
				GVInitInterpreted = false
			case "-emulate-tls"
				EmulateTLS = true
			case "-linux"
				targetLinux = true
				targetWindows = false
				osHVFile = ".hv.posix"
				osCLIBFile = ".clib.posix"
			case "-win32"
				targetLinux = false
				targetWindows = true
				osHVFile = ".hv.win32"
				osCLIBFile = ".clib.win32"
			case "-g"
				DebugMode = true
			case "-o"
				OutputFile = args[i+1]
				i += 1
			case void
				if StringSpan(args[i][0..2]) == "-C"
				{
					num := StrToInt(args[i][2..0])
					FSReadFolder(StringSpan(args[i+1]),true,zObj ==> {
						if zObj is not in File
							return void

						zFil := zObj->{File^}
						nm := zFil.GetName()
						if nm.End == ".hv" or nm.End == osHVFile
						{
							fObj := new BoxFile(zFil)
							CodeFiles.Push(fObj)
							CodeSpaces[num].Files.Push(fObj)
						}else if nm.End == ".clib" or nm.End == osCLIBFile
						{
							spc := CodeSpaces[num]&
							spc.Modules.Push(new CLib(zFil,spc))
						}
					})
					i += 1
				}else if args[i] == "--vk" {
					i += 1
					CodeSpaces[-1].Modules.Push(new ModuleVulkan(args[i]))
				}else{
					file := FSGetFile(args[i])
					fileBox := new BoxFile(file)
					CodeFiles.Push(fileBox)
					CodeSpaces[2000].Files.Push(fileBox)
				}
		}
		i += 1
	}

	#ForceVirtualFunctions("vRepoObject")
	#ForceVirtualFunctions("File")
	#ForceVirtualFunctions("HV_Object")
	#ForceVirtualFunctions("HV_Context")
	#ForceVirtualFunctions("HV_Class")
	#ForceVirtualFunctions("HVB_FunctionEditor")
	#ForceVirtualFunctions("internalHVModuleBase")
	#ForceVirtualFunctions("BlobOnVector")
	#ForceVirtualFunctions("StringSpan")
	#ForceVirtualFunctions("String")
	#ForceVirtualFunctions("Stream")
	#ForceVirtualFunctions("XML")

	GetFuncMangle(StringSpan("main"))

	loadLex2(#File("Priority2.pr",true),PriorityData&)
	loadLex2(#File("LexHVFileRoot2.pr",true),LexHVFileRoot&)
	loadLex2(#File("LexHVInputVars2.pr",true),LexHVInputVars&)
	
	HVOperators.Insert(PriorityData.Opers[^])
	
	mac := #File("Mach.m",true)
	macMap := mac.GetMap()
	LoadLexMachine(macMap.Get(),mac.Size()) 

	CreateStandardTypes()
	TypeDatabaseInitDefaults()

	GBoolTrue = new BoxExeBool(true)
	GBoolFalse = new BoxExeBool(false)
	GObjNone = new BoxExeNone()
	GObjNull = new BoxExeNull()
	GObjVoid = new BoxExeVoid()
	GVoidObj = new GetLocalVarVoid()
	CreateBuiltins()
	ExchangeInit()
	TupleInit()
	PreInitTaskLocal()
	cuId = GetNewId()

	for compilerVar : AddCompilerVars
	{
		CompilerVars[compilerVar] = GBoolTrue
	}

	CodeFiles[^].LoadFiles()
	CodeFiles[^].ParseClasses()
	CodeFiles[^].ParseTypedefs()
	CodeFiles[^].ParseAppendClasses()
	CodeFiles[^].ParseFunctions()

	CreateStrType()
	ReflectionTypeInit()
	InitInternalsTypes()
	InitInternals()

	for spc : CodeSpaces
	{
		spc.Modules[^].Work()
	}

	CodeFiles[^].Parse()
	CodeFiles[^].AddWork()
	WorkBag.DoWork()


	InitTaskLocal()
	InitLambda()
	GParsedAllFiles.Emit()

	if NonStopBuild
	{
		return EnterCliMode()
	}

	WaitForParsingObjects()
	mainFunc := intGetFunc(mainFuncName)
	assert(mainFunc != null)
	assert(mainFunc is BoxFuncBody)
	mainFunc.ParseBody()

	CreateFuncCall("memset",![GObjNull,0hv,0hv])
	
	WaitForParsingObjects()

	mainFunc.ForceOutputName("main")

	WaitForParsingObjects()

	TLSStep()

	WaitForParsingObjects()

	if WorkBagPrintErrors()
		exit(-1)
	for it : CodeSpaces
	{
		for libs : it.Modules
			libs.CreateInitPart()
	}
	WaitForParsingObjects()

	if WorkBagPrintErrors()
		exit(-1)

	if OptimizeMode and not RunMode
	{
		printf("Optimization step\n")
		OptimizeCode()
	}

	printf("good to go\n")

	if RunMode
	{
		toRun := intGetFunc(RunModeFuncName)
		if toRun == null
		{
			printf("RunMode function not found\n")
			return -1
		}
		toRun.ParseBody()
		//toRun.WaitReadyState()
		WaitForParsingObjects()
		if WorkBagPrintErrors()
			exit(0)


		CompileAndRunCode(toRun->{BoxFuncBody^})
		return 0
	}

	outFile := new TFile(OutputFile,"wb")

	ctx := LLVMWriteContext
	ctx.writeStream = outFile

	if OptimizeMode
	{
		OptCodeGenLLVM(ctx&)
	}else{
		WriteCodeToStream(ctx&)
	}
	printf("done\n")

	outFile.Close()

	FinilizeCache()

	//for spc : CodeSpaces
	//{
	//	sizeCheck := AVLMap.{int,int}
	//	for it : spc.Types.bucket
	//	{
	//		iter := it
	//		i := 0
	//		while iter != null
	//		{
	//			i += 1
	//			iter = iter.next
	//		}
	//		sizeCheck[i] += 1
	//	}
	//	printf("map test\n")
	//	for it,ind : sizeCheck
	//	{
	//		printf("Depth %i Count %i\n",ind,it)
	//	}
	//}
	

	if CompileSettings?.OutputFilePath.IsSet()
	{
		assert(CompileSettings.BytecodeFilePath.IsSet())

		setPath := CompileSettings.OutputFilePath.Get()

		echo := TEchoStream

		echo << "clang " << CompileSettings.BytecodeFilePath.Get() << " -o " << CompileSettings.OutputFilePath.Get()
		echo << " -g -lm"

		system(echo.GetStr().Str())
	}

	exit(0)
	return 0
}


WorkBagPrintErrors := !() -> bool
{
	if WorkBag.WorkCount() == 0
		return false

	printf("failed to do some work %i\n",WorkBag.works.Size())

	for it : WorkBag.works
	{
		er := it.GetErrorMessage()
		if er->AsString != null
		{
			puts(er.Str())
		} else if it is CWorkClassCompile
		{
			printf("could not compile class %s\n",it->{CWorkClassCompile^}.itClass.Name)
		}else if it is CWorkFuncCompile
		{
			cWork := it->{CWorkFuncCompile^}
			printf("could not compile function %s %s:%i\n",cWork.itFunc.Name,cWork.itFunc.GetFileScope().fileName,cWork.itLine)
		}
	}
	return true
}

WorkToError := !(CWorkUnit^ itWork) -> Str
{
	st := TEchoStream
	switch itWork is
	{
	case CWorkClassCompile
		st << "could not compile class " << itWork.itClass.Name
		return st.GetString().Str()
	case CWorkFuncCompile
		st << "could not compile function " << itWork.itFunc.Name.GetString().Str() << " "<< itWork.itFunc.GetFileScope().fileName.GetString().Str() << ":" << itWork.itLine
		return st.GetString().Str()
	case void
		return itWork.GetErrorMessage().Str()
	}
}


WaitForParsingObjects := !() -> void
{
	TaskYield()

	prevCount := WorkBag.WorkCount()
	used := 0
	maxUses := 50
	while true
	{
		if GHotloadCntx.HaveWork()
		{
			ReloadApply(GHotloadCntx&)
			GHotloadCntx.Reset()
		}

		WorkBag.DoWork()
		if WorkBag.WorkCount() == 0
			break
		nowCount := WorkBag.WorkCount()

		if nowCount != prevCount
		{
			used = 0
			prevCount = nowCount
		}else{
			used += 1
			if used >= maxUses
				break
		}


		TaskYield()
	}
}

WriteCodeToStream := !(LLVMWriteContext^ ctx) -> void
{
	PrintDeclares(ctx)
	if DebugMode
		PrintDebugMeta(ctx)

	AllClasses[^].PrintAsType(ctx)
	UserModules[^].bodyClass?.PrintAsType(ctx)
	for spc : CodeSpaces
	{
		for fil : spc.Files
		{
			GDebugFileId = fil.fileId
			fil.FileClasses[^].PrintAsType(ctx)
		}
	}

	GDebugFileId = DummyFile.fileId
	DummyFile.FileClasses[^].PrintAsType(ctx)

	GlobalVars2[^].PrintCodeVar(ctx)
	for spc : CodeSpaces
	{
		spc.Globals[^][^].PrintCode(ctx)
		for fil : spc.Files
		{
			fil.PrintCode(ctx)
		}
	}
	DummyFile?.PrintCode(ctx)

	for st : GlobalStrings
	{
		st.PrintCode(ctx)
	}
	PrintEmbeddedFiles(ctx)
	for spc : CodeSpaces
	{
		for lb : spc.Modules
		{	
			lb.PrintCode(ctx)
		}
		for fil : spc.Files
		{
			GDebugFileId = fil.fileId
		}
	}
	AllFunctions[^].PrintCode(ctx)

	while GDebugTypePrintMeta.Size() != 0
	{
		GDebugTypePrintMeta[0].PrintMeta(ctx)
		GDebugTypePrintMeta.Pop()
	}
}

PrintDeclares := !(LLVMWriteContext^ ctx) -> void
{
	PrintBuildInMinMax(ctx)
	f := ctx.writeStream

	f^ << "declare float     @llvm.pow.f32(float  %Val, float %Power)\n"
	f^ << "declare double    @llvm.pow.f64(double %Val, double %Power)\n"
	f^ << "declare float     @llvm.sqrt.f32(float %Val)\n"
	f^ << "declare double    @llvm.sqrt.f64(double %Val)\n"
	f^ << "declare float     @llvm.cos.f32(float  %Val)\n"
	f^ << "declare float     @llvm.sin.f32(float  %Val)\n"
	f^ << "declare double    @llvm.cos.f64(double %Val)\n"
	f^ << "declare double    @llvm.sin.f64(double %Val)\n"
	f^ << "declare i32 @llvm.eh.sjlj.setjmp(i8* %abc) #1\n"
	f^ << "declare void @llvm.eh.sjlj.longjmp(i8* %abc) #3\n"
	f^ << "declare i32 @setjmp(i8* %abc) #1\n"
	f^ << "declare void @longjmp(i8* %abc,i32 %ty) #3\n"
	f^ << "declare i8* @llvm.eh.sjlj.lsda() #0\n"
	f^ << "declare void @llvm.debugtrap() #0\n"
	f^ << "declare i8* @llvm.frameaddress.p0i8(i32 %asd) #2\n"
	f^ << "declare i8* @llvm.stacksave() #1\n"
	f^ << "declare i8* @llvm.stackrestore(i8* %abc) #0\n"
	f^ << "declare float @llvm.vector.reduce.fadd.f32.v4f32(float %acc, <4 x float> %a)\n"
	f^ << "declare float @llvm.vector.reduce.fadd.f32.v3f32(float %acc, <3 x float> %a)\n"
	f^ << "declare float @llvm.vector.reduce.fadd.f32.v2f32(float %acc, <2 x float> %a)\n"
	f^ << "declare float @llvm.vector.reduce.v2.fadd.f32.v4f32(float %start_value, <4 x float> %a)\n"
	f^ << "declare float @llvm.vector.reduce.v2.fadd.f32.v3f32(float %start_value, <3 x float> %a)\n"
	f^ << "declare float @llvm.vector.reduce.v2.fadd.f32.v2f32(float %start_value, <2 x float> %a)\n"
	f^ << "attributes #0 = { nounwind \"target-cpu\"=\"x86-64\"  }\n"
	f^ << "attributes #1 = { nounwind }\n"
	f^ << "attributes #2 = { nounwind readnone}\n"
	f^ << "attributes #3 = { nounwind noreturn}\n"
	f^ << "%OpaqType = type {i1}\n"
	f^ << "%Vec4f = type <4 x float>\n"
	f^ << "%Vec3f = type <3 x float>\n"
	f^ << "%Vec2f = type <2 x float>\n"

	f^ << "declare void @llvm.va_start(i8* %a)\n"
	f^ << "declare void @llvm.va_end(i8* %a)\n"
	f^ << "declare void @llvm.va_copy(i8* %a,i8* %b)\n"

	f^ << "declare void @llvm.memset.p0i8.i64(i8* %dest, i8 %val,i64 %len, i1 %isvolatile)\n"
	f^ << "declare void @llvm.memset.inline.p0.p0i8.i32(i8* %ptr,i8 %val,i32 %len,i1 %isVolatile) #3\n"

	f^ << "declare void @llvm.x86.wrgsbase.64(i64)\n"
	f^ << "declare i64 @llvm.x86.rdgsbase.64()\n"
	
}

cuId := int
PrintDebugMeta := !(LLVMWriteContext^ ctx) -> void
{
	if not DebugMode
		return void
	fil := ctx.writeStream

	globVar := GetNewId()

	fileId := 0

	for spc : CodeSpaces
	{
		for fil : spc.Files
		{
			fileId = fil.fileId
		}
		if fileId != 0
			break
	}


	fil^ << "!llvm.dbg.cu = !{!"<< cuId <<"}\n"
	fil^ << "!" << cuId << "= distinct !DICompileUnit(producer: \"max\", isOptimized: false, runtimeVersion: 0,emissionKind: FullDebug, enums: !{},globals: !"<< globVar <<", language: DW_LANG_C99,file: !"<< fileId <<")\n"

	nm := GetNewId()
	fil^ << "!" << nm << " = !{!\"Taxon's stupid compiler\"}\n" 
	fil^ << "!llvm.ident = !{!" << nm <<"}\n"
	fil^ << "declare void @llvm.dbg.declare(metadata, metadata, metadata)\n"
	fil^ << "declare void @llvm.dbg.value(metadata, metadata, metadata)\n"
	fil^ << "declare void @llvm.dbg.addr(metadata, metadata, metadata)\n"

	dwrdV := GetNewId() fil^ << "!" << dwrdV << " = !{i32 2, !\"Dwarf Version\", i32 4}\n"
	DbgInf := GetNewId() fil^ << "!" << DbgInf << " = !{i32 2, !\"Debug Info Version\",i32 3}\n"
	WchSize := GetNewId() fil^ << "!" << WchSize << " = !{i32 1, !\"wchar_size\",i32 4}\n"
	PicLevel := GetNewId() fil^ << "!" << PicLevel << " = !{i32 7, !\"PIC Level\", i32 2}\n"
	PieLevel := GetNewId() fil^ << "!" << PieLevel << " = !{i32 7, !\"PIE Level\", i32 2}\n"
	fil^ << "!llvm.module.flags = !{!" << dwrdV << ",!" << DbgInf << ",!" << WchSize << ",!" << PicLevel << ",!" << PieLevel << "}\n"

	fil^ << "!" << globVar << " = !{"
	fil^ << "}\n"


	//if DebugPretty.Size() != 0
	//{
	//	fattyPrint := (char^ pStr) ==> {
	//		miniBuff := char[1024]
	//		c := 0
	//		i := 0
	//		while pStr[i] != 0
	//		{
	//			if pStr[i] in "\"\n"
	//			{
	//				switch pStr[i]
	//				{
	//					case '\"'
	//						miniBuff[c++] = '\\'
	//						miniBuff[c++] = '5'
	//						miniBuff[c++] = 'C'
	//						miniBuff[c++] = '\\'
	//						miniBuff[c++] = '2'
	//						miniBuff[c++] = '2'
	//					case '\n'
	//						miniBuff[c++] = '\\'
	//						miniBuff[c++] = '5'
	//						miniBuff[c++] = 'C'
	//				}
	//				if pStr[i] == '\n' and pStr[i+1] == 0
	//				{
	//					c -= 3
	//				}
	//			}else{
	//				miniBuff[c++] = pStr[i]
	//			}
	//			i += 1
	//		}
	//		miniBuff[c] = 0
	//		fil << miniBuff[0]&
	//	}
	//	fil << "module asm \".pushsection \\22.debug_gdb_scripts\\22, \\22MS\\22, @progbits,1\"\n"
	//	fil << "module asm \".byte 4\"\n"
	//	for DebugPretty
	//	{
	//		fil << "module asm \".asciz \\22"
	//		fattyPrint(it)
	//		fil << "\\5Cn\\22\"\n"
	//	}
	//	fil << "module asm \".byte 0\"\n"
	//	fil << "module asm \".popsection\"\n"
	//}
}
