

templatePrefixElement := class
{
	Tok := Token^
	Value := BoxExeObj^
	DefaultToken := Token^

	this := !(Token^ arg1, BoxExeObj^ arg2) -> void
	{
		Tok = arg1
		Value = arg2
	}
	"=" := default
}

TemplatePrefix := class
{
	Constants := List.{templatePrefixElement}
	ConstantsMinSize := int

	CheckToken := !(Token^ cns) -> void
	{
		SyntaxCompress(cns,LexHVInputVars)
		iter := cns.Down
		while iter != null
		{
			if iter.GetValue() == ","
			{
				iter = iter.Right
				continue
			}

			rc := AVLMap.{Str,BoxUnit^}
			cItm := CheckTemplateConst(null,iter,rc)
			Constants.Emplace(iter,cItm)

			iter = iter.Right

			if iter?.GetValue() == "="
			{
				iter = iter.Right
				if iter == null
				{
					//TODO emit error, incorrect
					return void
				}
				Constants[Constants.Size()-1].DefaultToken = iter
				iter = iter.Right
			}else{
				ConstantsMinSize = Constants.Size() - 1
			}
		}
	}

	IsOneOption := !() -> bool
	{
		resConsts := AVLMap.{StringSpan,BoxUnit^}
		for it : Constants
		{
			if it.Value == null
				return false
		}
		return true
	}
	CheckByCount := !(int count) -> bool
	{
		if count < ConstantsMinSize
			return false
		if count > Constants.Size()
			return false
		return true
	}
	CheckConsts := !(BoxExeConstObj^[] consts, AVLMap.{Str,BoxUnit^} resCnsts,BoxExeObj^[] objs = null,Type^[] objsTypes,Token^[] typeTokens = null) -> bool
	{
		if not CheckByCount(consts.Size())
			return false
		
		if objs != null and typeTokens != null and objsTypes != null
		{
			for i : min(objs.Size(),typeTokens.Size())
			{
				obj := objs[i]
				objType := objsTypes[i]
				tok := typeTokens[i]
				if objType == null or tok == null
					continue
				CheckTemplateType(obj,objType,tok,resCnsts)
			}
		}
		
		for i : min(Constants.Size(),consts.Size())
		{
			myConst := ref Constants[i]
			inConst := consts[i]

			if myConst.Value? != inConst
				return false
			outConst := CheckTemplateConst(inConst,myConst.Tok,resCnsts)
			if outConst == null
				return false

			if myConst.Value? != outConst?
				return false
		}
		if consts.Size() < Constants.Size()
		{
			for i : (consts.Size()..(Constants.Size() - 1))
			{
				resObj := CheckTemplateConst(null,Constants[i].DefaultToken,resCnsts)
				if resObj == null
				{
					return false
				}else{
					res2 := CheckTemplateConst(resObj,Constants[i].Tok,resCnsts)
					if res2 == null
						return false
				}
			}
		}
		return true
	}
	PopulateVars := !(AVLMap.{Str,BoxUnit^} namedCnsts,List.{BoxUnit^} resList) -> void
	{
		for it,ind : namedCnsts
		{
			if it is TypeVariadicVar
			{
				resList.Push(it)
			}
		}
	}
}
