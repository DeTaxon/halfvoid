ModuleInterface := class
{
	Work := virtual !() -> void {}
	PrintCode := virtual !(Stream^ f) -> void {}
	GetType := virtual !(StringSpan name) -> Type^ { return null }
	GetItem := virtual !(StringSpan name) -> BoxUnit^ { return null}
	CreateInitPart := virtual !() -> void {}
}

CLib := class extend ModuleInterface
{
	textMap := StringSpan
	libFile := vRepoFile^
	fileMap := FileView^
	js := Json^


	itFuncs := AVLMap.{StringSpan,BoxUnit^}
	itConsts := AVLMap.{StringSpan,BoxUnit^}
	itStructs := AVLMap.{StringSpan,BoxUnit^}

	itPreFuncs := AVLMap.{StringSpan,StringSpan}
	itPreConsts := AVLMap.{StringSpan,StringSpan}
	itPreStructs := AVLMap.{StringSpan,JsonNode^}

	dlls := List.{StringSpan}
	initFuncName := StringSpan
	linkType := StringSpan

	initFunc := BoxFuncBodyStr^
	addedToStartInitFunc := bool

	this := !(vRepoFile^ fil) -> void
	{
		linkType = StringSpan("dynamic")
		fileMap = fil.GetMap()
		libFile = fil
	}
	Work := virtual !() -> void
	{
		textMap = StringSpan(fileMap.Get(),libFile.Size())

		js = new Json
		js.ParseString(fileMap.Get()->{char^},textMap.Size())

		for nd : js^
		{
			switch nd.Key()
			{
				case "funcs"
					for fnc : nd^
					{
						itPreFuncs[fnc.Key()] = fnc.Value()
						GetFuncMangle(fnc.Key())
					}
				case "libs"
					for lbs : nd^
					{
						dlls.Push(lbs.Value())
					}
				case "initname"
					initFuncName = nd.Value()
				case "consts"
					for cns : nd^
					{
						itPreConsts[cns.Key()] = cns.Value()
					}
				case "link"
					linkType = nd.Value()
				case "structs"
					for lbs : nd^
					{
						itPreStructs[lbs.Key()] = lbs
					}
					
			}
		}
		if JITMode
			linkType = StringSpan("dynamic")
	
	}
	PrintCode := virtual !(Stream^ f) -> void
	{
		for it : itFuncs
		{
			if it is in BoxFuncDeclare
			{
				it->{BoxFuncDeclare^}.PrintCode(f)
			}
		}
	}
	
	GetItem := virtual !(StringSpan name) -> BoxUnit^
	{
		if itFuncs.Contain(name)
			return itFuncs[name]

		if itConsts.Contain(name)
			return itConsts[name]
		
		if itStructs.Contain(name)
			return itStructs[name]

		if name == initFuncName
		{
			if initFunc == null
			{
				initFunc = new BoxFuncBodyStr(GetFuncType(GTypeVoid))
				itFuncs[name] = initFunc
			}
			return initFunc
		}

		if itPreFuncs.Contain(name)
		{
			return innerGetFunc(name)
		}

		if itPreConsts.Contain(name)
		{
			val := strtol(itPreConsts[name].GetString().Str(),null,0)
			itConsts[name] = GetExeInt(val) //TODO add float support
			return itConsts[name]
		}

		if itPreStructs.Contain(name)
		{
			return innerMakeType(name)
		}
		return null
	}
	GetType := virtual !(StringSpan name) -> Type^ 
	{ 
		if itStructs.Contain(name)
		{
			assert(itStructs[name] is ConstType)
			return itStructs[name]->{ConstType^}.Value
		}
		if itPreStructs.Contain(name)
		{
			tp := innerMakeType(name)
			assert(tp is ConstType)
			return tp->{ConstType^}.Value
		}
		return null 
	}
	innerMakeType := !(StringSpan name) -> BoxUnit^
	{
		nd := itPreStructs[name]

		newStruct := new BoxClassVulkan
		newStruct.ItName = StringSpan(name)
		newStruct.ItId = GetNewId()
		newStruct.ItType = new TypeClass(newStruct)

		for itm : nd^
		{
			ind := TokenIndent(itm.Value())
			ptrs := 0
			i := ind.Value.Size() - 1
			while i >= 0
			{
				if ind.Value[i] != '^'
					break
				ptrs += 1
				i -= 1
			}
			ind.Value = ind.Value[0..(-ptrs)]
			tp := ParseType(ind&)
			assert(tp != null) //TODO emit error
			for j : ptrs
				tp = tp.GetPoint()
			newStruct.Fields.Push(new FieldParam(itm.Key(),tp))
		}
		buildCtx := ClassBuildContext
		newStruct.InheritStep(buildCtx)
		AllClasses.Push(newStruct)
		newStruct.FinilizeCreation()

		res := GetConstType(newStruct.ItType)
		itStructs[name] = res
		return res
	}
	innerGetFunc := !(StringSpan name) -> BoxUnit^
	{
		bdy := itPreFuncs[name]

		c := 0
		typs := Type^[40]
		isRefs := bool[40]
		isVarg := false
		bdy.DivideStr(",", x ==> {
			points := 0
			txt := x

			if txt == "..."
			{
				isVarg = true
				return void
			}

			while txt[-1..0] == "^"
			{
				points += 1
				txt = txt[0..-1]
			}
			txtToken := TokenIndent(txt)
			typs[c] = ParseType(txtToken&)
			if typs[c] == null
			{
				printf("Could not parse type <%s> for function %s\n",txt,name)
				assert(false)
			}
			for i : points
			{
				typs[c] = typs[c].GetPoint()
			}
			c += 1
		})
		fType := GetFuncType(c-1, typs[1]&,isRefs[0]&,typs[0],false,isVarg)

		if fType == null
		{
			printf("Could not create clib function %s\n",name)
			return null
		}

		if linkType == "dynamic"
		{
			glVar := CreateGlobalVar(name,fType.GetPoint(),false)
			itFuncs[name] = glVar

			if not addedToStartInitFunc
			{
				iFunc := GetItem(initFuncName)
				assert(iFunc is in BoxFunc)
				MarkedAddCallAtStart(iFunc->{BoxFunc^})
				addedToStartInitFunc = true
			}
			return glVar
		}

		func := new BoxFuncDeclare(fType,name)
		itFuncs[name] = func
		return func
	}

	CreateInitPart := virtual !() -> void
	{
		if initFunc == null
			return void

		dt := TEchoStream
		dt << "lib := GetLibrary(!["
		for i : dlls.Size()
		{
			if i != 0
				dt << ","
			dt << "\"" << dlls[i] << "\""
		}
		dt << "])\n"

		//dt << "printf(\"called " << initFuncName << "\n\")\n"

		if targetWindows
		{
			dllFile := vRepoFile^
			for it : dlls
			{
				if it.End != ".dll"
					continue
				
				dllFile = libFile.GetFile(it)
				if dllFile != null
					break
			}
			if dllFile != null
			{
				dt << "if lib == null \n{\n"
				dt << "lib = GetLibrary(#File(\"" << dllFile.GetPath() << "\"))\n"
				dt << "}\n"
			}
		}
		if targetLinux
		{
			dllFile := vRepoFile^
			for it : dlls
			{
				if it.End != ".so"
					continue
				
				dllFile = libFile.GetFile(it)
				if dllFile != null
					break
			}
			if dllFile != null
			{
				dt << "if lib == null \n{\n"
				dt << "lib = GetLibrary(#File(\"" << dllFile.GetPath() << "\"))\n"
				dt << "}\n"
			}
		}
		for it, ind : itFuncs
		{
			if ind == initFuncName
				continue
			dt << ind << "&->{void^^}^ = lib.Get(\"" << ind << "\")\n"
		}

		st := dt.GetString()
		st.IncRef() //TODO memory leak

		blank := StringSpan(st.Str())
		initFunc.ParseString(blank)
	}
}


BoxFileDummy := class extend BoxFile
{
	PrintCode := virtual !(Stream^ f) -> void
	{
		if DebugMode //later
		{
			f^ << "!" << fileId  << " = !DIFile(filename: \"" 
			f^ << "DummyFile" << "\", directory: \""
			f^ <<  "/" <<"\")\n"
		}
	}
}

DummyFile := BoxFile^
GetAnyFile := !() -> BoxFile^
{
	if DummyFile != null
		return DummyFile

	res := new BoxFileDummy
	res.fileName = StringSpan("DummyFile")
	DummyFile = res
	return res
}
