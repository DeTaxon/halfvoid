TryParseSwitch := !(Token^ itm) -> BoxExeObj^
{
	if itm.Down.Right?.Right?.GetValue() == "is"
	{
		return ParseBoxSwitchIs(itm)
	}

	return TryParseRegularSwitch(itm)
}

TryParseRegularSwitch := !(Token^ obj) -> BoxExeObj^
{
	itr := obj.Down

	itr = itr.Right

	mainCall := TryGetExeCall(itr)

	if mainCall == null
	{
		CurrentWork?.SetErrorMessage(itr.MakeError("could not get switch satatement"))
		return void
	}

	if mainCall.GetType() is TypeEnum
		return CreateSwitchOnEnum(obj,mainCall)

	fSpaceBase := FieldSpace^
	if mainCall is FieldSpaceHolder
	{
		sh := mainCall->{FieldSpaceHolder^}
		mainCall = sh.downObj
		fSpaceBase = sh.itField
	}

	toSetVar := mainCall
	if mainCall.IsMem()
		toSetVar = new UnrefFuncCall(mainCall)

	
	mainVar := new LocalVar("",mainCall.GetType(),true,mainCall.IsMem())
	setCall := CreateFuncCall("=",![mainVar.CreateVarBaseCall(),toSetVar])
	
	if setCall == null
		return null
	

	mainVar.extraWork.Push(setCall)
	CurrentFunc.AddLocalVar(mainVar)

	itr = itr.Right

	assert(itr.GetValue() == "{}")

	SyntaxCompress(itr,PriorityData)
	itr = itr.Down
	
	currentCase := Token^
	startNode := Token^
	startNodeCount := int
	allConsts := true

	defaultNode := BoxBlock^

	cases := HybridQueue.{SwitchCase^,13}

	checkCase := () ==> {
		if currentCase == null
			return void

		thisCaseBlock := BoxBlock^

		if startNode != null
		{
			if startNodeCount != 1 or startNode.GetValue() != "{}"
			{
				startNode = UNext(startNode,new TokenSymbol(StringSpan("{}"),1) ,startNodeCount)
			}
			thisCaseBlock = new BoxBlock(startNode)
		}
		
		if currentCase.Down.Right is TokenIndent and currentCase.Down.Right->{TokenIndent^}.Value == "void"
		{
			//todo if too much default cases
			defaultNode = thisCaseBlock
			return void
		}
		checkRes := BoxExeObj^

		caseVal := currentCase.Down.Right
		caseCheckFuncName := StringSpan("==")
		if caseVal.GetValue() == "in"
		{
			caseVal = caseVal.Right
			caseCheckFuncName = StringSpan("in")
			allConsts = false //TODO cases where "in ![1,2,3]" ,  " in 6..10 "
		}

		caseCheck := TryGetExeCall(caseVal)
		if caseCheck == null
		{
			CurrentWork?.SetErrorMessage(currentCase.MakeError("Could not get case object"))
			return void
		}
		allConsts = false
		baseObj := caseCheck

		getVarObj := mainVar.CreateVarCall()

		if fSpaceBase != null
		{
			getVarObj = new FieldSpaceHolder(getVarObj,fSpaceBase)
		}
		
		objs := CheckExeDownList
		objs.Push(getVarObj)
		objs.Push(caseCheck)
		checkRes := BoxExeObj^
		if caseCheckFuncName == "=="
		{
			checkRes = innertTryGetCompareOverSpaceship(caseCheckFuncName,objs,caseVal)
		}
		if checkRes == null
		{
			checkRes = innerTryGetInfixCall(caseCheckFuncName,objs,caseVal)
		}

		if checkRes == null
		{
			CurrentWork?.SetErrorMessage(currentCase.MakeError("Can not compare case object with switch statement"))
			return void
		}

		newNode := new SwitchCase()
		newNode.caseBody = thisCaseBlock
		newNode.cmpCheck = checkRes
		newNode.baseObj = baseObj

		cases.Push(newNode)

	}

	while itr != null
	{
		if itr.Down?.GetValue() == "case"
		{
			checkCase()
			currentCase = itr
			startNode = null
			startNodeCount = 0
		}else{
			if startNode == null
				startNode = itr
			startNodeCount += 1
		}
		itr = itr.Right
	}
	if currentCase != null
	{
		checkCase()
	}

	resSwitch := new BoxSwitch(mainCall,mainVar,cases,defaultNode)

	if allConsts
	{
		if mainCall.GetType() is TypeEnum
		{
			resSwitch.defaultLabel = new BoxLabel()
			resSwitch->SetType(BoxSwitchOnEnum)
		}else{
			//assert(false) //TODO
		}
	}
	return resSwitch
}

SwitchCase := class
{
	baseObj := BoxExeObj^
	cmpCheck := BoxExeObj^
	caseBody := BoxBlock^
	useNode := BoxLabel^
	nopeLabel := BoxLabel^
	
	defBlock := DeferBlock

	extraConsts := HybridQueue.{BoxExeConstObj^,13}

	this := !() -> void
	{
		useNode = new BoxLabel()
		nopeLabel = new BoxLabel()

		defBlock."this"()
	}

	PrintIt := !(LLVMWriteContext^ ctx , BoxLabel^ qLabel) -> void
	{
		defBlock.StartBlock(ctx)
		cmpCheck.PrintPre(ctx)
		defBlock.EndBlock(ctx)

		PrintBranch(ctx,cmpCheck,useNode,nopeLabel)
		PrintItBase(ctx,qLabel)
	}
	PrintItBase := !(LLVMWriteContext^ ctx , BoxLabel^ qLabel) -> void
	{
		useNode.PrintCode(ctx)
		caseBody?.PrintCode(ctx)
		qLabel.PrintGo(ctx)
		nopeLabel.PrintCode(ctx)
	}
}
BoxSwitch := class extend BoxExeObj
{
	mainCall := BoxExeObj^
	mainVar := LocalVar^

	quitNode := BoxLabel^

	caseNodes := List.{SwitchCase^}

	defaultLabel := BoxLabel^
	defaultNode := BoxBlock^

	this := !(BoxExeObj^ mCall, LocalVar^ mVar , SwitchCase^[] cases,BoxBlock^ defNode) -> void
	{
		ObjType = GTypeVoid
		quitNode = new BoxLabel()

		mainCall = mCall
		mainVar = mVar
		defaultNode = defNode
		caseNodes.Push(cases[^])
	}
	PrintDefaultUse := virtual !(LLVMWriteContext^ ctx) -> void
	{
		PrintCode(ctx)
	}
	PrintCode := virtual !(LLVMWriteContext^ ctx) -> void
	{
		mainVar.PrintCode(ctx)

		for it : caseNodes
		{
			it.PrintIt(ctx,quitNode)
		}
		defaultNode?.PrintCode(ctx)
		quitNode?.PrintCode(ctx)
	}
	PrintDebugMeta := virtual !(LLVMWriteContext^ ctx) -> void
	{
		for it : caseNodes
			it.caseBody?.PrintDebugMeta(ctx)
		defaultNode?.PrintDebugMeta(ctx)
	}
}
