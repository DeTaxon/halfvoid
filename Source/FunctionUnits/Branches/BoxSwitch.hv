TryParseSwitch := !(Token^ itm) -> BoxExeObj^
{
	if itm.Down.Right?.Right?.GetValue() == "is"
	{
		return ParseBoxSwitchIs(itm)
	}

	return TryParseRegularSwitch(itm)
}

TryParseRegularSwitch := !(Token^ obj) -> BoxExeObj^
{
	itr := obj.Down

	itr = itr.Right

	mainCall := TryGetExeCall(itr)

	if mainCall == null
		itr.EmitError("could not get switch satatement")

	toSetVar := mainCall
	if mainCall.IsMem()
		toSetVar = new UnrefFuncCall(mainCall)
	
	mainVar := new LocalVar(StringSpan(""),mainCall.GetType(),true,mainCall.IsMem())
	setCall := CreateFuncCall(StringSpan("="),![mainVar.proxy&,toSetVar])
	
	if setCall == null
		obj.EmitError("Unknown error,  switch base does not have operator =")

	mainVar.extraWork.Push(setCall)
	CurrentFunc.LocalVars.Push(mainVar)

	itr = itr.Right

	assert(itr.GetValue() == "{}")

	SyntaxCompress(itr,PriorityData)
	itr = itr.Down
	
	currentCase := Token^
	startNode := Token^
	startNodeCount := int
	allConsts := true

	defaultNode := BoxBlock^

	cases := HybridQueue.{SwitchCase^,13}

	checkCase := () ==> {
		if currentCase == null
			return void

		thisCaseBlock := BoxBlock^

		if startNode != null
		{
			if startNodeCount != 1 or startNode.GetValue() != "{}"
			{
				startNode = UNext(startNode,new TokenSymbol(StringSpan("{}"),1) ,startNodeCount)
			}
			thisCaseBlock = new BoxBlock(startNode)
		}
		
		if currentCase.Down.Right is TokenIndent and currentCase.Down.Right->{TokenIndent^}.Value == "void"
		{
			//todo if too much default cases
			defaultNode = thisCaseBlock
			return void
		}
		checkRes := BoxExeObj^

		caseVal := currentCase.Down.Right
		caseCheckFuncName := StringSpan("==")
		if caseVal.GetValue() == "in"
		{
			caseVal = caseVal.Right
			caseCheckFuncName = StringSpan("in")
			allConsts = false //TODO cases where "in ![1,2,3]" ,  " in 6..10 "
		}

		caseCheck := TryGetExeCall(caseVal)
		if caseCheck == null
			currentCase.EmitError("Could not get case object")
		if caseCheck is BoxExeString and mainCall.GetType() is TypeEnum
		{
			asEn := mainCall.GetType()->{TypeEnum^}.ToEnum
			if not asEn.GetEnumIndex(StringSpan(caseCheck->{BoxExeString^}.Value.Str()),null)
			{
				caseVal.EmitError("Enumeration does not contain this value")
			}
		}else {
			allConsts = false
		}
		baseObj := caseCheck
		
		objs := CheckExeDownList
		objs.Push(mainVar.CreateVarCall() )
		objs.Push(caseCheck)
		checkRes := BoxExeObj^
		if caseCheckFuncName == "=="
		{
			checkRes = innertTryGetCompareOverSpaceship(caseCheckFuncName,objs,caseVal)
		}
		if checkRes == null
		{
			checkRes = innerTryGetInfixCall(caseCheckFuncName,objs,caseVal)
		}

		if checkRes == null
		{
			currentCase.EmitError("Can not compare case object with switch statement")
		}

		newNode := new SwitchCase()
		newNode.caseBody = thisCaseBlock
		newNode.cmpCheck = checkRes
		newNode.baseObj = baseObj

		cases.Push(newNode)

	}

	while itr != null
	{
		if itr.Down?.GetValue() == "case"
		{
			checkCase()
			currentCase = itr
			startNode = null
			startNodeCount = 0
		}else{
			if startNode == null
				startNode = itr
			startNodeCount += 1
		}
		itr = itr.Right
	}
	if currentCase != null
	{
		checkCase()
	}

	resSwitch := new BoxSwitch(mainCall,mainVar,cases,defaultNode)

	if allConsts
	{
		if mainCall.GetType() is TypeEnum
		{
			resSwitch.defaultLabel = new BoxLabel()
			resSwitch->SetType(BoxSwitchOnEnum)
		}else{
			assert(false)
		}
	}
	return resSwitch
}

SwitchCase := class
{
	baseObj := BoxExeObj^
	cmpCheck := BoxExeObj^
	caseBody := BoxBlock^
	useNode := BoxLabel^
	nopeLabel := BoxLabel^
	
	defBlock := DeferBlock

	this := !() -> void
	{
		useNode = new BoxLabel()
		nopeLabel = new BoxLabel()

		defBlock."this"()
	}

	PrintIt := !(LLVMWriteContext^ ctx , BoxLabel^ qLabel) -> void
	{
		defBlock.StartBlock(ctx)
		cmpCheck.PrintPre(ctx)
		defBlock.EndBlock(ctx)

		PrintBranch(ctx,cmpCheck,useNode,nopeLabel)
		PrintItBase(ctx,qLabel)
	}
	PrintItBase := !(LLVMWriteContext^ ctx , BoxLabel^ qLabel) -> void
	{
		useNode.PrintCode(ctx)
		caseBody?.PrintCode(ctx)
		qLabel.PrintGo(ctx)
		nopeLabel.PrintCode(ctx)
	}
}
BoxSwitch := class extend BoxExeObj
{
	mainCall := BoxExeObj^
	mainVar := LocalVar^

	quitNode := BoxLabel^

	caseNodes := List.{SwitchCase^}

	defaultLabel := BoxLabel^
	defaultNode := BoxBlock^

	this := !(BoxExeObj^ mCall, LocalVar^ mVar , SwitchCase^[] cases,BoxBlock^ defNode) -> void
	{
		ObjType = GTypeVoid
		quitNode = new BoxLabel()

		mainCall = mCall
		mainVar = mVar
		defaultNode = defNode
		caseNodes.Push(cases[^])
	}
	PrintDefaultUse := virtual !(LLVMWriteContext^ ctx) -> void
	{
		PrintCode(ctx)
	}
	PrintCode := virtual !(LLVMWriteContext^ ctx) -> void
	{
		mainVar.PrintCode(ctx)

		for it : caseNodes
		{
			it.PrintIt(ctx,quitNode)
		}
		defaultNode?.PrintCode(ctx)
		quitNode?.PrintCode(ctx)
	}
	PrintDebugMeta := virtual !(LLVMWriteContext^ ctx) -> void
	{
		for it : caseNodes
			it.caseBody?.PrintDebugMeta(ctx)
		defaultNode?.PrintDebugMeta(ctx)
	}

}
BoxSwitchOnEnum := class extend BoxSwitch
{
	PrintCode := virtual !(LLVMWriteContext^ ctx) -> void
	{
		en := mainCall.GetType()->{TypeEnum^}.ToEnum
		bsTyp := Type^
		bsTyp = mainCall.GetType().Base
		f := ctx.writeStream

		mainCall.PrintPre(ctx)

		f^ << "switch "
		bsTyp.PrintType(ctx)
		f^ << " "
		mainCall.PrintUse(ctx)
		f^ << " , label "
		if defaultNode != null
		{
			defaultLabel.PrintLabel(ctx)
		}else{
			quitNode.PrintLabel(ctx)
		}
		f^ << " [ "
		for it : this.caseNodes
		{
			indX := int
			en.GetEnumIndex(it.baseObj->{BoxExeString^}.val,indX&)
			bsTyp.PrintType(ctx)
			f^ << " " << indX
			f^ << ", label "
			it.useNode.PrintLabel(ctx)
			f^ << "\n"
		}
		f^ << "]\n"
		for it : this.caseNodes
		{
			it.PrintItBase(ctx,quitNode)
			quitNode.PrintGo(ctx)
		}
		if defaultNode != null
		{
			defaultLabel.PrintLabelCreate(ctx)
			defaultNode.PrintCode(ctx)
			quitNode.PrintGo(ctx)
		}

		quitNode?.PrintCode(ctx)
	}
}
