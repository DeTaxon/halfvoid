
CreateSwitchOnEnum := !(Token^ obj,BoxExeObj^ mainCall) -> BoxExeObj^
{
	itr := obj.Down.Right

	toSetVar := mainCall
	if mainCall.IsMem()
		toSetVar = new UnrefFuncCall(mainCall)
	
	mainVar := new LocalVar("",mainCall.GetType(),true,mainCall.IsMem())
	setCall := CreateFuncCall("=",![mainVar.CreateVarBaseCall(),toSetVar])
	
	if setCall == null
		return null

	mainVar.extraWork.Push(setCall)
	CurrentFunc.AddLocalVar(mainVar)

	itr = itr.Right

	assert(itr.GetValue() == "{}")

	SyntaxCompress(itr,PriorityData)
	itr = itr.Down
	
	currentCase := Token^
	startNode := Token^
	startNodeCount := int
	allConsts := true

	defaultNode := BoxBlock^

	cases := HybridQueue.{SwitchCase^,13}

	checkCase := () ==> {
		if currentCase == null
			return void

		thisCaseBlock := BoxBlock^

		if startNode != null
		{
			if startNodeCount != 1 or startNode.GetValue() != "{}"
			{
				startNode = UNext(startNode,new TokenSymbol(StringSpan("{}"),1) ,startNodeCount)
			}
			thisCaseBlock = new BoxBlock(startNode)
		}
		
		if currentCase.Down.Right is TokenIndent and currentCase.Down.Right->{TokenIndent^}.Value == "void"
		{
			//todo if too much default cases
			defaultNode = thisCaseBlock
			return void
		}
		checkRes := BoxExeObj^

		extraConsts := HybridQueue.{BoxExeConstObj^,13}
		caseVal := currentCase.Down.Right
		caseCheck := BoxExeObj^
		caseCheckFuncName := StringSpan("==")
		if caseVal.GetValue() == "in"
		{
			caseVal = caseVal.Right
			caseCheckFuncName = StringSpan("in")

			caseCheck = TryGetExeCall(caseVal)

			isInConsts := false
			if caseCheck? is BoxArrayHolder
			{
				isInConsts = true
				cv := caseCheck->{BoxArrayHolder^}
				for it : cv.vals
				{
					if it is not in BoxExeString
					{
						isInConsts = false
					}else{
						extraConsts.Push(it->{BoxExeConstObj^})
					}

					//TODO error check
				}
			}

			if not isInConsts
			{
				allConsts = false
			}
		}else{
			caseCheck = TryGetExeCall(caseVal)
		}

		if caseCheck == null
		{
			CurrentWork?.SetErrorMessage(currentCase.MakeError("Could not get case object"))
			return void
		}
		if caseCheck is BoxExeString
		{
			asEn := mainCall.GetType()->{TypeEnum^}.ToEnum
			if not asEn.GetEnumIndex(caseCheck->{BoxExeString^}.Value,null)
			{
				CurrentWork?.SetErrorMessage(caseVal.MakeError("Enumeration does not contain this value"))
				return void
			}
		}else if caseCheck is BoxArrayHolder
		{
		}else {
			allConsts = false
		}
		baseObj := caseCheck
		
		objs := CheckExeDownList
		objs.Push(mainVar.CreateVarCall() )
		objs.Push(caseCheck)
		checkRes := BoxExeObj^
		if caseCheckFuncName == "=="
		{
			checkRes = innertTryGetCompareOverSpaceship(caseCheckFuncName,objs,caseVal)
		}
		if checkRes == null
		{
			checkRes = innerTryGetInfixCall(caseCheckFuncName,objs,caseVal)
		}

		if checkRes == null and not allConsts
		{
			CurrentWork?.SetErrorMessage(currentCase.MakeError("Can not compare case object with switch statement"))
			return void
		}

		newNode := new SwitchCase()
		newNode.caseBody = thisCaseBlock
		newNode.cmpCheck = checkRes
		newNode.baseObj = baseObj

		newNode.extraConsts.Push(extraConsts[^])

		cases.Push(newNode)

	}

	while itr != null
	{
		if itr.Down?.GetValue() == "case"
		{
			checkCase()
			currentCase = itr
			startNode = null
			startNodeCount = 0
		}else{
			if startNode == null
				startNode = itr
			startNodeCount += 1
		}
		itr = itr.Right
	}
	if currentCase != null
	{
		checkCase()
	}

	resSwitch := new BoxSwitch(mainCall,mainVar,cases,defaultNode)

	{
		asEn := mainCall.GetType()->{TypeEnum^}.ToEnum
		DB_EnumUsage.Add(CurrentFunc?,asEn)
	}

	if allConsts
	{
		resSwitch.defaultLabel = new BoxLabel()
		resSwitch->SetType(BoxSwitchOnEnum)

	}
	return resSwitch
}

BoxSwitchOnEnum := class extend BoxSwitch
{
	this := !() -> void
	{
		ObjType = GTypeVoid
	}
	PrintCode := virtual !(LLVMWriteContext^ ctx) -> void
	{
		en := mainCall.GetType()->{TypeEnum^}.ToEnum
		bsTyp := Type^
		bsTyp = mainCall.GetType().Base
		f := ctx.writeStream

		mainCall.PrintPre(ctx)

		f^ << "switch "
		bsTyp.PrintType(ctx)
		f^ << " "
		mainCall.PrintUse(ctx)
		f^ << " , label "
		if defaultNode != null
		{
			defaultLabel.PrintLabel(ctx)
		}else{
			quitNode.PrintLabel(ctx)
		}
		f^ << " [ "
		for it : this.caseNodes
		{
			indX := int
			if it.baseObj? is BoxExeString
			{
				en.GetEnumIndex(it.baseObj->{BoxExeString^}.Value,indX&)
				bsTyp.PrintType(ctx)
				f^ << " " << indX
				f^ << ", label "
				it.useNode.PrintLabel(ctx)
				f^ << "\n"
			}
			for ec : it.extraConsts
			{
				if ec is not BoxExeString
					continue
				en.GetEnumIndex(ec->{BoxExeString^}.Value,indX&)
				bsTyp.PrintType(ctx)
				f^ << " " << indX
				f^ << ", label "
				it.useNode.PrintLabel(ctx)
				f^ << "\n"
			}
		}
		f^ << "]\n"
		for it : this.caseNodes
		{
			it.PrintItBase(ctx,quitNode)
			quitNode.PrintGo(ctx)
		}
		if defaultNode != null
		{
			defaultLabel.PrintLabelCreate(ctx)
			defaultNode.PrintCode(ctx)
			quitNode.PrintGo(ctx)
		}

		quitNode?.PrintCode(ctx)
	}
	WriteMC := virtual !(MCBuildContext^ ctx) -> WriteMCResult
	{
		en := mainCall.GetType()->{TypeEnum^}.ToEnum

		bsTyp := Type^
		bsTyp = mainCall.GetType().Base

		inVar := mainCall.WriteMC(ctx).CreatedId

		ql := ctx.CreateLabel()


		HVB_ins_switch_start(ctx,inVar)
		for it : this.caseNodes
		{
			indX := int
			if it.baseObj? is BoxExeString
			{
				en.GetEnumIndex(it.baseObj->{BoxExeString^}.Value,indX&)
				HVB_ins_switch_case(ctx,ctx.AddInteger(indX),ctx.GetLabel(it.useNode))
			}
			for ec : it.extraConsts
			{
				if ec is not BoxExeString
					continue
				en.GetEnumIndex(ec->{BoxExeString^}.Value,indX&)
				HVB_ins_switch_case(ctx,ctx.AddInteger(indX),ctx.GetLabel(it.useNode))
			}
		}
		HVB_ins_switch_end(ctx)

		defaultNode?.WriteMC(ctx)
		HVB_ins_jump(ctx,ql)

		for it : this.caseNodes
		{
			HVB_ins_label(ctx,ctx.GetLabel(it.useNode))
			it.caseBody.WriteMC(ctx)
			HVB_ins_jump(ctx,ql)
		}

		HVB_ins_label(ctx,ql)
		
	}
}
