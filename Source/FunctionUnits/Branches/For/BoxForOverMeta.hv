
BoxForOverMeta := class extend BoxExeObj
{
	blocks := List.{BoxBlock^}
	dwnObjs := HybridQueue.{ForSubObjects,5}

	metaCount := int

	middleVars := AVLMap.{int,List.{LocalVar^}}

	itBody := Token^

	this := !(HybridQueue.{ForSubObjects,5} dwns,Token^ bdy) -> void
	{
		itBody = bdy

		ObjType = GTypeVoid
		if not dwns[^].IsMeta
		{
			CurrentWork?.SetErrorMessage(bdy.MakeError("All of iteratables must be metadata"))
			return void
		}
		k := dwns[0].MetaObj.MetaIteretableSize()
		if k != dwns[^].MetaObj.MetaIteretableSize()
		{
			CurrentWork?.SetErroMessage(bdy.MakeError("All of iteretables must be same size"))
			return void
		}

		dwnObjs.Push(dwns[^])
		
		for i : k
		{
			addItem(i)
		}
		metaCount = k
	}
	addItem := !(int i) -> void
	{
		stackSize := UnitStack.Size()

		for j : dwnObjs.Size()
		{
			locVar := dwnObjs[j].MetaObj.GetMetaIterValueVar(i)

			if locVar != null
			{
				alVar := new AliasVar(dwnObjs[j].ValueName,locVar)
				UnitStack.PushFront(alVar)
			}else{
				tryAddVar(dwnObjs[j].MetaObj.GetMetaIterValue(i),i,dwnObjs[j].ValueName)
			}

			if dwnObjs[j].IndexName.Size() != 0
			{
				indConst := dwnObjs[j].MetaObj.GetMetaIterIndex(i)
				if indConst == null
					indConst = GetExeInt(i)
				tryAddVar(indConst,i,dwnObjs[j].IndexName)
			}
		}
		blocks.Push(new BoxBlockContinue(itBody))

		while stackSize < UnitStack.Size()
			UnitStack.Pop()
	}
	tryAddVar := !(BoxExeObj^ toAdd,int num,StringSpan itName) -> void {
		if toAdd == null
			return void
		
		if toAdd is in BoxExeConstObj
		{
			UnitStack.PushFront(new ConstVar(itName,toAdd->{BoxExeConstObj^}))
			return void
		}
	
		newVar := ToLocalVar(toAdd,itName)
		middleVars[num].Push(newVar)
		UnitStack.PushFront(newVar)
	}

	PrintDefaultUse := virtual !(TIOStrean^ f) -> void
	{
		PrintCode(ctx)
	}
	PrintCode := virtual !(LLVMWriteContext^ ctx) -> void
	{
		dwnObjs[^].MetaObj.PrintDefaultUse(ctx)

		for i : blocks.Size()
		{
			if middleVars.Contain(i)
				middleVars[i][^].PrintCode(ctx)

			blocks[i].PrintCode(ctx)
		}
	}
	PrintDebugMeta := virtual !(LLVMWriteContext^ ctx) -> void
	{
		middleVars[^][^].PrintDebugMeta(ctx)
		dwnObjs[^].MetaObj.PrintDebugMeta(ctx)
		blocks[^].PrintDebugMeta(ctx)
	}
	WriteMC := virtual !(MCBuildContext^ ctx) -> WriteMCResult
	{
		//TODO check
		dwnObjs[^].MetaObj.WriteMC(ctx)
		for it,i : blocks
		{
			if middleVars.Contain(i)
				middleVars[i][^].WriteMC(ctx)

			it.WriteMC(ctx)
		}
	}
}
