BoxFor := class extend BoxExeObj
{
	values := HybridQueue.{ForSubObjects,5}

	CheckStep := BoxLabel
	EndLabel := BoxLabel

	body := BoxBlock^

	HeadLine := BoxExeLine^

	CreatedIndex := LocalVar^
	CreatedIndexInc := BoxExeObj^
	
	this := !() -> void
	{
		CheckStep."this"()
		EndLabel."this"()
		ObjType = GTypeVoid
	}
	StepTwo := !(Token^ itm,!()&->BoxUnit^ cb) -> void
	{
		stackSize := UnitStack.Size()

		values[^].CheckRegularStep()
		values[^].NextCheck = new BoxLabel()

		for it : values
		{
			if it.IndexName.Size() != 0 and it.IndVar == null
			{
				if CreatedIndex == null
				{
					CreatedIndex = new LocalVar(StringSpan("anon"),GTypeInt,true,false)
					CurrentFunc.AddLocalVar(CreatedIndex)

					objs0 := CheckExeDownList
					objs0.Push(CreatedIndex.CreateVarCall())
					CreatedIndexInc = CreateFuncCall(StringSpan("++"),objs0)
					assert(CreatedIndexInc != null)
				}
				it.IndVar = new LocalVar(it.IndexName,GTypeInt,true,false)
				it.IndVar.proxy.Down = CreatedIndex.CreateVarBaseCall()
			}
		}


		for it : values
		{
			UnitStack.PushFront(it.ValueVar?)
			UnitStack.PushFront(it.IndVar?)
		}

		body = new BoxBlockContinue(itm,cb)

		while stackSize < UnitStack.Size()
			UnitStack.Pop()
	}

	PrintDefaultUse := virtual !(TIOStrean^ f) -> void
	{
		PrintCode(ctx)
	}
	PrintCode := virtual !(LLVMWriteContext^ ctx) -> void
	{
		oldLineCall := GDebugLineCallId
		GDebugLineCallId = HeadLine.MetaId
		defer GDebugLineCallId = oldLineCall

		CreatedIndex?.PrintCode(ctx)
		values[^].InitStep.PrintDefaultUse(ctx)
		CheckStep.PrintCode(ctx)

		for it : values
		{
			if it.HaveValue != null
			{
				it.HaveValue.PrintPre(ctx)
				PrintBranch(ctx,it.HaveValue,it.NextCheck,EndLabel&)
				it.NextCheck.PrintCode(ctx)
			}

			it.ValueVar.PrintCode(ctx)
			it.IndVar?.PrintCode(ctx)
			it.CallGetValue.PrintDefaultUse(ctx)

			if it.IsFinished != null
			{
				it.IsFinished.PrintPre(ctx)
				PrintBranch(ctx,it.IsFinished,EndLabel&,it.NextCheck)
				it.NextCheck.PrintCode(ctx)
			}
		}

		body.PrintCode(ctx)

		for it : values
		{
			it.IncFunc?.PrintDefaultUse(ctx)
		}

		CreatedIndexInc?.PrintDefaultUse(ctx)

		CheckStep.PrintGo(ctx)
		EndLabel.PrintCode(ctx)

	}
	PrintDebugMeta := virtual !(LLVMWriteContext^ ctx) -> void
	{
		HeadLine?.PrintDebugMeta(ctx)
		body.PrintDebugMeta(ctx)
	}
}
