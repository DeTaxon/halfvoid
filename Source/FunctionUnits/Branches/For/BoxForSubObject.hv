ForSubObjects := class
{
	ValueName := StringSpan
	IndexName := StringSpan
	DownToken := Token^

	DownResult := BoxExeObj^
	ValueVar := LocalVar^
	IndVar := LocalVar^
	GetCall := BoxExeObj^
	IsFinished := BoxExeObj^
	HaveValue := BoxExeObj^
	NextCheck := BoxLabel^
	IncFunc := BoxExeObj^

	CallGetValue := BoxExeObj^

	MetaObj := BoxMetaObj^
	IsMeta := bool

	InitStep := BoxExeObj^

	CheckRegularStep := !() -> void
	{
		dwnRes := DownResult

		if dwnRes.GetType() == GTypeInt and false
		{
			iterVar := new LocalVar(ValueName,GTypeInt,true,false)
			CurrentFunc?.AddLocalVar(iterVar)
			iv := iterVar.CreateVarCall()

			endVar := ToLocalVar(dwnRes)
			ev := endVar.CreateVarCall()

			ValueVar = ToLocalVar(iv,ValueName)

			iStep := new PackedExeObj
			InitStep = iStep

			iStep.preCalls.Push(iterVar)
			iStep.preCalls.Push(endVar)
			iStep.mainCall = CreateFuncCall("=",![iv,0hv])

			IncFunc = CreateFuncCall("+=",![iv,1hv])
			HaveValue = CreateFuncCall("<",![iv,ev])

			return void
		}

		objs7 := CheckExeDownList
		objs7.Push(dwnRes)
		getForCall := BoxExeObj^

		if getForCall == null
		{
			empty7 := CheckExeDownList
			cnsts6 := List.{BoxExeConstObj^}
			getForCall = innerTryGetMethodCall(StringSpan("for"),dwnRes,empty7,cnsts6)
		}
		if getForCall == null
		{
			getForCall = CreateFuncCall("for",objs7)
		}

		if getForCall == null
		{
			CurrentWork?.SetErrorMessage(DownToken.MakeError("Object does not have operator for"))
			return void
		}

		dwnVar := LocalVar^
		if getForCall is in  BoxFuncCall and getForCall->{BoxFuncCall^}.ResultVar != null
		{
			dwnVar = getForCall->{BoxFuncCall^}.ResultVar
		}else{
			CurrentWork?.SetErrorMessage(DownToken.MakeError("For class, meh, software error"))
			return void
		}

		InitStep = getForCall
		
		cnsts := List.{BoxExeConstObj^}
		objs := CheckExeDownList

		haveValue := innerTryGetMethodCall(StringSpan("HaveValue"),dwnVar.CreateVarCall(),objs,cnsts)
		checkFunc := haveValue
		iFins := BoxExeObj^
		if haveValue == null
		{
			iFins = innerTryGetMethodCall(StringSpan("IsFinished"),dwnVar.CreateVarCall(),objs,cnsts)
			checkFunc = iFins
		}

		if checkFunc == null
		{
			CurrentWork?.SetErrorMessage(DownToken.MakeError("iteratable object does not contain IsFinished or HaveValue"))
			return void
		}
		if checkFunc.GetType() != GTypeBool
		{
			CurrentWork?.SetErrorMessage(DownToken.MakeError("IsFinished or HaveValue return non boolean type"))
			return void
		}
		
		IncFunc = innerTryGetMethodCall(StringSpan("Inc"),dwnVar.CreateVarCall(),objs,cnsts)
		
		mainCall := dwnVar.CreateVarCall()
		dwnType := mainCall.GetType()

		cls := BoxClass^
		if dwnType is in TypeClass
		{
			cls = dwnType->{TypeClass^}.ToClass
		}
		if dwnType is in TypePoint and dwnType.Base is in TypeClass
		{
			cls = dwnType.Base->{TypeClass^}.ToClass
		}
		
		if cls == null
		{
			CurrentWork?.SetErrorMessage(DownToken.MakeError("unknown iteretable result"))
			return void
		}
		
		objCall := BoxUnit^
		cls.GetMethods(StringSpan("()"),x ==> {
			if x.Size() == 1
			{
				objCall = x[0]
			}
		})

		if objCall == null
		{
			CurrentWork?.SetErrorMessage(DownToken.MakeError("iteratable object must have exacly one operator ()"))
			return void
		}
		
		if not (objCall is in BoxFunc)
		{
			CurrentWork?.SetErrorMessage(DownToken.MakeError("operator () is not a function"))
			return void
		}
		
		fncOperType := objCall->{BoxFunc^}.GetType()->{TypeFunc^}

		if fncOperType.Params.Size() >= 3
		{
			CurrentWork?.SetErrorMessage(DownToken.MakeError("iteretable operator have too many inputs"))
			return void
		}
		if fncOperType.Params.Size() == 2
		{
			if not fncOperType.Params[1].IsRef
			{
				CurrentWork?.SetErrorMessage(DownToken.MakeError("iterateble operator () , input must be reference to a pointer"))
				return void
			}
			if not (fncOperType.Params[1].ItType is in TypePoint)
			{
				CurrentWork?.SetErrorMessage(DownToken.MakeError("iterateble operator () , input must be reference to a pointer"))
				return void
			}

			IndVar = new LocalVar(IndexName,fncOperType.Params[1].ItType.Base,true,true)
			CurrentFunc.AddLocalVar(IndVar)
		}

		objs2 := CheckExeDownList
		objs2.Push(mainCall)
		if IndVar != null
			objs2.Push(IndVar.CreateVarBaseCall())

		iCall := objCall->{BoxFunc^}.CreateCall(objs2)

		if iCall == null
		{
			CurrentWork?.SetErrorMessage(DownToken.MakeError("iteratable object is not callable, no () function"))
			return void
		}


		GetCall = iCall
		IsFinished = iFins
		HaveValue = haveValue

		if iCall is BoxMultipleResult
		{
			ValueVar = iCall.GetLocalVar(0)
			ValueVar.itName = ValueName
			IndVar = iCall.GetLocalVar(1) //TODOTODO steal var, not a copy
			IndVar.itName = IndexName

			CallGetValue = iCall
		}else{
			ValueVar = new LocalVar(ValueName,iCall.GetType(),true,iCall.IsMem())
			CurrentFunc.AddLocalVar(ValueVar)

			objs8 := CheckExeDownList
			if iCall.IsMem()
			{
				objs8.Push(ValueVar.CreateVarBaseCall())
				objs8.Push(new UnrefFuncCall(iCall))
			}else{
				objs8.Push(ValueVar.CreateVarBaseCall())
				objs8.Push(iCall)
			}
			CallGetValue = CreateFuncCall("=",objs8)
			assert(CallGetValue != null)
		}

	}

	"=" := default
}
