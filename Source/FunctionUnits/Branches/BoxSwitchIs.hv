ParseBoxSwitchIs := !(Token^ itm) -> BoxExeObj^
{
	mainCall := TryGetExeCall(itm.Down.Right)

	if mainCall == null
		itm.Down.Right.EmitError("Unknown object to switch on")

	mainVar := new FuncResultParam(mainCall)

	skb := itm.Down.Right.Right.Right

	assert(skb.GetValue() == "{}")

	SyntaxCompress(skb,PriorityData)

	cases := HybridQueue.{SwitchCase^,13}
	defaultNode := BoxBlock^

	iter := skb.Down
	prevNode := Token^
	while iter != null
	{
		if iter.Down == null or iter.Down.GetValue() != "case"
			iter.EmitError("Unknown object")
		caseType := ParseType(iter.Down.Right)

		if caseType == null
			iter.Down.Right.EmitError("Unknown type")


		tpCheck := BoxExeObj^
		if caseType != GTypeVoid
		{
			if not IsVirtualClass(caseType) //calls casrType.AwaitVTableStep
				iter.Down.Right.EmitError("Type does not have virtual table")
			tpCheck = CreateTypeIsCheck(mainVar.CreateCall(),caseType,false,false)

			assert(tpCheck != null)
		}

		caseIter := iter
		iter = iter.Right
		startIter := iter
		endIter := Token^
		while iter != null
		{
			if iter.Down?.GetValue() == "case"
				break
			endIter = iter
			iter = iter.Right
		}


		bdyIter := startIter
		if startIter != endIter or startIter.GetValue() != "{}"
		{
			bdyIter = UNext(startIter,new TokenSymbol(StringSpan("{}"),1) ,endIter)
		}

		if caseType != GTypeVoid
		{
			newCase := new SwitchCase()

			newCase.cmpCheck = tpCheck
			newCase.caseBody = new BoxBlock(bdyIter)
			cases.Push(newCase)
		}else{
			defaultNode = new BoxBlock(bdyIter)
		}

	}
	baseSwitch := new BoxSwitch
	baseSwitch.quitNode = new BoxLabel()
	baseSwitch.mainCall = mainCall
	baseSwitch.mainVar = mainVar
	baseSwitch.caseNodes.Push(cases[^])
	baseSwitch.defaultNode = defaultNode
	if defaultNode != null
		baseSwitch.defaultLabel = new BoxLabel()
	return baseSwitch
}
