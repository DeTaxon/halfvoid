ParseBoxSwitchIs := !(Token^ itm) -> BoxExeObj^
{
	mainCall := TryGetExeCall(itm.Down.Right)

	if mainCall == null
		itm.Down.Right.EmitError("Unknown object to switch on")

	canSwapNames := false
	swapName := StringSpan
	isMem := mainCall.IsMem()

	if itm.Down.Right is TokenIndent
	{
		assert(mainCall.GetType() is in TypePoint or mainCall.GetType() is in TypeClass)
		swapName = itm.Down.Right->{TokenIndent^}.Value

		for it : UnitStack
		{
			if it is in LocalVar
			{
				if it->{LocalVar^}.itName == swapName
				{
					canSwapNames = true
					break
				}
			}
		}
	}

	callType := mainCall.GetType()
	mainVar := LocalVar^

	if callType is in TypeClass
	{
		assert(mainCall.IsMem())
		mainCall = new UnrefFuncCall(mainCall)
		callType = mainCall.GetType()
	}
	if callType is in TypePoint
	{
		if mainCall.IsMem()
		{
			mainVar = new LocalVar(StringSpan(""),mainCall.GetType(),true,true)
			setVar := CreateFuncCall(StringSpan("="),![mainVar.proxy&,new UnrefFuncCall(mainCall)])
			mainVar.extraWork.Push(setVar)
		}else{
			mainVar = new LocalVar(StringSpan(""),mainCall.GetType(),true,false)
			setVar := CreateFuncCall(StringSpan("="),![mainVar.proxy&,mainCall])
			mainVar.extraWork.Push(setVar)
		}
	}else{
		itm.EmitError("Bad type to switch on")
		return null
	}
	assert(mainVar != null)
	CurrentFunc.LocalVars.Push(mainVar)

	skb := itm.Down.Right.Right.Right

	assert(skb.GetValue() == "{}")

	SyntaxCompress(skb,PriorityData)

	cases := HybridQueue.{SwitchCase^,13}
	defaultNode := BoxBlock^

	iter := skb.Down
	prevNode := Token^
	while iter != null
	{
		if iter.Down == null or iter.Down.GetValue() != "case"
			iter.EmitError("Unknown object")

		isIn := false
		typeToCheck := iter.Down.Right
		if typeToCheck.GetValue() == "in"
		{
			isIn = true
			typeToCheck = typeToCheck.Right
		}
		caseType := ParseType(typeToCheck)

		if caseType == null
			iter.Down.Right.EmitError("Unknown type")


		tpCheck := BoxExeObj^
		if caseType != GTypeVoid
		{
			if not IsVirtualClass(caseType) //calls casrType.AwaitVTableStep
				iter.Down.Right.EmitError("Type does not have virtual table")
			tpCheck = CreateTypeIsCheck(mainVar.CreateVarCall(),caseType,isIn,false)

			assert(tpCheck != null)
		}

		caseIter := iter
		iter = iter.Right
		startIter := iter
		endIter := Token^
		while iter != null
		{
			if iter.Down?.GetValue() == "case"
				break
			endIter = iter
			iter = iter.Right
		}


		bdyIter := startIter
		if startIter != endIter or startIter.GetValue() != "{}"
		{
			bdyIter = UNext(startIter,new TokenSymbol(StringSpan("{}"),1) ,endIter)
		}

		if caseType != GTypeVoid
		{
			newCase := new SwitchCase()

			StackCheckpoint()

			newVar := LocalVar^
			if canSwapNames
			{
				newVar = new LocalVar(swapName,caseType.GetPoint(),true,true)
				exchange := GetExchange2(new UnrefFuncCall(mainVar.CreateVarCall()),caseType.GetPoint().GetPoint(),false)
				assert(exchange != null)
				setCall := CreateFuncCall(StringSpan("="),![newVar.proxy&,exchange])
				assert(setCall != null)
				newVar.extraWork.Push(setCall)
				CurrentFunc.LocalVars.Push(newVar)

				UnitStack.PushFront(newVar)
			}

			newCase.cmpCheck = tpCheck
			newCase.caseBody = new BoxBlock(bdyIter)
			if newVar != null
				newCase.caseBody.exeLines.PushFront(newVar)
			cases.Push(newCase)
		}else{
			defaultNode = new BoxBlock(bdyIter)
		}

	}
	baseSwitch := new BoxSwitchIs()
	baseSwitch.quitNode = new BoxLabel()
	baseSwitch.mainCall = mainCall
	baseSwitch.mainVar = mainVar
	baseSwitch.caseNodes.Push(cases[^])
	baseSwitch.defaultNode = defaultNode
	if defaultNode != null
		baseSwitch.defaultLabel = new BoxLabel()
	return baseSwitch
}
BoxSwitchIs := class extend BoxExeObj
{
	mainCall := BoxExeObj^
	mainVar := LocalVar^

	quitNode := BoxLabel^

	caseNodes := List.{SwitchCase^}

	defaultLabel := BoxLabel^
	defaultNode := BoxBlock^

	this := !() -> void
	{
		ObjType = GTypeVoid
	}
	PrintDefaultUse := virtual !(LLVMWriteContext^ ctx) -> void
	{
		PrintCode(ctx)
	}
	PrintCode := virtual !(LLVMWriteContext^ ctx) -> void
	{
		mainVar.PrintCode(ctx)

		for it : caseNodes
		{
			it.PrintIt(ctx,quitNode)
		}
		defaultNode?.PrintCode(ctx)
		quitNode?.PrintCode(ctx)
	}
	PrintDebugMeta := virtual !(LLVMWriteContext^ ctx) -> void
	{
		for it : caseNodes
			it.caseBody?.PrintDebugMeta(ctx)
		defaultNode?.PrintDebugMeta(ctx)
	}

}
BoxSwitchOnEnum := class extend BoxSwitch
{
	this := !() -> void
	{
		ObjType = GTypeVoid
	}
	PrintCode := virtual !(LLVMWriteContext^ ctx) -> void
	{
		en := mainCall.GetType()->{TypeEnum^}.ToEnum
		bsTyp := Type^
		bsTyp = mainCall.GetType().Base
		f := ctx.writeStream

		mainCall.PrintPre(ctx)

		f^ << "switch "
		bsTyp.PrintType(ctx)
		f^ << " "
		mainCall.PrintUse(ctx)
		f^ << " , label "
		if defaultNode != null
		{
			defaultLabel.PrintLabel(ctx)
		}else{
			quitNode.PrintLabel(ctx)
		}
		f^ << " [ "
		for it : this.caseNodes
		{
			indX := int
			en.GetEnumIndex(it.baseObj->{BoxExeString^}.val,indX&)
			bsTyp.PrintType(ctx)
			f^ << " " << indX
			f^ << ", label "
			it.useNode.PrintLabel(ctx)
			f^ << "\n"
		}
		f^ << "]\n"
		for it : this.caseNodes
		{
			it.PrintItBase(ctx,quitNode)
			quitNode.PrintGo(ctx)
		}
		if defaultNode != null
		{
			defaultLabel.PrintLabelCreate(ctx)
			defaultNode.PrintCode(ctx)
			quitNode.PrintGo(ctx)
		}

		quitNode?.PrintCode(ctx)
	}
}
