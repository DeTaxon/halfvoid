ParseBoxSwitchIs := !(Token^ itm) -> BoxExeObj^
{
	mainCall := TryGetExeCall(itm.Down.Right)

	if mainCall == null
		itm.Down.Right.EmitError("Unknown object to switch on")

	mainVar := new FuncResultParam(mainCall)

	canSwapNames := false
	swapName := StringSpan

	if mainCall is LocalVarProxy and itm.Down.Right is TokenIndent
	{
		assert(mainCall.GetType() is in TypePoint)
		canSwapNames = true
		swapName = itm.Down.Right->{TokenIndent^}.Value
	}

	skb := itm.Down.Right.Right.Right

	assert(skb.GetValue() == "{}")

	SyntaxCompress(skb,PriorityData)

	cases := HybridQueue.{SwitchCase^,13}
	defaultNode := BoxBlock^

	iter := skb.Down
	prevNode := Token^
	while iter != null
	{
		if iter.Down == null or iter.Down.GetValue() != "case"
			iter.EmitError("Unknown object")

		isIn := false
		typeToCheck := iter.Down.Right
		if typeToCheck.GetValue() == "in"
		{
			isIn = true
			typeToCheck = typeToCheck.Right
		}
		caseType := ParseType(typeToCheck)

		if caseType == null
			iter.Down.Right.EmitError("Unknown type")


		tpCheck := BoxExeObj^
		if caseType != GTypeVoid
		{
			if not IsVirtualClass(caseType) //calls casrType.AwaitVTableStep
				iter.Down.Right.EmitError("Type does not have virtual table")
			tpCheck = CreateTypeIsCheck(mainVar.CreateCall(),caseType,isIn,false)

			assert(tpCheck != null)
		}

		caseIter := iter
		iter = iter.Right
		startIter := iter
		endIter := Token^
		while iter != null
		{
			if iter.Down?.GetValue() == "case"
				break
			endIter = iter
			iter = iter.Right
		}


		bdyIter := startIter
		if startIter != endIter or startIter.GetValue() != "{}"
		{
			bdyIter = UNext(startIter,new TokenSymbol(StringSpan("{}"),1) ,endIter)
		}

		if caseType != GTypeVoid
		{
			newCase := new SwitchCase()

			StackCheckpoint()

			newVar := LocalVar^
			if canSwapNames
			{
				newVar = new LocalVar(swapName,caseType.GetPoint(),true,true)
				exchange := GetExchange2(new UnrefFuncCall(mainCall),caseType.GetPoint().GetPoint(),false)
				assert(exchange != null)
				setCall := CreateFuncCall(StringSpan("="),![newVar.proxy&,exchange])
				assert(setCall != null)
				newVar.extraWork.Push(setCall)
				CurrentFunc.LocalVars.Push(newVar)

				UnitStack.PushFront(newVar)
			}

			newCase.cmpCheck = tpCheck
			newCase.caseBody = new BoxBlock(bdyIter)
			if newVar != null
				newCase.caseBody.exeLines.PushFront(newVar)
			cases.Push(newCase)
		}else{
			defaultNode = new BoxBlock(bdyIter)
		}

	}
	baseSwitch := new BoxSwitch
	baseSwitch.quitNode = new BoxLabel()
	baseSwitch.mainCall = mainCall
	baseSwitch.mainVar = mainVar
	baseSwitch.caseNodes.Push(cases[^])
	baseSwitch.defaultNode = defaultNode
	if defaultNode != null
		baseSwitch.defaultLabel = new BoxLabel()
	return baseSwitch
}
