TryParseWhile := !(Token^ itm) -> BoxExeObj^
{
	if itm == null or itm.Down.GetValue() != "while"
		return null

	return new BoxBlockBreak(itm, () ==> BoxUnit^ {
		cmpExe := TryGetExeCall(itm.Down.Right)

		if cmpExe == null
		{
			CurrentWork?.SetErrorMessage(itm.Down.Right.MakeError("Could not parse while statement"))
			return null
		}

		if cmpExe.GetType() != GTypeBool
		{
			CurrentWork?.SetErrorMessage(itm.MakeError("While statement is not boolean type"))
			return null
		}

		token := MakeItBlock(itm.Down.Right.Right)
		body := new BoxBlockContinue(token)
		body.Work()

		return new BoxWhile(itm.Down.Right,cmpExe,body)
	})
	
}

BoxWhile := class extend BoxExeObj
{
	Val := BoxExeObj^
	Body := BoxBlock^
	CycleCheck := BoxLabel
	CycleStart := BoxLabel
	CycleEnd := BoxLabel
	WhileLine := BoxExeLineSimple^

	this := !(Token^ whileToken,BoxExeObj^ val, BoxBlock^ body) -> void
	{
		ObjType = GTypeVoid
		Val = val
		Body = body
		CycleStart."this"()
		CycleEnd."this"()
		CycleCheck."this"()
		WhileLine = new BoxExeLineSimple(whileToken,val)
	}
	PrintDefaultUse := virtual !(LLVMWriteContext^ ctx) -> void
	{
		PrintCode(ctx)
	}
	PrintCode := virtual !(LLVMWriteContext^ ctx) -> void
	{
		oldLine := GDebugLineCallId
		defer GDebugLineCallId = oldLine
		GDebugLineCallId = WhileLine.MetaId

		f := ctx.writeStream

		CycleCheck.PrintCode(ctx)

		Val.PrintPre(ctx)
		f^ << "br i1 "
		Val.PrintUse(ctx)
		f^ << ", label "
		CycleStart.PrintLabel(ctx)
		f^ << ", label "
		CycleEnd.PrintLabel(ctx)
		f^ << "\n"

		CycleStart.PrintCode(ctx)
		Body.PrintCode(ctx)
		CycleCheck.PrintGo(ctx)
		CycleEnd.PrintCode(ctx)
	}
	PrintDebugMeta := virtual !(LLVMWriteContext^ ctx) -> void
	{
		WhileLine.PrintDebugMeta(ctx)
		Body.PrintDebugMeta(ctx)
	}
}
