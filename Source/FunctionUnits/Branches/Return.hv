BoxReturn := class extend BoxExeObj
{
	EndLabel := BoxLabel^
	ResultCall := BoxExeObj^
	this := !(BoxLabel^ l,BoxExeObj^ rc) -> void
	{
		EndLabel = l
		ObjType = GTypeVoid
		ResultCall = rc

		//for it : UnitStack
		//{
		//	if it is FuncInlineWrapper
		//	{
		//		//TODO GC vars in inline functions
		//		return void
		//	}
		//}
	}
	PrintDefaultUse := virtual !(LLVMWriteContext^ ctx) -> void
	{
		ResultCall?.PrintDefaultUse(ctx)

		//TODO inline functions?

		if ctx.deferObjects.Size() == 0
		{
			EndLabel.PrintGo(ctx)
		}else{
			iter := ctx.exitNodes&
			for i : ctx.deferObjects.Size()
			{
				it := ctx.deferObjects[ctx.deferObjects.Size() - i - 1]
				iter = iter.subNodes[it]&
			}
			iter.GetLabel().PrintGo(ctx)
		}
	}
}

BoxYield := class extend BoxReturn
{
	toThis := BoxLabel^
	callSet := BoxExeObj^
	this := !(BoxLabel^ l,BoxExeObj^ rc) -> void
	{
		this."BoxReturn.this"(l,rc)

		yieldVal := CurrentFunc.PutYieldState(this&)
		yVar := CurrentFunc.GetYieldStateParam()

		objs := CheckExeDownList
		objs.Push(yVar.CreateVarCall())
		objs.Push(GetExeInt(yieldVal))

		callSet = CreateFuncCall(StringSpan("="),objs)
		toThis = new BoxLabel()
	}

	PrintDefaultUse := virtual !(LLVMWriteContext^ ctx) -> void
	{
		ResultCall?.PrintDefaultUse(ctx)
		callSet.PrintDefaultUse(ctx)
		EndLabel.PrintGo(ctx)
		toThis.PrintCode(ctx)
	}
	GetLabel := virtual !() -> BoxLabel^
	{
		return toThis
	}
}

ReturnHalfState := class extend BoxExeObj
{
	isYield := bool
	callObj := BoxExeObj^
	returnObj := BoxExeObj^
	errorToken := Token^
	this := !(Token^ erToken,BoxExeObj^ toCall,bool iY) -> void
	{
		errorToken = erToken
		callObj = toCall
		isYield = iY
	}

	ResolveStep := !() -> void
	{
		if callObj != null
		{
			if callObj.GetType() != GTypeVoid //TODO Auto return type
			{
				rRef := CurrentReturns.ResultRef

				callObj2 := BoxExeObj^
				resType := callObj.GetType()
				funcType := CurrentReturns.ResultType
				if rRef
				{
					if not callObj.IsMem()
						errorToken.EmitError("Can not return reference, object does not sits in memory")
				}

				if resType != funcType
				{
					if rRef
					{
						if resType is in TypeClass and funcType is in TypeClass and TypeFight(funcType,resType) == funcType
						{
							callObj2 = GetExchange(new UnrefFuncCall(callObj),funcType.GetPoint())
						}else{
							errorToken.EmitError("result type does not compare with function result")
						}
					}else{
						newObj := GetExchange(callObj,CurrentFunc.ResultVar.GetType())
						if newObj == null
						{
							if callObj is BoxExeNull
							{
								newObj = GetExchange2(callObj,CurrentFunc.ResultVar.GetType(),false)
							}else{
								errorToken.EmitError("can not convert type to function result")
							}
						}
						callObj = newObj
					}
				}

				if callObj2 == null
				{
					if rRef
					{
						callObj2 = new UnrefFuncCall(callObj)
					}else{
						callObj2 = callObj
					}
				}

				objs := CheckExeDownList
				objs.Push(CurrentReturns.ResultVar.CreateVarCall())
				objs.Push(callObj2)

				if rRef
				{
					cns := List.{BoxExeConstObj^}
					setPtrFunc := GPointStoreTemplate.GetFunc(objs,cns)
					assert(setPtrFunc != null)
					callObj = setPtrFunc.CreateCall(objs)
				}else{
					callObj = innerTryGetInfixCall(StringSpan("="),objs,errorToken)
					if callObj == null
						errorToken.EmitError("Can not return value, no \"=\" operator")
				}
			}
		}
	 
		if isYield
		{
			returnObj = new BoxYield(CurrentReturns.ExitLabel,callObj)
		}else{
			returnObj = new BoxReturn(CurrentReturns.ExitLabel,callObj)
		}
	}
	GetReturnObj := !() -> BoxExeObj^
	{
		return returnObj
	}
	GetSetType := !() -> Type^
	{
		if callObj == null
			return GTypeVoid
		return callObj.GetType()
	}

	PrintDefaultUse := virtual !(LLVMWriteContext^ ctx) -> void
	{
		returnObj.PrintDefaultUse(ctx)
	}
}
