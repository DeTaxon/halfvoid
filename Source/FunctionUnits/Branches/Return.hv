BoxReturn := class extend BoxExeObj
{
	EndLabel := BoxLabel^
	ResultCall := BoxExeObj^
	this := !(BoxLabel^ l,BoxExeObj^ rc) -> void
	{
		EndLabel = l
		ObjType = GTypeVoid
		ResultCall = rc
	}
	PrintDefaultUse := virtual !(LLVMWriteContext^ ctx) -> void
	{
		ResultCall?.PrintDefaultUse(ctx)

		if ctx.deferObjects.Size() == 0
		{
			EndLabel.PrintGo(ctx)
		}else{
			iter := ctx.exitNodes&
			for i : ctx.deferObjects.Size()
			{
				it := ctx.deferObjects[ctx.deferObjects.Size() - i - 1]
				iter = iter.subNodes[it]&
			}
			iter.GetLabel().PrintGo(ctx)
		}
	}
}

BoxYield := class extend BoxReturn
{
	toThis := BoxLabel^
	callSet := BoxExeObj^
	this := !(BoxLabel^ l,BoxExeObj^ rc) -> void
	{
		this."BoxReturn.this"(l,rc)

		yieldVal := CurrentFunc.PutYieldState(this&)
		yVar := CurrentFunc.GetYieldStateParam()

		objs := CheckExeDownList
		objs.Push(yVar.CreateVarCall())
		objs.Push(GetExeInt(yieldVal))

		callSet = CreateFuncCall(StringSpan("="),objs)
		toThis = new BoxLabel()
	}

	PrintDefaultUse := virtual !(LLVMWriteContext^ ctx) -> void
	{
		ResultCall?.PrintDefaultUse(ctx)
		callSet.PrintDefaultUse(ctx)
		EndLabel.PrintGo(ctx)
		toThis.PrintCode(ctx)
	}
	GetLabel := virtual !() -> BoxLabel^
	{
		return toThis
	}
}

ReturnHalfState := class extend BoxExeObj
{
	isYield := bool
	callObjs := BoxExeObj^[]
	returnObj := BoxExeObj^
	errorToken := Token^
	this := !(Token^ erToken,BoxExeObj^[] toCall,bool iY) -> void
	{
		errorToken = erToken
		callObjs = toCall
		isYield = iY
	}

	ResolveStep := !() -> void
	{
		totalObjs := HybridQueue.{BoxExeObj^,50}

		if callObjs != null and callObjs.Size() != 0
		{
			for callObj,callIndx : callObjs
			{
				if callObj.GetType() == GTypeVoid
				{
					totalObjs.Push(callObj)
					continue
				}

				callObj2 := BoxExeObj^

				rRef := CurrentReturns.ResultRef
				funcType := CurrentReturns.ResultType

				if callIndx > 0
				{
					ft := CurrentFunc.GetType()->{TypeFunc^}
					rRef = ft.ExtraResults[callIndx - 1].IsRef
					funcType = ft.ExtraResults[callIndx - 1].ItType
				}

				callObjs := List.{BoxExeObj^}
				resType := callObj.GetType()
				if rRef
				{
					if not callObj.IsMem()
					{
						MakeErrorMsg(errorToken,"Can not return reference, object does not sits in memory")
						return void
					}
				}

				if resType != funcType
				{
					if rRef
					{
						if resType is in TypeClass and funcType is in TypeClass and TypeFight(funcType,resType) == funcType
						{
							callObj2 = GetExchange(new UnrefFuncCall(callObj),funcType.GetPoint())
						}else{
							CurrentWork?.SetErrorMessage(errorToken.MakeError("result type does not compare with function result"))
							return void
						}
					}else{
						newObj := GetExchange(callObj,CurrentFunc.ResultVar.GetType())
						if newObj == null
						{
							if callObj is BoxExeNull
							{
								newObj = GetExchange2(callObj,CurrentFunc.ResultVar.GetType(),false)
							}else{
								CurrentWork?.SetErrorMessage(errorToken.MakeError("can not convert type to function result"))
								return void
							}
						}
						callObj = newObj
					}
				}

				if callObj2 == null
				{
					if rRef
					{
						callObj2 = new UnrefFuncCall(callObj)
					}else{
						callObj2 = callObj
					}
				}

				objs := CheckExeDownList
				objs.Push(CurrentReturns.ResultVar.CreateVarCall())
				objs.Push(callObj2)

				if rRef
				{
					cns := List.{BoxExeConstObj^}
					setPtrFunc := GPointStoreTemplate.GetFunc(objs,cns)
					assert(setPtrFunc != null)
					callObj = setPtrFunc.CreateCall(objs)
				}else{
					callObj = innerTryGetInfixCall(StringSpan("="),objs,errorToken)
					if callObj == null
					{
						CurrentWork?.SetErrorMessage(errorToken.MakeError("Can not return value, no \"=\" operator"))
						return void
					}
				}
				totalObjs.Push(callObj)
			}
		}

		resObj := BoxExeObj^
		if totalObjs.Size() == 1
		{
			resObj = totalObjs[0]
		}else if totalObjs.Size() > 1{
			resObj = totalObjs[0]
		}
		if isYield
		{
			returnObj = new BoxYield(CurrentReturns.ExitLabel,resObj)
		}else{
			returnObj = new BoxReturn(CurrentReturns.ExitLabel,resObj)
		}
	}
	GetReturnObj := !() -> BoxExeObj^
	{
		return returnObj
	}
	IsReturnMem := !() -> bool
	{
		if callObjs == null or callObjs.Size() == 0
			return false
		return callObjs[0].IsMem()
	}
	GetSetType := !() -> Type^
	{
		if callObjs == null or callObjs.Size() == 0 //TODOTODO check for multiple variables
			return GTypeVoid
		return callObjs[0].GetType()
	}

	PrintDefaultUse := virtual !(LLVMWriteContext^ ctx) -> void
	{
		returnObj.PrintDefaultUse(ctx)
	}
}

