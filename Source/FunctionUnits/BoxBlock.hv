BoxBlock := class extend BoxExeObj
{
	MetaId := int
	GCInUseBefore := int
	ItLine := FileLine^
	exeLines := List.{BoxUnit^} //todo : to hybrid

	returnLabel := BoxLabel^
	quitLabel := BoxLabel^

	down := Token^
	infoToken := Token^
	lambdaWay := !()&->BoxUnit^

	ParentFunc := BoxFuncBody^

	this := !(Token^ bdy) -> void
	{
		ObjType = GTypeVoid
		down = bdy
		infoToken = bdy
		ItLine = bdy.Line
		if DebugMode
			MetaId = GetNewId()
		ParentFunc = CurrentFunc
		innerWork()
	}
	this := !(Token^ tokenLine , !()&->BoxUnit^ l) -> void
	{
		ObjType = GTypeVoid
		lambdaWay = l
		infoToken = tokenLine
		ItLine = tokenLine.Line
		if DebugMode
			MetaId = GetNewId()
		ParentFunc = CurrentFunc
		innerWork()
	}
	innerWork := virtual !() -> void
	{
		SyntaxCompress(down,PriorityData)

		stackAtStart := UnitStack.Size()
		UnitStack.PushFront(this&)

		GCInUseBefore = GCVarsInUse
		defer GCVarsInUse = GCInUseBefore

		iter := Token^
		if down != null
			iter = down.Down
		if lambdaWay->{void^} != null
		{
			obj := lambdaWay()
			assert(obj != null)
			if obj != null
				exeLines.Push(obj)
		}
		while iter != null
		{
			NeedGuardLocalVar = false
			if iter.GetValue() == "{}"
			{
				subBlock := new BoxBlock(iter)
				exeLines.Push(subBlock)
				iter = iter.Right
				continue
			}

			CurrentFuncWork?.itLine = iter.Line?.Line

			pad := new BoxExeLine()
			while true
			{
				CurrentFuncWork?.ClearError()
				vr := TryParseVar(iter)

				if vr != null
				{
					pad2 := new BoxExeLineSimple(iter,vr)

					exeLines.Push(pad2)
					UnitStack.PushFront(vr)

					delete pad
					break
				}
				if pad.DoLine(iter,false)
				{
					exeLines.Push(pad)
					break
				}


				if CurrentFuncWork.isCanceled
					break
					
				TaskYield()
			}
			if CurrentFuncWork.isCanceled
				break
			
		
			iter = iter.Right
		}

		while UnitStack.Size() > stackAtStart
		{
			UnitStack.Pop()
		}
	}
	PrintDefaultUse := virtual !(LLVMWriteContext^ ctx) -> void
	{
		PrintCode(ctx)
	}
	PrintCode := virtual !(LLVMWriteContext^ ctx) -> void
	{
		if exeLines.Size() == 0
			return void

		oldVal := GDebugScopeId
		GDebugScopeId = MetaId
		defer GDebugScopeId = oldVal

		deferObjsAtStart := ctx.deferObjects.Size()

		if quitLabel != null
			ctx.deferObjects.PushFront(quitLabel)

		exeLines[^].PrintCode(ctx)

		while deferObjsAtStart  !=  ctx.deferObjects.Size()
		{
			dObj := ctx.deferObjects.Pop()
			dObj.PrintDefer(ctx)
		}

		quitLabel?.PrintCode(ctx)
	}
	PrintDebugMeta := virtual !(LLVMWriteContext^ ctx) -> void
	{
		if exeLines.Size() == 0
			return void

		f := ctx.writeStream
		f^ << "!" << MetaId << " = !DILexicalBlock(scope: !" 
		f^ << GDebugScopeId << ", file: !" << GDebugFileId
		if ItLine != null
		{
			f^ << ", line: " << ItLine.Line
		}
		f^ << ")\n"

		oldVal := GDebugScopeId
		GDebugScopeId = MetaId
		defer GDebugScopeId = oldVal
		
		exeLines[^].PrintDebugMeta(ctx)
	}
	GetQuitLabel := !() -> BoxLabel^
	{
		if quitLabel == null
			quitLabel = new BoxLabel()
		return quitLabel
	}
}

BoxBlockContinue := class extend BoxBlock
{
	this := !(Token^ itm) -> void
	{
		this."BoxBlock.this"(itm)
	}
	this := !(Token^ tokenLine ,!()&->BoxUnit^ l) -> void
	{
		this."BoxBlock.this"(tokenLine,l)
	}
}

BoxBlockBreak := class extend BoxBlock
{
	this := !(Token^ itm) -> void
	{
		this."BoxBlock.this"(itm)
	}
	this := !(Token^ tokenLine ,!()&->BoxUnit^ l) -> void
	{
		this."BoxBlock.this"(tokenLine,l)
	}
}
