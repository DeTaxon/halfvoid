
BoxForItemOnGenerator := class extend BoxForItem
{

	Init := virtual !(BoxForOldFashionMulti^ self,Object^ iter, Type^ itType,SomeFuncCall^ asNeed2) -> void
	{
		callFunc := @temp new FuncInputBox
		callFunc.itPars.Emplace(itType,false)
		LambdaCallFunc = FindFunc("()",self,callFunc^,false)
		LambdaIsFinishedFunc = FindFunc("IsFinished",self,callFunc^,false)

		assert(LambdaCallFunc != null)
		assert(LambdaIsFinishedFunc != null)

		itmId := GetAlloc(self,itType)
		itm := new LocalParam(itType,itmId,false)

		ProxyResult = itm

		test2 := new ParamNaturalCall("",itm)
		test2.Line = iter.Line
		UnrefFunc = MakeSimpleCall(LambdaCallFunc->{BoxFunc^},test2)
		UnrefFunc.Line = self.Line
		UnrefFunc.Up = self

		Param = new RetFuncParamV2(UnrefFunc,self)
		Param.Up = self

		test2 = new ParamNaturalCall("",itm)
		test2.Line = iter.Line
		IsEndFunc = MakeSimpleCall(LambdaIsFinishedFunc->{BoxFunc^},test2)
		IsEndFunc.Line = self.Line
		IsEndFunc.Up = self
	}

	PrintStart := virtual !(BoxForOldFashionMulti^ self,TIOStream f,Object^ itr) -> void 
	{
		itr.PrintPre(f)
		f << "store " 
		itr.PrintUse(f)
		f << " , " << itr.GetType().GetName() << "*"
		f << ProxyResult.GetMainPtr(0)
		f << "\n"

	}
	PrintStepBefore := virtual !(BoxForOldFashionMulti^ self,TIOStream f,Object^ itr,int debId) -> void
	{
		if UnrefFunc.IsRef() UnrefFunc.PrintPointPre(f) else UnrefFunc.PrintPre(f)
				
		if Param != null
		{
			Param.DoStore(f,debId)
			if Param is RetFuncParamV2 and Name != null and debId != -1
			{
				Param->{RetFuncParamV2^}.PrintForDebugDeclare(f,Name,self.Down,debId)
			}
		}
	}

	PrintCheckEndPre := virtual !(BoxForOldFashionMulti^ self,TIOStream f,Object^ itr) -> void 
	{
		IsEndFunc.PrintPre(f)
	}
	PrintCheckEndName := virtual !(BoxForOldFashionMulti^ self,Object^ itr) -> char^ 
	{
		return IsEndFunc.GetName()
	}
}
