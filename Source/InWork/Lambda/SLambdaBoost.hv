
SBoostLambda := class extend SLambda
{
	this := !() -> void
	{
		this."SLambda.this"()
	}
	DoStateStart := virtual !(int pri) -> void
	{
		MakeItBlock(Down)

		if ResultType == null
		{
			empt := Queue.{Type^}()
			asFunc := GetFuncType(empt,null->{bool^},GTypeVoid,false,false)
			ResultType = asFunc.GetLambda()
		}
	}
	ApplyFunc := virtual !(Type^ lambTyp, bool isFnc) -> void
	{
		nams  := @temp new List.{char^}

		itNN := "lambdaParam"sbt + ItId
		nams.Push(itNN.Str())

		lType := lambTyp.Base->{TypeFunc^}
		for i : lType.ParsCount
		{
			if i == 0 continue
			itNN := "_"sbt + i
			nams.Push(itNN.Str())
		}
		Names.Reserve(nams.Size())
		for nm,i : nams^
			Names.Create() = nm
		this."SLambda.ApplyFunc"(lambTyp,isFnc)
	}
}
