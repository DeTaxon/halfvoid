
MiniMachineNodeOld := class 
{
	WhatNext := AVLMap.{char^,MiniMachineNodeOld^}
	IsTerm := bool

	this := !() -> void
	{
		WhatNext."this"()
		IsTerm = false
	}
	GetNext := !(string item) -> MiniMachineNodeOld^
	{
		inIt := WhatNext.TryFind(item)
		if inIt != null return inIt^
		return null
	}
}

LexMachineInfo := class
{
	Machine := MiniMachineNodeOld^
	RawLine := char^

	this := !(MiniMachineNodeOld^ inM,char^ rLine) -> void
	{
		Machine = inM
		RawLine = rLine
	}
}
PriorityBagOld := class
{
	Opers := AVLSet.{string}
	Lines := List.{LexMachineInfo}

	this := !(char^ ptrChar, int mapSize) -> void
	{		
		fileSpan := StringSpan(ptrChar,mapSize)

		reg := "r?\"((\\\\ [^]) | [^\"\\\\])*\""reg

		fileSpan.DivideStr("\n",ln ==> {
			if ln.Size() == 0
				return void
			if ln[0] == '#'
			{
				Lines.Emplace(null,ln.Str())
			}else{
				newMach := new MiniMachineNodeOld

				ln.DivideStr(reg,word ==> {
					rawWord := word[1..-1]
					
					machIter := newMach
					rawWord.DivideStr(" ",ruleWord ==> {
						stW := ruleWord.Str()
						switch stW
						{
							case "d" stW = "~d"
							case "s" stW = "~suffix"
							case "@" stW = "~{}type"
							case "()" case "[]" case "{}"
							case void
								Opers.Insert(stW)
						}
						next := ref machIter.WhatNext[stW]
						if next == null
							next = new MiniMachineNodeOld
						machIter = next
					})
					machIter.IsTerm = true
				})

				Lines.Emplace(newMach,ln.Str())
			}
		})
	}
}