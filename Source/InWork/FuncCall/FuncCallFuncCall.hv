FuncCallFuncObjectCall := !(Object^ iterPre, Object^ iter) -> Object^
{
	if iter.GetValue() == "()"
	{
		if iter.Left.GetValue() in !["(d)", "d()","~func_pointer"] //TODO REFACTOR
		{
			if iter.Left is ObjFuncPointer
			{
				iter.Left->{ObjFuncPointer^}.fncCall.ParseBlock()
			}
			//TODO REFACTOR
			if ((iter.Left.IsRef() or (iter.Left is ParamFuncCall and iter.Left->{ParamFuncCall^}.MacroCreated)) or (iter.Left is ObjFuncPointer)) and iter.Left.GetType() is TypePoint
			{
				if iter.Left.GetType().Base is TypeFunc
				{
					iterL := iter.Left
					iterLT := iterL.GetType()
					TrimCommas(iter)
					return new PointFuncCall((iterLT.Base)->{TypeFunc^},iter.Down,iterL)
				}
			}else{
				if iter.Left.GetValue() == "(d)"
				{
					dynCast := (iter.Left)->{ParamCall^}
					consts := null->{Object^}
					if iter.Right?.GetValue() == "." and iter.Right.Right?.GetValue() == "{}"
					{
						consts = iter.Right.Right
					}
					preRet := OneCall(dynCast.BeforeName, iter,consts,true)
					if preRet != null 
					{
						if iter.Left.Line != null
							preRet.Line = iter.Left.Line
						return preRet
					}
				}
			}
		}
		if true
		{
			iterL := iterPre.Left

			box := @temp new FuncInputBox
			FillAttrs(box^,iter)

			box.itPars.Emplace(iterPre.Left.GetType(),iterPre.Left.IsRef())

			for iterD : iterPre.Down
			{
				if iterD.GetValue() != ","
					box.itPars.Emplace(iterD.GetType(),iterD.IsRef()) 
			}

			if(iter.Right?.GetValue() == "." and iter.Right.Right?.GetValue() == "{}")
			{
				CollectConsts(iter.Right.Right,box)	
			}
			
			plsF := FindFunc("()",iter,box^,false)

			if plsF != null
			{
				if iter.Down != null
				{
					iterL.Right = iter.Down
					iter.Down.Left = iterL
			iter = iterL.Right
					TrimCommas(iter)
				}else{
					PopOutNode(iter)
				}
				return MakeSimpleCall(plsF,iterL)
			}
			return null
		}
	}
	return null
}
