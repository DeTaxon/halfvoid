AppendClass BoxClass
{
	_getInherDepth := !() -> int
	{
		maxVal := 1
		for par : Parents
		{
			maxVal = max(maxVal,par._getInherDepth() + 1)
		}
		return maxVal
	}
	_getParamPath := !(char^ parName) -> RawArray.{int}^
	{
		depth := _getInherDepth()
		res := @temp new RawArray.{int}
		res.Resize(depth)
		getRes := _getParamPath2(parName,res,0)
		assert(getRes)
		return res
	}
	_getParamPath2 := !(char^ parName, RawArray.{int}^ res, int d) -> bool
	{
		parentCount := 0

		for parent : Parents
		{
			if parent.ParamsCount() != 0
			{
				parentCount += 1
			}
		}

		for it,i : Params
		{
			if it.ItName == parName
			{
				res^[d] = i + parentCount
				res.Resize(d+1)
				return true
			}
		}
		
		res^[d] = 0
		for par : Parents
		{
			if par.ParamsCount() == 0
				continue
			if par._getParamPath2(parName,res,d+1)
				return true
			res^[d] += 1
		}
		return false
	}
	forEachAllParam := !( !(RawArray.{int}, FieldParam^)& -> void lambd) -> void
	{
		depth := _getInherDepth()
		res := @temp new RawArray.{int}
		res.Resize(depth)

		res^[0] = 0
		if ContainVirtual
			res^[0] = 1
		_forEachAllParamInner(lambd,res,1)
	}
	_forEachAllParamInner := !( !(RawArray.{int}, FieldParam^)& -> void lambd,RawArray.{int}^ res,int d) -> void
	{
		parentCount := 0

		for par : Parents
		{
			if par.ParamsCount() == 0
				continue
			res^.Resize(d+1)
			res^[d] = parentCount
			par._forEachAllParamInner(lambd,res,d+1)
			parentCount += 1
		}

		res^.Resize(d+1)
		for itP,i : Params
		{
			res^[d] = parentCount + i
			lambd(res^,itP)
		}
	}
}

BuiltIn2CommonUnrollClass := class extend BuiltIn2Func
{
	ToClass := BoxClass^
	ParName := char^

	PrintFuncPre :=  !(BuiltIn2Call^ trg,TIOStream f,bool isAuto) -> void
	{
		isFake := false

	 	parPath := ToClass._getParamPath(ParName)

		clName := ToClass.ClassType.GetName()

		itId := trg.GenId() 
		if not isAuto
			trg.Down.PrintPointPre(f)
		f << "%T"<< itId <<" = getelementptr " << clName << " , " << clName << "* "
		if isAuto
			f << " %this"
		else
			f << trg.Down.GetPointName()
		f <<", i32 0"

		if ToClass.ContainVirtual
		{
			f << ", i32 1"
		}else{
			f << ", i32 0"
		}


		for it : parPath^
		{
			f << ",i32 " << it
		}
		f <<"\n"
	}
}

BuiltIn2UnrollClass := class extend BuiltIn2CommonUnrollClass
{
	this := !(string Name, BoxClass^ l, bool lRef,Type^ retV, bool RRetRef) -> void
	{
		ParName = Name
		ToClass = l

		FuncName = Name
		OutputName = Name
		IsRetRef = RRetRef

		PP := Queue.{Type^}() ; $temp
		PP.Push(l.ClassType)

		IsRefs := bool[1]
		IsRefs[0] = lRef
		MyFuncType = GetFuncType(PP,IsRefs,retV,RRetRef,false)
	}
	
	PrintFunc := virtual !(BuiltIn2Call^ trg,TIOStream f) -> void
	{
		PrintFuncPre(trg,f,false)
	}
}
BuiltIn2AutoField := class extend BuiltIn2UnrollClass
{
	this := !(Type^ l,bool lRef,BoxClass^ cl,char^ pName,char^ code) -> void
	{
		FuncName = "."
		OutputName = "."
		IsRetRef = lRef

		PP := Queue.{Type^}()
		MyFuncType = GetFuncType(PP,null->{bool^},l,lRef,false)

		ToClass = cl
		ParName = pName
	}
	PrintFunc := virtual  !(BuiltIn2Call^ trg,TIOStream f) -> void
	{
		PrintFuncPre(trg,f,true)
	}
}

BuiltInTemplateUnroll := class extend BoxTemplate
{
	ToClass := BoxClass^

	this := !(BoxClass^ toAdd) -> void
	{
		FuncName = "."
		IsPassAttrs = true
		OutputName = "error"

		ToClass = toAdd

		emptType := Queue.{Type^}() ; $temp
		emptType.Push(toAdd.ClassType)
		miniArr := true
		MyFuncType = GetFuncType(emptType,miniArr&,null->{Type^},false,false)
		IsMethod = true
	}
	GetPriority := virtual !(FuncInputBox itBox) -> int
	{
		pars := ref itBox.itPars
		consts := ref itBox.itConsts

		if pars.Size() != 1 return 255
		if not pars[0].first is TypeClass return 255
		if consts.Size() != 1 return 255
		if not consts[0] is ObjStr return 255

		asStrT := (consts[0]->{ObjStr^})
		asStr := asStrT.GetString()

		if ToClass.GetFieldParam(asStr) != null
			return 0
		
		return 255
	}

	GetNewFunc := virtual  !(FuncInputBox itBox, TypeFunc^ fun) -> BoxFunc^
	{
		pars := ref itBox.itPars
		consts := ref itBox.itConsts
		
		Name := string
		if consts.Size() != 1 return null
		if not consts[0] is ObjStr
			return null
		AsStrObj := (consts[0]->{ObjStr^})
		Name = (AsStrObj.GetString())

		retF := ToClass.GetFieldParam(Name)
		retType := retF.ResultType

		return new BuiltIn2UnrollClass(Name,ToClass,true,retType,true)
	}
	PrePrintEvent := virtual !() -> void
	{
	}
	DoTheWork := virtual !(int pri) -> void
	{
		
	}
}



BuiltInTemplateAutoField := class extend BoxTemplate
{
	ToClass := BoxClass^

	this := !(BoxClass^ toAdd) -> void
	{
		FuncName = "."
		OutputName = "error"

		ToClass = toAdd

		emptType := Queue.{Type^}()
		MyFuncType = GetFuncType(emptType,null->{bool^},null->{Type^},false,false)
	}
	GetPriority := virtual !(FuncInputBox itBox) -> int
	{
		pars := ref itBox.itPars
		consts := ref itBox.itConsts

		if pars.Size() != 0 return 255
		if consts.Size() != 1 return 255
		if (not consts[0] is ObjStr) return 255

		asStrT := (consts[0]->{ObjStr^})
		asStr := asStrT.GetString()

		if ToClass.GetFieldParam(asStr) != null
			return 0
		return 255
	}

	GetNewFunc := virtual  !(FuncInputBox itBox, TypeFunc^ fun) -> BoxFunc^
	{
		pars := ref itBox.itPars
		consts := ref itBox.itConsts

		Name := string
		if consts.Size() != 1 return null
		if not consts[0] is ObjStr
			return null
		AsStrObj := (consts[0]->{ObjStr^})
		Name = (AsStrObj.GetString())

		itPr := ToClass.GetFieldParam(Name)
		retType := itPr.ResultType
		preRet :=  new BuiltIn2AutoField(retType,true,ToClass,Name,null->{char^}) //itStr)
		return preRet
	}
	DoTheWork := virtual !(int pri) -> void
	{
		
	}
}
