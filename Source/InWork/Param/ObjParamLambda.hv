AppendClass ObjParam
{
	TryObjParamLambdaInit := !() -> bool
	{
		if Down?.GetValue() == "x=>x"
		{
			Down.DoTheWork(State_Start)
			asL := Down->{SLambda^}
			ObjType = asL.ResultType
			alId := GetAlloc(this&,ObjType)
			newT := MemParam^()
			if alId == -1
			{
				newT = new GlobalParam(asL.ResultType,null)
				newT.Down = Down
			}else{
				newT = new LocalParam(asL.ResultType,alId,false)
			}

			newT.Right= Down
			newT.Up = this&
			Down.Left = newT
			Down = newT
			asL.ApplyFunc()

			this&->SetType(ObjParamLambda)
			return true
		}
		return false
	}
}

ObjParamLambda := class extend ObjParam
{
	PrintInBlock := virtual !(TIOStream f) -> void
	{
		debId := -1
		if DebugMode 
			debId = CreateDebugCall(this&)
		asL := Down.Right->{SLambda^}
		asL.PrintPre(f)
		itMem := Down->{MemParam^}
		extrId := GetNewId()
		f << "store "
		asL.PrintUse(f)
		f << " , "
		itMem.PrintPointUse(f,extrId,-debId)
		if debId != -1
			f << ", !dbg !" << debId
		f << "\n"
	}
}
