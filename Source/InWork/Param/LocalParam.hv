MemParam := class extend ObjResult
{
	GetValue := virtual !() -> string
	{
		return "i:=2"
	}
	PrintPre := virtual !(TIOStream f, int newInd,int debId) -> void
	{
	}
	PrintUse := virtual !(TIOStream f, int newInd,int debId) -> void
	{
	}
	PrintPointPre := virtual !(TIOStream f, int newInd,int debId) -> void
	{
	}
	PrintPointUse := virtual !(TIOStream f, int newInd,int debId) -> void
	{
	}
	GetName := virtual !(int newInd) -> string
	{
		return ""
	}
	GetPointName := virtual !(int newInd) -> string
	{
		return ""
	}
	GetType := virtual !() -> Type^
	{
		return ResultType
	}
	GetSubName := virtual !() -> string
	{
		return "Mem"
	}
	PrintDebugDeclare := virtual !(TIOStream f,Object^ to,char^ forceName) -> void
	{
	}
	PrepareMainPtr := virtual !(TIOStream f,int newId,int debId) -> void {}
	GetMainPtr := virtual !(int newId) -> char^ { return "wow"}

	DoStore := virtual !(TIOStream f) -> void {}
}

IsMemParam := !(Object^ obj) -> bool
{
	if obj is LocalParam return true
	if obj is GlobalParam return true
	return false
}
MemParamCommon := class extend MemParam
{
	IsRef := bool

	IsRef := virtual !() -> bool //IsRValue
	{
		return true //IsRef func and IsRef bool is different 
	}
	PrintPointPre := virtual !(TIOStream f, int newInd,int debId) -> void
	{
		PrepareMainPtr(f,newInd,debId)
		if IsRef {
			f << "%TRefP" << newInd << " = load "
			ResultType.GetPoint().PrintType(f)
			f << " , "
			ResultType.GetPoint().GetPoint().PrintType(f)
			f << " "<< GetMainPtr(newInd) << "\n"
		}
	}
	PrintPointUse := virtual !(TIOStream f, int newInd,int debId) -> void
	{
		if IsRef {
			ResultType.GetPoint().PrintType(f)
			f << " %TRefP" << newInd
			return void
		}
		ResultType.GetPoint().PrintType(f)
		f << " " << GetMainPtr(newInd)
	}
	GetPointName := virtual !(int newInd) -> char^
	{	
		if IsRef {
			return "%TRefP"sbt + newInd
		}
		return GetMainPtr(newInd)
	}
	PrintPre := virtual !(TIOStream f, int newInd,int debId) -> void
	{
		PrintPointPre(f,newInd,debId)
		f << "%TRes" << newInd << " = load "
		ResultType.PrintType(f)
		f << " , "
		PrintPointUse(f,newInd,debId) 
		if DebugMode and debId != -1
			f << ", !dbg !" << debId 
		f << "\n"
	}
	PrintUse := virtual !(TIOStream f, int newInd,int debId) -> void
	{
		ResultType.PrintType(f)
		f << " %TRes"<< newInd
	}
	GetName := virtual !(int newInd) -> char^
	{
		return "%TRes"sbt + newInd 
	}
	GetRefPointName := virtual !(int newInd) -> char^
	{
		return GetMainPtr(newInd)
	}
}
LocalParam := class extend MemParamCommon
{
	inAllocId := int
	this := !(Type^ th,int allcId) -> void
	{
		ResultType = th
		inAllocId = allcId
		IsRef = false
	}
	this := !(Type^ th,int allcId,bool asRef) -> void
	{
		ResultType = th
		inAllocId = allcId
		IsRef = asRef
	}

	PrepareMainPtr := virtual !(TIOStream f,int newId,int debId) -> void {}
	GetMainPtr := virtual !(int newId) -> char^ { return "%T"sbt + inAllocId}

	PrintDebugDeclare := virtual !(TIOStream f,Object^ fnc,char^ forceName) -> void
	{
		itDbgName := forceName
		if itDbgName == null
		{
			asP := Up->{ObjParam^}
			if Up == null or not (Up is ObjParam)
				return void
			itDbgName = asP.MyStr
		}
		//if IsRef
		//{
		//}else{
			asUp := Up
			if fnc != null asUp = fnc
			outId := CreateDbgLocVar(asUp,ResultType,itDbgName,IsRef)
			newId := CreateDebugCall(asUp)
			if newId != -1 and outId != -1
			{
				f << "call void @llvm.dbg.declare(metadata " << ResultType.GetName() << "*"
				if IsRef f << "*"
				f << " %T" << inAllocId << " , metadata !" << outId << " , metadata !DIExpression()) , !dbg !" << newId << "\n"
			}
		//}
	}
}
GlobalFuncParam := class extend MemParam
{
	MainId := int
	this := !(Type^ th,Object^ toSet) -> void
	{
		ResultType = th
		Down = toSet
		MainId = GetNewId()
	}
	IsRef := virtual !() -> bool
	{
		return true
	}
	DoTheWork := virtual !(int pri) -> void
	{
		if pri == State_Start
		{
			//WorkBag.Push(this&,State_GetUse)
		}
		if pri == State_GetUse
		{
			//if inAllocId == -1 inAllocId = GetAlloc(this&,ResultType)
		}
	}
	PrintGlobal := virtual !(TIOStream f) -> void
	{
		f << "@T" << MainId << " = "
		f << "global "
		ResultType.PrintType(f)
		if Down == null
		{
			f << " zeroinitializer\n"
		}else{
			f << " " << Down.GetName() << "\n"
		}
	}
	PrintPointPre := virtual !(TIOStream f, int newInd,int debId) -> void
	{
	}
	PrintPointUse := virtual !(TIOStream f, int newInd,int debId) -> void
	{
		ResultType.GetPoint().PrintType(f)
		f << " @T" << MainId
	}
	PrintPre := virtual !(TIOStream f, int newInd,int debId) -> void
	{
		f << "%T" << newInd << " = load "
		ResultType.PrintType(f)
		f << " , "
		ResultType.PrintType(f)
		f << "* @T" << MainId
		if DebugMode and debId != -1
			f << ", !dbg !" << debId 
		f << "\n"
	}
	PrintUse := virtual !(TIOStream f, int newInd,int debId) -> void
	{
		ResultType.PrintType(f)
		f << " %T"<< newInd
	}
	GetName := virtual !(int newInd) -> string
	{
		return "%T"sbt + newInd 
	}
	GetPointName := virtual !(int newInd) -> string
	{
		return "@T"sbt + MainId
	}
}
ExternParam := class extend MemParam
{
	MainId := int
	itName := string
	this := !(Type^ th,Object^ toSet,string itN) -> void
	{
		itName = itN
		ResultType = th
		Down = toSet
		MainId = GetNewId()
	}
	IsRef := virtual !() -> bool
	{
		return true
	}
	DoTheWork := virtual !(int pri) -> void
	{
		if pri == State_Start
		{
			//WorkBag.Push(this&,State_GetUse)
		}
		if pri == State_GetUse
		{
			//if inAllocId == -1 inAllocId = GetAlloc(this&,ResultType)
		}
	}
	PrintGlobal := virtual !(TIOStream f) -> void
	{
		f << "@" << itName << " = "
		f << "external global "
		ResultType.PrintType(f)
		f << "\n"
	}
	PrintPointPre := virtual !(TIOStream f, int newInd,int debId) -> void
	{
	}
	PrintPointUse := virtual !(TIOStream f, int newInd,int debId) -> void
	{
		ResultType.GetPoint().PrintType(f)
		f << " @" << itName
	}
	PrintPre := virtual !(TIOStream f, int newInd,int debId) -> void
	{
		f << "%T" << newInd << " = load "
		ResultType.PrintType(f)
		f << " , "
		ResultType.PrintType(f)
		f << "* @" << itName 
		if DebugMode and debId != -1
			f << ", !dbg !" << debId 
		f << "\n"
	}
	PrintUse := virtual !(TIOStream f, int newInd,int debId) -> void
	{
		ResultType.PrintType(f)
		f << " %T"<< newInd
	}
	GetName := virtual !(int newInd) -> string
	{
		return "%T"sbt + newInd 
	}
	GetPointName := virtual !(int newInd) -> string
	{
		return "@"sbt + itName
	}
}

FuncParam := class extend MemParam
{
	ItName := string
	IsRef := bool
	this := !(string Name,Type^ typ, bool IIsRef) -> void
	{
		ResultType = typ
		ItName = StrCopy(Name)
		IsRef = IIsRef
	}
	PrintPre := virtual !(TIOStream f, int newInd,int debId) -> void
	{
		if IsRef
		{
			f << "%Tpre" << newInd << " = load "
			ResultType.PrintType(f)
			f << " , "
			ResultType.PrintType(f)
			f << "* %" << ItName
			if DebugMode and debId != -1
				f << ", !dbg !" << debId 
			f << "\n"
		}
	}
	PrintPointPre := virtual !(TIOStream f, int newInd,int debId) -> void
	{
	}
	PrintPointUse := virtual !(TIOStream f, int newInd,int debId) -> void
	{
		
		if IsRef
		{
			ResultType.GetPoint().PrintType(f)
			f << " %" << ItName
		}
	}
	PrintUse := virtual !(TIOStream f, int newInd,int debId) -> void
	{
		if IsRef
		{
			ResultType.PrintType(f)
			f << " %Tpre" << newInd
		}else{
			ResultType.PrintType(f)
			f << " %" << ItName
		}
	}
	GetPointName := virtual !(int newInd) -> string
	{
		//assert(IsRef)
		return "%"sbt + ItName
	}
	GetName := virtual !(int newInd) -> string
	{
		if IsRef
		{
			return "%Tpre"sbt + newInd
		}
		return "%"sbt + ItName
	}
	
}

