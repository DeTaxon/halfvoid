ConstMemParam := class extend MemParam
{
	constIsRef := bool
	AllcId := int
	paramName := char^
	this := !(Object^ nUp , char^ paramNameIn,Type^ paramType, bool isRef) -> void
	{
		assert(nUp != null)
		Up = nUp
		ResultType = paramType
		constIsRef = isRef
		paramName = paramNameIn
	}
	IsRef := virtual !() -> bool
	{
		return true
	}

	calledNotify := bool
	NotifyPointUse := virtual !() -> void
	{
		if calledNotify
			return void
		calledNotify = true

		WorkBag.Push(this&,State_PrePrint)
	}
	DoTheWork := virtual !(int pri) -> void
	{
		if pri == State_PrePrint
		{
			if constIsRef
			{
				AllcId = GetAlloc(this&,ResultType.GetPoint())
				this&->SetType(ConstMemParamRefedRef)
			}else{
				AllcId = GetAlloc(this&,ResultType)
				if $debug and AllcId == -1
				{
					itr := Up
					while itr != null
					{
						printf("line %s\n",itr.GetValue())
						itr = itr.Up
					}
					assert(AllcId != -1)
				}
				this&->SetType(ConstMemParamRefed)
			}
		}
	}

	PrintPre := virtual !(TIOStream f, int newInd,int debId) -> void
	{
		//ToCall.PrintPre(f)
		if constIsRef
		{
			f << "%T" << newInd << " = load " << ResultType.GetName() << " , " 
			f << paramName
			if DebugMode and debId != -1
				f << ", !dbg !" << debId 
			f << "\n"
		}
	}
	PrintUse := virtual !(TIOStream f, int newInd,int debId) -> void
	{
		if constIsRef
		{
			f << ResultType.GetName() << " %T" << newInd << "\n"
		}else{
			f << ResultType.GetName() << " " << paramName
		}
	}
	PrintPointPre := virtual !(TIOStream f, int newInd,int debId) -> void
	{
		//ToCall.PrintPointPre(f)
	}
	PrintPointUse := virtual !(TIOStream f, int newInd,int debId) -> void
	{
		assert(false)
	}
	GetName := virtual !(int newInd) -> string
	{
		if constIsRef
		{
			return "%T"sbt + newInd
		}
		return paramName
	}
	GetType := virtual !() -> Type^ { 
		return ResultType 
	}
	GetPointName := virtual !(int newInd) -> string
	{
		assert(false)
		return paramName
	}
	PrintForDebugDeclare := virtual !(TIOStream f,char^ forceName,Object^ ptrPos,int debId) -> void
	{
		if debId == -1 return void

		outId := CreateDbgLocVar(ptrPos,ResultType,forceName,false) //TODO  !(int& x) <-- not working
		if debId != -1 and outId != -1
		{
			f << "call void @llvm.dbg.value"
			f << "(metadata "
			//if ToCall.IsRef() PrintPointUse(f,0,-1) else PrintUse(f,0,-1)  //TODO OhNo
			PrintUse(f,0,-1) 
			f << " , metadata !" << outId << " , metadata !DIExpression()) , !dbg !" << debId << "\n"
		}
	}
}
ConstMemParamRefed := class extend ConstMemParam
{
	NotifyPointUse := virtual !() -> void {}

	DoStore := virtual !(TIOStream f, int debId) -> void
	{
		rn := ResultType.GetName()
		//ToCall.PrintPre(f)
		f << "store "
		f << rn << " " << paramName
		f << " , " << rn << "* %T" << AllcId 
		if debId != -1
		{
			f << ", !dbg !" << debId
		}
		f << "\n"
	}	
	GetAllocId := virtual !() -> int {
		return AllcId
	}
	PrintPre := virtual !(TIOStream f, int newInd,int debId) -> void
	{
		//ToCall.PrintPre(f)
		f << "%T" << newInd << " = load " << ResultType.GetName() << " , "
		f << ResultType.GetName() << "* %T" << AllcId 
		if DebugMode and debId != -1
			f << ", !dbg !" << debId 
		f << "\n"
	}
	PrintUse := virtual !(TIOStream f, int newInd,int debId) -> void
	{
		f << ResultType.GetName() << " %T" << newInd << "\n"
	}
	PrintPointPre := virtual !(TIOStream f, int newInd,int debId) -> void
	{
		//ToCall.PrintPointPre(f)
	}
	PrintPointUse := virtual !(TIOStream f, int newInd,int debId) -> void
	{
		f << ResultType.GetName() << "* %T" << AllcId
	}
	GetName := virtual !(int newInd) -> string
	{
		return "%T"sbt + newInd
	}
	GetType := virtual !() -> Type^ { 
		return ResultType 
	}
	GetPointName := virtual !(int newInd) -> string
	{
		return "%T"sbt + AllcId
	}
	PrintForDebugDeclare := virtual !(TIOStream f,char^ forceName,Object^ ptrPos,int debId) -> void
	{
		if debId == -1 return void

		outId := CreateDbgLocVar(ptrPos,ResultType,forceName,false)
		if debId != -1 and outId != -1
		{
			f << "call void @llvm.dbg.declare"
			f << "(metadata "
			PrintPointUse(f,0,-1)
			f << " , metadata !" << outId << " , metadata !DIExpression()) , !dbg !" << debId << "\n"
		}
	}
}
ConstMemParamRefedRef := class extend ConstMemParam
{
	NotifyPointUse := virtual !() -> void {}

	DoStore := virtual !(TIOStream f, int debId) -> void
	{
		rn := ResultType.GetName()
		//ToCall.PrintPre(f)
		f << "store "
		f << rn << "* " << paramName
		f << " , " << rn << "** %T" << AllcId 
		if debId != -1
		{
			f << ", !dbg !" << debId
		}
		f << "\n"
	}
	
	GetAllocId := virtual !() -> int {
		return AllcId
	}
	PrintPre := virtual !(TIOStream f, int newInd,int debId) -> void
	{
		//ToCall.PrintPre(f)
		f << "%TPre" << newInd << " = load " << ResultType.GetName() << "* , " << ResultType.GetName() << "** %T" << AllcId 
		f << "%T" << newInd << " = load " << ResultType.GetName() << " , " << ResultType.GetName() << "* %TPre" << newInd 
		if DebugMode and debId != -1
			f << ", !dbg !" << debId 
		f << "\n"
	}
	PrintUse := virtual !(TIOStream f, int newInd,int debId) -> void
	{
		f << ResultType.GetName() << " %T" << newInd << "\n"
	}
	PrintPointPre := virtual !(TIOStream f, int newInd,int debId) -> void
	{
		//ToCall.PrintPointPre(f)
		f << "%T" << newInd << " = load " << ResultType.GetName() << "* , " << ResultType.GetName() << "** %T" << AllcId
		if DebugMode and debId != -1
			f << ", !dbg !" << debId 
		f << "\n"
	}
	PrintPointUse := virtual !(TIOStream f, int newInd,int debId) -> void
	{
		f << ResultType.GetName() << "* %T" << newInd << "\n"
	}
	GetName := virtual !(int newInd) -> string
	{
		return "%T"sbt + newInd
	}
	GetType := virtual !() -> Type^ { 
		return ResultType 
	}
	GetPointName := virtual !(int newInd) -> string
	{
		return "%T"sbt + newInd
	}
	PrintForDebugDeclare := virtual !(TIOStream f,char^ forceName,Object^ ptrPos,int debId) -> void
	{
		if debId == -1 return void

		outId := CreateDbgLocVar(ptrPos,ResultType,forceName,IsRef())
		if debId != -1 and outId != -1
		{
			f << "call void @llvm.dbg.declare"
			f << "(metadata "
			PrintPointUse(f,0,-1)
			f << " , metadata !" << outId << " , metadata !DIExpression()) , !dbg !" << debId << "\n"
		}
	}
}
