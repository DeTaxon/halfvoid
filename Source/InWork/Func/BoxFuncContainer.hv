BoxFuncContainer := class extend Object
{
	ABox := AllocBox
	yodlerInAlloc := int
	Yodlers := List.{BoxReturn^}

	GetABox := virtual !() -> AllocBox^ {return ABox&}
	AddYodler := virtual !(BoxReturn^ toAdd) -> int
	{
		return 0
	}

	containDefer := bool
	DoDefer := !() -> void
	{
		if not containDefer
			WorkBag.Push(this&,State_CheckDefer)
		containDefer = true
	}
	GetFuncLastBody := virtual !() -> BoxFuncContainer^
	{
		return this&
	}
	PrintABoxData := virtual !(TIOStream f, char^ objName,int debId) -> void
	{
		ABox.PrintBoxItems(f,objName,debId)
		if this& is BoxFuncBody
		{
			bdy := this&->{BoxFuncBody^}
			if bdy.IsMethod
			{
				thisId := bdy.ItParams[0].inAllocId
				fT := bdy.MyFuncType
				f << "%thisPre = getelementptr " << fT.Pars[0].GetName() << "* , " << fT.Pars[0].GetName() << "** %T" << thisId << " , i32 0\n"
				f << "%this = load " << fT.Pars[0].GetName() << "* , " << fT.Pars[0].GetName() << "** %thisPre\n" 
			}
		}
		if IsSLambda(this&)
		{
			lambd := this&->{SLambda^}
			if not lambd.justFunc and lambd.lambadOnItsFrameNr != -1
			{
				f << "%StackObjLmPtr = getelementptr " << ABox.GetClassName() << " , " 
					<< ABox.GetClassName() << "* %StackObjABox ,i32 0, i32 " << lambd.lambadOnItsFrameNr <<"\n"
				f << "%StackObjLm = load i8* , i8** %StackObjLmPtr\n"
				lambd.PrintInhers(f,"%StackObjLm",DebugMode)
			}
			//ABox.PrintAlloc(f,"%Lambda0Box",debId)
		}
		if IsBoxFuncContainer(this&)
		{
			this&->{BoxFuncBody^}.PrintABoxExtra(f)
		}
	}

	pDeferB := bool
	deferStackSize := int
	deferStackNr := int
	ParseDefer := !() -> void
	{
		if pDeferB
			return void
		pDeferB = true

		deferStackSize = GetDeferUsage() - 1
		if deferStackSize == 0
		{
			//assert(deferStackSize != 0)
			//Print(0)
			assert(false)
		}
		
		deferStackNr = GetAlloc(this&,GTypeU8.GetArray(deferStackSize))
	}

	PrintABoxExtra := !(TIOStream f) -> void
	{
		if pDeferB
		{
			f << "%DeferStack = getelementptr [" << deferStackSize <<" x i8], ["<< deferStackSize <<" x i8]* %T" << deferStackNr << ", i32 0, i32 0\n"
			for i : deferStackSize
			{
				f << "%DeferStack" << i << " = getelementptr [" << deferStackSize <<" x i8], ["<< deferStackSize <<" x i8]* %T" 
				f << deferStackNr << ", i32 0, i32 " << i <<"\n"
			}
		}
	}
	DeferFuncStart := !(TIOStream f,int dbgId) -> void
	{
		if pDeferB and Yodlers.Size() == 0
		{
			PrintDeferDepth(f,ABox.ItId,dbgId)
			Down->{BoxBlock^}.PrintBlockAddDefer(f,dbgId)
		}
	}
	
	DeferFuncEnd := !(TIOStream f,int dbgId) -> void
	{
		if pDeferB and Yodlers.Size() == 0
		{
			Down->{BoxBlock^}.PrintDeferInBlockUse(f)
			PrintDeferSkip(f,ABox.ItId,dbgId)
		}
	}
}
