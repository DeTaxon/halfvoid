Token := class
{
	Up := Token^
	Down := Token^
	Left := Token^
	Right := Token^

	Line := FileLine^

	TokenId := int

	IsData := virtual false
	IsBlock := virtual false

	GetValue := virtual !() -> StringSpan
	{
		assert(false)
		return emptySpn
	}

	Print := virtual !(int x) -> void
	{
		//assert(false)
	}

	MakeError := !(char^ info) -> String^
	{
		ln := TEchoStream

		ln << "Error <" << info << ">"
		if Line != null
		{
			ln << " at file " << Line.File.GetName() << " line: "
			ln << Line.Line
		}
		ln <<"\n"
		for it : UnitStack
		{
			if it is TypeVar
			{
				cv := it->{TypeVar^}
				ln << "var " << cv.Name << " = " << cv.Value.GetBADStr().Str() << "\n"
			}else
			if it is ConstVar
			{
				cv := it->{ConstVar^}
				if cv.Value is BoxExeInt
				{
					ln << "var " << cv.Name << " = " << cv.Value->{BoxExeInt^}.Value<< "\n"
				}else if cv.Value is BoxExeString {
					ln << "var " << cv.Name << " = <" << cv.Value->{BoxExeString^}.Value << ">\n"
				}else{
					ln << "var " << cv.Name << " = unknown\n"
				}
			}else
			if it is in NamedVar
			{
				nv := it->{NamedVar^}
				ln << "local var " << nv.Name << " as unknown type\n" 
			}
		}
		return ln.GetString()
	}
	EmitError := !(char^ info) -> void
	{
		errMsg := MakeError(info)
		printf("%s",errMsg.Str())
		exit(-1)
	}
}

emptySpn := StringSpan

TokenDecor := class extend Token
{
	Value := StringSpan

	this := !(StringSpan val) -> void
	{
		Value = val
	}
	GetValue := virtual !() -> StringSpan
	{
		return StringSpan("@d")
	}
	Print := virtual !(int x) -> void
	{
		for x printf("-")
		printf("decorator %s\n",Value)
		Down?.Print(x+1)
		Right?.Print(x)
	}
}
TokenData := class extend Token
{
	IsData := virtual true

	GetValue := virtual !() -> StringSpan
	{
		return StringSpan("~d")
	}
	Print := virtual !(int x) -> void
	{
		for x printf("-")
		printf("data object\n")
		Down?.Print(x+1)
		Right?.Print(x)
	}
}
TokenBlockData := class extend TokenData
{
	IsBlock := virtual true
}

FileLine := class
{
	File := BoxFile^
	Line := int
	Attributes := StringSpan

	this := !(BoxFile^ fil) -> void
	{
		File = fil
	}
}

TokenNull := class extend Token
{
	IsData := virtual true
	this := !() -> void
	{
	}
	GetValue := virtual !() -> StringSpan
	{
		return StringSpan("null")
	}
	Print := virtual !(int x) -> void
	{
		for x printf("-")
		printf("null\n")
		Down?.Print(x+1)
		Right?.Print(x)
	}
}
TokenNone := class extend Token
{
	IsData := virtual true
	this := !() -> void
	{
	}
	GetValue := virtual !() -> StringSpan
	{
		return StringSpan("none")
	}
}

TokenBool := class extend Token
{
	boolValue := bool

	IsData := virtual true

	this := !(bool val2) -> void
	{
		boolValue = val2
	}
	GetValue := virtual !() -> StringSpan
	{
		return StringSpan(boolValue ?: "true" : "false")
	}
	Print := virtual !(int x) -> void
	{
		for x printf("-")
		printf("bool %i\n",boolValue)
		Down?.Print(x+1)
		Right?.Print(x)
	}
}
TokenBreak := class extend Token
{
	IsBlock := virtual true

	this := !() -> void
	{
	}
	GetValue := virtual !() -> StringSpan
	{
		return StringSpan("break")
	}
	Print := virtual !(int x) -> void
	{
		for x printf("-")
		printf("symbol break\n")
		Down?.Print(x+1)
		Right?.Print(x)
	}
}
TokenContinue := class extend Token
{
	IsBlock := virtual true

	this := !() -> void
	{
	}
	GetValue := virtual !() -> StringSpan
	{
		return StringSpan("continue")
	}
	Print := virtual !(int x) -> void
	{
		for x printf("-")
		printf("symbol continue\n")
		Down?.Print(x+1)
		Right?.Print(x)
	}
}
TokenSuffix := class extend Token
{
	Value := StringSpan

	this := !(StringSpan val) -> void
	{
		Value = val
	}
	GetValue := virtual !() -> ref StringSpan
	{
		return StringSpan("~s")
	}
	Print := virtual !(int x) -> void
	{
		for x printf("-")
		printf("suffix %s\n",Value)
		Down?.Print(x+1)
		Right?.Print(x)
	}
}
TokenSymbol := class extend Token
{
	Value := StringSpan

	this := !(StringSpan val, int tId) -> void
	{
		Value = val
		TokenId = tId
	}
	GetValue := virtual !() -> StringSpan
	{
		return Value
	}
	Print := virtual !(int x) -> void
	{
		for x printf("-")
		printf("symbol %s\n",Value)
		Down?.Print(x+1)
		Right?.Print(x)
	}
}
TokenSkobSymbol := class extend TokenSymbol
{
	EndLine := FileLine^

	this := !(StringSpan val, int tId) -> void
	{
		Value = val
		TokenId = tId
	}
}
TokenIndent := class extend Token
{
	Value := StringSpan
	
	IsData := virtual true
	this := !(StringSpan val) -> void
	{
		Value = val
	}
	GetValue := virtual !() -> StringSpan
	{
		return StringSpan("~ind")
	}
	Print := virtual !(int x) -> void
	{
		for x printf("-")
		printf("indent %s\n",Value)
		Down?.Print(x+1)
		Right?.Print(x)
	}
}
TokenTemplateType := class extend TokenIndent
{
	this := !(StringSpan val) -> void
	{
		Value = val
	}
}

TokenString := class extend Token
{
	Value := Str
	IsData := virtual true
	this := !(Str val) -> void
	{
		Value = val
	}
	GetValue := virtual !() -> StringSpan
	{
		return StringSpan("~str")
	}
	Print := virtual !(int x) -> void
	{
		for x printf("-")
		printf("string <%s>\n",Value.Str())
		Down?.Print(x+1)
		Right?.Print(x)
	}
}
TokenDouble := class extend Token
{
	Value := StringSpan
	Parsed := double
	IsData := virtual true
	this := !(StringSpan val, double val2) -> void
	{
		Value = val
		Parsed = val2
	}
	GetValue := virtual !() -> StringSpan
	{
		return StringSpan("~double")
	}
	Print := virtual !(int x) -> void
	{
		for x printf("-")
		printf("double %s as %f\n",Value,Parsed)
		Down?.Print(x+1)
		Right?.Print(x)
	}
}
TokenInt := class extend Token
{
	Value := StringSpan
	Parsed := int
	IsData := virtual true
	this := !(StringSpan val, int val2) -> void
	{
		Value = val
		Parsed = val2
	}
	GetValue := virtual !() -> StringSpan
	{
		return StringSpan("~int")
	}
	Print := virtual !(int x) -> void
	{
		for x printf("-")
		printf("integer %s as %i\n",Value,Parsed)
		Down?.Print(x+1)
		Right?.Print(x)
	}
}

