ConstantHolder := class
{
	Constants := List.{BoxExeConstObj^}

	"==" := !(ConstantHolder other) -> bool
	{
		if Constants.Size() != other.Constants.Size()
			return false
		
		for i : Constants.Size()
		{
			itm1 := Constants[i]
			itm2 := other.Constants[i]

			
			//if itm1->VTable != itm2->VTable
			//	return false

			if itm1 != itm2
				return false

		}
		return true
	}
	Destroy := virtual !() -> void
	{
		Constants.Destroy()
	}
}

TemplateCheckConstants := !(BoxExeConstObj^[] cnsts, List.{Token^} cnstsTokens, AVLMap.{Str,BoxUnit^} namedConsts) -> bool
{
	if cnsts.Size() != cnstsTokens.Size()
		return false

	if cnstsTokens.Size() == 2
		and cnstsTokens[0] is TokenTemplateType
		and cnstsTokens[1].GetValue() == "..."
	{
		varName := cnstsTokens[0]->{TokenTemplateType^}.Value[1..0] //TODO empty variadic?
		//TODO this case just for one {@Types...}, maybe add for @{@T,@Types...}

		typs := List.{Type^}
		for c2 : cnsts
		{
			if c2 is not in Type
			{
				return false
			}
			typs.Push(c2->{Type^})
		}
		newVar := new TypeVariadicVar(varName,typs)
		namedConsts[varName] = newVar
		return true //TODO maybe for {@T,@Types...,@C} , extra variables after variadic
	}

	for cnst, i : cnsts, token : cnstsTokens
	{
		res := CheckTemplateConst(cnst,token,namedConsts)
		if res == null
			return false
	}
	//for cnst, i : cnsts, token : cnstsTokens
	//{
	//	assert(token is TokenTemplateType)
	//	tmpl := token->{TokenTemplateType^}
	//	name := tmpl.Value[1..0]
	//	if cnst is ConstType
	//	{
	//		namedConsts[name] = new TypeVar(name,cnst->{ConstType^}.Value)
	//	}else{
	//		namedConsts[name] = new ConstVar(name,cnst)
	//	}
	//}
	return true
}

typeTemplateConsts := AVLMap.{BoxClassTemplate^,ConstTemplateType^}
GetConstTemplateType := !(BoxClassTemplate^ tp) -> BoxExeConstObj^
{
	if typeTemplateConsts.Contain(tp)
		return typeTemplateConsts[tp]
	newCmp := new ConstTemplateType(tp)
	typeTemplateConsts[tp] = newCmp
	return newCmp
}

ConstTemplateType := class extend BoxExeConstObj
{
	Value := BoxClassTemplate^
	this := !(BoxClassTemplate^ tp) -> void
	{
		ObjType = GTypeVoid
		Value = tp
	}
}
