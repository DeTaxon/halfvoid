AppendClass HVContextImplementation
{
	FindFunction := virtual !(Str funcName) -> HV_Object^
	{
		res := BoxFuncTemplate^
		GetItemGlobal(funcName,x ==> {
			for itm : x
			{
				if itm is in BoxFuncTemplate
				{
					res = itm->{BoxFuncTemplate^}
					return true
				}
			}
		})
		if res == null
			return res
		if not res.IsOneFunc()
			return null
		return res.GetOneFunc()
	}

	ForEachFunction := virtual !(!(HV_Object^)&-> void cb ) -> void
	{
		objs := List.{HV_Object^}

		for spc : CodeSpaces
		{
			objs.Push(spc.Templates[^][^].AllFuncs[^][^])

		}
		for cls : AllClasses
		{
			if cls is not in BoxClassBody
				continue
			cls2 := cls->{BoxClassBody^}

			objs.Push(cls2.DefaultSpace.Methods[^][^])
			objs.Push(cls2.DefaultSpace.VirtualCleanMethods[^][^])
			objs.Push(cls2.DefaultSpace.MethodTemplates[^][^].AllFuncs[^][^])

			objs.Push(cls2.FieldSpaces[^].Methods[^][^])
			objs.Push(cls2.FieldSpaces[^].VirtualCleanMethods[^][^])
			objs.Push(cls2.FieldSpaces[^].MethodTemplates[^][^].AllFuncs[^][^])
		}
		
		cb(objs[^])
	}
	ForEachFuncElement := virtual !(HV_Object^ obj, !(HV_Object^,int,HV_Object^)&-> void cb) -> void
	{
		if obj == null
			return void
		if obj is not in BoxFuncBody
			return void
		bdy := obj->{BoxFuncBody^}

		lst := List.{Tuple.{HV_Object^,int,HV_Object^}}
		lst.EmplaceFront(null->{HV_Object^},0,bdy.body)

		while lst.Size() != 0
		{
			itm := lst.Pop()

			assert(itm.2.IsEditSupported)

			for i : itm.2.SubElementsCount()
			{
				newItm := itm.2.GetSubElement(i)
				
				if newItm == null
					continue

				if newItm.IsEditSupported
				{
					lst.EmplaceFront(itm.2,i,newItm)
				}else{
					c := Str
					c = newItm->{BoxUnit^}.UnitName
					metFuncs := static AVLSet.{Str}
					if c not in metFuncs
					{
						metFuncs.Insert(c)
						//TODO emit somewhere
						printf("Not implemented EditSupport for %s\n",c)
					}
				}
			}
			cb(itm.0,itm.1,itm.2)
		}
		CurrentHotloadContext?.ChangedFunctions.PushUniq(bdy)
	}
	ForEachClass := virtual !(!(HV_Class^)&->void cb) -> void
	{
		clss := AVLSet.{BoxClass^}

		for it : AllClasses
		{
			clss.Insert(it)
		}
		for it : CodeSpaces[^].Files[^].FileClasses
		{
			clss.Insert(it)
		}
		clss.Insert(UserModules[^].bodyClass?)
		clss.Insert(DummyFile.FileClasses[^])

		clss.Remove(null)
		for it : clss
		{
			if it.hvClass.baseClass == null //TODO who does not have it? mabe make it into multiple inheritance
				continue
			cb(it.hvClass&)
		}
	}
}
