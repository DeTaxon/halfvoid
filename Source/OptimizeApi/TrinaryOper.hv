AppendClass TrinaryOper
{
	IsEditSupported := virtual true
	ElementName := virtual "Trinary"


	SubElementsCount := virtual !() -> int { return 3 }
	GetSubElement := virtual !(int index) -> HV_Object^
	{ 
		switch index
		{
			case 0
				return ifStatement
			case 1
				return onTrue 
			case 2
				return onFalse
			case void
				return null
		}
	}
	ReplaceSubElement := virtual !(int index, HV_Object^ newElement) -> bool
	{
		if index not in 0..2
			return false
		if newElement is not in BoxExeObj
			return false
		asThis := newElement->{BoxExeObj^}

		switch index
		{
			case 0
				if asThis.GetType() != GTypeBool
					return false
				ifStatement = asThis
			case 1
				if asThis.GetType() != onTrue.GetType()
					return false
				onTrue = asThis
			case 2
				if asThis.GetType() != onTrue.GetType()
					return false
				onFalse = asThis
		}

		notifyEditChange()
		return true
	}
}
AppendClass TrinaryOperMem
{
	IsEditSupported := virtual true
	ElementName := virtual "Trinary"


	SubElementsCount := virtual !() -> int { return 3 }
	GetSubElement := virtual !(int index) -> HV_Object^
	{ 
		switch index
		{
			case 0
				return ifStatement
			case 1
				return onTrue 
			case 2
				return onFalse
			case void
				return null
		}
	}
}
