
AppendClass BoxAnd
{
	IsEditSupported := virtual true
	ElementName := virtual "And"

	SubElementsCount := virtual !() -> int { return 2 }
	GetSubElement := virtual !(int index) -> HV_Object^
	{
		switch index
		{
			case 0
				return LeftCall
			case 1
				return RightCall
			case void
				return null
		}
	}
	ReplaceSubElement := virtual !(int index, HV_Object^ newElement) -> bool
	{
		if index not in 0..1
			return false
		if newElement is not in BoxExeObj
			return false
		asThis := newElement->{BoxExeObj^}
		if asThis.GetType() != GTypeBool
			return false
		if index == 0 {
			LeftCall = asThis
		}else{
			RightCall = asThis
		}
		notifyEditChange()
		return true
	}
}
AppendClass BoxOr
{
	IsEditSupported := virtual true
	ElementName := virtual "Or"

	SubElementsCount := virtual !() -> int { return 2 }
	GetSubElement := virtual !(int index) -> HV_Object^
	{
		switch index
		{
			case 0
				return LeftCall
			case 1
				return RightCall
			case void
				return null
		}
	}
	ReplaceSubElement := virtual !(int index, HV_Object^ newElement) -> bool
	{
		if index not in 0..1
			return false
		if newElement is not in BoxExeObj
			return false
		asThis := newElement->{BoxExeObj^}
		if asThis.GetType() != GTypeBool
			return false
		if index == 0 {
			LeftCall = asThis
		}else{
			RightCall = asThis
		}
		notifyEditChange()
		return true
	}
}
