
AppendClass FloatExchange
{
	IsEditSupported := virtual true
	ElementName := virtual "FloatToFloat"

	SubElementsCount := virtual !() -> int { return 1 }
	GetSubElement := virtual !(int index) -> HV_Object^
	{
		if index != 0
			return null
		return Down
	}

	ReplaceSubElement := virtual !(int index, HV_Object^ newElement) -> bool
	{
		if index != 0
			return false
		if newElement is not in BoxExeObj
			return false
		asThis := newElement->{BoxExeObj^}
		if not IsFloat(asThis.GetType())
			return false
		Down = asThis
		notifyEditChange()
		return true
	}
}
AppendClass IntExchange
{
	IsEditSupported := virtual true
	ElementName := virtual "IntToInt"

	SubElementsCount := virtual !() -> int { return 1 }
	GetSubElement := virtual !(int index) -> HV_Object^
	{
		if index != 0
			return null
		return Down
	}

	ReplaceSubElement := virtual !(int index, HV_Object^ newElement) -> bool
	{
		if index != 0
			return false
		if newElement is not in BoxExeObj
			return false
		asThis := newElement->{BoxExeObj^}
		if not IsInt(asThis.GetType())
			return false
		Down = asThis
		notifyEditChange()
		return true
	}
}

AppendClass PtrToRef
{
	IsEditSupported := virtual true
	ElementName := virtual "PtrToRef"

	SubElementsCount := virtual !() -> int { return 1 }
	GetSubElement := virtual !(int index) -> HV_Object^
	{
		if index != 0
			return null
		return Down
	}
	ReplaceSubElement := virtual !(int index, HV_Object^ newElement) -> bool
	{
		if index != 0
			return false
		if newElement is not in BoxExeObj
			return false
		asThis := newElement->{BoxExeObj^}
		if asThis.GetType() is not in TypePoint
			return false
		Down = asThis
		notifyEditChange()
		return true
	}
}
AppendClass PtrExchange
{
	IsEditSupported := virtual true
	ElementName := virtual "PtrToPtr"

	SubElementsCount := virtual !() -> int { return 1 }
	GetSubElement := virtual !(int index) -> HV_Object^
	{
		if index != 0
			return null
		return Down
	}

	ReplaceSubElement := virtual !(int index, HV_Object^ newElement) -> bool
	{
		if index != 0
			return false
		if newElement is not in BoxExeObj
			return false
		asThis := newElement->{BoxExeObj^}
		if asThis.GetType() is not in TypePoint
			return false
		Down = asThis
		notifyEditChange()
		return true
	}
}

AppendClass IntToFloatExchange
{
	IsEditSupported := virtual true
	ElementName := virtual "IntToFloat"

	SubElementsCount := virtual !() -> int { return 1 }
	GetSubElement := virtual !(int index) -> HV_Object^
	{
		if index != 0
			return null
		return Down
	}
	ReplaceSubElement := virtual !(int index, HV_Object^ newElement) -> bool
	{
		if index != 0
			return false
		if newElement is not in BoxExeObj
			return false
		asThis := newElement->{BoxExeObj^}
		if not IsInt(asThis.GetType())
			return false
		Down = asThis
		notifyEditChange()
		return true
	}
}

AppendClass ArrToPtr
{
	IsEditSupported := virtual true
	ElementName := virtual "ArrToPtr"

	SubElementsCount := virtual !() -> int { return 1 }
	GetSubElement := virtual !(int index) -> HV_Object^
	{
		if index != 0
			return null
		return Down
	}

	ReplaceSubElement := virtual !(int index, HV_Object^ newElement) -> bool
	{
		if index != 0
			return false
		if newElement is not in BoxExeObj
			return false
		asThis := newElement->{BoxExeObj^}
		if asThis.GetType() is not in TypeArr
			return false
		Down = asThis
		notifyEditChange()
		return true
	}
}
AppendClass RefExchange
{
	IsEditSupported := virtual true
	ElementName := virtual "RefExchange"

	SubElementsCount := virtual !() -> int { return 1 }
	GetSubElement := virtual !(int index) -> HV_Object^
	{
		if index != 0
			return null
		return Down
	}
	ReplaceSubElement := virtual !(int index, HV_Object^ newElement) -> bool
	{
		if index != 0
			return false
		if newElement is not in BoxExeObj
			return false
		asThis := newElement->{BoxExeObj^}
		if not asThis.IsMem()
			return false
		Down = asThis
		notifyEditChange()
		return true
	}
}

AppendClass FloatToIntExchange
{
	IsEditSupported := virtual true
	ElementName := virtual "FloatToInt"

	SubElementsCount := virtual !() -> int { return 1 }
	GetSubElement := virtual !(int index) -> HV_Object^
	{
		if index != 0
			return null
		return Down
	}

	ReplaceSubElement := virtual !(int index, HV_Object^ newElement) -> bool
	{
		if index != 0
			return false
		if newElement is not in BoxExeObj
			return false
		asThis := newElement->{BoxExeObj^}
		if not IsFloat(asThis.GetType())
			return false
		Down = asThis
		notifyEditChange()
		return true
	}
}

AppendClass PtrToSizeT
{
	IsEditSupported := virtual true
	ElementName := virtual "PtrToSizeT"

	SubElementsCount := virtual !() -> int { return 1 }
	GetSubElement := virtual !(int index) -> HV_Object^
	{
		if index != 0
			return null
		return Down
	}

	ReplaceSubElement := virtual !(int index, HV_Object^ newElement) -> bool
	{
		if index != 0
			return false
		if newElement is not in BoxExeObj
			return false
		asThis := newElement->{BoxExeObj^}
		if asThis.GetType() is not in TypePoint
			return false
		Down = asThis
		notifyEditChange()
		return true
	}
}

AppendClass FuncToPointerObj
{
	IsEditSupported := virtual true
	ElementName := virtual "FuncToFuncPtr"


}
