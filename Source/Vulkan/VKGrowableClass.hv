AppendClass ModuleVulkan
{
	vulkanClass := VKGrowableClass^
	GetVulkanClass := !() -> BoxUnit^
	{
		if vulkanClass == null
		{
			vulkanClass = new VKGrowableClass(this&)
			AllClasses.Push(vulkanClass)
		}
		return GetConstType(vulkanClass.ItType)
	}
}

VKGrowableClass := class extend BoxClass
{
	itModule := ModuleVulkan^
	classSize := VarIntObj^
	this := !(ModuleVulkan^ bs) -> void
	{
		itModule = bs

		ItName = "VulkanFunctionsClass" //todo
		ItId = GetNewId()
		ItType = new TypeClass(this&) //TODO remove duplicate from BoxClassBody,BoxTuple

		ItAlign = 1 //TODO pointer size
		ItSize = 0
	}
	GetNewFieldType := virtual !(StringSpan val) -> Type^
	{
		if val.Size() > 1000
			return null

		buffer := char[1024]
		strcpy(buffer[0]&,"PFN_")
		memcpy(buffer[4]&,val.NonNullStr(),val.Size())
		buffer[val.Size() + 5] = 0
		return itModule.GetTryFuncPointer(buffer[0]&)
	}
	GetField := virtual !(StringSpan val) -> FieldPath^
	{
		for it : FieldsPath
		{
			if it.Field.Name == val
			{
				return it
			}
		}

		newFieldType := GetNewFieldType(val)


		if newFieldType == null
			return null

		newField := new FieldParam(val,newFieldType)
		Fields.Push(newField)

		fPath := new FieldPath(ItType,newField.Value)
		fPath.Field = newField
		fPath.Index = FieldsPath.Size()

		FieldsPath.Push(fPath)

		fieldAlign := newFieldType.GetAlign()
		ItAlign = max(ItAlign,fieldAlign)

		unalign := ItSize mod fieldAlign
		if unalign != 0
		{
			ItSize += fieldAlign - unalign
		}

		ItSize += newFieldType.GetSize() //todo variable size object?

		for it : fieldIterators
		{
			it.ItemCreated(FieldsPath.Size() - 1)
		}

		return fPath 
	}
}
