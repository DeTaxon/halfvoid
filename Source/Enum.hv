TryParseEnum := !(Token^ tkn) -> BoxEnum^
{
	if tkn == null or tkn.Down == null or tkn.Down.GetValue() != "enum"
		return null
	
	resEnum := new BoxEnum(tkn.Down)

	return resEnum
}

BoxEnum := class extend BoxUnit
{
	ItType := TypeEnum^
	BaseType := TypeStandard^
	ReadyState := THatch
	Values := HybridQueue.{Tuple.{Str,BoxEnumValue^},10}
	EnumToken := Token^
	Parent := BoxEnum^
	ToCStrFunction := BoxFuncBody^

	CStrTable := GlobalVar2^

	this := !(Token^ datToken) -> void
	{
		ItType = new TypeEnum()
		ItType.ToEnum = this&
		EnumToken = datToken
	}

	GetType := !() -> void
	{
		AwaitReadyState()
		return itType
	}

	AwaitReadyState := !() -> void
	{
		ParseBody()
		ReadyState.Await()
	}

	startedParse := bool
	ParseBody := !() -> void
	{
		if startedParse
			return void
		startedParse = true

		SubWork(() ==>{

			//TODO set CurrentWork
			res := CheckObject(EnumToken)
			ApplyObject(res)
			ReadyState.Emit()
		})
	}
	ReloadEnum := !(HotloadContext^ ctx, Token^ tstObj) -> void
	{
		res := CheckObject(tstObj)

		needSwap := false

		if BaseType != res.BaseType
			needSwap = true
		if not needSwap
		{
			if res.Values.Size() != Values.Size()
			{
				needSwap = true
			}else{
				for it1 : Values , it2 : res.Values
				{
					if it1.0 != it2.0
					{
						needSwap = true
						break
					}
				}
			}
		}

		if not needSwap
			return void

		Values.Destroy()
		EnumToken = tstObj
		CStrTable = null
		ApplyObject(res)
		ReadyState.Emit()

		DB_EnumUsage.Value.Get(this&,x ==> {
			ctx.AddFunction(x)
		})
		ctx.AddFunction(ToCStrFunction?)

	}

	ApplyObject := !(CheckObjResult res) -> void
	{
		BaseType = res.BaseType

		for it : res.Values
		{
			Values.Emplace(it.0,null->{BoxEnumValue^})
		}

		ItType.Base = BaseType
		ItType.IRName = BaseType.IRName
		ItType.MetaInfo = BaseType.MetaInfo
		ItType.ItSize  = BaseType.ItSize
		ItType.ItAlign = BaseType.ItAlign
	}
	CheckObject := !(Token^ enToken) -> CheckObjResult
	{
		iter := enToken.Right

		baseType := GTypeInt->{TypeStandard^}

		if iter.GetValue() == "extend"
		{
			iter = iter.Right

			exType := ParseType(iter)

			if exType == null
			{
				CurrentWork?.SetErrorMessage(iter.MakeError("unknown extended type"))
				return void
			}

			if IsInt(exType)
			{
				baseType = exType->{TypeStandard^}
			}else if exType is TypeEnum {
				asEnum := exType->{TypeEnum^}.ToEnum

				asEnum.AwaitReadyState()
				baseType = asEnum.ItType

				for it : asEnum.Values
				{
					Values.Emplace(it.0,it.1)
				}
				Parent = asEnum
			}else{
				CurrentWork?.SetErrorMessage(iter.MakeError("unknown extended type"))
				return void
			}
			

			iter = iter.Right.Down
		}else{
			iter = iter.Down
		}

		result.BaseType = baseType

		i := 0

		while iter != null
		{
			if iter.GetValue() != ","
			{
				if iter is TokenString
				{
					st := iter->{TokenString^}.Value
					result.Values.Emplace(st,i)
					i += 1
				}else{
					CurrentWork?.SetErrorMessage(iter.MakeError("Unknown use of enum"))
					return void
				}
			}
			iter = iter.Right
		}
	}

	GetEnumIndex := !(String^ val,int^ res) -> bool
	{
		AwaitReadyState()
		for it,i : Values
		{
			if it.0 == val
			{
				if res != null
					res^ = i
				return true
			}
		}
		return false
	}
	GetEnum := !(String^ val) -> BoxExeObj^
	{
		AwaitReadyState()
		for it,i : Values
		{
			if it.0 == val
			{
				if it.1 == null
					it.1 = new BoxEnumValue(ItType,i)
				return it.1
			}
		}
		return null
	}
	cmpFunc := BoxFunc^
	GetCmpFunc := !() -> BoxFunc^
	{
		AwaitReadyState()
		if cmpFunc == null
			cmpFunc = new BuiltInIntBase(GetFuncType(![ItType,ItType],GTypeBool),"icmp eq")
		return cmpFunc
	}
}

CheckObjResult := class
{
	BaseType := TypeStandard^
	Values := List.{Tuple.{Str,int}}
}

TypeEnum := class extend TypeStandard
{
	ToEnum := BoxEnum^
	this := !() -> void
	{
		super("i32","Enum","!DIBasicType(name: \"enum\", size: 32, align: 32,encoding: DW_ATE_signed)",4,4)
	}
	GetAlign := virtual !() -> int
	{
		ToEnum.AwaitReadyState()
		return super()
	}
	GetSize := virtual !() -> int
	{
		ToEnum.AwaitReadyState()
		return super()
	}
}

BoxEnumValue := class extend BoxExeObj
{
	ItValue := int
	this := !(TypeEnum^ itType, int itValue) -> void
	{
		ObjType = itType
		ItValue = itValue
	}
	PrintUse := virtual !(LLVMWriteContext^ ctx) -> void
	{
		ctx.writeStream^ << ItValue
	}
	PrintConst := virtual !(LLVMWriteContext^ ctx) -> void
	{
		ctx.writeStream^ << ItValue
	}
}

GetEnumMethodCall := !(Token^ itm,BoxExeObj^ vr,BoxExeObj^[] objs,BoxExeConstObj^[] consts) -> BoxExeObj^
{
	if itm.Down.Right.Right is not TokenIndent
		return null

	itName := itm.Down.Right.Right->{TokenIndent^}.Value
	if itName == "ToCStr"
	{
		res := CreateFuncCall(StringSpan("internalEnumToCString"),![vr])

		if res is in BoxFuncCall
		{
			enm := vr.GetType()->{TypeEnum^}.ToEnum
			if res.callObj is in BoxFuncBody
				enm.ToCStrFunction = res.callObj->{BoxFuncBody^}
		}

		return res
	}
}

enumGetCStrTable := !(Type^ enumType) -> BoxExeObj^
{
	if enumType is not in TypeEnum
		return null
	tp := enumType->{TypeEnum^}.ToEnum

	tp.AwaitReadyState()

	if tp.CStrTable == null
	{
		valCount := tp.Values.Size()
		globType := GTypeChar.GetPoint().GetArray(tp.Values.Size() + 1)
		tp.CStrTable = CreateGlobalVar(StringSpan("."),globType,false)

		setArr := new ClassArray(globType)
		for it : tp.Values
		{
			setArr.Value.Push(GetExeString(it.0))
		}
		setArr.Value.Push(GObjNull)

		tp.CStrTable.value = setArr 
	}

	return tp.CStrTable.proxy&
}

EnumBuildInStoreTemplate := class extend BoxFuncTemplate 
{
	this := !() -> void
	{
	}
	ToFuncType := virtual !(BoxExeObj^[] objs, BoxExeConstObj^[] consts) -> TypeFunc^
	{
		if objs.Size() != 2
			return null
		a := objs[0].GetType()
		b := objs[1].GetType()

		if a is not TypeEnum
			return null

		if b is TypeEnum
		{
			if a != b
				return null
		}else if b == GTypeChar.GetPoint()
		{
			if not objs[1].IsConst
				return null

		}else{
			return null
		}
		
		return GetFuncType(![a,a],![true,false],GTypeVoid)
	}
	CreateFunc := virtual !(TypeFunc^ tp, BoxExeConstObj^[] consts) -> BoxFunc^
	{
		return new BuiltInPrimeStore(tp)
	}
}
CreateBuildInEnum := !() -> void
{
	bSpace := CodeSpaces[-1]&
	bSpace.Templates[StringSpan("=")].Push(new EnumBuildInStoreTemplate())
}
