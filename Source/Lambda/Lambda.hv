BoxLambdaHolder := class extend BoxExeObj
{
	tmpl := BoxFuncTemplateBody^
	cleanType := Type^
	captureTokens := Token^
	this := !(Token^ brackets, Token^ body,Token^ typeToken,Token^ capturesToken) -> void
	{
		captureTokens = capturesToken

		attr := FuncAttributes
		bPtr := Token^
		itBody := body

		if itBody.GetValue() != "{}"
		{
			itBody = new TokenSymbol(StringSpan("{}"),1)
			dat := new TokenData
			re := new TokenSymbol(StringSpan("return"),1)
			itBody.Down = dat
			dat.Down = re
			re.Right = body
			itBody.Line = body.Line
			re.Line = body.Line
			dat.Line = body.Line
		}

		if brackets.Down?.GetValue() == "()"
		{
			bPtr = brackets.Down
		}else{
			if not (brackets is TokenIndent)
				brackets.EmitError("Unknown input object for lambda") //todo better error
			
			bPtr = new TokenSymbol(StringSpan("()"),1)
			bPtr.Down = new TokenIndent(brackets->{TokenIndent^}.Value)
		}

		rToken := typeToken
		if typeToken == null
		{
			rToken = new TokenIndent
			attr.IsAutoResult = true
			rToken->{TokenIndent^}.Value = StringSpan("void")
		}

		attr.IsLambda = true
		
		tmpl = new BoxFuncTemplateBody(attr,bPtr,null,null,rToken,itBody,null)
		tmpl.SetName(StringSpan("lambda"))

		ObjType = GTypeNone
	}
	IsOneFunc := !() -> bool
	{
		return tmpl.IsOneFunc()
	}
	CreateOneFuncLambda := !() -> BoxExeObj^
	{
		return createLambd(() ==> {
			return this.tmpl.GetOneFunc()->{BoxFuncBody^}
		})
	}
	CreateFunction := virtual !(Type^ toType) -> BoxFunc^
	{
		if toType is not in TypePoint
			return null
		if toType.Base is not in TypeFunc
			return null
		//TODO, temporary fix , that probably gonna be forever
		tmpl.Attrs.IsLambda = false
		tmpl.Attrs.IsAutoResult = true
		cnsts := List.{BoxExeConstObj^}
		return tmpl.CreateFunc(toType.Base->{TypeFunc^},cnsts)
	}
	CreateLambda := virtual !(Type^ toType) -> BoxExeObj^
	{
		if not (toType is in TypePoint)
			return null
		if not (toType.Base is in TypeClass)
			return null

		cls := toType.Base->{TypeClass^}.ToClass
		if cls.Constants == null or cls.Constants.Constants.Size() != 1
			return null
		cnst1 := cls.Constants.Constants[0]
		if not (cnst1 is ConstType)
			return null
		cnstTyp := cnst1->{ConstType^}.Value
		if not (cnstTyp is in TypePoint)
			return null
		if not (cnstTyp.Base is in TypeFunc)
			return null
		fTyp := cnstTyp.Base->{TypeFunc^}
		return createLambd(() ==> {
			cnsts := List.{BoxExeConstObj^}
			tmpl.Attrs.IsAutoResult = false
			return tmpl.CreateFunc(fTyp,cnsts)->{BoxFuncBody^}
		})
	}

	createLambd := !(!()&->BoxFuncBody^ cb) -> BoxExeObj^
	{
		stackSize := UnitStack.Size()

		newFunc := cb() //Vars captured

		resObj := new LambdaObject
		capturedVars := ref resObj.capturedVars

		vars := ref newFunc.CapturedVars2

		if captureTokens != null
		{
			SyntaxCompress(captureTokens,PriorityData)

			iterC := captureTokens.Down
			while iterC != null
			{
				if iterC.GetValue() != ","
				{
					capName := StringSpan
					capCall := BoxExeObj^
					locVar := LocalVar^
					isRef := false

					if iterC is TokenIndent
					{
						capName = iterC->{TokenIndent^}.Value

						capCall = TryCheckGetParam(iterC)
						if capCall == null
							iterC.EmitError("Could not get captured value") //todo better error

						locVar = new LocalVar(capName,capCall.GetType(),true,false)
						vars.Push(locVar)
					}else if iterC.Down?.Right?.GetValue() == "&" and iterC.Down is TokenIndent
					{
						capName = iterC.Down->{TokenIndent^}.Value

						capCall = TryCheckGetParam(iterC.Down)
						if capCall == null
							iterC.EmitError("Could not get captured value") //todo better error
						isRef = true
						locVar = new LocalVar(capName,capCall.GetType(),true,true)
						capCall = new UnrefFuncCall(capCall)
						vars.Push(locVar)
					}else if iterC.Down?.Right?.GetValue() == "=" and iterC.Down is TokenIndent
					{
						capName = iterC.Down->{TokenIndent^}.Value
						capCall = TryGetExeCall(iterC.Down.Right.Right)
						if capCall == null
							iterC.EmitError("Can not get result of right of operator =")
						locVar = new LocalVar(capName,capCall.GetType(),true,false)
						vars.Push(locVar)
					}
					capturedVars.Emplace(locVar,capCall)
				}
				iterC = iterC.Right
			}
		}

		resObj.baseFunc = CurrentFunc
		resObj.lambdaFunc = newFunc

		emptyConsts := List.{BoxExeConstObj^}
	
		UnitStack.PushFront(resObj)
		newFunc.ParseBodyForced()
		
		fncFnc := new FuncPointerParam(newFunc)
		fncPtr := fncFnc.CreateCall()

		getTupleVar := BoxExeObj^

	
		tplTypes := List.{Type^}	
		for it : capturedVars
		{
			tplTypes.Push(it.1.GetType())
		}

		tplTuple := GetTuple(tplTypes,true)
		tplType := tplTuple.ItType


		objs := CheckExeDownList
		objs.Push(fncPtr)
	
		lst := List.{BoxExeConstObj^}
		lst.Push(GetConstType(tplType))
		lst.Push(GetConstType(newFunc.GetYieldTuple().ItType))
		
		createLambdaFunc := TemplateInternalCreateLambda.GetFunc(objs,lst)

		step1 := createLambdaFunc.CreateCall(objs)
		step2 := new UnrefFuncCall(step1)

		cleanType = step1.GetType()

		assert(cleanType is TypeClass)

		cnsts := List.{BoxExeConstObj^}
		cnsts.Push(GetConstType(newFunc.GetType().GetPoint()))
		lambdaType := GCLambda.GetClass(cnsts).ItType

		lambdaCapturePath := cleanType->{TypeClass^}.ToClass.GetField(StringSpan("capturedVars"))
		assert(lambdaCapturePath != null)

		lambFuncThis := newFunc.Params[0]
		for it,i : capturedVars
		{
			objs3 := CheckExeDownList
			objs3.Push(GetExchange2(lambFuncThis.CreateVarCall(),cleanType.GetPoint(),false))
			getCaps := lambdaCapturePath.CreateCall(objs3)
			assert(getCaps != null)

			objs3.Destroy()

			pth := tplTuple.GetFieldByIndexTuple(i)
			objs3.Push(getCaps)
			r6 := pth.CreateCall(objs3)
			assert(r6 != null)

			it.0.SetCall(r6)
		}

		if capturedVars.Size() != 0
		{
			assert(step1 is in BoxFuncCall)
			lambVar := step1->{BoxFuncCall^}.ResultVar
			assert(lambVar != null)

			getCaptureList := lambdaCapturePath.CreateCall(![lambVar.CreateVarCall()])
			assert(getCaptureList != null)
			getCapVar := ToLocalVar(getCaptureList)
			resObj.postCalls.Push(getCapVar)

			for it,i : capturedVars
			{
				pth := tplTuple.GetFieldByIndexTuple(i)
				element := pth.CreateCall(![getCapVar.CreateVarCall()])
				assert(element != null)
				resCall := CreateFuncCall(StringSpan("="),![element,it.1])
				assert(resCall != null)

				resObj.postCalls.Push(resCall)
			}
		}

		if newFunc.IsGenerator()
		{
			newFunc.LocalVariablesForYield(cleanType->{TypeClass^}.ToClass)

			yieldStatePath := cleanType->{TypeClass^}.ToClass.GetField(StringSpan("yieldState"))
			assert(yieldStatePath != null)

			objs3 := CheckExeDownList
			objs3.Push(GetExchange2(lambFuncThis.CreateVarCall(),cleanType.GetPoint(),false))
			getState := yieldStatePath.CreateCall(objs3)
			newFunc.YieldStateInt.SetCall(getState)
		}

		resObj.mainCall = GetExchange(step2,lambdaType.GetPoint())

		while UnitStack.Size() > stackSize
			UnitStack.Pop()

		return resObj
	}
	CanBeThisType := !(Type^ tp) -> bool
	{ //TODO: check argument count and types
		if not (tp is in TypePoint)
			return false
		if TypeFight(tp.Base,GCILambda.ItType) != GCILambda.ItType
			return false
		return true
	}
}

LambdaObject := class extend PackedExeObj
{
	baseFunc := BoxFuncBody^
	lambdaFunc := BoxFuncBody^
	capturedVars := List.{Tuple.{LocalVar^,BoxExeObj^}}

	CaptureObject := !(StringSpan name, BoxExeObj^ capCall,bool isRef) -> LocalVar^
	{
		setType := capCall.GetType()

		if isRef
		{
			capCall.NotifyMemUse()
			capCall = new UnrefFuncCall(capCall)
		}

		result = new LocalVar(name,setType,true,isRef)
		capturedVars.Emplace(result,capCall)
		lambdaFunc.CapturedVars2.Push(result)
	}
}
