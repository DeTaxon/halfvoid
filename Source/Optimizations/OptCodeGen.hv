OptCodeGenLLVM := !(LLVMWriteContext^ ctx) -> void
{
	//WriteCodeToStream(ctx)

	mainFunc := intGetFunc(mainFuncName)
	assert(mainFunc != null)

	CodeCheckCtx := MCInterpContext

	c := CollectFunctionsCtx(CodeCheckCtx&,mainFunc->{BoxFuncBody^})

	c.Workarounds()
	c.Collect()

	ctx.ClassIgnoresVTable = true

	PrintDebugMeta(ctx)
	PrintDeclares(ctx)
	
	c.UsedStrings[^].PrintCode(ctx)
	c.UsedClasses[^].PrintAsType(ctx)
	OptPrintGlobals(GInterpCntx&,ctx,c.WriteGlobals)
	c.DeclareFunctions[^].PrintCode(ctx)

	if GTestCode 
	{
		for func : c.WriteFunctions
		{
			LLVMWriteBodyFunction(CodeCheckCtx.GetMCFunc(func),ctx)
		}
	}else{
		c.WriteFunctions[^].PrintCode(ctx)
	}

	CodeSpaces[^].Files[^].PrintCode(ctx)
	DummyFile?.PrintCode(ctx)


	PrintEmbeddedFiles(ctx) //TODO only needed
	if DebugMode
	{
		c.UsedTypes[^].PrintMeta(ctx)

		for refObj,refInd : GRefTypes
		{
			if refInd in c.UsedTypes
				refObj.PrintMeta(ctx)
		}
	}
	
	ctx.writeStream.Close()
	ctx.writeStream = null

	//tst := intGetFunc("TryAddCallCommand")
	//tst2 := CodeCheckCtx.GetMCFunc(tst->{BoxFuncBody^})
	//tst2.Print()

	printf("end\n")

	exit(0)
}


CollectFunctionsCtx := class extend TGCObject
{
	WriteGlobals := List.{GlobalVar2^}
	WriteFunctions := List.{BoxFuncBody^}
	DeclareFunctions := List.{BoxFuncDeclare^}
	UsedClasses := List.{BoxClass^}
	UsedStrings := AVLSet.{BoxExeString^}

	UsedTypes := AVLSet.{Type^}
	
	iCtx := MCInterpContext^

	checkedClasses := AVLSet.{BoxClass^}
	checkClasses := HybridStack.{BoxClass^,20}

	checkedFunctions := AVLSet.{BoxFunc^}
	checkFunctions := HybridStack.{BoxFuncBody^,20}

	checkedGlobals := AVLSet.{GlobalVar2^}
	checkGlobals := HybridStack.{GlobalVar2^,20}

	this := !(MCInterpContext^ interpContext,BoxFuncBody^ mainFunc) -> void
	{
		iCtx = interpContext
	
		assert(mainFunc is in BoxFuncBody)
	
		checkFunction(mainFunc)
	}

	checkFunction := !(BoxFunc^ fnc) -> void
	{
		if fnc in checkedFunctions
			return void
		checkedFunctions.Insert(fnc)

		if fnc is in BoxFuncBody
		{
			checkFunctions.PushFront(fnc->{BoxFuncBody^})
		}else if fnc is BoxFuncDeclare
		{
			DeclareFunctions.Push(fnc->{BoxFuncDeclare^})
		}else if fnc is ResistFunc{
			checkFunction(fnc->{ResistFunc^}.base)
		}else if fnc is BuildInVirtualCall {
			checkFunction(fnc->{BuildInVirtualCall^}.wrappedFunc)
		}else  {
			//assert(false)
		}
		
	}
	checkType := !(Type^ tp) -> void
	{

		if tp == null
			return void

		UsedTypes.Insert(tp)
		while tp.Base != null
		{
			if tp is TypeArrayView
				checkType(tp->{TypeArrayView^}.viewClassType)
			tp = tp.Base
			UsedTypes.Insert(tp)
		}

		if tp is TypeClass
		{
			cls := tp->{TypeClass^}.ToClass

			if cls not in checkedClasses
			{
				checkedClasses.Insert(cls)
				checkClasses.PushFront(cls)

				for cnst : cls.Constants?.Constants
				{
					checkConstant(cnst)
				}
			}
		}

		if tp is TypeFunc
		{
			fType := tp->{TypeFunc^}

			for pars,i : fType.Params
			{
				checkType(pars.ItType)
				if pars.IsRef
				{
					checkType(pars.ItType.GetPoint())
					pars.ItType.MakeDebugRef()
				}
			}
			checkType(fType.ResultType)

			tp2 := NormalizeFuncType(tp->{TypeFunc^})

			if tp != tp2
				checkType(tp2)
		}
	}
	checkConstant := !(BoxExeConstObj^ cnst) -> void
	{
		if cnst is in Type
		{
			checkType(cnst->{Type^})
			return void
		}
		if cnst is in BoxExeString
		{
			UsedStrings.Insert(cnst->{BoxExeString^})
			return void
		}

	}
	checkGlobal := !(GlobalVar2^ glb) -> void
	{
		if glb in checkedGlobals
			return void

		checkType(glb.GetType())
		checkedGlobals.Insert(glb)
		checkGlobals.PushFront(glb)

		varType := glb.GetType()

		if varType != null
			checkGlobVal(varType,GInterpCntx.GetGlobalVarMem(glb))
	}
	checkGlobVal := !(Type^ varType,void^ varPtr) -> void
	{
		if varType is in TypeArr
		{
			sz := varType->{TypeArr^}.len
			baseSize := varType.Base.GetSize()

			for i : sz
			{
				subPtr := varPtr->{u8^}[baseSize*i]&

				checkGlobVal(varType.Base,subPtr)
			}
			return void
		}
		if varType == GTypeStrBase
		{
			stPtr := varPtr->{String^}.GetString()
			UsedStrings.Insert(GetExeString(stPtr))
			return void
		}

		if varType == GTypeChar.GetPoint() and varPtr->{char^^}^ != null
		{
			stPtr := StringSpan(varPtr->{char^^}^)&
			UsedStrings.Insert(GetExeString(stPtr))
			return void
		}

	}

	Collect := !() -> void
	{
		while checkFunctions.Size() != 0 or checkClasses.Size() != 0 or checkGlobals.Size() != 0
		{
			if checkFunctions.Size() != 0
			{
				fnc := checkFunctions.Pop()

				if fnc is in BoxFuncBody and not fnc->{BoxFuncBody^}.IsParsed()
					continue
				mcFnc := iCtx.GetMCFunc(fnc)

				checkType(fnc.GetType())

				assert(mcFnc != null)

				WriteFunctions.Push(fnc)

				for it : mcFnc.Objects
				{
					switch it is
					{
					case MCVariable
						checkType(it.GetType())
					case MCReference
						checkType(it.GetType())
					case MCGlobalVariable
						checkGlobal(it.GetValueObject())
					case MCConstFunction
						checkFunction(it.GetValue())
					case MCConstString
						UsedStrings.Insert(GetExeString(it.GetValue()))
					}
				}
			}
			if checkClasses.Size() != 0
			{
				cls := checkClasses.Pop()

				assert(cls != null)

				checkType(cls.VTableType?.ItType)
				checkType(cls.Fields[^].Value)
				checkType(cls.Parents[^].ItType)
				checkGlobal(cls.VTableValue?)


				for it : cls.VTable
				{
					if it is VTableVar
					{
						cnst := it->{VTableVar^}.ItConst

						if cnst is CheckInfoConst
						{
							checkGlobal(cnst->{CheckInfoConst^}.ItGlobVar)
						}else {
							checkConstant(cnst)
						}
					}else if it is VTableFunc
					{
						checkFunction(it->{VTableFunc^}.Value) //TODO function can be parsed but still not be used
					}else {
					}
				}

				UsedClasses.Push(cls)
			}
			if checkGlobals.Size() != 0
			{
				glb := checkGlobals.Pop()
				checkConstant(glb.value?)
				WriteGlobals.Push(glb)
			}
		}

		sortClasses()
	}
	
	sortClasses := !() -> void
	{
		classesList := AVLMap.{int,List.{BoxClass^}}

		for it : UsedClasses
		{
			d := getDepth(it)
			classesList[d].Push(it)
		}
		UsedClasses.Destroy()
		UsedClasses.Push(classesList[^][^])
	}
	getDepth := !(BoxClass^ cls) -> int
	{
		val := 0
		if cls.VTableType != null
			val = 1
		val = max(val,getDepth(cls.Parents[^]))
		return val + 1
	}

	Workarounds := !() -> void
	{
		msCall := CreateFuncCall("memset",![GObjNull,0hv,0hv])

		if msCall? is BoxFuncCall
		{
			ms2 := msCall->{BoxFuncCall^}.callObj
			checkFunction(ms2)
		}
			
	}
}
OptPrintGlobals := !(MCInterpContext^ iCtx,LLVMWriteContext^ ctx,GlobalVar2^[] globals) -> void
{
	wr := ref ctx.writeStream^
	for glob : globals
	{
		echo := TEchoStream
		if GlobTryPrintConst(iCtx,glob,echo)
		{
			glob.PrintOutputName(ctx)
			wr << " = global "
			wr << echo.GetStr()
			wr << "\n"
		}else{
			glob.PrintCodeVar(ctx)
		}
	}
}

GlobTryPrintConst := !(MCInterpContext^ iCtx,GlobalVar2^ var,Stream strm) -> bool
{
	tp := var.GetType()

	if tp == null
		return false

	return GlobTryPrintConst2(iCtx,tp,iCtx.GetGlobalVarMem(var),strm)
}
GlobTryPrintConst2 := !(MCInterpContext^ iCtx,Type^ varType,void^ varPtr,Stream strm) -> bool
{
	ctx := LLVMWriteContext
	ctx.writeStream = strm&

	if varType is in TypeArr
	{
		sz := varType->{TypeArr^}.len
		baseSize := varType.Base.GetSize()

		strm << "[" << sz << " x " 
		varType.Base.PrintType(ctx&)
		strm << "] ["

		for i : sz
		{
			subPtr := varPtr->{u8^}[baseSize*i]&

			if i != 0
				strm << ","
			if not GlobTryPrintConst2(iCtx,varType.Base,subPtr,strm)
				return false
		}

		strm << "]"
		return true
	}
	if varType == GTypeInt
	{
		val := varPtr->{int^}^
		strm << "i32 " << val
		return true
	}
	if varType == GTypeStrBase
	{
		stClass := GTypeStrBase->{TypeClass^}.ToClass

		stPtr := ref varPtr->{String^}^
		GTypeStrBase.PrintType(ctx&)
		strm << " {"
		stClass.VTableType.ItType.PrintType(ctx&)
		strm << "* "
		stClass.VTableValue.PrintOutputName(ctx&)
		strm <<  ","
		strm << "i32 " << 9999 << ","
		strm << "i8* "
		GetExeString(stPtr.GetString()).PrintConst(ctx&)
		strm << ","
		strm << "i32 " << stPtr.itSize
		strm << "}"
		return true
	}
	return false
}
