
ExchangeInts := class extend ExchangeUnit
{
	GetExchangeScore := virtual !(BoxExeObj^ obj,Type^ newType,bool expectResultRef) -> int
	{
		if not IsInt(newType)
			return CmpNoExchange
		if expectResultRef
			return CmpNoExchange

		f1 := obj.GetType()

		if not IsInt(f1)
			return CmpNoExchange

		if f1.GetSize() > newType.GetSize()
		{
			return 1995 + (100 - newType.GetSize())
		}
		return 995 + (100 - newType.GetSize())

	}
	CreateExchange := virtual !(BoxExeObj^ obj,Type^ newType, bool expectResultRef) -> BoxExeObj^
	{
		return new IntExchange(obj,newType)
	}
}
ExchangeFloats := class extend ExchangeUnit
{
	GetExchangeScore := virtual !(BoxExeObj^ obj,Type^ newType,bool expectResultRef) -> int
	{
		if not IsFloat(newType)
			return CmpNoExchange
		if expectResultRef
			return CmpNoExchange

		f1 := obj.GetType()

		if not IsFloat(f1)
			return CmpNoExchange

		if f1.GetSize() > newType.GetSize()
		{
			return 2005 + (100 - newType.GetSize())
		}
		return 1005 + (100 - newType.GetSize())

	}
	CreateExchange := virtual !(BoxExeObj^ obj,Type^ newType, bool expectResultRef) -> BoxExeObj^
	{
		return new FloatExchange(obj,newType)
	}
}
ExchangeFloatToInt := class extend ExchangeUnit
{
	GetExchangeScore := virtual !(BoxExeObj^ obj,Type^ newType,bool expectResultRef) -> int
	{
		if not IsInt(newType)
			return CmpNoExchange
		if expectResultRef
			return CmpNoExchange

		f1 := obj.GetType()

		if not IsFloat(f1)
			return CmpNoExchange

		return 2000

	}
	CreateExchange := virtual !(BoxExeObj^ obj,Type^ newType, bool expectResultRef) -> BoxExeObj^
	{
		return new FloatToIntExchange(obj,newType)
	}
}
ExchangeIntToFloat := class extend ExchangeUnit
{
	GetExchangeScore := virtual !(BoxExeObj^ obj,Type^ newType,bool expectResultRef) -> int
	{
		if not IsFloat(newType)
			return CmpNoExchange
		if expectResultRef
			return CmpNoExchange

		f1 := obj.GetType()

		if not IsInt(f1)
			return CmpNoExchange

		return 1005
	}
	CreateExchange := virtual !(BoxExeObj^ obj,Type^ newType, bool expectResultRef) -> BoxExeObj^
	{
		return new IntToFloatExchange(obj,newType)
	}
}
