GetExchange := !(BoxExeObj^ obj, Type^ expType) -> BoxExeObj^
{
	return GetExchange(obj,expType,false)
}
GetExchange := !(BoxExeObj^ obj, Type^ expType,bool expctRef) -> BoxExeObj^
{
	inType := obj.GetType()

	for it : ExchangeList
	{
		if it.GetExchangeScore(obj,expType,expctRef) != CmpNoExchange
		{
			return it.CreateExchange(obj,expType,expctRef)
		}
	}
	if obj is BoxLambdaHolder
	{
		return obj->{BoxLambdaHolder^}.CreateLambda(expType)
	}
	if inType is in TypeArr and expType is in TypePoint and inType.Base == expType.Base
	{
		assert(false)
	}
	if obj is BoxArrayHolder 
	{
		arr := obj->{BoxArrayHolder^}

		if IsViewType(expType)
		{
			bsExp := GetViewBaseType(expType)

			for it,i : arr.vals
			{
				if it.GetType() != bsExp
				{
					exc := GetExchange(it,bsExp)
					if exc != null
					{
						delete exc
					}else{
						return null
					}
				}
			}
			return arr.CreateViewArray(expType)
		}

		if arr.GetArraySize() != 0 and arr.GetArrayType() == expType
			return arr.CreateDefaultUse()
	}

	objs := CheckExeDownList
	objs.Push(obj)
	cnsts := List.{BoxExeConstObj^}
	cnsts.Push(GetConstType(expType))
	resCall := CreateFuncCall(StringSpan("->{}"),objs,cnsts)
	if resCall != null
		return resCall
	return null
}

CanExchange := !(BoxExeObj^ obj, Type^ toType) -> bool
{
	test := GetExchange(obj,toType)
	if test != null
	{
		delete test
		return true
	}
	return false
}

GetExchange2 := !(BoxExeObj^ obj, Type^ expType,bool expctRef) -> BoxExeObj^
{
	res1 := GetExchange(obj,expType,expctRef)
	if res1 != null
		return res1

	inType := obj.GetType()
	if inType is in TypePoint and expType is in TypePoint
	{
		if obj.IsMem()
			return new PtrRefExchange(obj,expType)
		return new PtrExchange(obj,expType)
	}

	if inType is in TypePoint and expType == GTypeSizeT
	{
		return new PtrToSizeT(obj)
	}

	return null
}

PtrToSizeT := class extend BoxExeObj
{
	resId := int
	Down := BoxExeObj^
	this := !(BoxExeObj^ obj) -> void
	{
		resId = GetNewId()
		Down = obj
		ObjType = GTypeSizeT
	}
	IsMem := virtual !() -> bool { return false }
	PrintPre := virtual !(Stream^ f) -> void //todo remove copy of code, at UnrefObj.hv
	{
		Down.PrintPre(f)

		f^ << "%TUnref" << resId << " = ptrtoint "
		Down.GetType().PrintType(f)
		f^ << " "
		Down.PrintUse(f)
		f^ << " to i64" //TODO arch
		if DebugMode
			f^ << ", !dgb !" << GDebugLineCallId
		f^ << "\n"
	}
	PrintUse := virtual !(Stream^ f) -> void
	{
		f^ << "%TUnref" << resId
	}
}
PtrToRef := class extend BoxExeObj
{
	resId := int
	Down := BoxExeObj^
	this := !(BoxExeObj^ obj) -> void
	{
		resId = GetNewId()
		Down = obj
		ObjType = obj.GetType().Base
	}
	IsMem := virtual !() -> bool { return true }
	PrintPointPre := virtual !(Stream^ f) -> void
	{
		inType := Down.GetType()
		Down.PrintPre(f)
		f^ << "%T" << resId << " = bitcast "
		inType.PrintType(f)
		f^ << " "
		Down.PrintUse(f)
		f^ << " to "
		ObjType.PrintType(f)
		f^ << "*"
		if DebugMode
			f^ << ", !dbg !" << GDebugLineCallId
		f^ << "\n"

	}
	PrintPointUse := virtual !(Stream^ f) -> void
	{
		f^ << "%T" << resId
	}
	PrintPre := virtual !(Stream^ f) -> void //todo remove copy of code, at UnrefObj.hv
	{
		rType := ObjType

		PrintPointPre(f)
		f^ << "%TUnref" << resId << " = load "
		rType.PrintType(f)
		f^ << ","
		rType.PrintType(f)
		f^ << "* "
		PrintPointUse(f)
		if DebugMode
			f^ << ", !dgb !" << GDebugLineCallId
		f^ << "\n"
	}
	PrintUse := virtual !(Stream^ f) -> void
	{
		f^ << "%TUnref" << resId
	}
}
RefExchange := class extend BoxExeObj
{
	resId := int
	Down := BoxExeObj^
	this := !(BoxExeObj^ obj, Type^ toType) -> void
	{
		resId = GetNewId()
		Down = obj
		ObjType = toType
	}
	IsMem := virtual !() -> bool { return true }
	PrintPointPre := virtual !(Stream^ f) -> void
	{
		inType := Down.GetType()
		Down.PrintPointPre(f)
		f^ << "%T" << resId << " = bitcast "
		inType.PrintType(f)
		f^ << "* "
		Down.PrintPointUse(f)
		f^ << " to "
		ObjType.PrintType(f)
		f^ << "*"
		if DebugMode
			f^ << ", !dbg !" << GDebugLineCallId
		f^ << "\n"

	}
	PrintPointUse := virtual !(Stream^ f) -> void
	{
		f^ << "%T" << resId
	}
}
PtrRefExchange := class extend PtrExchange
{
	this := !(BoxExeObj^ obj, Type^ toType) -> void
	{
		resId = GetNewId()
		Down = obj
		ObjType = toType
	}
	IsMem := virtual !() -> bool { return true }
	PrintPointPre := virtual !(Stream^ f) -> void
	{
		inType := Down.GetType()
		Down.PrintPointPre(f)
		f^ << "%T" << resId << " = bitcast "
		inType.PrintType(f)
		f^ << "* "
		Down.PrintPointUse(f)
		f^ << " to "
		ObjType.PrintType(f)
		f^ << "*"
		if DebugMode
			f^ << ", !dbg !" << GDebugLineCallId
		f^ << "\n"

	}
	PrintPointUse := virtual !(Stream^ f) -> void
	{
		f^ << "%T" << resId
	}
}
ArrToPtr := class extend BoxExeObj
{
	resId := int
	Down := BoxExeObj^
	this := !(BoxExeObj^ obj, Type^ toType) -> void
	{
		resId = GetNewId()
		Down = obj
		ObjType = obj.GetType().Base.GetPoint()
	}
	IsMem := virtual !() -> bool { return false }
	PrintPre := virtual !(Stream^ f) -> void
	{
		inType := Down.GetType()
		Down.PrintPointPre(f)
		f^ << "%T" << resId << " = getelementptr "
		inType.PrintType(f)
		f^ << " , "
		inType.GetPoint().PrintType(f)
		f^ << " "
		Down.PrintPointUse(f)
		f^ << " , i32 0, i32 0"
		if DebugMode
			f^ << ", !dbg !" << GDebugLineCallId
		f^ << "\n"

	}
	PrintUse := virtual !(Stream^ f) -> void
	{
		f^ << "%T" << resId
	}
}
PtrExchange := class extend BoxExeObj
{
	resId := int
	Down := BoxExeObj^
	this := !(BoxExeObj^ obj, Type^ toType) -> void
	{
		resId = GetNewId()
		Down = obj
		ObjType = toType
	}
	IsMem := virtual !() -> bool { return false }
	PrintPre := virtual !(Stream^ f) -> void
	{
		inType := Down.GetType()
		Down.PrintPre(f)
		f^ << "%T" << resId << " = bitcast "
		PrintTypeNormalized(f,inType)
		f^ << " "
		Down.PrintUse(f)
		f^ << " to "
		ObjType.PrintType(f)
		if DebugMode
			f^ << ", !dbg !" << GDebugLineCallId
		f^ << "\n"

	}
	PrintUse := virtual !(Stream^ f) -> void
	{
		f^ << "%T" << resId
	}
}
FloatToIntExchange := class extend BoxExeObj
{
	resId := int
	Down := BoxExeObj^
	this := !(BoxExeObj^ obj, Type^ toType) -> void
	{
		resId = GetNewId()
		Down = obj
		ObjType = toType
	}
	IsMem := virtual !() -> bool { return false }
	PrintPre := virtual !(Stream^ f) -> void
	{
		inType := Down.GetType()
		Down.PrintPre(f)
		f^ << "%T" << resId << " = "
		if IsUInt(ObjType)
		{
			f^ << "fptoui"
		}else{
			f^ << "fptosi"
		}
		f^ << " "
		inType.PrintType(f)
		f^ << " "
		Down.PrintUse(f)
		f^ << " to "
		ObjType.PrintType(f)
		if DebugMode
			f^ << ", !dbg !" << GDebugLineCallId
		f^ << "\n"

	}
	PrintUse := virtual !(Stream^ f) -> void
	{
		f^ << "%T" << resId
	}
}
IntToFloatExchange := class extend BoxExeObj
{
	resId := int
	Down := BoxExeObj^
	this := !(BoxExeObj^ obj, Type^ toType) -> void
	{
		resId = GetNewId()
		Down = obj
		ObjType = toType
	}
	IsMem := virtual !() -> bool { return false }
	PrintPre := virtual !(Stream^ f) -> void
	{
		inType := Down.GetType()
		Down.PrintPre(f)
		f^ << "%T" << resId << " = "
		if IsUInt(inType)
		{
			f^ << "uitofp"
		}else{
			f^ << "sitofp"
		}
		f^ << " "
		inType.PrintType(f)
		f^ << " "
		Down.PrintUse(f)
		f^ << " to "
		ObjType.PrintType(f)
		if DebugMode
			f^ << ", !dbg !" << GDebugLineCallId
		f^ << "\n"

	}
	PrintUse := virtual !(Stream^ f) -> void
	{
		f^ << "%T" << resId
	}
}
IntExchange := class extend BoxExeObj
{
	resId := int
	Down := BoxExeObj^
	this := !(BoxExeObj^ obj, Type^ toType) -> void
	{
		resId = GetNewId()
		Down = obj
		ObjType = toType
	}
	IsMem := virtual !() -> bool { return false }
	PrintPre := virtual !(Stream^ f) -> void
	{
		inType := Down.GetType()
		Down.PrintPre(f)

		if inType.GetSize() == ObjType.GetSize()
		{
			f^ << "%T" << resId << " = add "
			inType.PrintType(f)
			f^ << " "
			Down.PrintUse(f)
			f^ << " , 0 "
			if DebugMode
				f^ << ", !dbg !" << GDebugLineCallId
			f^ << "\n"
			return void
		}

		f^ << "%T" << resId << " = "
		if inType.GetSize() > ObjType.GetSize()
		{
			f^ << "trunc"
		}else{
			if IsUInt(inType)
			{
				f^ << "zext"
			}else{
				f^ << "sext"
			}
		}
		f^ << " "
		inType.PrintType(f)
		f^ << " "
		Down.PrintUse(f)
		f^ << " to "
		ObjType.PrintType(f)
		if DebugMode
			f^ << ", !dbg !" << GDebugLineCallId
		f^ << "\n"

	}
	PrintUse := virtual !(Stream^ f) -> void
	{
		f^ << "%T" << resId
	}
}

FloatExchange := class extend BoxExeObj
{	
	resId := int
	Down := BoxExeObj^
	this := !(BoxExeObj^ obj, Type^ toType) -> void
	{
		resId = GetNewId()
		Down = obj
		ObjType = toType
	}
	IsMem := virtual !() -> bool { return false }
	PrintPre := virtual !(Stream^ f) -> void
	{
		inType := Down.GetType()
		Down.PrintPre(f)
		f^ << "%T" << resId << " = "
		if inType.GetSize() > ObjType.GetSize()
		{
			f^ << "fptrunc"
		}else{
			f^ << "fpext"
		}
		f^ << " "
		inType.PrintType(f)
		f^ << " "
		Down.PrintUse(f)
		f^ << " to "
		ObjType.PrintType(f)
		if DebugMode
			f^ << ", !dbg !" << GDebugLineCallId
		f^ << "\n"

	}
	PrintUse := virtual !(Stream^ f) -> void
	{
		f^ << "%T" << resId
	}
}
