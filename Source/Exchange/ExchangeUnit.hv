

ExchangeUnit := class
{
	GetExchangeScore := virtual !(BoxExeObj^ obj,Type^ newType,bool expectResultRef) -> int
	{
		assert(false)
	}
	CreateExchange := virtual !(BoxExeObj^ obj,Type^ expType, bool expectResultRef) -> BoxExeObj^
	{
		assert(false)
	}
}


ExchangeList := List.{ExchangeUnit^}

ExchangeInit := !() -> void
{
	ExchangeList.Push(new ExchangeInts)
	ExchangeList.Push(new ExchangeFloats)
	ExchangeList.Push(new ExchangeFloatToInt)
	ExchangeList.Push(new ExchangeIntToFloat)
	ExchangeList.Push(new ExchangePointerClassToBase)
	ExchangeList.Push(new ExchangeRefClassToBase)
	ExchangeList.Push(new ExchangeRefClassToArrayView)
	ExchangeList.Push(new ExchangeArrayToPtr)
	ExchangeList.Push(new ExchangeArrayHolderToArrayView)
	ExchangeList.Push(new ExchangeArrayHolderToArray)
	ExchangeList.Push(new ExchangePointsToVoidP)
	ExchangeList.Push(new ExchangePointsToPointClass)
	ExchangeList.Push(new ExchangeNullToPtr)
	ExchangeList.Push(new ExchangeLambdaFromHolder)
	ExchangeList.Push(new ExchangeLambdaFromHolderToFunctionPointer)
	ExchangeList.Push(new ExchangeEnumFromConstString)
	ExchangeList.Push(new ExchangeEnumToInt)
	ExchangeList.Push(new ExchangeArrayViewClassPtrToArrayView)
	ExchangeList.Push(new ExchangeArrayViewClassToArrayView)
	ExchangeList.Push(new ExchangeNullptrToArrayView)
	ExchangeList.Push(new ExchangeArrayViewToGC)
	ExchangeList.Push(new ExchangeTypeTypeFromType)

	ExchangeList.Push(new BoxFuncTemplateToBoxFunc)
	ExchangeList.Push(new BoxFuncToPointer)

	ExchangeList.Push(new ClassInitToObjExchange)
	ExchangeList.Push(new ClassFromExchangeSet)
	ExchangeList.Push(new ClassFromExchangeType)
}

