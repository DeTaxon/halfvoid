
ArrayViewTemplate := BoxClassTemplate^
GCType := Type^

GCILambda := BoxClass^
GCLambda := BoxClassTemplate^

GBlobClass := BoxClass^
GBlobType := Type^

GRepoFileType := Type^

InitInternalsTypes := !() -> void
{
	GCType = intGetClass2("TGCObject").ItType
	assert(GCType != null)

	ArrayViewTemplate = intGetClassTemplate2("TArrayView")

	GCILambda = intGetClass2("TILambda")
	GCLambda = intGetClassTemplate2("TLambda")

	GBlobClass = intGetClass2("Blob")
	assert(GBlobClass != null)
	GBlobType = GBlobClass.ItType

	GRepoFileType = intGetClass2("File").ItType
}

intGetClass := !(char^ name) -> BoxClass^
{
	res := GetTypeByName(StringSpan(name))
	assert(res != null)
	assert(res is in TypeClass)
	return res->{TypeClass^}.ToClass
}
intGetClass2 := !(char^ name) -> BoxClass^
{
	for spc : CodeSpaces.Reverse
	{
		if not spc.Types.Contain(StringSpan(name))
			continue
		val := spc.Types[StringSpan(name)]
		if val == null and val is not TypeVar
			return null

		return val->{TypeVar^}.Value->{TypeClass^}.ToClass
	}
	return null
}

intGetClassTemplate := !(char^ name) -> BoxClassTemplate^
{
	res := GetTypeObjByName(StringSpan(name))
	assert(res != null)
	assert(res is in TemplateTypeVar)
	return res->{TemplateTypeVar^}.Value
}
intGetClassTemplate2 := !(char^ name) -> BoxClassTemplate^
{
	for spc : CodeSpaces.Reverse
	{
		if not spc.Types.Contain(StringSpan(name))
			continue
		val := spc.Types[StringSpan(name)]
		if val == null and val is not TemplateTypeVar
			return null

		return val->{TemplateTypeVar^}.Value
	}
	return null
}
