
NaturalCall := class extend SomeFuncCall
{
	gcObjId := int
	this := !(BoxFunc^ func, Object^ Pars) -> void 
	{
		if Pars != null
		{
			Line = Pars.Line
		}
		if func.IsPassAttrs and Pars != null
		{
			inhAttrs = Pars.inhAttrs
		}
		Down = Pars
		
		RetId = GetNewId()
		ToCall = func
		ToCall.ParseBlock()
		FType = ToCall.MyFuncType
		if Pars != null Pars.SetUp(this&)
		if Pars != null TrimCommas(Down.Up)
		ExchangeParams()
		WorkBag.Push(this&,State_MiddleGetUse)
	}
	
	PrintPreFuncName := virtual !(TIOStream f) -> void
	{

	}
	PrintFuncName := virtual !(TIOStream f) -> void
	{
		if ToCall != null
		f << "@" << ToCall.OutputName
	}

	PrintParamPres := virtual !(TIOStream f) -> void
	{
		RefsArr := FType.ParsIsRef
		for iter,i : Down
		{
			if RefsArr[i] iter.PrintPointPre(f)
			else iter.PrintPre(f)
		}
	}
	PrintParamUses := virtual !(TIOStream f) -> void
	{
		iter := Down
		RefsArr := FType.ParsIsRef

		i := 0
		if gotAlloc and not IsConstr
		{
			f << ToCall.MyFuncType.RetType.GetName() << "* "
			f << TName
			if iter != null f << " , "
			//i += 1
		}
		while iter != null
		{
			if i > 0  f << " , "
			if RefsArr[i] iter.PrintPointUse(f)
				else iter.PrintUse(f)
			iter = iter.Right
			i += 1
		}
	}

	UseCall := virtual !(TIOStream f) -> void
	{
		PrintPreFuncName(f)
		PrintParamPres(f)

		if (FType.RetType != GTypeVoid and (not gotAlloc) and TName != null) or ToCall.IsRetRef
		{
			f << TName <<" = "	
		}
		f << "call "
		//ToCall.MyFuncType.PrintType(f)
		base := ToCall.MyFuncType
		base2 := base->{Type^}
		f << base2.GetName()
		PrintFuncName(f)
		f << "("
		PrintParamUses(f)
		f << ")"
		if DebugMode {
			newId := CreateDebugCall(this&) 
			if newId != -1{
				f << ", !dbg !" << newId
			}
		}
		if Line != null
		{
			f << "; Line: " << Line.LinePos << " File: " << Line.inFile.itStr 

		}
		f << "\n"
		if gcObjId > 0
		{
			tn := FType.RetType.GetName() 
			f << "store " << tn << TName << " , "
			f << tn << "* %T" << gcObjId << "\n"
		}
	}
	Print := virtual !(int s) -> void {
		for s printf("->")
		printf("item: %s %s\n",GetValue(),ToCall.FuncName)
		End := this.Down
		while End != null
		{
			End.Print(s+1)
			End = End.Right
		}
	}
	DoTheWork := virtual !(int pri) -> void
	{
		if pri == State_MiddleGetUse
		{
			CheckReturn()
			if IsGCAnyPtr(FType.RetType) and not FType.RetRef
			{
				gcObjId = GetAlloc(this&,FType.RetType)
				assert(gcObjId > 0)
				GCMakeAware(this&,gcObjId)
			}
		}
	}
}
