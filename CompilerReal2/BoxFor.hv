GetBoxFor := !(Object^ dat) -> BoxFor^
{

	itemName := string
	indName := string

	itemName = null

	iterY := dat.Down.Right

	Names := Queue.{string}() ; $temp
	indNames := Queue.{string}() ; $temp
	Downs := Queue.{Object^}() ; $temp
	if iterY.Right.Right == null
	{
		Names.Push("it")
		Downs.Push(iterY)
		indNames.Push("it_ind")
		iterY = iterY.Right
	}else{
		while iterY.Right != null
		{
			if iterY.Right.GetValue() == ","
			{
				Names.Push(iterY->{ObjIndent^}.MyStr)
				iterY = iterY.Right.Right
				indNames.Push(iterY->{ObjIndent^}.MyStr)
				iterY = iterY.Right.Right
			}else{ // ":"
				Names.Push(iterY->{ObjIndent^}.MyStr)
				iterY = iterY.Right.Right
				indNames.Push(null->{string})
			}
			Downs.Push(iterY)
			iterY = iterY.Right
			if iterY.GetValue() == ","
				iterY = iterY.Right

		}
	}
	preRes :=  new BoxForOldFashionMulti(Names,indNames,Downs,iterY)
	preRes.Line = dat.Down.Line

	if dat.Line?.itAttrs.Size() != 0
	{
		preRes.attrs = dat.Line.itAttrs&
	}
	return preRes
}

BoxFor := class extend Object
{
}
BoxForOldFashionMulti := class extend BoxFor
{
	ItId := int
	IsStep1 := bool

	itemsCount := int
	Names := string[]
	IndNames := string[]
	IncFuncs := Object^^
	UnrefFuncs := Object^^
	IndFuncs := Object^^
	IsInvalids := Object^^
	DestroyFunc := Object^^
	IsEndFunc := Object^

	ProxyFuncs := BoxFunc^^
	Params := MemParam^^
	IndParams := MemParam^^

	attrs := AttrArrayType^

	destroyFuncCount := int

	EnabledIIndex := bool
	CreatedIIndexNames := List.{char^}

	holder := Object^

	endLabel := BoxLabel^
	this := !(Queue.{string} names, Queue.{string} f_ind,Queue.{Object^} items,Object^ itBlock) -> void
	{
		endLabel = new BoxLabelAnon()
		for items
		{
			if it.IsConst 
				continue
			mayb := TryCompute(it)
			if mayb != null
			{
				oldLine := it.Line
				it = mayb.Clone()
				it.Line = oldLine
			}
		}


		Down = itBlock
		Down.Left = null
		itemsCount = items.Size()
		iter := Down

		for i : itemsCount, itm : items
		{
			iter.Right = itm
			iter.Right.Left = iter
			iter = iter.Right
		}
		iter.Right = null
		Down.SetUp(this&)

		Names = names.ToArray()
		IndNames = new string[names.Size()]
		for it : names.Size(), itInd : f_ind
			IndNames[it] = itInd

		WorkBag.Push(this&,State_PreGetUse)

		IsStep1 = true

		ItId = GetNewId()
	}
	useDecorator := bool
	decLambdaCall := Object^
	decLambdaCallFunc := BoxFunc^
	DoTheWork := virtual !(int pri) -> void
	{
		if visitedWork[pri] return void
		else if pri != State_GetUse  visitedWork << pri

		if pri == State_Start
		{
			Down.Line = Line
			WorkBag.Push(this&,State_PreGetUse)
		}
		if pri == State_PreGetUse
		{
			while TryParseMacro(Down.Right,this&) != null {}


			WorkBag.Push(this&,State_GetUse)
			if Left? is ObjTemplateType //DECORATOR
			{
				TType := Left
				cmdName := Left->{ObjTemplateType^}.MyStr
				itBox := new FuncInputBox
				
				bodyL := GetFuncType(![GTypeVoidP],GTypeVoid).GetLambda()
				innerL := GetFuncType(![GTypeVoidP,bodyL],GTypeVoid).GetLambda()
				outerL := GetFuncType(![GTypeVoidP,innerL],GTypeVoid).GetLambda()

				itBox.itPars.Emplace(outerL,false)

				fnc := FindFunc("@"sbt + cmdName + " for",this&,itBox^,false)

				if fnc == null
					EmitError("Decorator not found")

				tmpObj := new Object ; $temp
				lmbd := UNext(this&, new SBoostLambda(),1)->{SBoostLambda^}
				ReplaceNode(lmbd,tmpObj)
				lmbd.Down = this&
				this.Up = lmbd
				lmbd.ApplyFunc(outerL,false)
				dCall := MakeSimpleCall(fnc,lmbd)
				ReplaceNode(tmpObj,dCall)


				gotL := lmbd.GetItem("_1")
				assert(gotL != null)
				lCall := new ParamNaturalCall("_1",gotL)

				itBx := new FuncInputBox ; $temp
				itBx.itPars.Emplace(innerL,false)
				itBx.itPars.Emplace(bodyL,false)

				lCallFunc := GlobalLambdaCall.GetFunc(itBx^)
				assert(lCallFunc != null)

				useDecorator = true
				decLambdaCall = lCall
				decLambdaCallFunc = lCallFunc

			}

			WorkBag.Push(Down.Right[^],State_Start)
		}
		if pri == State_GetUse
		{
			if(Down.Right is FieldHolder)
			{
				asPrm := this&
				asPrm->SetType(MetaBoxForFields)
				WorkBag.Push(this&,State_PrePrint)
				return void
			}
			if(Down.Right is MetaFuncParamsHolder)
			{
				asPrm := this&
				asPrm->SetType(MetaBoxForFuncParams)
				WorkBag.Push(this&,State_PrePrint)
				return void
			}
		
			if IsStep1
			{
				IncFuncs = new Object^[itemsCount]
				UnrefFuncs = new Object^[itemsCount]
				IndFuncs = new Object^[itemsCount]
				ProxyFuncs = new BoxFunc^[itemsCount]
				Params = new MemParam^[itemsCount]
				IndParams = new MemParam^[itemsCount]
				IsInvalids = new Object^[itemsCount]
				DestroyFunc = new Object^[itemsCount]

				for itemsCount IsInvalids[it] = null

				Downs:= Queue.{Object^}() ; $temp
				for i : itemsCount
				{
					if Down.Right.GetType() == null
					{
						EmitError("can not evaluate type in for each\n")
						continue
					}

					someBox := new FuncInputBox() ; $temp
					someBox.itPars.Emplace(Down.Right.GetType(),Down.Right.IsRef())
					if Down.Right.Line != null for q,k : Down.Right.Line.itAttrs
					{
						someBox.itAttrs[k] = q
					}
					if Down.Right is MetaItemWrapper
					{
						someBox.itMetaPtr = Down.Right->{MetaItemWrapper^}.ptrToBlock
					}


					func := FindFunc("~For",this&,someBox^,false)
					if func == null 
					{
						Down.Right.GetType()
						EmitError("can not load ~For func\n")
						continue
					}
					if func.MyFuncType.RetType == null
					{
						EmitError("can not deduce return type of function ~For\n")
						continue
					}

					if func.MyFuncType.RetType.GetType() != "class" {
						EmitError("~For have to return class\n")
						continue
					}

					ProxyFuncs[i] = func

					tmp := Down.Right
					PopOutNode(tmp)
					preSet := MakeSimpleCall(func,tmp)
					preSet.Line = tmp.Line
					if tmp.Line == null
					{
						tmp.Up.Print(0)
					}
					preSet.Up = this&
					Downs.Push(preSet)
				}

				iter := Down
				iter2 := Downs.Start
				iter = Down
				WorkBag.Push(this&,State_GetUse)
				while iter2 != null
				{
					iter.Right = iter2.Data
					iter.Right.Left = iter
					iter = iter.Right
					iter2.Data.Up = this&
					iter2 = iter2.Next
					WorkBag.Push(iter,State_GetUse)
				}
				Down.SetUp(this&)
				IsStep1 = false
			}else{
				visitedWork << pri

				if useDecorator
				{
					bodyL := GetFuncType(![GTypeVoidP],GTypeVoid).GetLambda()

					MakeItBlock(Down)
					bodyLambda := UNext(Down, new SBoostLambda(),1)->{SBoostLambda^}
					bodyLambda.ApplyFunc(bodyL,false)

					tmpObj := new Object ; $temp
					ReplaceNode(Down,tmpObj)
					decLambdaCall.Right = bodyLambda
					bodyLambda.Left = decLambdaCall
					bodyCall := MakeSimpleCall(decLambdaCallFunc,decLambdaCall)
					ReplaceNode(Down,bodyCall)
					//PopOutNode(TType)
					MakeItBlock(Down)
				}
				MakeItBlock(Down)
				WorkBag.Push(Down,State_Start)
				iter := Down.Right
				for i : itemsCount
				{
					asNeed2 := iter->{SomeFuncCall^}
					itType := ProxyFuncs[i].MyFuncType.RetType
					ItId2 := asNeed2.GetItAllocId()

					ForItem := new LocalParam(itType,ItId2)
					ForItem.Line = iter.Line
					
					asNeed := ((itType->{TypeClass^}).ToClass)

					emptyBox := new FuncInputBox() ; $temp
					emptyBox.itPars.Emplace(itType,true)
					if iter.Line != null for q,k : iter.Line.itAttrs
					{
						emptyBox.itAttrs[k] = q
					}

					IncFuncP := asNeed.GetFunc("Inc",emptyBox^,true)
					UnrefFuncP := asNeed.GetFunc("^",emptyBox^,true)
					IsInvP := asNeed.GetFunc("IsInvalid",emptyBox^,true)
					DestroyFunc[i] = asNeed.GetFunc("Destroy",emptyBox^,true)
					if DestroyFunc[i] != null
					{
						destroyFuncCount += 1
					}
					

					if IncFuncP == null {
						EmitError("incorrect for iterator, need increment\n")
						return void
					}
					if UnrefFuncP == null {
						EmitError("incorrect for iterator, need ^\n")
						return void
					}


					test := new ParamNaturalCall("",ForItem->{Object^})
					test.Line = iter.Line
					UnrefFuncs[i] = MakeSimpleCall(UnrefFuncP,test)
					UnrefFuncs[i].Line = this.Line
					UnrefFuncs[i].Up = this&
					test = new ParamNaturalCall("",ForItem->{Object^})
					test.Line = iter.Line
					IncFuncs[i] = MakeSimpleCall(IncFuncP,test)
					IncFuncs[i].Line = this.Line
					IncFuncs[i].Up = this&

					if IsInvP != null
					{
						test = new ParamNaturalCall("",ForItem->{Object^})
						test.Line = iter.Line
						IsInvalids[i] = MakeSimpleCall(IsInvP,test)
						IsInvalids[i].Line = this.Line
						IsInvalids[i].Up = this&
					}

					if i == 0
					{
						IsEndFuncP := asNeed.GetFunc("IsEnd",emptyBox^,true)
						test = new ParamNaturalCall("",ForItem->{Object^})
						test.Line = iter.Line
						IsEndFunc = MakeSimpleCall(IsEndFuncP,test)
						IsEndFunc.Line = this.Line
						IsEndFunc.Up = this&
					}
					Params[i] = new RetFuncParamV2(UnrefFuncs[i],this&)
					Params[i].Up = this&

					if IndNames[i] != null
					{
						itFunc4 := asNeed.GetFunc("Ind",emptyBox^,true)
						if itFunc4 == null
						{
							//EmitError("Can not get index item\n")
							EnabledIIndex = true
							IndParams[i] = new FuncParam("ForIndex"sbt + ItId,GTypeInt,false)
							IndParams[i].Up = this&
							if DebugMode
							{
								CreatedIIndexNames.Push(IndNames[i])
							}
						}else{
							test = new ParamNaturalCall("",ForItem->{Object^})
							IndFuncs[i] = MakeSimpleCall(itFunc4,test)
							IndParams[i] = new RetFuncParamV2(IndFuncs[i],this&)
							IndParams[i].Up = this&
							IndFuncs[i].Line = this.Line
							IndFuncs[i].Up = this&
						}
					}
					iter = iter.Right
				}
				if destroyFuncCount != 0
				{
					fnc := GetBoxFuncContainer(this&)
					if fnc != null
					{
						fnc.DoDefer()
					}
				}
			}
		}
	}
	GetItem := virtual !(string name) -> Object^
	{
		for i : itemsCount
		{
			if Names[i] == name 
			{
				return Params[i]
			}
			if IndNames[i]? == name
			{
				return IndParams[i]
			}
		}
		return null
	}
	
	GetDeferUsageVerticalSize := virtual !() -> int
	{
		return Down.GetDeferUsageVerticalSize()	+ destroyFuncCount
	}
	PrintDeferUse := virtual !(TIOStream f, BoxFuncContainer^ bd,BoxBlock^ blk, int depth,int^ labelIter) -> void
	{
		Down.PrintDeferUse(f,bd,blk,depth,labelIter)

		for itr,i : Down.Right
		{
			if DestroyFunc[i] == null
				continue

			j := destroyFuncCount - i - 1
			f << "br label %DeferLabel" << labelIter^ << "\n"
			f << "DeferLabel" << labelIter^ << ":\n"

			if DestroyFunc[i] is BoxFuncBody //TODO in BoxFunc
			{
				if IsGCClass(itr.GetType())
				{
					itr.PrintPointPre(f)

					f << "%DestrObj" << ItId << "n" << j << " = bitcast "
					itr.PrintPointUse(f)
					f << " to i8*\n"

					f << "call void @" << gcCallDestroy.OutputName << "("
					f << "i8* %DestrObj" << ItId << "n" << j
					f << ")\n"
					continue
				}
				if DestroyFunc[i]->{BoxFunc^}.IsVirtual
				{
					//TODO add virtual destructor support
					continue
				}
			}


			//itr.PrintPointPre(f) //TODO without that works on pure luck
			
			fnc := DestroyFunc[i]->{BoxFunc^}
			f << "call void @" << fnc.OutputName << "("
			itr.PrintPointUse(f)
			f << ")\n"
			//f << "%Ptr" << ItId << "num" << i << " = bitcast "
			//itr.PrintPointUse(f) f << " to i8*\n"
			//f << "%TFunc" << ItId << "num" << i << " = bitcast " << fnc.MyFuncType.GetName() << "* @" << fnc.OutputName << " to void(i8*)*\n"
			//f << "call void @" << deferAddDefer.OutputName << "(void(i8*)* %TFunc" << ItId << "num" << i << " , i8* %Ptr"<<ItId<<"num"<<i<<" )"
			//f << "\n"

			labelIter^ -= 1
		}
	}

	GetDeferUsage := virtual !() -> int
	{
		val := GetDeferUsageDown()
		if destroyFuncCount != 0
		{
			val = max(val,1)
		}
		return val
	}
	deferId := int
	deferLabel := int
	PrintDeferInBlock := virtual !(TIOStream f, int itId,int^ labelSetIter) -> void
	{
		//Down.Right.PrintDeferInBlock(f,itId,labelSetIter)
		deferId = itId
		deferLabel = labelSetIter^
		labelSetIter^ += Down.GetDeferUsageVerticalSize() + destroyFuncCount
	}
	PrintInBlock := virtual !(TIOStream f) -> void
	{
		debId := -1
		if DebugMode debId = CreateDebugCall(this&)
		
		for itr,i : Down.Right
		{
			itr.PrintPre(f)
			if DestroyFunc[i] != null
			{
				f << "store i8 " << deferLabel << " , i8* %DeferStack" << deferId << "\n"
				deferLabel += 1
			}
		}


		Checks := 0
		for itemsCount if IsInvalids[it] != null Checks += 1

		if Checks > 0
		{
			for itemsCount
			{
				if IsInvalids[it] != null
				{
					
					IsInvalids[it].PrintPre(f)
					f << "br i1 " << IsInvalids[it].GetName() << ", label %" << endLabel.GetLabel()
					if Checks > 1
					{
						f << ", label %NextCheck" << Checks << "\n"
						f << "NextCheck" << Checks << ":\n"
					}else{
						f << ", label %start" << ItId << "\n" // no need in standart for
						f << "start" << ItId << ":\n"
					}
				}
				Checks -= 1
			}
		}else{
			f << "br label %start" << ItId << "\n" // no need in standart for
			f << "start" << ItId << ":\n"
		}

		createdIInts := List.{int}() ; $temp

		if debId != -1 for it : CreatedIIndexNames
		{
			newRes := CreateDbgLocVar(Down,GTypeInt,it)
			if newRes != -1
				createdIInts.Push(newRes)
		}

		if EnabledIIndex {
			f << "br label %ExtraStart" << ItId << "\n"
			f << "ExtraStart" << ItId << ":\n"
			f << "%ForIndex" << ItId << " = phi i32 [0,%start" << ItId << "] , [%FIndex" << ItId << ", %ExtraEnd" << ItId << "]\n"

			for it : createdIInts
			{
				f << "call void @llvm.dbg.value(metadata i32 %ForIndex" << ItId << " ,metadata !" << it << ",metadata !DIExpression()), !dbg !"<<debId<<"\n" 
			}
		}
		IsEndFunc.PrintPre(f)
		f << "br i1 " << IsEndFunc.GetName() << " , label %" << endLabel.GetLabel() << " , label %Next" << ItId << "\n"
		f << "Next" << ItId << ":\n"

		for i : itemsCount {
			if UnrefFuncs[i].IsRef() UnrefFuncs[i].PrintPointPre(f) else UnrefFuncs[i].PrintPre(f)
			if Params[i]? is RetFuncParamV2 and Names[i] != null and debId != -1
			{
				Params[i]->{RetFuncParamV2^}.PrintForDebugDeclare(f,Names[i],Down,debId)
			}
			if IndFuncs[i] != null
			{
				if IndFuncs[i].IsRef()
				{
					IndFuncs[i].PrintPointPre(f)
				}else{
					IndFuncs[i].PrintPre(f)
				}
			}
			if IndFuncs[i] != null and IndParams[i]? is RetFuncParamV2 and IndNames[i] != null and debId != -1
			{
				IndParams[i]->{RetFuncParamV2^}.PrintForDebugDeclare(f,IndNames[i],Down,debId)
			}
			if Params[i] != null
				Params[i].DoStore(f)
			if IndParams[i] != null
				IndParams[i].DoStore(f)
		}
		Down.PrintDeferInBlock(f,deferId,deferLabel&)
		Down.PrintInBlock(f)
		
		f << "br label %IncFuncs" << ItId << "\n"
		f << "IncFuncs" << ItId << ":\n"
		for i : itemsCount IncFuncs[i].PrintPre(f)

		if EnabledIIndex
		{
			f << "br label %ExtraEnd" << ItId << "\n"
			f << "ExtraEnd" << ItId << ":\n"
			f << "%FIndex" << ItId << " = add i32 %ForIndex" << ItId << " , 1\n"
			f << "br label %ExtraStart" << ItId << "\n"
		}else{
			f << "br label %start" << ItId << "\n"
		}

		if labelContinue != null
		{
			labelContinue.PrintLabel(f)
			Down->{BoxBlock^}.PrintDeferInBlockUse(f)
			f << "br label %IncFuncs" << ItId << "\n"
		}
		if labelBreak != null
		{
			labelBreak.PrintLabel(f)
			Down->{BoxBlock^}.PrintDeferInBlockUse(f)
			f << "br label %" << endLabel.GetLabel() << "\n"
		}
		endLabel.PrintLabel(f)
	}

	labelContinue := BoxLabel^
	labelBreak := BoxLabel^

	GetOutPath := virtual !(Object^ itm, int typ, int size) -> BoxLabel^
	{
		if typ == PATH_RETURN
		{
			return Up.GetOutPath(this&,typ,size) //poke
		}
		if typ == PATH_CONTINUE
		{
			if size == 0{
				if labelContinue == null
					labelContinue = new BoxLabelAnon()
				return labelContinue
			}
			return Up.GetOutPath(itm,typ,size - 1)
		}
		if typ == PATH_BREAK
		{
			if size == 0{
				if labelBreak == null
					labelBreak = new BoxLabelAnon()
				return labelBreak
			}
			return Up.GetOutPath(itm,typ,size - 1)
		}
		return null
	}
	GetBadLabel := !(Object^ prebNode) -> Object^
	{
		return endLabel
	}
	GetValue := virtual !() -> string
	{
		return "~~for()"
	}
}


MetaBoxForFields := class extend BoxForOldFashionMulti
{
	GetItem := virtual !(char^ name) -> Object^
	{
		return null
	}
	DoTheWork := virtual !(int pri) -> void
	{
		if pri == State_PrePrint
		{
			hldr := Down.Right->{FieldHolder^}
			cType := hldr.MyType
			if not cType is TypeClass
				EmitError("Type is not class")
			cntr := 0
			subBlocks := Object^()
			lastBlock := Object^()
			cls := cType->{TypeClass^}.ToClass
			for par : cls.Params
			{
				newBlock := Down.Clone()
				if subBlocks == null
				{
					subBlocks = newBlock
				}else{
					lastBlock.Right = newBlock
					newBlock.Left = lastBlock
				}
				lastBlock = newBlock
				cntr += 1
			}
			Down = subBlocks
			subBlocks.SetUp(this&)
			for c : cntr 
			{
				itr := Down
				for c itr = itr.Right
				MakeItBlock(itr)
			}
			for it,i : Down, par : cls.Params
			{
				if par.ItName == ""
					continue
				WorkBag.Push(it,State_Start)
				asBlock := it->{BoxBlock^}
				if hldr.Down != null
				{
					asBlock.Items.Push(new ObjHolder(Names[0], new FuncParam("ForParamId"sbt + ItId + "i" + i,par.GetType(),true)))
				}else{
					asBlock.Items.Push(new ObjHolder(Names[0], new ObjType(par.GetType())))
				}
				if IndNames[0] != null
				{
					asBlock.Items.Push(new ObjHolder(IndNames[0], new ObjStr(par.ItName)))
				}
			}
			holder = hldr
			hldr.Up = this&
		}
	}
	PrintInBlock := virtual !(TIOStream f) -> void
	{
		cType := holder->{FieldHolder^}.MyType
		cls := cType->{TypeClass^}.ToClass
		if holder.Down != null
		{
			holder.Down.PrintPointPre(f)
			for par,i : cls.Params
			{
				if par.ItName == ""
					continue
				f << "%ForParamId" << ItId << "i" << i << " = getelementptr "
				cType.PrintType(f)
				f << " , "
				holder.Down.PrintPointUse(f)
				f << " , i32 0, i32 "<< cls.GetParamNr(i) <<"\n"
			}
		}
		for it : Down, par : cls.Params
		{
			if par.ItName == ""
				continue
			it.PrintInBlock(f)
		}
	}
}

MetaBoxForFuncParams := class extend BoxForOldFashionMulti
{
	GetItem := virtual !(char^ name) -> Object^
	{
		return null
	}
	DoTheWork := virtual !(int pri) -> void
	{
		if pri == State_PrePrint
		{
			hldr := Down.Right->{MetaFuncParamsHolder^}
			cType := hldr.MyType
			if not cType is TypeFunc
				EmitError("Type is not function")
			cntr := 0
			subBlocks := Object^()
			lastBlock := Object^()

			pr := cType->{TypeFunc^}
			for i : pr.ParsCount
			{
				newBlock := Down.Clone()
				if subBlocks == null
				{
					subBlocks = newBlock
				}else{
					lastBlock.Right = newBlock
					newBlock.Left = lastBlock
				}
				lastBlock = newBlock
				cntr += 1
			}
			Down = subBlocks
			subBlocks.SetUp(this&)
			for c : cntr 
			{
				itr := Down
				for c itr = itr.Right
				MakeItBlock(itr)
			}
			for it,i : Down
			{
				WorkBag.Push(it,State_Start)
				asBlock := it->{BoxBlock^}
				asBlock.Items.Push(new ObjHolder(Names[0], new ObjType(pr.Pars[i])))
			}
			holder = hldr
			hldr.Up = this&
		}
	}
	PrintInBlock := virtual !(TIOStream f) -> void
	{
		//cType := holder->{FieldHolder^}.MyType
		//cls := cType->{TypeClass^}.ToClass
		//if holder.Down != null
		//{
		//	holder.Down.PrintPointPre(f)
		//	for par,i : cls.Params
		//	{
		//		if par.ItName == ""
		//			continue
		//		f << "%ForParamId" << ItId << "i" << i << " = getelementptr "
		//		cType.PrintType(f)
		//		f << " , "
		//		holder.Down.PrintPointUse(f)
		//		f << " , i32 0, i32 "<< cls.GetParamNr(i) <<"\n"
		//	}
		//}
		for it : Down
		{
			it.PrintInBlock(f)
		}
	}
}
