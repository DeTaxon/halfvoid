AppendClass BoxFunc
{
	decoratorName := char^
	decoratorFunc := BoxFunc^
	decoratorHaveFunc := bool


	GetDecorator := !() -> BoxFunc^
	{
		if decoratorName == null
			return null


		if decoratorFunc == null
			SearchDecorator(decoratorName)
		return decoratorFunc
	}
	SearchDecorator := !(char^ name) -> void
	{
		assert(MyFuncType != null)

		fncName := ("@"sbt + name + " func")->{char^}
		
		itBox := new FuncInputBox() ; $temp
		itBox.itPars.Emplace(MyFuncType.GetPoint(),false)
		for c : MyFuncType.ParsCount
		{
			itBox.itPars.Emplace(
				MyFuncType.Pars[c],
				MyFuncType.ParsIsRef[c]
				)
		}

		dFunc := FindFunc(fncName,this&,itBox^,false)

		if dFunc != null
		{
			decoratorFunc = dFunc
			decoratorHaveFunc = true
			return void
		}

		itBox2 := new FuncInputBox() ; $temp
		itBox2.itConsts.Push(new ObjFuncPointer(this&)) ; $temp
		for c : MyFuncType.ParsCount
		{
			itBox2.itPars.Emplace(
				MyFuncType.Pars[c],
				MyFuncType.ParsIsRef[c]
				)
		}
		dFunc = FindFunc(fncName,this&,itBox2^,false)

		if dFunc != null
		{
			decoratorFunc = dFunc
			return void
		}

		EmitError("Decorator <"sbt + fncName + "> not found")
	}
}
