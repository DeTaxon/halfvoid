

CmdMarked := class extend Object
{
	marks := AVLSet.{char^} //TODO bug on 'marks := AVLSet.{char^}()'
	this := !(Object^ item) -> void
	{
		for it : item.Down?
		{
			if it is ObjIndent
			{
				st := it->{ObjIndent^}.MyStr
				marks.Insert(st)
			}
		}
	}
	IsCmdMod := virtual !() -> bool { return true }
}


ObjHolder := class .{@T}
{
	objs := List.{T^}
	lambdas := List.{!(T^)&->void}

	Add := !(T^ newObj) ->  void
	{
		objs << newObj
		lambdas[^](newObj)
	}
	Listen := !(!(T^)&->void l) -> void
	{
		labmdas << l
		l(objs[^])
	}
}
