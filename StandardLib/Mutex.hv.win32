


Mutex := class
{
	itBuffer := char[1024]
	"this" := !() -> void
	{
		InitializeCriticalSectionAndSpinCount(this&,0x400)
	}
	Lock := !() -> void
	{
		EnterCriticalSection(this&)
	}
	Unlock := !() -> void
	{
		LeaveCriticalSection(this&)
	}
	Destroy:= !() -> void
	{
		DeleteCriticalSection(this&)
	}
}

ConVar := class
{
	itBuffer := char[1024]
	"this" := !() -> void
	{
		InitializeConditionVariable(this&)
	}
	Wait := !(Mutex^ mtx) -> void
	{
		minusVar := -1
		SleepConditionVariableCS(this&,mtx,minusVar&->{u32^}^)
	}
	WaitFor := !(Mutex^ mtx,double waitTime) ->void
	{
		SleepConditionVariableCS(this&,mtx,(waitTime*1000)->{int})
	}
	Notify := !() -> void
	{
		WakeConditionVariable(this&)
	}
	NotifyAll := !() -> void
	{
		WakeAllConditionVariable(this&)
	}
	Destroy := !() -> void
	{
	}
}

